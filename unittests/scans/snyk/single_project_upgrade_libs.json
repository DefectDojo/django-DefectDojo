{
  "vulnerabilities": [
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "alternativeIds": [],
      "creationTime": "2021-05-26T14:30:51.778839Z",
      "credit": [
        "Ben Caller",
        "Robert McLaughlin"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n[ansi-html](https://www.npmjs.org/package/ansi-html) is an An elegant lib that converts the chalked (ANSI) text to HTML.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). If an attacker provides a malicious string, it will get stuck processing the input for an extremely long time.\r\n\r\n### PoC\r\n```\r\nrequire('ansi-html')('x1b[0mx1b[' + '0'.repeat(35))\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ansi-html` to version 0.0.9 or higher.\n## References\n- [GitHub Issue](https://github.com/Tjatse/ansi-html/issues/19)\n- [GitHub PR](https://github.com/Tjatse/ansi-html/pull/20)\n",
      "disclosureTime": "2021-05-26T14:19:05Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "0.0.9"
      ],
      "id": "SNYK-JS-ANSIHTML-1296849",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23424"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-03-13T13:31:55.912082Z",
      "moduleName": "ansi-html",
      "packageManager": "npm",
      "packageName": "ansi-html",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-08-18T15:37:20Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/Tjatse/ansi-html/issues/19"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/Tjatse/ansi-html/pull/20"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<0.0.9"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "webpack-dev-server@3.11.0",
        "ansi-html@0.0.7"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "ansi-html",
      "version": "0.0.7"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2021-09-09T14:28:31.617043Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to the sub-patterns` [[\\\\]()#;?]*` and `(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*`.\r\n\r\n\r\n### PoC\r\n```js\r\nimport ansiRegex from 'ansi-regex';\r\n\r\nfor(var i = 1; i <= 50000; i++) {\r\n    var time = Date.now();\r\n    var attack_str = \"\\u001B[\"+\";\".repeat(i*10000);\r\n    ansiRegex().test(attack_str)\r\n    var time_cost = Date.now() - time;\r\n    console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ansi-regex` to version 4.1.1, 5.0.1, 6.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/75a657da7af875b2e2724fd6331bf0a4b23d3c9a)\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9)\n- [GitHub PR](https://github.com/chalk/ansi-regex/pull/37)\n",
      "disclosureTime": "2021-09-09T14:27:43Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.1.1",
        "5.0.1",
        "6.0.1"
      ],
      "id": "SNYK-JS-ANSIREGEX-1583908",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-3807"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-05-13T11:26:51.564118Z",
      "moduleName": "ansi-regex",
      "packageManager": "npm",
      "packageName": "ansi-regex",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-09-12T12:52:37Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/chalk/ansi-regex/commit/75a657da7af875b2e2724fd6331bf0a4b23d3c9a"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/chalk/ansi-regex/pull/37"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=2.1.1 <4.1.1",
          ">=5.0.0 <5.0.1",
          ">=6.0.0 <6.0.1"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "acme-review@1.0.0",
        "@types/jest@24.9.1",
        "jest-diff@24.9.0",
        "pretty-format@24.9.0",
        "ansi-regex@4.1.0"
      ],
      "upgradePath": [
        false,
        "@types/jest@24.9.1",
        "jest-diff@24.9.0",
        "pretty-format@24.9.0",
        "ansi-regex@4.1.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ansi-regex",
      "version": "4.1.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2021-09-09T14:28:31.617043Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to the sub-patterns` [[\\\\]()#;?]*` and `(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*`.\r\n\r\n\r\n### PoC\r\n```js\r\nimport ansiRegex from 'ansi-regex';\r\n\r\nfor(var i = 1; i <= 50000; i++) {\r\n    var time = Date.now();\r\n    var attack_str = \"\\u001B[\"+\";\".repeat(i*10000);\r\n    ansiRegex().test(attack_str)\r\n    var time_cost = Date.now() - time;\r\n    console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ansi-regex` to version 4.1.1, 5.0.1, 6.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/75a657da7af875b2e2724fd6331bf0a4b23d3c9a)\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9)\n- [GitHub PR](https://github.com/chalk/ansi-regex/pull/37)\n",
      "disclosureTime": "2021-09-09T14:27:43Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.1.1",
        "5.0.1",
        "6.0.1"
      ],
      "id": "SNYK-JS-ANSIREGEX-1583908",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-3807"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-05-13T11:26:51.564118Z",
      "moduleName": "ansi-regex",
      "packageManager": "npm",
      "packageName": "ansi-regex",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-09-12T12:52:37Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/chalk/ansi-regex/commit/75a657da7af875b2e2724fd6331bf0a4b23d3c9a"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/chalk/ansi-regex/pull/37"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=2.1.1 <4.1.1",
          ">=5.0.0 <5.0.1",
          ">=6.0.0 <6.0.1"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "eslint@6.8.0",
        "inquirer@7.0.4",
        "strip-ansi@5.2.0",
        "ansi-regex@4.1.0"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "eslint@6.8.0",
        "inquirer@7.0.4",
        "strip-ansi@5.2.0",
        "ansi-regex@4.1.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ansi-regex",
      "version": "4.1.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2021-09-09T14:28:31.617043Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to the sub-patterns` [[\\\\]()#;?]*` and `(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*`.\r\n\r\n\r\n### PoC\r\n```js\r\nimport ansiRegex from 'ansi-regex';\r\n\r\nfor(var i = 1; i <= 50000; i++) {\r\n    var time = Date.now();\r\n    var attack_str = \"\\u001B[\"+\";\".repeat(i*10000);\r\n    ansiRegex().test(attack_str)\r\n    var time_cost = Date.now() - time;\r\n    console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ansi-regex` to version 4.1.1, 5.0.1, 6.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/75a657da7af875b2e2724fd6331bf0a4b23d3c9a)\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9)\n- [GitHub PR](https://github.com/chalk/ansi-regex/pull/37)\n",
      "disclosureTime": "2021-09-09T14:27:43Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.1.1",
        "5.0.1",
        "6.0.1"
      ],
      "id": "SNYK-JS-ANSIREGEX-1583908",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-3807"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-05-13T11:26:51.564118Z",
      "moduleName": "ansi-regex",
      "packageManager": "npm",
      "packageName": "ansi-regex",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-09-12T12:52:37Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/chalk/ansi-regex/commit/75a657da7af875b2e2724fd6331bf0a4b23d3c9a"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/chalk/ansi-regex/pull/37"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=2.1.1 <4.1.1",
          ">=5.0.0 <5.0.1",
          ">=6.0.0 <6.0.1"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "jest@24.9.0",
        "jest-cli@24.9.0",
        "@jest/core@24.9.0",
        "@jest/reporters@24.9.0",
        "jest-runtime@24.9.0",
        "jest-config@24.9.0",
        "@jest/test-sequencer@24.9.0",
        "jest-runner@24.9.0",
        "jest-jasmine2@24.9.0",
        "expect@24.9.0",
        "jest-matcher-utils@24.9.0",
        "jest-diff@24.9.0",
        "pretty-format@24.9.0",
        "ansi-regex@4.1.0"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "jest@24.9.0",
        "jest-cli@24.9.0",
        "@jest/core@24.9.0",
        "@jest/reporters@24.9.0",
        "jest-runtime@24.9.0",
        "jest-config@24.9.0",
        "@jest/test-sequencer@24.9.0",
        "jest-runner@24.9.0",
        "jest-jasmine2@24.9.0",
        "expect@24.9.0",
        "jest-matcher-utils@24.9.0",
        "jest-diff@24.9.0",
        "pretty-format@24.9.0",
        "ansi-regex@4.1.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ansi-regex",
      "version": "4.1.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2021-09-09T14:28:31.617043Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to the sub-patterns` [[\\\\]()#;?]*` and `(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*`.\r\n\r\n\r\n### PoC\r\n```js\r\nimport ansiRegex from 'ansi-regex';\r\n\r\nfor(var i = 1; i <= 50000; i++) {\r\n    var time = Date.now();\r\n    var attack_str = \"\\u001B[\"+\";\".repeat(i*10000);\r\n    ansiRegex().test(attack_str)\r\n    var time_cost = Date.now() - time;\r\n    console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ansi-regex` to version 4.1.1, 5.0.1, 6.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/75a657da7af875b2e2724fd6331bf0a4b23d3c9a)\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9)\n- [GitHub PR](https://github.com/chalk/ansi-regex/pull/37)\n",
      "disclosureTime": "2021-09-09T14:27:43Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.1.1",
        "5.0.1",
        "6.0.1"
      ],
      "id": "SNYK-JS-ANSIREGEX-1583908",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-3807"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-05-13T11:26:51.564118Z",
      "moduleName": "ansi-regex",
      "packageManager": "npm",
      "packageName": "ansi-regex",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-09-12T12:52:37Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/chalk/ansi-regex/commit/75a657da7af875b2e2724fd6331bf0a4b23d3c9a"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/chalk/ansi-regex/pull/37"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=2.1.1 <4.1.1",
          ">=5.0.0 <5.0.1",
          ">=6.0.0 <6.0.1"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "eslint@6.8.0",
        "inquirer@7.0.4",
        "string-width@4.2.2",
        "strip-ansi@6.0.0",
        "ansi-regex@5.0.0"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "eslint@6.8.0",
        "inquirer@7.0.4",
        "string-width@4.2.2",
        "strip-ansi@6.0.0",
        "ansi-regex@5.0.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ansi-regex",
      "version": "5.0.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2021-09-09T14:28:31.617043Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to the sub-patterns` [[\\\\]()#;?]*` and `(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*`.\r\n\r\n\r\n### PoC\r\n```js\r\nimport ansiRegex from 'ansi-regex';\r\n\r\nfor(var i = 1; i <= 50000; i++) {\r\n    var time = Date.now();\r\n    var attack_str = \"\\u001B[\"+\";\".repeat(i*10000);\r\n    ansiRegex().test(attack_str)\r\n    var time_cost = Date.now() - time;\r\n    console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ansi-regex` to version 4.1.1, 5.0.1, 6.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/75a657da7af875b2e2724fd6331bf0a4b23d3c9a)\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9)\n- [GitHub PR](https://github.com/chalk/ansi-regex/pull/37)\n",
      "disclosureTime": "2021-09-09T14:27:43Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.1.1",
        "5.0.1",
        "6.0.1"
      ],
      "id": "SNYK-JS-ANSIREGEX-1583908",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-3807"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-05-13T11:26:51.564118Z",
      "moduleName": "ansi-regex",
      "packageManager": "npm",
      "packageName": "ansi-regex",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-09-12T12:52:37Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/chalk/ansi-regex/commit/75a657da7af875b2e2724fd6331bf0a4b23d3c9a"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/chalk/ansi-regex/pull/37"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=2.1.1 <4.1.1",
          ">=5.0.0 <5.0.1",
          ">=6.0.0 <6.0.1"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "html-webpack-plugin@4.0.0-beta.11",
        "pretty-error@2.1.2",
        "renderkid@2.0.5",
        "strip-ansi@3.0.1",
        "ansi-regex@2.1.1"
      ],
      "upgradePath": [
        false,
        "react-scripts@4.0.0",
        "html-webpack-plugin@4.5.0",
        "pretty-error@2.1.2",
        "renderkid@2.0.6",
        "strip-ansi@6.0.0",
        "ansi-regex@5.0.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ansi-regex",
      "version": "2.1.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2021-09-09T14:28:31.617043Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to the sub-patterns` [[\\\\]()#;?]*` and `(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*`.\r\n\r\n\r\n### PoC\r\n```js\r\nimport ansiRegex from 'ansi-regex';\r\n\r\nfor(var i = 1; i <= 50000; i++) {\r\n    var time = Date.now();\r\n    var attack_str = \"\\u001B[\"+\";\".repeat(i*10000);\r\n    ansiRegex().test(attack_str)\r\n    var time_cost = Date.now() - time;\r\n    console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ansi-regex` to version 4.1.1, 5.0.1, 6.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/75a657da7af875b2e2724fd6331bf0a4b23d3c9a)\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9)\n- [GitHub PR](https://github.com/chalk/ansi-regex/pull/37)\n",
      "disclosureTime": "2021-09-09T14:27:43Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.1.1",
        "5.0.1",
        "6.0.1"
      ],
      "id": "SNYK-JS-ANSIREGEX-1583908",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-3807"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-05-13T11:26:51.564118Z",
      "moduleName": "ansi-regex",
      "packageManager": "npm",
      "packageName": "ansi-regex",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-09-12T12:52:37Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/chalk/ansi-regex/commit/75a657da7af875b2e2724fd6331bf0a4b23d3c9a"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/chalk/ansi-regex/pull/37"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=2.1.1 <4.1.1",
          ">=5.0.0 <5.0.1",
          ">=6.0.0 <6.0.1"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "react-dev-utils@10.2.1",
        "fork-ts-checker-webpack-plugin@3.1.1",
        "babel-code-frame@6.26.0",
        "chalk@1.1.3",
        "has-ansi@2.0.0",
        "ansi-regex@2.1.1"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "ansi-regex",
      "version": "2.1.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2021-09-09T14:28:31.617043Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to the sub-patterns` [[\\\\]()#;?]*` and `(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*`.\r\n\r\n\r\n### PoC\r\n```js\r\nimport ansiRegex from 'ansi-regex';\r\n\r\nfor(var i = 1; i <= 50000; i++) {\r\n    var time = Date.now();\r\n    var attack_str = \"\\u001B[\"+\";\".repeat(i*10000);\r\n    ansiRegex().test(attack_str)\r\n    var time_cost = Date.now() - time;\r\n    console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ansi-regex` to version 4.1.1, 5.0.1, 6.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/75a657da7af875b2e2724fd6331bf0a4b23d3c9a)\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9)\n- [GitHub PR](https://github.com/chalk/ansi-regex/pull/37)\n",
      "disclosureTime": "2021-09-09T14:27:43Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.1.1",
        "5.0.1",
        "6.0.1"
      ],
      "id": "SNYK-JS-ANSIREGEX-1583908",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-3807"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-05-13T11:26:51.564118Z",
      "moduleName": "ansi-regex",
      "packageManager": "npm",
      "packageName": "ansi-regex",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-09-12T12:52:37Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/chalk/ansi-regex/commit/75a657da7af875b2e2724fd6331bf0a4b23d3c9a"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/chalk/ansi-regex/pull/37"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=2.1.1 <4.1.1",
          ">=5.0.0 <5.0.1",
          ">=6.0.0 <6.0.1"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "jest@24.9.0",
        "jest-cli@24.9.0",
        "@jest/core@24.9.0",
        "@jest/reporters@24.9.0",
        "string-length@2.0.0",
        "strip-ansi@4.0.0",
        "ansi-regex@3.0.0"
      ],
      "upgradePath": [
        false,
        "react-scripts@4.0.0",
        "jest@26.6.0",
        "jest-cli@26.6.0",
        "@jest/core@26.6.0",
        "@jest/reporters@26.6.0",
        "string-length@4.0.1",
        "strip-ansi@6.0.0",
        "ansi-regex@5.0.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ansi-regex",
      "version": "3.0.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "alternativeIds": [],
      "creationTime": "2022-04-07T07:58:38.528444Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `mapValues()` method, due to improper check in `createObjectIterator` function.\r\n\r\n## PoC\r\n\r\n```js\r\n//when objects are parsed, all properties are created as own (the objects can come from outside sources (http requests/ file))\r\nconst hasOwn = JSON.parse('{\"__proto__\": {\"isAdmin\": true}}');\r\n\r\n//does not have the property,  because it's inside object's own \"__proto__\"\r\nconsole.log(hasOwn.isAdmin);\r\n\r\nasync.mapValues(hasOwn, (val, key, cb) => cb(null, val), (error, result) => {\r\n  // after the method executes, hasOwn.__proto__ value (isAdmin: true) replaces the prototype of the newly created object, leading to potential exploits.\r\n  console.log(result.isAdmin);\r\n});\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `async` to version 2.6.4, 3.2.2 or higher.\n## References\n- [GitHub Backport PR](https://github.com/caolan/async/pull/1828)\n- [GitHub Commit](https://github.com/caolan/async/commit/8f7f90342a6571ba1c197d747ebed30c368096d2)\n- [GitHub Commit](https://github.com/caolan/async/commit/e1ecdbf79264f9ab488c7799f4c76996d5dca66d)\n- [PoC](https://jsfiddle.net/oz5twjd9/)\n",
      "disclosureTime": "2022-04-07T07:49:24Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "2.6.4",
        "3.2.2"
      ],
      "id": "SNYK-JS-ASYNC-2441827",
      "identifiers": {
        "CWE": [
          "CWE-1321"
        ],
        "CVE": [
          "CVE-2021-43138"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-06-14T08:24:43.116685Z",
      "moduleName": "async",
      "packageManager": "npm",
      "packageName": "async",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-04-07T14:22:18Z",
      "references": [
        {
          "title": "GitHub Backport PR",
          "url": "https://github.com/caolan/async/pull/1828"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/caolan/async/commit/8f7f90342a6571ba1c197d747ebed30c368096d2"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/caolan/async/commit/e1ecdbf79264f9ab488c7799f4c76996d5dca66d"
        },
        {
          "title": "PoC",
          "url": "https://jsfiddle.net/oz5twjd9/"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=2.0.0 <2.6.4",
          ">=3.0.0 <3.2.2"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "webpack-dev-server@3.11.0",
        "portfinder@1.0.28",
        "async@2.6.3"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "webpack-dev-server@3.11.0",
        "portfinder@1.0.28",
        "async@2.6.4"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "async",
      "version": "2.6.3"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-01T13:30:25.617926Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[browserslist](https://www.npmjs.org/package/browserslist) is a Share target browsers between different front-end tools, like Autoprefixer, Stylelint and babel-env-preset\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during parsing of queries.\r\n\r\n### PoC by Yeting Li\r\n```\r\nvar browserslist = require(\"browserslist\")\r\nfunction build_attack(n) {\r\n    var ret = \"> \"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"1\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// browserslist('> 1%')\r\n\r\n//browserslist(build_attack(500000))\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            browserslist(attack_str);\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `browserslist` to version 4.16.5 or higher.\n## References\n- [GitHub Commit](https://github.com/browserslist/browserslist/commit/c091916910dfe0b5fd61caad96083c6709b02d98)\n- [GitHub PR](https://github.com/browserslist/browserslist/pull/593)\n- [Vulnerable Regular Expression](https://github.com/browserslist/browserslist/blob/e82f32d1d4100d6bc79ea0b6b6a2d281a561e33c/index.js#L472-L474)\n",
      "disclosureTime": "2021-04-01T13:19:27Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "4.16.5"
      ],
      "id": "SNYK-JS-BROWSERSLIST-1090194",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w8qv-6jwh-64r5"
        ],
        "CVE": [
          "CVE-2021-23364"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-05-16T13:18:31.649076Z",
      "moduleName": "browserslist",
      "packageManager": "npm",
      "packageName": "browserslist",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-28T15:14:31Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/browserslist/browserslist/commit/c091916910dfe0b5fd61caad96083c6709b02d98"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/browserslist/browserslist/pull/593"
        },
        {
          "title": "Vulnerable Regular Expression",
          "url": "https://github.com/browserslist/browserslist/blob/e82f32d1d4100d6bc79ea0b6b6a2d281a561e33c/index.js%23L472-L474"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<4.16.5"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "react-dev-utils@10.2.1",
        "browserslist@4.10.0"
      ],
      "upgradePath": [
        false,
        "react-scripts@5.0.0",
        "react-dev-utils@12.0.0",
        "browserslist@4.18.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "browserslist",
      "version": "4.10.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [],
      "creationTime": "2021-05-30T09:26:40.480408Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[css-what](https://www.npmjs.org/package/css-what) is an a CSS selector parser\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via attribute parsing.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `css-what` to version 5.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/fb55/css-what/commit/4cdaacfd0d4b6fd00614be030da0dea6c2994655)\n- [GitHub PR](https://github.com/fb55/css-what/pull/503)\n- [GitHub Release](https://github.com/fb55/css-what/releases/tag/v5.0.1)\n",
      "disclosureTime": "2021-05-30T09:19:01Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "5.0.1"
      ],
      "id": "SNYK-JS-CSSWHAT-1298035",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-q8pj-2vqx-8ggc"
        ],
        "CVE": [
          "CVE-2021-33587"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-07-06T14:08:59.787603Z",
      "moduleName": "css-what",
      "packageManager": "npm",
      "packageName": "css-what",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-05-30T13:11:01.486283Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/fb55/css-what/commit/4cdaacfd0d4b6fd00614be030da0dea6c2994655"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/fb55/css-what/pull/503"
        },
        {
          "title": "GitHub Release",
          "url": "https://github.com/fb55/css-what/releases/tag/v5.0.1"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<5.0.1"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "enzyme@3.11.0",
        "cheerio@1.0.0-rc.9",
        "cheerio-select@1.4.0",
        "css-what@5.0.0"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "css-what",
      "version": "5.0.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [],
      "creationTime": "2021-05-30T09:26:40.480408Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[css-what](https://www.npmjs.org/package/css-what) is an a CSS selector parser\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via attribute parsing.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `css-what` to version 5.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/fb55/css-what/commit/4cdaacfd0d4b6fd00614be030da0dea6c2994655)\n- [GitHub PR](https://github.com/fb55/css-what/pull/503)\n- [GitHub Release](https://github.com/fb55/css-what/releases/tag/v5.0.1)\n",
      "disclosureTime": "2021-05-30T09:19:01Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "5.0.1"
      ],
      "id": "SNYK-JS-CSSWHAT-1298035",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-q8pj-2vqx-8ggc"
        ],
        "CVE": [
          "CVE-2021-33587"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-07-06T14:08:59.787603Z",
      "moduleName": "css-what",
      "packageManager": "npm",
      "packageName": "css-what",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-05-30T13:11:01.486283Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/fb55/css-what/commit/4cdaacfd0d4b6fd00614be030da0dea6c2994655"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/fb55/css-what/pull/503"
        },
        {
          "title": "GitHub Release",
          "url": "https://github.com/fb55/css-what/releases/tag/v5.0.1"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<5.0.1"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "enzyme@3.11.0",
        "cheerio@1.0.0-rc.9",
        "cheerio-select@1.4.0",
        "css-select@4.1.2",
        "css-what@5.0.0"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "css-what",
      "version": "5.0.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [],
      "creationTime": "2021-05-30T09:26:40.480408Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[css-what](https://www.npmjs.org/package/css-what) is an a CSS selector parser\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via attribute parsing.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `css-what` to version 5.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/fb55/css-what/commit/4cdaacfd0d4b6fd00614be030da0dea6c2994655)\n- [GitHub PR](https://github.com/fb55/css-what/pull/503)\n- [GitHub Release](https://github.com/fb55/css-what/releases/tag/v5.0.1)\n",
      "disclosureTime": "2021-05-30T09:19:01Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "5.0.1"
      ],
      "id": "SNYK-JS-CSSWHAT-1298035",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-q8pj-2vqx-8ggc"
        ],
        "CVE": [
          "CVE-2021-33587"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-07-06T14:08:59.787603Z",
      "moduleName": "css-what",
      "packageManager": "npm",
      "packageName": "css-what",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-05-30T13:11:01.486283Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/fb55/css-what/commit/4cdaacfd0d4b6fd00614be030da0dea6c2994655"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/fb55/css-what/pull/503"
        },
        {
          "title": "GitHub Release",
          "url": "https://github.com/fb55/css-what/releases/tag/v5.0.1"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<5.0.1"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-native-svg@9.13.6",
        "css-select@2.1.0",
        "css-what@3.4.2"
      ],
      "upgradePath": [
        false,
        "react-native-svg@12.3.0",
        "css-select@4.2.1",
        "css-what@5.1.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "css-what",
      "version": "3.4.2"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [],
      "creationTime": "2021-05-30T09:26:40.480408Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[css-what](https://www.npmjs.org/package/css-what) is an a CSS selector parser\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via attribute parsing.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `css-what` to version 5.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/fb55/css-what/commit/4cdaacfd0d4b6fd00614be030da0dea6c2994655)\n- [GitHub PR](https://github.com/fb55/css-what/pull/503)\n- [GitHub Release](https://github.com/fb55/css-what/releases/tag/v5.0.1)\n",
      "disclosureTime": "2021-05-30T09:19:01Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "5.0.1"
      ],
      "id": "SNYK-JS-CSSWHAT-1298035",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-q8pj-2vqx-8ggc"
        ],
        "CVE": [
          "CVE-2021-33587"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-07-06T14:08:59.787603Z",
      "moduleName": "css-what",
      "packageManager": "npm",
      "packageName": "css-what",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-05-30T13:11:01.486283Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/fb55/css-what/commit/4cdaacfd0d4b6fd00614be030da0dea6c2994655"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/fb55/css-what/pull/503"
        },
        {
          "title": "GitHub Release",
          "url": "https://github.com/fb55/css-what/releases/tag/v5.0.1"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<5.0.1"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "@svgr/webpack@4.3.3",
        "@svgr/plugin-svgo@4.3.1",
        "svgo@1.3.2",
        "css-select@2.1.0",
        "css-what@3.4.2"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "css-what",
      "version": "3.4.2"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-02-18T13:32:47.195986Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[d3-color](https://www.npmjs.org/package/d3-color) is a Color spaces! RGB, HSL, Cubehelix, Lab and HCL (Lch).\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `rgb()` and `hrc()` functions. \r\n\r\nPoC by Yeting Li: \r\n```\r\nvar d3Color = require(\"d3-color\")\r\n// d3Color.rgb(\"rgb(255,255,255)\")\r\n\r\nfunction build_blank(n) {\r\n    var ret = \"rgb(\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"1\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\nfor(var i = 1; i <= 5000000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_blank(i)\r\n        d3Color.rgb(attack_str)\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `d3-color` to version 3.1.0 or higher.\n## References\n- [Github PR](https://github.com/d3/d3-color/pull/100)\n- [Github PR](https://github.com/d3/d3-color/pull/99)\n- [GitHub PR](https://github.com/d3/d3-color/pull/89)\n- [Github Releases](https://github.com/d3/d3-color/releases/tag/v3.1.0)\n",
      "disclosureTime": "2021-02-18T13:30:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "3.1.0"
      ],
      "id": "SNYK-JS-D3COLOR-1076592",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": []
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-06-09T15:16:21.616192Z",
      "moduleName": "d3-color",
      "packageManager": "npm",
      "packageName": "d3-color",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-07-05T14:17:56Z",
      "references": [
        {
          "title": "Github PR",
          "url": "https://github.com/d3/d3-color/pull/100"
        },
        {
          "title": "Github PR",
          "url": "https://github.com/d3/d3-color/pull/99"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/d3/d3-color/pull/89"
        },
        {
          "title": "Github Releases",
          "url": "https://github.com/d3/d3-color/releases/tag/v3.1.0"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<3.1.0"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "@nivo/core@0.67.0",
        "d3-color@2.0.0"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "d3-color",
      "version": "2.0.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-02-18T13:32:47.195986Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[d3-color](https://www.npmjs.org/package/d3-color) is a Color spaces! RGB, HSL, Cubehelix, Lab and HCL (Lch).\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `rgb()` and `hrc()` functions. \r\n\r\nPoC by Yeting Li: \r\n```\r\nvar d3Color = require(\"d3-color\")\r\n// d3Color.rgb(\"rgb(255,255,255)\")\r\n\r\nfunction build_blank(n) {\r\n    var ret = \"rgb(\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"1\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\nfor(var i = 1; i <= 5000000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_blank(i)\r\n        d3Color.rgb(attack_str)\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `d3-color` to version 3.1.0 or higher.\n## References\n- [Github PR](https://github.com/d3/d3-color/pull/100)\n- [Github PR](https://github.com/d3/d3-color/pull/99)\n- [GitHub PR](https://github.com/d3/d3-color/pull/89)\n- [Github Releases](https://github.com/d3/d3-color/releases/tag/v3.1.0)\n",
      "disclosureTime": "2021-02-18T13:30:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "3.1.0"
      ],
      "id": "SNYK-JS-D3COLOR-1076592",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": []
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-06-09T15:16:21.616192Z",
      "moduleName": "d3-color",
      "packageManager": "npm",
      "packageName": "d3-color",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-07-05T14:17:56Z",
      "references": [
        {
          "title": "Github PR",
          "url": "https://github.com/d3/d3-color/pull/100"
        },
        {
          "title": "Github PR",
          "url": "https://github.com/d3/d3-color/pull/99"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/d3/d3-color/pull/89"
        },
        {
          "title": "Github Releases",
          "url": "https://github.com/d3/d3-color/releases/tag/v3.1.0"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<3.1.0"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "@nivo/core@0.67.0",
        "d3-interpolate@2.0.1",
        "d3-color@2.0.0"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "d3-color",
      "version": "2.0.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-02-18T13:32:47.195986Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[d3-color](https://www.npmjs.org/package/d3-color) is a Color spaces! RGB, HSL, Cubehelix, Lab and HCL (Lch).\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `rgb()` and `hrc()` functions. \r\n\r\nPoC by Yeting Li: \r\n```\r\nvar d3Color = require(\"d3-color\")\r\n// d3Color.rgb(\"rgb(255,255,255)\")\r\n\r\nfunction build_blank(n) {\r\n    var ret = \"rgb(\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"1\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\nfor(var i = 1; i <= 5000000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_blank(i)\r\n        d3Color.rgb(attack_str)\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `d3-color` to version 3.1.0 or higher.\n## References\n- [Github PR](https://github.com/d3/d3-color/pull/100)\n- [Github PR](https://github.com/d3/d3-color/pull/99)\n- [GitHub PR](https://github.com/d3/d3-color/pull/89)\n- [Github Releases](https://github.com/d3/d3-color/releases/tag/v3.1.0)\n",
      "disclosureTime": "2021-02-18T13:30:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "3.1.0"
      ],
      "id": "SNYK-JS-D3COLOR-1076592",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": []
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-06-09T15:16:21.616192Z",
      "moduleName": "d3-color",
      "packageManager": "npm",
      "packageName": "d3-color",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-07-05T14:17:56Z",
      "references": [
        {
          "title": "Github PR",
          "url": "https://github.com/d3/d3-color/pull/100"
        },
        {
          "title": "Github PR",
          "url": "https://github.com/d3/d3-color/pull/99"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/d3/d3-color/pull/89"
        },
        {
          "title": "Github Releases",
          "url": "https://github.com/d3/d3-color/releases/tag/v3.1.0"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<3.1.0"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "@nivo/core@0.67.0",
        "d3-scale-chromatic@2.0.0",
        "d3-color@2.0.0"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "d3-color",
      "version": "2.0.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-02-18T13:32:47.195986Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[d3-color](https://www.npmjs.org/package/d3-color) is a Color spaces! RGB, HSL, Cubehelix, Lab and HCL (Lch).\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `rgb()` and `hrc()` functions. \r\n\r\nPoC by Yeting Li: \r\n```\r\nvar d3Color = require(\"d3-color\")\r\n// d3Color.rgb(\"rgb(255,255,255)\")\r\n\r\nfunction build_blank(n) {\r\n    var ret = \"rgb(\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"1\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\nfor(var i = 1; i <= 5000000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_blank(i)\r\n        d3Color.rgb(attack_str)\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `d3-color` to version 3.1.0 or higher.\n## References\n- [Github PR](https://github.com/d3/d3-color/pull/100)\n- [Github PR](https://github.com/d3/d3-color/pull/99)\n- [GitHub PR](https://github.com/d3/d3-color/pull/89)\n- [Github Releases](https://github.com/d3/d3-color/releases/tag/v3.1.0)\n",
      "disclosureTime": "2021-02-18T13:30:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "3.1.0"
      ],
      "id": "SNYK-JS-D3COLOR-1076592",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": []
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-06-09T15:16:21.616192Z",
      "moduleName": "d3-color",
      "packageManager": "npm",
      "packageName": "d3-color",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-07-05T14:17:56Z",
      "references": [
        {
          "title": "Github PR",
          "url": "https://github.com/d3/d3-color/pull/100"
        },
        {
          "title": "Github PR",
          "url": "https://github.com/d3/d3-color/pull/99"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/d3/d3-color/pull/89"
        },
        {
          "title": "Github Releases",
          "url": "https://github.com/d3/d3-color/releases/tag/v3.1.0"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<3.1.0"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "@nivo/bar@0.67.0",
        "@nivo/annotations@0.67.0",
        "@nivo/colors@0.67.0",
        "d3-color@2.0.0"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "d3-color",
      "version": "2.0.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-02-18T13:32:47.195986Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[d3-color](https://www.npmjs.org/package/d3-color) is a Color spaces! RGB, HSL, Cubehelix, Lab and HCL (Lch).\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `rgb()` and `hrc()` functions. \r\n\r\nPoC by Yeting Li: \r\n```\r\nvar d3Color = require(\"d3-color\")\r\n// d3Color.rgb(\"rgb(255,255,255)\")\r\n\r\nfunction build_blank(n) {\r\n    var ret = \"rgb(\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"1\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\nfor(var i = 1; i <= 5000000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_blank(i)\r\n        d3Color.rgb(attack_str)\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `d3-color` to version 3.1.0 or higher.\n## References\n- [Github PR](https://github.com/d3/d3-color/pull/100)\n- [Github PR](https://github.com/d3/d3-color/pull/99)\n- [GitHub PR](https://github.com/d3/d3-color/pull/89)\n- [Github Releases](https://github.com/d3/d3-color/releases/tag/v3.1.0)\n",
      "disclosureTime": "2021-02-18T13:30:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "3.1.0"
      ],
      "id": "SNYK-JS-D3COLOR-1076592",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": []
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-06-09T15:16:21.616192Z",
      "moduleName": "d3-color",
      "packageManager": "npm",
      "packageName": "d3-color",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-07-05T14:17:56Z",
      "references": [
        {
          "title": "Github PR",
          "url": "https://github.com/d3/d3-color/pull/100"
        },
        {
          "title": "Github PR",
          "url": "https://github.com/d3/d3-color/pull/99"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/d3/d3-color/pull/89"
        },
        {
          "title": "Github Releases",
          "url": "https://github.com/d3/d3-color/releases/tag/v3.1.0"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<3.1.0"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "@nivo/line@0.67.0",
        "@nivo/annotations@0.67.0",
        "@nivo/colors@0.67.0",
        "d3-color@2.0.0"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "d3-color",
      "version": "2.0.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-02-18T13:32:47.195986Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[d3-color](https://www.npmjs.org/package/d3-color) is a Color spaces! RGB, HSL, Cubehelix, Lab and HCL (Lch).\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `rgb()` and `hrc()` functions. \r\n\r\nPoC by Yeting Li: \r\n```\r\nvar d3Color = require(\"d3-color\")\r\n// d3Color.rgb(\"rgb(255,255,255)\")\r\n\r\nfunction build_blank(n) {\r\n    var ret = \"rgb(\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"1\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\nfor(var i = 1; i <= 5000000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_blank(i)\r\n        d3Color.rgb(attack_str)\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `d3-color` to version 3.1.0 or higher.\n## References\n- [Github PR](https://github.com/d3/d3-color/pull/100)\n- [Github PR](https://github.com/d3/d3-color/pull/99)\n- [GitHub PR](https://github.com/d3/d3-color/pull/89)\n- [Github Releases](https://github.com/d3/d3-color/releases/tag/v3.1.0)\n",
      "disclosureTime": "2021-02-18T13:30:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "3.1.0"
      ],
      "id": "SNYK-JS-D3COLOR-1076592",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": []
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-06-09T15:16:21.616192Z",
      "moduleName": "d3-color",
      "packageManager": "npm",
      "packageName": "d3-color",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-07-05T14:17:56Z",
      "references": [
        {
          "title": "Github PR",
          "url": "https://github.com/d3/d3-color/pull/100"
        },
        {
          "title": "Github PR",
          "url": "https://github.com/d3/d3-color/pull/99"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/d3/d3-color/pull/89"
        },
        {
          "title": "Github Releases",
          "url": "https://github.com/d3/d3-color/releases/tag/v3.1.0"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<3.1.0"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "@nivo/bar@0.67.0",
        "@nivo/annotations@0.67.0",
        "@nivo/colors@0.67.0",
        "d3-scale-chromatic@2.0.0",
        "d3-color@2.0.0"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "d3-color",
      "version": "2.0.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-02-18T13:32:47.195986Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[d3-color](https://www.npmjs.org/package/d3-color) is a Color spaces! RGB, HSL, Cubehelix, Lab and HCL (Lch).\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `rgb()` and `hrc()` functions. \r\n\r\nPoC by Yeting Li: \r\n```\r\nvar d3Color = require(\"d3-color\")\r\n// d3Color.rgb(\"rgb(255,255,255)\")\r\n\r\nfunction build_blank(n) {\r\n    var ret = \"rgb(\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"1\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\nfor(var i = 1; i <= 5000000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_blank(i)\r\n        d3Color.rgb(attack_str)\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `d3-color` to version 3.1.0 or higher.\n## References\n- [Github PR](https://github.com/d3/d3-color/pull/100)\n- [Github PR](https://github.com/d3/d3-color/pull/99)\n- [GitHub PR](https://github.com/d3/d3-color/pull/89)\n- [Github Releases](https://github.com/d3/d3-color/releases/tag/v3.1.0)\n",
      "disclosureTime": "2021-02-18T13:30:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "3.1.0"
      ],
      "id": "SNYK-JS-D3COLOR-1076592",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": []
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-06-09T15:16:21.616192Z",
      "moduleName": "d3-color",
      "packageManager": "npm",
      "packageName": "d3-color",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-07-05T14:17:56Z",
      "references": [
        {
          "title": "Github PR",
          "url": "https://github.com/d3/d3-color/pull/100"
        },
        {
          "title": "Github PR",
          "url": "https://github.com/d3/d3-color/pull/99"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/d3/d3-color/pull/89"
        },
        {
          "title": "Github Releases",
          "url": "https://github.com/d3/d3-color/releases/tag/v3.1.0"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<3.1.0"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "@nivo/line@0.67.0",
        "@nivo/annotations@0.67.0",
        "@nivo/colors@0.67.0",
        "d3-scale-chromatic@2.0.0",
        "d3-color@2.0.0"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "d3-color",
      "version": "2.0.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-02-18T13:32:47.195986Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[d3-color](https://www.npmjs.org/package/d3-color) is a Color spaces! RGB, HSL, Cubehelix, Lab and HCL (Lch).\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `rgb()` and `hrc()` functions. \r\n\r\nPoC by Yeting Li: \r\n```\r\nvar d3Color = require(\"d3-color\")\r\n// d3Color.rgb(\"rgb(255,255,255)\")\r\n\r\nfunction build_blank(n) {\r\n    var ret = \"rgb(\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"1\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\nfor(var i = 1; i <= 5000000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_blank(i)\r\n        d3Color.rgb(attack_str)\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `d3-color` to version 3.1.0 or higher.\n## References\n- [Github PR](https://github.com/d3/d3-color/pull/100)\n- [Github PR](https://github.com/d3/d3-color/pull/99)\n- [GitHub PR](https://github.com/d3/d3-color/pull/89)\n- [Github Releases](https://github.com/d3/d3-color/releases/tag/v3.1.0)\n",
      "disclosureTime": "2021-02-18T13:30:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "3.1.0"
      ],
      "id": "SNYK-JS-D3COLOR-1076592",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": []
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-06-09T15:16:21.616192Z",
      "moduleName": "d3-color",
      "packageManager": "npm",
      "packageName": "d3-color",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-07-05T14:17:56Z",
      "references": [
        {
          "title": "Github PR",
          "url": "https://github.com/d3/d3-color/pull/100"
        },
        {
          "title": "Github PR",
          "url": "https://github.com/d3/d3-color/pull/99"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/d3/d3-color/pull/89"
        },
        {
          "title": "Github Releases",
          "url": "https://github.com/d3/d3-color/releases/tag/v3.1.0"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<3.1.0"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "@nivo/bar@0.67.0",
        "@nivo/annotations@0.67.0",
        "@nivo/colors@0.67.0",
        "d3-scale@3.3.0",
        "d3-interpolate@2.0.1",
        "d3-color@2.0.0"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "d3-color",
      "version": "2.0.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-02-18T13:32:47.195986Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[d3-color](https://www.npmjs.org/package/d3-color) is a Color spaces! RGB, HSL, Cubehelix, Lab and HCL (Lch).\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `rgb()` and `hrc()` functions. \r\n\r\nPoC by Yeting Li: \r\n```\r\nvar d3Color = require(\"d3-color\")\r\n// d3Color.rgb(\"rgb(255,255,255)\")\r\n\r\nfunction build_blank(n) {\r\n    var ret = \"rgb(\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"1\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\nfor(var i = 1; i <= 5000000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_blank(i)\r\n        d3Color.rgb(attack_str)\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `d3-color` to version 3.1.0 or higher.\n## References\n- [Github PR](https://github.com/d3/d3-color/pull/100)\n- [Github PR](https://github.com/d3/d3-color/pull/99)\n- [GitHub PR](https://github.com/d3/d3-color/pull/89)\n- [Github Releases](https://github.com/d3/d3-color/releases/tag/v3.1.0)\n",
      "disclosureTime": "2021-02-18T13:30:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "3.1.0"
      ],
      "id": "SNYK-JS-D3COLOR-1076592",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": []
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-06-09T15:16:21.616192Z",
      "moduleName": "d3-color",
      "packageManager": "npm",
      "packageName": "d3-color",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-07-05T14:17:56Z",
      "references": [
        {
          "title": "Github PR",
          "url": "https://github.com/d3/d3-color/pull/100"
        },
        {
          "title": "Github PR",
          "url": "https://github.com/d3/d3-color/pull/99"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/d3/d3-color/pull/89"
        },
        {
          "title": "Github Releases",
          "url": "https://github.com/d3/d3-color/releases/tag/v3.1.0"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<3.1.0"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "@nivo/line@0.67.0",
        "@nivo/annotations@0.67.0",
        "@nivo/colors@0.67.0",
        "d3-scale@3.3.0",
        "d3-interpolate@2.0.1",
        "d3-color@2.0.0"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "d3-color",
      "version": "2.0.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:H/I:L/A:L",
      "alternativeIds": [],
      "creationTime": "2021-05-18T16:51:02.039581Z",
      "credit": [
        "chalker"
      ],
      "cvssScore": 7.7,
      "description": "## Overview\n[dns-packet](https://www.npmjs.com/package/dns-packet) is an An abstract-encoding compliant module for encoding / decoding DNS packets\n\nAffected versions of this package are vulnerable to Remote Memory Exposure. It creates buffers with `allocUnsafe` and does not always fill them before forming network packets. This can expose internal application memory over unencrypted network when querying crafted invalid domain names.\n## Remediation\nUpgrade `dns-packet` to version 1.3.4, 5.2.4 or higher.\n## References\n- [GitHub Commit](https://github.com/mafintosh/dns-packet/commit/25f15dd0fedc53688b25fd053ebbdffe3d5c1c56)\n- [HackerOne Report](https://hackerone.com/bugs?subject=user&amp;report_id=968858)\n",
      "disclosureTime": "2021-05-18T16:19:47Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "1.3.4",
        "5.2.4"
      ],
      "id": "SNYK-JS-DNSPACKET-1293563",
      "identifiers": {
        "CWE": [
          "CWE-201"
        ],
        "GHSA": [
          "GHSA-3wcq-x3mq-6r9p"
        ],
        "CVE": [
          "CVE-2021-23386"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-07-06T14:08:52.020369Z",
      "moduleName": "dns-packet",
      "packageManager": "npm",
      "packageName": "dns-packet",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-05-20T14:40:43Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/mafintosh/dns-packet/commit/25f15dd0fedc53688b25fd053ebbdffe3d5c1c56"
        },
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/bugs?subject=user&amp%3Breport_id=968858"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Remote Memory Exposure",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.3.4",
          ">=2.0.0 <5.2.4"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "webpack-dev-server@3.11.0",
        "bonjour@3.5.0",
        "multicast-dns@6.2.3",
        "dns-packet@1.3.1"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "webpack-dev-server@3.11.0",
        "bonjour@3.5.0",
        "multicast-dns@6.2.3",
        "dns-packet@1.3.4"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "dns-packet",
      "version": "1.3.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N/E:P",
      "alternativeIds": [],
      "creationTime": "2022-05-12T14:16:29.503630Z",
      "credit": [
        "Timothee Desurmont"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Information Exposure by allowing cookies and the authorization headers to be leaked to external sites.\n## Remediation\nUpgrade `eventsource` to version 1.1.1, 2.0.2 or higher.\n## References\n- [GitHub Commit](https://github.com/eventsource/eventsource/commit/10ee0c4881a6ba2fe65ec18ed195ac35889583c4)\n",
      "disclosureTime": "2022-05-12T14:14:39Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "1.1.1",
        "2.0.2"
      ],
      "id": "SNYK-JS-EVENTSOURCE-2823375",
      "identifiers": {
        "CWE": [
          "CWE-200"
        ],
        "CVE": [
          "CVE-2022-1650"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-05-26T16:55:11.791827Z",
      "moduleName": "eventsource",
      "packageManager": "npm",
      "packageName": "eventsource",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-05-12T14:23:37Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/eventsource/eventsource/commit/10ee0c4881a6ba2fe65ec18ed195ac35889583c4"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Information Exposure",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.1.1",
          ">=2.0.0 <2.0.2"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "@microsoft/signalr@3.1.14",
        "eventsource@1.1.0"
      ],
      "upgradePath": [
        false,
        "@microsoft/signalr@3.1.14",
        "eventsource@1.1.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "eventsource",
      "version": "1.1.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N/E:P",
      "alternativeIds": [],
      "creationTime": "2022-05-12T14:16:29.503630Z",
      "credit": [
        "Timothee Desurmont"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Information Exposure by allowing cookies and the authorization headers to be leaked to external sites.\n## Remediation\nUpgrade `eventsource` to version 1.1.1, 2.0.2 or higher.\n## References\n- [GitHub Commit](https://github.com/eventsource/eventsource/commit/10ee0c4881a6ba2fe65ec18ed195ac35889583c4)\n",
      "disclosureTime": "2022-05-12T14:14:39Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "1.1.1",
        "2.0.2"
      ],
      "id": "SNYK-JS-EVENTSOURCE-2823375",
      "identifiers": {
        "CWE": [
          "CWE-200"
        ],
        "CVE": [
          "CVE-2022-1650"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-05-26T16:55:11.791827Z",
      "moduleName": "eventsource",
      "packageManager": "npm",
      "packageName": "eventsource",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-05-12T14:23:37Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/eventsource/eventsource/commit/10ee0c4881a6ba2fe65ec18ed195ac35889583c4"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Information Exposure",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.1.1",
          ">=2.0.0 <2.0.2"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "webpack-dev-server@3.11.0",
        "sockjs-client@1.4.0",
        "eventsource@1.1.0"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "webpack-dev-server@3.11.0",
        "sockjs-client@1.4.0",
        "eventsource@1.1.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "eventsource",
      "version": "1.1.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:N/A:N/E:P",
      "alternativeIds": [],
      "creationTime": "2022-01-11T12:27:16.635235Z",
      "credit": [
        "ranjit-git"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Information Exposure by leaking the cookie header to a third party site in the process of fetching a remote URL with the cookie in the request body. If the response contains a `location` header, it will follow the redirect to another URL of a potentially malicious actor, to which the cookie would be exposed.\n## Remediation\nUpgrade `follow-redirects` to version 1.14.7 or higher.\n## References\n- [GitHub Commit](https://github.com/follow-redirects/follow-redirects/commit/8b347cbcef7c7b72a6e9be20f5710c17d6163c22)\n",
      "disclosureTime": "2022-01-11T12:06:36Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "1.14.7"
      ],
      "id": "SNYK-JS-FOLLOWREDIRECTS-2332181",
      "identifiers": {
        "CWE": [
          "CWE-359"
        ],
        "CVE": [
          "CVE-2022-0155"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-01-12T12:49:36.151110Z",
      "moduleName": "follow-redirects",
      "packageManager": "npm",
      "packageName": "follow-redirects",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-01-12T12:49:36.149349Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/follow-redirects/follow-redirects/commit/8b347cbcef7c7b72a6e9be20f5710c17d6163c22"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Information Exposure",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.14.7"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "webpack-dev-server@3.11.0",
        "http-proxy-middleware@0.19.1",
        "http-proxy@1.18.1",
        "follow-redirects@1.14.1"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "webpack-dev-server@3.11.0",
        "http-proxy-middleware@0.19.1",
        "http-proxy@1.18.1",
        "follow-redirects@1.14.7"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "follow-redirects",
      "version": "1.14.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:A/AC:H/PR:L/UI:N/S:U/C:L/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2022-02-09T13:37:15.331538Z",
      "credit": [
        "haxatron"
      ],
      "cvssScore": 2.6,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Information Exposure due a leakage of the Authorization header from the same hostname during HTTPS to HTTP redirection. An attacker who can listen in on the wire (or perform a MITM attack) will be able to receive the Authorization header due to the usage of the insecure HTTP protocol which does not verify the hostname the request is sending to.\n## Remediation\nUpgrade `follow-redirects` to version 1.14.8 or higher.\n## References\n- [GitHub Commit](https://github.com/follow-redirects/follow-redirects/commit/62e546a99c07c3ee5e4e0718c84a6ca127c5c445)\n",
      "disclosureTime": "2022-02-09T12:43:30Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "1.14.8"
      ],
      "id": "SNYK-JS-FOLLOWREDIRECTS-2396346",
      "identifiers": {
        "CWE": [
          "CWE-200"
        ],
        "CVE": [
          "CVE-2022-0536"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-02-09T17:20:22.056440Z",
      "moduleName": "follow-redirects",
      "packageManager": "npm",
      "packageName": "follow-redirects",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-02-09T17:20:22.054220Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/follow-redirects/follow-redirects/commit/62e546a99c07c3ee5e4e0718c84a6ca127c5c445"
        }
      ],
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Information Exposure",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.14.8"
        ]
      },
      "severityWithCritical": "low",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "webpack-dev-server@3.11.0",
        "http-proxy-middleware@0.19.1",
        "http-proxy@1.18.1",
        "follow-redirects@1.14.1"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "webpack-dev-server@3.11.0",
        "http-proxy-middleware@0.19.1",
        "http-proxy@1.18.1",
        "follow-redirects@1.14.8"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "follow-redirects",
      "version": "1.14.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-10-09T09:34:22.716485Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[glob-parent](https://www.npmjs.com/package/glob-parent) is a package that helps extracting the non-magic parent path from a glob string.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). The `enclosure` regex used to check for strings ending in enclosure containing path separator.\r\n\r\n### PoC by Yeting Li\r\n```\r\nvar globParent = require(\"glob-parent\")\r\nfunction build_attack(n) {\r\nvar ret = \"{\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \"/\"\r\n}\r\n\r\nreturn ret;\r\n}\r\n\r\nglobParent(build_attack(5000));\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `glob-parent` to version 5.1.2 or higher.\n## References\n- [GitHub PR](https://github.com/gulpjs/glob-parent/pull/36)\n- [GitHub Release](https://github.com/gulpjs/glob-parent/releases/tag/v5.1.2)\n",
      "disclosureTime": "2021-01-12T12:42:32Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "5.1.2"
      ],
      "id": "SNYK-JS-GLOBPARENT-1016905",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-ww39-953v-wcq6"
        ],
        "CVE": [
          "CVE-2020-28469"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:54.924659Z",
      "moduleName": "glob-parent",
      "packageManager": "npm",
      "packageName": "glob-parent",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-01-12T15:00:42Z",
      "references": [
        {
          "title": "GitHub PR",
          "url": "https://github.com/gulpjs/glob-parent/pull/36"
        },
        {
          "title": "GitHub Release",
          "url": "https://github.com/gulpjs/glob-parent/releases/tag/v5.1.2"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<5.1.2"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "react-dev-utils@10.2.1",
        "globby@8.0.2",
        "fast-glob@2.2.7",
        "glob-parent@3.1.0"
      ],
      "upgradePath": [
        false,
        "react-scripts@4.0.0",
        "react-dev-utils@11.0.0",
        "globby@11.0.1",
        "fast-glob@3.1.1",
        "glob-parent@5.1.2"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "glob-parent",
      "version": "3.1.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2020-10-09T09:34:22.716485Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[glob-parent](https://www.npmjs.com/package/glob-parent) is a package that helps extracting the non-magic parent path from a glob string.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). The `enclosure` regex used to check for strings ending in enclosure containing path separator.\r\n\r\n### PoC by Yeting Li\r\n```\r\nvar globParent = require(\"glob-parent\")\r\nfunction build_attack(n) {\r\nvar ret = \"{\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \"/\"\r\n}\r\n\r\nreturn ret;\r\n}\r\n\r\nglobParent(build_attack(5000));\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `glob-parent` to version 5.1.2 or higher.\n## References\n- [GitHub PR](https://github.com/gulpjs/glob-parent/pull/36)\n- [GitHub Release](https://github.com/gulpjs/glob-parent/releases/tag/v5.1.2)\n",
      "disclosureTime": "2021-01-12T12:42:32Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "5.1.2"
      ],
      "id": "SNYK-JS-GLOBPARENT-1016905",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-ww39-953v-wcq6"
        ],
        "CVE": [
          "CVE-2020-28469"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:54.924659Z",
      "moduleName": "glob-parent",
      "packageManager": "npm",
      "packageName": "glob-parent",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-01-12T15:00:42Z",
      "references": [
        {
          "title": "GitHub PR",
          "url": "https://github.com/gulpjs/glob-parent/pull/36"
        },
        {
          "title": "GitHub Release",
          "url": "https://github.com/gulpjs/glob-parent/releases/tag/v5.1.2"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<5.1.2"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "webpack@4.42.0",
        "watchpack@1.7.5",
        "watchpack-chokidar2@2.0.1",
        "chokidar@2.1.8",
        "glob-parent@3.1.0"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "glob-parent",
      "version": "3.1.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-10-18T14:32:45.749491Z",
      "credit": [
        "Alessio Della Libera (d3lla)"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n[immer](https://www.npmjs.com/package/immer) is a package that allows you to create your next immutable state by mutating the current one.\n\nAffected versions of this package are vulnerable to Prototype Pollution.\n\n### PoC\r\n```\r\nconst {applyPatches, enablePatches} = require(\"immer\");\r\nenablePatches();\r\nlet obj = {};\r\nconsole.log(\"Before : \" + obj.polluted);\r\napplyPatches({}, [ { op: 'add', path: [ \"__proto__\", \"polluted\" ], value: \"yes\" } ]);\r\n// applyPatches({}, [ { op: 'replace', path: [ \"__proto__\", \"polluted\" ], value: \"yes\" } ]);\r\nconsole.log(\"After : \" + obj.polluted);\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `immer` to version 8.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/immerjs/immer/commit/da2bd4fa0edc9335543089fe7d290d6a346c40c5)\n- [Vulnerable Code](https://github.com/immerjs/immer/blob/master/src/plugins/patches.ts#L213)\n",
      "disclosureTime": "2020-10-18T14:20:15Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.0.1"
      ],
      "id": "SNYK-JS-IMMER-1019369",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-9qmh-276g-x5pj"
        ],
        "CVE": [
          "CVE-2020-28477"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-03-04T10:57:12.173172Z",
      "moduleName": "immer",
      "packageManager": "npm",
      "packageName": "immer",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-01-19T16:02:34Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/immerjs/immer/commit/da2bd4fa0edc9335543089fe7d290d6a346c40c5"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/immerjs/immer/blob/master/src/plugins/patches.ts%23L213"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<8.0.1"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "react-dev-utils@10.2.1",
        "immer@1.10.0"
      ],
      "upgradePath": [
        false,
        "react-scripts@4.0.0",
        "react-dev-utils@11.0.3",
        "immer@8.0.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "immer",
      "version": "1.10.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2021-08-12T17:14:32.677481Z",
      "credit": [
        "Alessio Della Libera of Snyk Research Team"
      ],
      "cvssScore": 5.6,
      "description": "## Overview\n[immer](https://www.npmjs.com/package/immer) is a package that allows you to create your next immutable state by mutating the current one.\n\nAffected versions of this package are vulnerable to Prototype Pollution. A type confusion vulnerability can lead to a bypass of CVE-2020-28477 when the user-provided keys used in the `path` parameter are arrays. In particular, this bypass is possible because the condition `(p === \"__proto__\" || p === \"constructor\")` in `applyPatches_` returns `false` if `p` is `['__proto__']` (or `['constructor']`). The `===` operator (strict equality operator) returns `false` if the operands have different type.\r\n\r\n\r\n### PoC\r\n\r\n```\r\nconst {applyPatches, enablePatches} = require(\"immer\");\r\nenablePatches();\r\n\r\n// applyPatches({}, [ { op: 'add', path: [ \"__proto__\", \"polluted\" ], value: \"yes\" } ]);\r\n// applyPatches({}, [ { op: 'replace', path: [ \"__proto__\", \"polluted\" ], value: \"yes\" } ]);\r\n// console.log(polluted); // Error: [Immer] Patching reserved attributes like __proto__, prototype and constructor is not allowed\r\n\r\napplyPatches({}, [ { op: 'add', path: [['__proto__'], 'polluted'], value: 'yes' } ]);\r\n// applyPatches({}, [ { op: 'replace', path: [['__proto__'], 'polluted'], value: 'yes' } ]);\r\nconsole.log(polluted);\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `immer` to version 9.0.6 or higher.\n## References\n- [GitHub Commit](https://github.com/immerjs/immer/commit/fa671e55ee9bd42ae08cc239102b665a23958237)\n- [Snyk Blog](https://snyk.io/blog/remediate-javascript-type-confusion-bypassed-input-validation/)\n",
      "disclosureTime": "2021-08-12T17:14:00Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "9.0.6"
      ],
      "id": "SNYK-JS-IMMER-1540542",
      "identifiers": {
        "CWE": [
          "CWE-1321"
        ],
        "CVE": [
          "CVE-2021-23436"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-11-05T14:06:11.516776Z",
      "moduleName": "immer",
      "packageManager": "npm",
      "packageName": "immer",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-09-01T15:42:32Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/immerjs/immer/commit/fa671e55ee9bd42ae08cc239102b665a23958237"
        },
        {
          "title": "Snyk Blog",
          "url": "https://snyk.io/blog/remediate-javascript-type-confusion-bypassed-input-validation/"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<9.0.6"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "react-dev-utils@10.2.1",
        "immer@1.10.0"
      ],
      "upgradePath": [
        false,
        "react-scripts@5.0.0",
        "react-dev-utils@12.0.0",
        "immer@9.0.7"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "immer",
      "version": "1.10.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2021-12-30T14:41:17.923623Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 4.3,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Reverse Tabnabbing because of no `rel` attribute in the link to `https://istanbul.js.org/`.\n## Remediation\nUpgrade `istanbul-reports` to version 3.1.3 or higher.\n## References\n- [GitHub Commit](https://github.com/istanbuljs/istanbuljs/commit/4eceb9eb8b3169b882d74ecc526fb5837ebc6205)\n- [GitHub PR](https://github.com/istanbuljs/istanbuljs/pull/591)\n- [GitHub Release](https://github.com/istanbuljs/istanbuljs/releases/tag/istanbul-reports-v3.1.3)\n",
      "disclosureTime": "2021-12-30T14:13:55Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "3.1.3"
      ],
      "id": "SNYK-JS-ISTANBULREPORTS-2328088",
      "identifiers": {
        "CWE": [
          "CWE-1022"
        ],
        "CVE": []
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-12-30T15:42:28.495661Z",
      "moduleName": "istanbul-reports",
      "packageManager": "npm",
      "packageName": "istanbul-reports",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-12-30T15:42:28.493526Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/istanbuljs/istanbuljs/commit/4eceb9eb8b3169b882d74ecc526fb5837ebc6205"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/istanbuljs/istanbuljs/pull/591"
        },
        {
          "title": "GitHub Release",
          "url": "https://github.com/istanbuljs/istanbuljs/releases/tag/istanbul-reports-v3.1.3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Reverse Tabnabbing",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<3.1.3"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "jest@24.9.0",
        "jest-cli@24.9.0",
        "@jest/core@24.9.0",
        "@jest/reporters@24.9.0",
        "istanbul-reports@2.2.7"
      ],
      "upgradePath": [
        false,
        "react-scripts@4.0.0",
        "jest@26.6.0",
        "jest-cli@26.6.0",
        "@jest/core@26.6.0",
        "@jest/reporters@26.6.0",
        "istanbul-reports@3.1.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "istanbul-reports",
      "version": "2.2.7"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:H",
      "alternativeIds": [],
      "creationTime": "2021-11-14T15:11:37.579980Z",
      "credit": [
        "Yoshino-s"
      ],
      "cvssScore": 8.6,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `validate` function, which when given a special payload will pollute `Object` with undesired attributes.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `json-schema` to version 0.4.0 or higher.\n## References\n- [GitHub Commit](https://github.com/kriszyp/json-schema/commit/22f146111f541d9737e832823699ad3528ca7741)\n",
      "disclosureTime": "2021-11-14T15:05:57Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "0.4.0"
      ],
      "id": "SNYK-JS-JSONSCHEMA-1920922",
      "identifiers": {
        "CWE": [
          "CWE-1321"
        ],
        "CVE": [
          "CVE-2021-3918"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-12-17T15:25:44.736835Z",
      "moduleName": "json-schema",
      "packageManager": "npm",
      "packageName": "json-schema",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-11-14T16:49:43.070251Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/kriszyp/json-schema/commit/22f146111f541d9737e832823699ad3528ca7741"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<0.4.0"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "acme-review@1.0.0",
        "@microsoft/signalr@3.1.14",
        "request@2.88.2",
        "http-signature@1.2.0",
        "jsprim@1.4.1",
        "json-schema@0.2.3"
      ],
      "upgradePath": [
        false,
        "@microsoft/signalr@3.1.14",
        "request@2.88.2",
        "http-signature@1.2.0",
        "jsprim@1.4.2",
        "json-schema@0.4.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "json-schema",
      "version": "0.2.3"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:H",
      "alternativeIds": [],
      "creationTime": "2021-11-14T15:11:37.579980Z",
      "credit": [
        "Yoshino-s"
      ],
      "cvssScore": 8.6,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `validate` function, which when given a special payload will pollute `Object` with undesired attributes.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `json-schema` to version 0.4.0 or higher.\n## References\n- [GitHub Commit](https://github.com/kriszyp/json-schema/commit/22f146111f541d9737e832823699ad3528ca7741)\n",
      "disclosureTime": "2021-11-14T15:05:57Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "0.4.0"
      ],
      "id": "SNYK-JS-JSONSCHEMA-1920922",
      "identifiers": {
        "CWE": [
          "CWE-1321"
        ],
        "CVE": [
          "CVE-2021-3918"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-12-17T15:25:44.736835Z",
      "moduleName": "json-schema",
      "packageManager": "npm",
      "packageName": "json-schema",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-11-14T16:49:43.070251Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/kriszyp/json-schema/commit/22f146111f541d9737e832823699ad3528ca7741"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<0.4.0"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "acme-review@1.0.0",
        "jest-enzyme@7.1.2",
        "jest-environment-enzyme@7.1.2",
        "jest-environment-jsdom@24.9.0",
        "jsdom@11.12.0",
        "request@2.88.2",
        "http-signature@1.2.0",
        "jsprim@1.4.1",
        "json-schema@0.2.3"
      ],
      "upgradePath": [
        false,
        "jest-enzyme@7.1.2",
        "jest-environment-enzyme@7.1.2",
        "jest-environment-jsdom@24.9.0",
        "jsdom@11.12.0",
        "request@2.88.2",
        "http-signature@1.2.0",
        "jsprim@1.4.2",
        "json-schema@0.4.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "json-schema",
      "version": "0.2.3"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:H",
      "alternativeIds": [],
      "creationTime": "2021-11-14T15:11:37.579980Z",
      "credit": [
        "Yoshino-s"
      ],
      "cvssScore": 8.6,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `validate` function, which when given a special payload will pollute `Object` with undesired attributes.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `json-schema` to version 0.4.0 or higher.\n## References\n- [GitHub Commit](https://github.com/kriszyp/json-schema/commit/22f146111f541d9737e832823699ad3528ca7741)\n",
      "disclosureTime": "2021-11-14T15:05:57Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "0.4.0"
      ],
      "id": "SNYK-JS-JSONSCHEMA-1920922",
      "identifiers": {
        "CWE": [
          "CWE-1321"
        ],
        "CVE": [
          "CVE-2021-3918"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-12-17T15:25:44.736835Z",
      "moduleName": "json-schema",
      "packageManager": "npm",
      "packageName": "json-schema",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-11-14T16:49:43.070251Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/kriszyp/json-schema/commit/22f146111f541d9737e832823699ad3528ca7741"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<0.4.0"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "jest@24.9.0",
        "jest-cli@24.9.0",
        "@jest/core@24.9.0",
        "@jest/reporters@24.9.0",
        "jest-runtime@24.9.0",
        "jest-config@24.9.0",
        "jest-environment-jsdom@24.9.0",
        "jsdom@11.12.0",
        "request@2.88.2",
        "http-signature@1.2.0",
        "jsprim@1.4.1",
        "json-schema@0.2.3"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "jest@24.9.0",
        "jest-cli@24.9.0",
        "@jest/core@24.9.0",
        "@jest/reporters@24.9.0",
        "jest-runtime@24.9.0",
        "jest-config@24.9.0",
        "jest-environment-jsdom@24.9.0",
        "jsdom@11.12.0",
        "request@2.88.2",
        "http-signature@1.2.0",
        "jsprim@1.4.2",
        "json-schema@0.4.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "json-schema",
      "version": "0.2.3"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2021-03-22T12:03:39.360085Z",
      "credit": [
        "Marc Hassan"
      ],
      "cvssScore": 7.2,
      "description": "## Overview\n[lodash.template](https://www.npmjs.com/package/lodash.template) is a The Lodash method _.template exported as a Node.js module.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nThere is no fixed version for `lodash.template`.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
      "disclosureTime": "2020-11-17T13:02:10Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [],
      "id": "SNYK-JS-LODASHTEMPLATE-1088054",
      "identifiers": {
        "CWE": [
          "CWE-78"
        ],
        "GHSA": [
          "GHSA-35jh-r3h4-6jhm"
        ],
        "CVE": [
          "CVE-2021-23337"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:28:18.096614Z",
      "moduleName": "lodash.template",
      "packageManager": "npm",
      "packageName": "lodash.template",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-02-15T11:50:50Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Command Injection",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "*"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "workbox-webpack-plugin@4.3.1",
        "workbox-build@4.3.1",
        "lodash.template@4.5.0"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "lodash.template",
      "version": "4.5.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2022-03-18T13:02:08.840039Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution due to a missing handler to `Function.prototype`.\r\n\r\n**Notes:** \r\n\r\n- This vulnerability is a bypass to [CVE-2020-7598](https://security.snyk.io/vuln/SNYK-JS-MINIMIST-559764)\r\n\r\n- The reason for the different CVSS between CVE-2021-44906 to CVE-2020-7598, is that CVE-2020-7598 can pollute objects, while CVE-2021-44906 can pollute only function.\r\n\r\n\r\n## PoC by Snyk\r\n```js\r\nrequire('minimist')('--_.constructor.constructor.prototype.foo bar'.split(' '));\r\nconsole.log((function(){}).foo); // bar\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 1.2.6 or higher.\n## References\n- [Fix Commit](https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d)\n- [GitHub Issue](https://github.com/substack/minimist/issues/164)\n- [Vulnerable Code](https://github.com/substack/minimist/blob/master/index.js#L69)\n",
      "disclosureTime": "2022-03-18T12:24:05Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "1.2.6"
      ],
      "id": "SNYK-JS-MINIMIST-2429795",
      "identifiers": {
        "CWE": [
          "CWE-1321"
        ],
        "SNYK": [
          "SNYK-JS-MINIMIST-559764"
        ],
        "CVE": [
          "CVE-2021-44906"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-06-06T12:01:22.204194Z",
      "moduleName": "minimist",
      "packageManager": "npm",
      "packageName": "minimist",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-03-21T12:09:35Z",
      "references": [
        {
          "title": "Fix Commit",
          "url": "https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/substack/minimist/issues/164"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/substack/minimist/blob/master/index.js%23L69"
        }
      ],
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.2.6"
        ]
      },
      "severityWithCritical": "low",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "@babel/core@7.9.0",
        "json5@2.2.0",
        "minimist@1.2.5"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "@babel/core@7.9.0",
        "json5@2.2.0",
        "minimist@1.2.6"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "minimist",
      "version": "1.2.5"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2022-03-18T13:02:08.840039Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution due to a missing handler to `Function.prototype`.\r\n\r\n**Notes:** \r\n\r\n- This vulnerability is a bypass to [CVE-2020-7598](https://security.snyk.io/vuln/SNYK-JS-MINIMIST-559764)\r\n\r\n- The reason for the different CVSS between CVE-2021-44906 to CVE-2020-7598, is that CVE-2020-7598 can pollute objects, while CVE-2021-44906 can pollute only function.\r\n\r\n\r\n## PoC by Snyk\r\n```js\r\nrequire('minimist')('--_.constructor.constructor.prototype.foo bar'.split(' '));\r\nconsole.log((function(){}).foo); // bar\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 1.2.6 or higher.\n## References\n- [Fix Commit](https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d)\n- [GitHub Issue](https://github.com/substack/minimist/issues/164)\n- [Vulnerable Code](https://github.com/substack/minimist/blob/master/index.js#L69)\n",
      "disclosureTime": "2022-03-18T12:24:05Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "1.2.6"
      ],
      "id": "SNYK-JS-MINIMIST-2429795",
      "identifiers": {
        "CWE": [
          "CWE-1321"
        ],
        "SNYK": [
          "SNYK-JS-MINIMIST-559764"
        ],
        "CVE": [
          "CVE-2021-44906"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-06-06T12:01:22.204194Z",
      "moduleName": "minimist",
      "packageManager": "npm",
      "packageName": "minimist",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-03-21T12:09:35Z",
      "references": [
        {
          "title": "Fix Commit",
          "url": "https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/substack/minimist/issues/164"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/substack/minimist/blob/master/index.js%23L69"
        }
      ],
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.2.6"
        ]
      },
      "severityWithCritical": "low",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "@svgr/webpack@4.3.3",
        "loader-utils@1.4.0",
        "json5@1.0.1",
        "minimist@1.2.5"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "@svgr/webpack@4.3.3",
        "loader-utils@1.4.0",
        "json5@1.0.1",
        "minimist@1.2.6"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "minimist",
      "version": "1.2.5"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2022-03-18T13:02:08.840039Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution due to a missing handler to `Function.prototype`.\r\n\r\n**Notes:** \r\n\r\n- This vulnerability is a bypass to [CVE-2020-7598](https://security.snyk.io/vuln/SNYK-JS-MINIMIST-559764)\r\n\r\n- The reason for the different CVSS between CVE-2021-44906 to CVE-2020-7598, is that CVE-2020-7598 can pollute objects, while CVE-2021-44906 can pollute only function.\r\n\r\n\r\n## PoC by Snyk\r\n```js\r\nrequire('minimist')('--_.constructor.constructor.prototype.foo bar'.split(' '));\r\nconsole.log((function(){}).foo); // bar\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 1.2.6 or higher.\n## References\n- [Fix Commit](https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d)\n- [GitHub Issue](https://github.com/substack/minimist/issues/164)\n- [Vulnerable Code](https://github.com/substack/minimist/blob/master/index.js#L69)\n",
      "disclosureTime": "2022-03-18T12:24:05Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "1.2.6"
      ],
      "id": "SNYK-JS-MINIMIST-2429795",
      "identifiers": {
        "CWE": [
          "CWE-1321"
        ],
        "SNYK": [
          "SNYK-JS-MINIMIST-559764"
        ],
        "CVE": [
          "CVE-2021-44906"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-06-06T12:01:22.204194Z",
      "moduleName": "minimist",
      "packageManager": "npm",
      "packageName": "minimist",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-03-21T12:09:35Z",
      "references": [
        {
          "title": "Fix Commit",
          "url": "https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/substack/minimist/issues/164"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/substack/minimist/blob/master/index.js%23L69"
        }
      ],
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.2.6"
        ]
      },
      "severityWithCritical": "low",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "@svgr/webpack@4.3.3",
        "@svgr/plugin-svgo@4.3.1",
        "svgo@1.3.2",
        "mkdirp@0.5.5",
        "minimist@1.2.5"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "@svgr/webpack@4.3.3",
        "@svgr/plugin-svgo@4.3.1",
        "svgo@1.3.2",
        "mkdirp@0.5.5",
        "minimist@1.2.6"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "minimist",
      "version": "1.2.5"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2022-03-18T13:02:08.840039Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution due to a missing handler to `Function.prototype`.\r\n\r\n**Notes:** \r\n\r\n- This vulnerability is a bypass to [CVE-2020-7598](https://security.snyk.io/vuln/SNYK-JS-MINIMIST-559764)\r\n\r\n- The reason for the different CVSS between CVE-2021-44906 to CVE-2020-7598, is that CVE-2020-7598 can pollute objects, while CVE-2021-44906 can pollute only function.\r\n\r\n\r\n## PoC by Snyk\r\n```js\r\nrequire('minimist')('--_.constructor.constructor.prototype.foo bar'.split(' '));\r\nconsole.log((function(){}).foo); // bar\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 1.2.6 or higher.\n## References\n- [Fix Commit](https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d)\n- [GitHub Issue](https://github.com/substack/minimist/issues/164)\n- [Vulnerable Code](https://github.com/substack/minimist/blob/master/index.js#L69)\n",
      "disclosureTime": "2022-03-18T12:24:05Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "1.2.6"
      ],
      "id": "SNYK-JS-MINIMIST-2429795",
      "identifiers": {
        "CWE": [
          "CWE-1321"
        ],
        "SNYK": [
          "SNYK-JS-MINIMIST-559764"
        ],
        "CVE": [
          "CVE-2021-44906"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-06-06T12:01:22.204194Z",
      "moduleName": "minimist",
      "packageManager": "npm",
      "packageName": "minimist",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-03-21T12:09:35Z",
      "references": [
        {
          "title": "Fix Commit",
          "url": "https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/substack/minimist/issues/164"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/substack/minimist/blob/master/index.js%23L69"
        }
      ],
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.2.6"
        ]
      },
      "severityWithCritical": "low",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "babel-jest@24.9.0",
        "@jest/transform@24.9.0",
        "jest-haste-map@24.9.0",
        "sane@4.1.0",
        "minimist@1.2.5"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "babel-jest@24.9.0",
        "@jest/transform@24.9.0",
        "jest-haste-map@24.9.0",
        "sane@4.1.0",
        "minimist@1.2.6"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "minimist",
      "version": "1.2.5"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2022-03-18T13:02:08.840039Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution due to a missing handler to `Function.prototype`.\r\n\r\n**Notes:** \r\n\r\n- This vulnerability is a bypass to [CVE-2020-7598](https://security.snyk.io/vuln/SNYK-JS-MINIMIST-559764)\r\n\r\n- The reason for the different CVSS between CVE-2021-44906 to CVE-2020-7598, is that CVE-2020-7598 can pollute objects, while CVE-2021-44906 can pollute only function.\r\n\r\n\r\n## PoC by Snyk\r\n```js\r\nrequire('minimist')('--_.constructor.constructor.prototype.foo bar'.split(' '));\r\nconsole.log((function(){}).foo); // bar\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 1.2.6 or higher.\n## References\n- [Fix Commit](https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d)\n- [GitHub Issue](https://github.com/substack/minimist/issues/164)\n- [Vulnerable Code](https://github.com/substack/minimist/blob/master/index.js#L69)\n",
      "disclosureTime": "2022-03-18T12:24:05Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "1.2.6"
      ],
      "id": "SNYK-JS-MINIMIST-2429795",
      "identifiers": {
        "CWE": [
          "CWE-1321"
        ],
        "SNYK": [
          "SNYK-JS-MINIMIST-559764"
        ],
        "CVE": [
          "CVE-2021-44906"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-06-06T12:01:22.204194Z",
      "moduleName": "minimist",
      "packageManager": "npm",
      "packageName": "minimist",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-03-21T12:09:35Z",
      "references": [
        {
          "title": "Fix Commit",
          "url": "https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/substack/minimist/issues/164"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/substack/minimist/blob/master/index.js%23L69"
        }
      ],
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.2.6"
        ]
      },
      "severityWithCritical": "low",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "babel-jest@24.9.0",
        "@jest/transform@24.9.0",
        "jest-haste-map@24.9.0",
        "sane@4.1.0",
        "@cnakazawa/watch@1.0.4",
        "minimist@1.2.5"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "babel-jest@24.9.0",
        "@jest/transform@24.9.0",
        "jest-haste-map@24.9.0",
        "sane@4.1.0",
        "@cnakazawa/watch@1.0.4",
        "minimist@1.2.6"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "minimist",
      "version": "1.2.5"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2022-03-18T13:02:08.840039Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution due to a missing handler to `Function.prototype`.\r\n\r\n**Notes:** \r\n\r\n- This vulnerability is a bypass to [CVE-2020-7598](https://security.snyk.io/vuln/SNYK-JS-MINIMIST-559764)\r\n\r\n- The reason for the different CVSS between CVE-2021-44906 to CVE-2020-7598, is that CVE-2020-7598 can pollute objects, while CVE-2021-44906 can pollute only function.\r\n\r\n\r\n## PoC by Snyk\r\n```js\r\nrequire('minimist')('--_.constructor.constructor.prototype.foo bar'.split(' '));\r\nconsole.log((function(){}).foo); // bar\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 1.2.6 or higher.\n## References\n- [Fix Commit](https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d)\n- [GitHub Issue](https://github.com/substack/minimist/issues/164)\n- [Vulnerable Code](https://github.com/substack/minimist/blob/master/index.js#L69)\n",
      "disclosureTime": "2022-03-18T12:24:05Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "1.2.6"
      ],
      "id": "SNYK-JS-MINIMIST-2429795",
      "identifiers": {
        "CWE": [
          "CWE-1321"
        ],
        "SNYK": [
          "SNYK-JS-MINIMIST-559764"
        ],
        "CVE": [
          "CVE-2021-44906"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-06-06T12:01:22.204194Z",
      "moduleName": "minimist",
      "packageManager": "npm",
      "packageName": "minimist",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-03-21T12:09:35Z",
      "references": [
        {
          "title": "Fix Commit",
          "url": "https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/substack/minimist/issues/164"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/substack/minimist/blob/master/index.js%23L69"
        }
      ],
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.2.6"
        ]
      },
      "severityWithCritical": "low",
      "from": [
        "acme-review@1.0.0",
        "jest-enzyme@7.1.2",
        "jest-environment-enzyme@7.1.2",
        "jest-environment-jsdom@24.9.0",
        "@jest/environment@24.9.0",
        "@jest/transform@24.9.0",
        "@babel/core@7.14.0",
        "json5@2.2.0",
        "minimist@1.2.5"
      ],
      "upgradePath": [
        false,
        "jest-enzyme@7.1.2",
        "jest-environment-enzyme@7.1.2",
        "jest-environment-jsdom@24.9.0",
        "@jest/environment@24.9.0",
        "@jest/transform@24.9.0",
        "@babel/core@7.14.0",
        "json5@2.2.0",
        "minimist@1.2.6"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "minimist",
      "version": "1.2.5"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2022-03-18T13:02:08.840039Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution due to a missing handler to `Function.prototype`.\r\n\r\n**Notes:** \r\n\r\n- This vulnerability is a bypass to [CVE-2020-7598](https://security.snyk.io/vuln/SNYK-JS-MINIMIST-559764)\r\n\r\n- The reason for the different CVSS between CVE-2021-44906 to CVE-2020-7598, is that CVE-2020-7598 can pollute objects, while CVE-2021-44906 can pollute only function.\r\n\r\n\r\n## PoC by Snyk\r\n```js\r\nrequire('minimist')('--_.constructor.constructor.prototype.foo bar'.split(' '));\r\nconsole.log((function(){}).foo); // bar\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 1.2.6 or higher.\n## References\n- [Fix Commit](https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d)\n- [GitHub Issue](https://github.com/substack/minimist/issues/164)\n- [Vulnerable Code](https://github.com/substack/minimist/blob/master/index.js#L69)\n",
      "disclosureTime": "2022-03-18T12:24:05Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "1.2.6"
      ],
      "id": "SNYK-JS-MINIMIST-2429795",
      "identifiers": {
        "CWE": [
          "CWE-1321"
        ],
        "SNYK": [
          "SNYK-JS-MINIMIST-559764"
        ],
        "CVE": [
          "CVE-2021-44906"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-06-06T12:01:22.204194Z",
      "moduleName": "minimist",
      "packageManager": "npm",
      "packageName": "minimist",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-03-21T12:09:35Z",
      "references": [
        {
          "title": "Fix Commit",
          "url": "https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/substack/minimist/issues/164"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/substack/minimist/blob/master/index.js%23L69"
        }
      ],
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.2.6"
        ]
      },
      "severityWithCritical": "low",
      "from": [
        "acme-review@1.0.0",
        "jest-enzyme@7.1.2",
        "jest-environment-enzyme@7.1.2",
        "jest-environment-jsdom@24.9.0",
        "@jest/environment@24.9.0",
        "@jest/transform@24.9.0",
        "jest-haste-map@24.9.0",
        "sane@4.1.0",
        "minimist@1.2.5"
      ],
      "upgradePath": [
        false,
        "jest-enzyme@7.1.2",
        "jest-environment-enzyme@7.1.2",
        "jest-environment-jsdom@24.9.0",
        "@jest/environment@24.9.0",
        "@jest/transform@24.9.0",
        "jest-haste-map@24.9.0",
        "sane@4.1.0",
        "minimist@1.2.6"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "minimist",
      "version": "1.2.5"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2022-03-18T13:02:08.840039Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution due to a missing handler to `Function.prototype`.\r\n\r\n**Notes:** \r\n\r\n- This vulnerability is a bypass to [CVE-2020-7598](https://security.snyk.io/vuln/SNYK-JS-MINIMIST-559764)\r\n\r\n- The reason for the different CVSS between CVE-2021-44906 to CVE-2020-7598, is that CVE-2020-7598 can pollute objects, while CVE-2021-44906 can pollute only function.\r\n\r\n\r\n## PoC by Snyk\r\n```js\r\nrequire('minimist')('--_.constructor.constructor.prototype.foo bar'.split(' '));\r\nconsole.log((function(){}).foo); // bar\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 1.2.6 or higher.\n## References\n- [Fix Commit](https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d)\n- [GitHub Issue](https://github.com/substack/minimist/issues/164)\n- [Vulnerable Code](https://github.com/substack/minimist/blob/master/index.js#L69)\n",
      "disclosureTime": "2022-03-18T12:24:05Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "1.2.6"
      ],
      "id": "SNYK-JS-MINIMIST-2429795",
      "identifiers": {
        "CWE": [
          "CWE-1321"
        ],
        "SNYK": [
          "SNYK-JS-MINIMIST-559764"
        ],
        "CVE": [
          "CVE-2021-44906"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-06-06T12:01:22.204194Z",
      "moduleName": "minimist",
      "packageManager": "npm",
      "packageName": "minimist",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-03-21T12:09:35Z",
      "references": [
        {
          "title": "Fix Commit",
          "url": "https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/substack/minimist/issues/164"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/substack/minimist/blob/master/index.js%23L69"
        }
      ],
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.2.6"
        ]
      },
      "severityWithCritical": "low",
      "from": [
        "acme-review@1.0.0",
        "jest-enzyme@7.1.2",
        "jest-environment-enzyme@7.1.2",
        "jest-environment-jsdom@24.9.0",
        "@jest/environment@24.9.0",
        "@jest/transform@24.9.0",
        "jest-haste-map@24.9.0",
        "jest-util@24.9.0",
        "mkdirp@0.5.5",
        "minimist@1.2.5"
      ],
      "upgradePath": [
        false,
        "jest-enzyme@7.1.2",
        "jest-environment-enzyme@7.1.2",
        "jest-environment-jsdom@24.9.0",
        "@jest/environment@24.9.0",
        "@jest/transform@24.9.0",
        "jest-haste-map@24.9.0",
        "jest-util@24.9.0",
        "mkdirp@0.5.5",
        "minimist@1.2.6"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "minimist",
      "version": "1.2.5"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2022-03-18T13:02:08.840039Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution due to a missing handler to `Function.prototype`.\r\n\r\n**Notes:** \r\n\r\n- This vulnerability is a bypass to [CVE-2020-7598](https://security.snyk.io/vuln/SNYK-JS-MINIMIST-559764)\r\n\r\n- The reason for the different CVSS between CVE-2021-44906 to CVE-2020-7598, is that CVE-2020-7598 can pollute objects, while CVE-2021-44906 can pollute only function.\r\n\r\n\r\n## PoC by Snyk\r\n```js\r\nrequire('minimist')('--_.constructor.constructor.prototype.foo bar'.split(' '));\r\nconsole.log((function(){}).foo); // bar\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 1.2.6 or higher.\n## References\n- [Fix Commit](https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d)\n- [GitHub Issue](https://github.com/substack/minimist/issues/164)\n- [Vulnerable Code](https://github.com/substack/minimist/blob/master/index.js#L69)\n",
      "disclosureTime": "2022-03-18T12:24:05Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "1.2.6"
      ],
      "id": "SNYK-JS-MINIMIST-2429795",
      "identifiers": {
        "CWE": [
          "CWE-1321"
        ],
        "SNYK": [
          "SNYK-JS-MINIMIST-559764"
        ],
        "CVE": [
          "CVE-2021-44906"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-06-06T12:01:22.204194Z",
      "moduleName": "minimist",
      "packageManager": "npm",
      "packageName": "minimist",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-03-21T12:09:35Z",
      "references": [
        {
          "title": "Fix Commit",
          "url": "https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/substack/minimist/issues/164"
        },
        {
          "title": "Vulnerable Code",
          "url": "https://github.com/substack/minimist/blob/master/index.js%23L69"
        }
      ],
      "severity": "low",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.2.6"
        ]
      },
      "severityWithCritical": "low",
      "from": [
        "acme-review@1.0.0",
        "jest-enzyme@7.1.2",
        "jest-environment-enzyme@7.1.2",
        "jest-environment-jsdom@24.9.0",
        "@jest/environment@24.9.0",
        "@jest/transform@24.9.0",
        "jest-haste-map@24.9.0",
        "sane@4.1.0",
        "@cnakazawa/watch@1.0.4",
        "minimist@1.2.5"
      ],
      "upgradePath": [
        false,
        "jest-enzyme@7.1.2",
        "jest-environment-enzyme@7.1.2",
        "jest-environment-jsdom@24.9.0",
        "@jest/environment@24.9.0",
        "@jest/transform@24.9.0",
        "jest-haste-map@24.9.0",
        "sane@4.1.0",
        "@cnakazawa/watch@1.0.4",
        "minimist@1.2.6"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "minimist",
      "version": "1.2.5"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
      "alternativeIds": [],
      "creationTime": "2022-04-05T08:46:07.677588Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n[moment](https://www.npmjs.com/package/moment) is a lightweight JavaScript date library for parsing, validating, manipulating, and formatting dates.\n\nAffected versions of this package are vulnerable to Directory Traversal when a user provides a locale string which is directly used to switch moment locale.\n\n## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`. \n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```\n\n## Remediation\nUpgrade `moment` to version 2.29.2 or higher.\n## References\n- [GitHub Commit](https://github.com/moment/moment/commit/4211bfc8f15746be4019bba557e29a7ba83d54c5)\n",
      "disclosureTime": "2022-04-05T08:39:23Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "2.29.2"
      ],
      "id": "SNYK-JS-MOMENT-2440688",
      "identifiers": {
        "CWE": [
          "CWE-22"
        ],
        "GHSA": [
          "GHSA-8hfj-j24r-96c4"
        ],
        "CVE": [
          "CVE-2022-24785"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:30:50.880408Z",
      "moduleName": "moment",
      "packageManager": "npm",
      "packageName": "moment",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-04-05T12:30:50.878091Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/moment/moment/commit/4211bfc8f15746be4019bba557e29a7ba83d54c5"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Directory Traversal",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<2.29.2"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "acme-review@1.0.0",
        "moment-timezone@0.5.33",
        "moment@2.29.1"
      ],
      "upgradePath": [
        false,
        "moment-timezone@0.5.33",
        "moment@2.29.2"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "moment",
      "version": "2.29.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
      "alternativeIds": [],
      "creationTime": "2022-04-05T08:46:07.677588Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n[moment](https://www.npmjs.com/package/moment) is a lightweight JavaScript date library for parsing, validating, manipulating, and formatting dates.\n\nAffected versions of this package are vulnerable to Directory Traversal when a user provides a locale string which is directly used to switch moment locale.\n\n## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`. \n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```\n\n## Remediation\nUpgrade `moment` to version 2.29.2 or higher.\n## References\n- [GitHub Commit](https://github.com/moment/moment/commit/4211bfc8f15746be4019bba557e29a7ba83d54c5)\n",
      "disclosureTime": "2022-04-05T08:39:23Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "2.29.2"
      ],
      "id": "SNYK-JS-MOMENT-2440688",
      "identifiers": {
        "CWE": [
          "CWE-22"
        ],
        "GHSA": [
          "GHSA-8hfj-j24r-96c4"
        ],
        "CVE": [
          "CVE-2022-24785"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-05T12:30:50.880408Z",
      "moduleName": "moment",
      "packageManager": "npm",
      "packageName": "moment",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-04-05T12:30:50.878091Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/moment/moment/commit/4211bfc8f15746be4019bba557e29a7ba83d54c5"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Directory Traversal",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<2.29.2"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "acme-review@1.0.0",
        "@types/moment-timezone@0.5.30",
        "moment-timezone@0.5.33",
        "moment@2.29.1"
      ],
      "upgradePath": [
        false,
        "@types/moment-timezone@0.5.30",
        "moment-timezone@0.5.33",
        "moment@2.29.2"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "moment",
      "version": "2.29.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2022-01-17T12:08:00.675849Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\n[node-fetch](https://www.npmjs.com/package/node-fetch) is a light-weight module that brings window.fetch to node.js\n\nAffected versions of this package are vulnerable to Information Exposure when fetching a remote url with Cookie, if it get a `Location` response header, it will follow that url and try to fetch that url with provided cookie. This can lead to forwarding secure headers to 3th party.\n## Remediation\nUpgrade `node-fetch` to version 2.6.7, 3.1.1 or higher.\n## References\n- [Github Commit](https://github.com/node-fetch/node-fetch/commit/1ef4b560a17e644a02a3bfdea7631ffeee578b35)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/commit/36e47e8a6406185921e4985dcbeff140d73eaa10)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/pull/1449/commits/5c32f002fdd65b1c6a8f1e3620210813d45c7e60)\n- [GitHub PR](https://github.com/node-fetch/node-fetch/pull/1449)\n",
      "disclosureTime": "2022-01-17T12:00:01Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "2.6.7",
        "3.1.1"
      ],
      "id": "SNYK-JS-NODEFETCH-2342118",
      "identifiers": {
        "CWE": [
          "CWE-200"
        ],
        "CVE": [
          "CVE-2022-0235",
          "CVE-2022-1365"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-18T09:45:11.278222Z",
      "moduleName": "node-fetch",
      "packageManager": "npm",
      "packageName": "node-fetch",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-01-17T16:25:00Z",
      "references": [
        {
          "title": "Github Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/1ef4b560a17e644a02a3bfdea7631ffeee578b35"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/36e47e8a6406185921e4985dcbeff140d73eaa10"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/pull/1449/commits/5c32f002fdd65b1c6a8f1e3620210813d45c7e60"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/node-fetch/node-fetch/pull/1449"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Information Exposure",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<2.6.7",
          ">=3.0.0 <3.1.1"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "@nivo/core@0.67.0",
        "recompose@0.30.0",
        "fbjs@0.8.17",
        "isomorphic-fetch@2.2.1",
        "node-fetch@1.7.3"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "node-fetch",
      "version": "1.7.3"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H/E:U/RL:O/RC:R",
      "alternativeIds": [],
      "creationTime": "2020-09-11T10:50:56.354201Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 5.9,
      "description": "## Overview\n[node-fetch](https://www.npmjs.com/package/node-fetch) is a light-weight module that brings window.fetch to node.js\n\nAffected versions of this package are vulnerable to Denial of Service. Node Fetch did not honor the `size` option after following a redirect, which means that when a content size was over the limit, a FetchError would never get thrown and the process would end without failure.\n## Remediation\nUpgrade `node-fetch` to version 2.6.1, 3.0.0-beta.9 or higher.\n## References\n- [GitHub Advisory](https://github.com/node-fetch/node-fetch/security/advisories/GHSA-w7rc-rwvf-8q5r)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/commit/2358a6c2563d1730a0cdaccc197c611949f6a334)\n",
      "disclosureTime": "2020-09-10T17:55:53Z",
      "exploit": "Unproven",
      "functions": [
        {
          "functionId": {
            "filePath": "lib/index.js",
            "className": null,
            "functionName": "fetch"
          },
          "version": [
            ">1.7.1 <1.7.4",
            ">2.0.0-alpha.7 <2.6.1"
          ]
        }
      ],
      "fixedIn": [
        "2.6.1",
        "3.0.0-beta.9"
      ],
      "id": "SNYK-JS-NODEFETCH-674311",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w7rc-rwvf-8q5r"
        ],
        "CVE": [
          "CVE-2020-15168"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-01-26T16:47:31.069025Z",
      "moduleName": "node-fetch",
      "packageManager": "npm",
      "packageName": "node-fetch",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-09-11T14:12:46Z",
      "references": [
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/node-fetch/node-fetch/security/advisories/GHSA-w7rc-rwvf-8q5r"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/2358a6c2563d1730a0cdaccc197c611949f6a334"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Denial of Service",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [
        {
          "functionId": {
            "filePath": "lib/index.js",
            "functionName": "fetch"
          },
          "version": [
            ">1.7.1 <1.7.4",
            ">2.0.0-alpha.7 <2.6.1"
          ]
        }
      ],
      "semver": {
        "vulnerable": [
          "<2.6.1",
          ">=3.0.0-beta.1 <3.0.0-beta.9"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "@nivo/core@0.67.0",
        "recompose@0.30.0",
        "fbjs@0.8.17",
        "isomorphic-fetch@2.2.1",
        "node-fetch@1.7.3"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "node-fetch",
      "version": "1.7.3"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2022-01-17T12:08:00.675849Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\n[node-fetch](https://www.npmjs.com/package/node-fetch) is a light-weight module that brings window.fetch to node.js\n\nAffected versions of this package are vulnerable to Information Exposure when fetching a remote url with Cookie, if it get a `Location` response header, it will follow that url and try to fetch that url with provided cookie. This can lead to forwarding secure headers to 3th party.\n## Remediation\nUpgrade `node-fetch` to version 2.6.7, 3.1.1 or higher.\n## References\n- [Github Commit](https://github.com/node-fetch/node-fetch/commit/1ef4b560a17e644a02a3bfdea7631ffeee578b35)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/commit/36e47e8a6406185921e4985dcbeff140d73eaa10)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/pull/1449/commits/5c32f002fdd65b1c6a8f1e3620210813d45c7e60)\n- [GitHub PR](https://github.com/node-fetch/node-fetch/pull/1449)\n",
      "disclosureTime": "2022-01-17T12:00:01Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "2.6.7",
        "3.1.1"
      ],
      "id": "SNYK-JS-NODEFETCH-2342118",
      "identifiers": {
        "CWE": [
          "CWE-200"
        ],
        "CVE": [
          "CVE-2022-0235",
          "CVE-2022-1365"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-18T09:45:11.278222Z",
      "moduleName": "node-fetch",
      "packageManager": "npm",
      "packageName": "node-fetch",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-01-17T16:25:00Z",
      "references": [
        {
          "title": "Github Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/1ef4b560a17e644a02a3bfdea7631ffeee578b35"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/36e47e8a6406185921e4985dcbeff140d73eaa10"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/pull/1449/commits/5c32f002fdd65b1c6a8f1e3620210813d45c7e60"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/node-fetch/node-fetch/pull/1449"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Information Exposure",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<2.6.7",
          ">=3.0.0 <3.1.1"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "@nivo/bar@0.67.0",
        "@nivo/legends@0.67.0",
        "recompose@0.30.0",
        "fbjs@0.8.17",
        "isomorphic-fetch@2.2.1",
        "node-fetch@1.7.3"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "node-fetch",
      "version": "1.7.3"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H/E:U/RL:O/RC:R",
      "alternativeIds": [],
      "creationTime": "2020-09-11T10:50:56.354201Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 5.9,
      "description": "## Overview\n[node-fetch](https://www.npmjs.com/package/node-fetch) is a light-weight module that brings window.fetch to node.js\n\nAffected versions of this package are vulnerable to Denial of Service. Node Fetch did not honor the `size` option after following a redirect, which means that when a content size was over the limit, a FetchError would never get thrown and the process would end without failure.\n## Remediation\nUpgrade `node-fetch` to version 2.6.1, 3.0.0-beta.9 or higher.\n## References\n- [GitHub Advisory](https://github.com/node-fetch/node-fetch/security/advisories/GHSA-w7rc-rwvf-8q5r)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/commit/2358a6c2563d1730a0cdaccc197c611949f6a334)\n",
      "disclosureTime": "2020-09-10T17:55:53Z",
      "exploit": "Unproven",
      "functions": [
        {
          "functionId": {
            "filePath": "lib/index.js",
            "className": null,
            "functionName": "fetch"
          },
          "version": [
            ">1.7.1 <1.7.4",
            ">2.0.0-alpha.7 <2.6.1"
          ]
        }
      ],
      "fixedIn": [
        "2.6.1",
        "3.0.0-beta.9"
      ],
      "id": "SNYK-JS-NODEFETCH-674311",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w7rc-rwvf-8q5r"
        ],
        "CVE": [
          "CVE-2020-15168"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-01-26T16:47:31.069025Z",
      "moduleName": "node-fetch",
      "packageManager": "npm",
      "packageName": "node-fetch",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-09-11T14:12:46Z",
      "references": [
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/node-fetch/node-fetch/security/advisories/GHSA-w7rc-rwvf-8q5r"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/2358a6c2563d1730a0cdaccc197c611949f6a334"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Denial of Service",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [
        {
          "functionId": {
            "filePath": "lib/index.js",
            "functionName": "fetch"
          },
          "version": [
            ">1.7.1 <1.7.4",
            ">2.0.0-alpha.7 <2.6.1"
          ]
        }
      ],
      "semver": {
        "vulnerable": [
          "<2.6.1",
          ">=3.0.0-beta.1 <3.0.0-beta.9"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "@nivo/bar@0.67.0",
        "@nivo/legends@0.67.0",
        "recompose@0.30.0",
        "fbjs@0.8.17",
        "isomorphic-fetch@2.2.1",
        "node-fetch@1.7.3"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "node-fetch",
      "version": "1.7.3"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2022-01-17T12:08:00.675849Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\n[node-fetch](https://www.npmjs.com/package/node-fetch) is a light-weight module that brings window.fetch to node.js\n\nAffected versions of this package are vulnerable to Information Exposure when fetching a remote url with Cookie, if it get a `Location` response header, it will follow that url and try to fetch that url with provided cookie. This can lead to forwarding secure headers to 3th party.\n## Remediation\nUpgrade `node-fetch` to version 2.6.7, 3.1.1 or higher.\n## References\n- [Github Commit](https://github.com/node-fetch/node-fetch/commit/1ef4b560a17e644a02a3bfdea7631ffeee578b35)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/commit/36e47e8a6406185921e4985dcbeff140d73eaa10)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/pull/1449/commits/5c32f002fdd65b1c6a8f1e3620210813d45c7e60)\n- [GitHub PR](https://github.com/node-fetch/node-fetch/pull/1449)\n",
      "disclosureTime": "2022-01-17T12:00:01Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "2.6.7",
        "3.1.1"
      ],
      "id": "SNYK-JS-NODEFETCH-2342118",
      "identifiers": {
        "CWE": [
          "CWE-200"
        ],
        "CVE": [
          "CVE-2022-0235",
          "CVE-2022-1365"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-18T09:45:11.278222Z",
      "moduleName": "node-fetch",
      "packageManager": "npm",
      "packageName": "node-fetch",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-01-17T16:25:00Z",
      "references": [
        {
          "title": "Github Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/1ef4b560a17e644a02a3bfdea7631ffeee578b35"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/36e47e8a6406185921e4985dcbeff140d73eaa10"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/pull/1449/commits/5c32f002fdd65b1c6a8f1e3620210813d45c7e60"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/node-fetch/node-fetch/pull/1449"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Information Exposure",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<2.6.7",
          ">=3.0.0 <3.1.1"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "@nivo/line@0.67.0",
        "@nivo/legends@0.67.0",
        "recompose@0.30.0",
        "fbjs@0.8.17",
        "isomorphic-fetch@2.2.1",
        "node-fetch@1.7.3"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "node-fetch",
      "version": "1.7.3"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H/E:U/RL:O/RC:R",
      "alternativeIds": [],
      "creationTime": "2020-09-11T10:50:56.354201Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 5.9,
      "description": "## Overview\n[node-fetch](https://www.npmjs.com/package/node-fetch) is a light-weight module that brings window.fetch to node.js\n\nAffected versions of this package are vulnerable to Denial of Service. Node Fetch did not honor the `size` option after following a redirect, which means that when a content size was over the limit, a FetchError would never get thrown and the process would end without failure.\n## Remediation\nUpgrade `node-fetch` to version 2.6.1, 3.0.0-beta.9 or higher.\n## References\n- [GitHub Advisory](https://github.com/node-fetch/node-fetch/security/advisories/GHSA-w7rc-rwvf-8q5r)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/commit/2358a6c2563d1730a0cdaccc197c611949f6a334)\n",
      "disclosureTime": "2020-09-10T17:55:53Z",
      "exploit": "Unproven",
      "functions": [
        {
          "functionId": {
            "filePath": "lib/index.js",
            "className": null,
            "functionName": "fetch"
          },
          "version": [
            ">1.7.1 <1.7.4",
            ">2.0.0-alpha.7 <2.6.1"
          ]
        }
      ],
      "fixedIn": [
        "2.6.1",
        "3.0.0-beta.9"
      ],
      "id": "SNYK-JS-NODEFETCH-674311",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-w7rc-rwvf-8q5r"
        ],
        "CVE": [
          "CVE-2020-15168"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-01-26T16:47:31.069025Z",
      "moduleName": "node-fetch",
      "packageManager": "npm",
      "packageName": "node-fetch",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-09-11T14:12:46Z",
      "references": [
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/node-fetch/node-fetch/security/advisories/GHSA-w7rc-rwvf-8q5r"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/2358a6c2563d1730a0cdaccc197c611949f6a334"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Denial of Service",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [
        {
          "functionId": {
            "filePath": "lib/index.js",
            "functionName": "fetch"
          },
          "version": [
            ">1.7.1 <1.7.4",
            ">2.0.0-alpha.7 <2.6.1"
          ]
        }
      ],
      "semver": {
        "vulnerable": [
          "<2.6.1",
          ">=3.0.0-beta.1 <3.0.0-beta.9"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "@nivo/line@0.67.0",
        "@nivo/legends@0.67.0",
        "recompose@0.30.0",
        "fbjs@0.8.17",
        "isomorphic-fetch@2.2.1",
        "node-fetch@1.7.3"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "node-fetch",
      "version": "1.7.3"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2022-01-17T12:08:00.675849Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\n[node-fetch](https://www.npmjs.com/package/node-fetch) is a light-weight module that brings window.fetch to node.js\n\nAffected versions of this package are vulnerable to Information Exposure when fetching a remote url with Cookie, if it get a `Location` response header, it will follow that url and try to fetch that url with provided cookie. This can lead to forwarding secure headers to 3th party.\n## Remediation\nUpgrade `node-fetch` to version 2.6.7, 3.1.1 or higher.\n## References\n- [Github Commit](https://github.com/node-fetch/node-fetch/commit/1ef4b560a17e644a02a3bfdea7631ffeee578b35)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/commit/36e47e8a6406185921e4985dcbeff140d73eaa10)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/pull/1449/commits/5c32f002fdd65b1c6a8f1e3620210813d45c7e60)\n- [GitHub PR](https://github.com/node-fetch/node-fetch/pull/1449)\n",
      "disclosureTime": "2022-01-17T12:00:01Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "2.6.7",
        "3.1.1"
      ],
      "id": "SNYK-JS-NODEFETCH-2342118",
      "identifiers": {
        "CWE": [
          "CWE-200"
        ],
        "CVE": [
          "CVE-2022-0235",
          "CVE-2022-1365"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-18T09:45:11.278222Z",
      "moduleName": "node-fetch",
      "packageManager": "npm",
      "packageName": "node-fetch",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-01-17T16:25:00Z",
      "references": [
        {
          "title": "Github Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/1ef4b560a17e644a02a3bfdea7631ffeee578b35"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/commit/36e47e8a6406185921e4985dcbeff140d73eaa10"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/node-fetch/node-fetch/pull/1449/commits/5c32f002fdd65b1c6a8f1e3620210813d45c7e60"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/node-fetch/node-fetch/pull/1449"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Information Exposure",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<2.6.7",
          ">=3.0.0 <3.1.1"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "jest-fetch-mock@3.0.3",
        "cross-fetch@3.1.4",
        "node-fetch@2.6.1"
      ],
      "upgradePath": [
        false,
        "jest-fetch-mock@3.0.3",
        "cross-fetch@3.1.5",
        "node-fetch@2.6.7"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "node-fetch",
      "version": "2.6.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N/E:P",
      "alternativeIds": [],
      "creationTime": "2022-01-06T11:16:25.853884Z",
      "credit": [
        "ready-research"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[node-forge](https://github.com/digitalbazaar/forge) is a JavaScript implementations of network transports, cryptography, ciphers, PKI, message digests, and various utilities.\n\nAffected versions of this package are vulnerable to Open Redirect via `parseUrl` function when it mishandles certain uses of backslash such as `https:/\\/\\/\\` and interprets the URI as a relative path.\r\n\r\n### PoC:\r\n```js\r\n\r\n// poc.js\r\nvar forge = require(\"node-forge\");\r\nvar url = forge.util.parseUrl(\"https:/\\/\\/\\www.github.com/foo/bar\");\r\nconsole.log(url);\r\n\r\n// Output of node poc.js:\r\n\r\n{\r\n  full: 'https://',\r\n  scheme: 'https',\r\n  host: '',\r\n  port: 443,\r\n  path: '/www.github.com/foo/bar',                        <<<---- path  should be \"/foo/bar\"\r\n  fullHost: ''\r\n}\r\n\r\n```\n## Remediation\nUpgrade `node-forge` to version 1.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/digitalbazaar/forge/commit/db8016c805371e72b06d8e2edfe0ace0df934a5e)\n- [URL Confusion Explained - Snyk Blog](https://snyk.io/blog/url-confusion-vulnerabilities/)\n",
      "disclosureTime": "2022-01-06T11:09:34Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "1.0.0"
      ],
      "id": "SNYK-JS-NODEFORGE-2330875",
      "identifiers": {
        "CWE": [
          "CWE-601"
        ],
        "GHSA": [
          "GHSA-gf8q-jrpm-jvxq"
        ],
        "CVE": [
          "CVE-2022-0122"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-01-10T22:56:46.640081Z",
      "moduleName": "node-forge",
      "packageManager": "npm",
      "packageName": "node-forge",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-01-06T17:17:25Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/digitalbazaar/forge/commit/db8016c805371e72b06d8e2edfe0ace0df934a5e"
        },
        {
          "title": "URL Confusion Explained - Snyk Blog",
          "url": "https://snyk.io/blog/url-confusion-vulnerabilities/"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Open Redirect",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.0.0"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "webpack-dev-server@3.11.0",
        "selfsigned@1.10.11",
        "node-forge@0.10.0"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "webpack-dev-server@3.11.0",
        "selfsigned@1.10.13",
        "node-forge@1.2.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "node-forge",
      "version": "0.10.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L",
      "alternativeIds": [],
      "creationTime": "2022-01-09T10:11:24.467022Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 6.3,
      "description": "## Overview\n[node-forge](https://github.com/digitalbazaar/forge) is a JavaScript implementations of network transports, cryptography, ciphers, PKI, message digests, and various utilities.\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `forge.debug` API if called with untrusted input.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `node-forge` to version 1.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/digitalbazaar/forge/commit/51228083550dde97701ac8e06c629a5184117562)\n",
      "disclosureTime": "2022-01-08T00:22:42Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "1.0.0"
      ],
      "id": "SNYK-JS-NODEFORGE-2331908",
      "identifiers": {
        "CWE": [
          "CWE-1321"
        ],
        "GHSA": [
          "GHSA-5rrq-pxf6-6jx5"
        ],
        "CVE": []
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-01-09T15:54:48.990788Z",
      "moduleName": "node-forge",
      "packageManager": "npm",
      "packageName": "node-forge",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-01-09T15:54:48.988558Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/digitalbazaar/forge/commit/51228083550dde97701ac8e06c629a5184117562"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.0.0"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "webpack-dev-server@3.11.0",
        "selfsigned@1.10.11",
        "node-forge@0.10.0"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "webpack-dev-server@3.11.0",
        "selfsigned@1.10.13",
        "node-forge@1.2.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "node-forge",
      "version": "0.10.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L",
      "alternativeIds": [],
      "creationTime": "2022-03-20T08:56:55.258238Z",
      "credit": [
        "Moosa Yahyazadeh"
      ],
      "cvssScore": 5.6,
      "description": "## Overview\n[node-forge](https://github.com/digitalbazaar/forge) is a JavaScript implementations of network transports, cryptography, ciphers, PKI, message digests, and various utilities.\n\nAffected versions of this package are vulnerable to Improper Verification of Cryptographic Signature due to RSA's `PKCS#1 v1.5` signature verification code which does not properly check `DigestInfo` for a proper `ASN.1` structure. This can lead to successful verification with signatures that contain invalid structures but a valid digest.\n## Remediation\nUpgrade `node-forge` to version 1.3.0 or higher.\n## References\n- [GitHub Commit](https://github.com/digitalbazaar/forge/commit/3f0b49a0573ef1bb7af7f5673c0cfebf00424df1)\n",
      "disclosureTime": "2022-03-20T08:47:53Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "1.3.0"
      ],
      "id": "SNYK-JS-NODEFORGE-2430337",
      "identifiers": {
        "CWE": [
          "CWE-347"
        ],
        "GHSA": [
          "GHSA-2r2c-g63r-vccr"
        ],
        "CVE": [
          "CVE-2022-24773"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-03-20T16:39:53.367585Z",
      "moduleName": "node-forge",
      "packageManager": "npm",
      "packageName": "node-forge",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-03-20T16:39:53.330824Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/digitalbazaar/forge/commit/3f0b49a0573ef1bb7af7f5673c0cfebf00424df1"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Improper Verification of Cryptographic Signature",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.3.0"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "webpack-dev-server@3.11.0",
        "selfsigned@1.10.11",
        "node-forge@0.10.0"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "webpack-dev-server@3.11.0",
        "selfsigned@1.10.13",
        "node-forge@1.3.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "node-forge",
      "version": "0.10.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
      "alternativeIds": [],
      "creationTime": "2022-03-20T09:05:59.631233Z",
      "credit": [
        "Moosa Yahyazadeh"
      ],
      "cvssScore": 7.3,
      "description": "## Overview\n[node-forge](https://github.com/digitalbazaar/forge) is a JavaScript implementations of network transports, cryptography, ciphers, PKI, message digests, and various utilities.\n\nAffected versions of this package are vulnerable to Improper Verification of Cryptographic Signature due to RSA's `PKCS#1` v1.5 signature verification code which does not check for tailing garbage bytes after decoding a `DigestInfo` ASN.1 structure. This can allow padding bytes to be removed and garbage data added to forge a signature when a low public exponent is being used.\n## Remediation\nUpgrade `node-forge` to version 1.3.0 or higher.\n## References\n- [GitHub Commit](https://github.com/digitalbazaar/forge/commit/3f0b49a0573ef1bb7af7f5673c0cfebf00424df1)\n",
      "disclosureTime": "2022-03-20T08:57:14Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "1.3.0"
      ],
      "id": "SNYK-JS-NODEFORGE-2430339",
      "identifiers": {
        "CWE": [
          "CWE-347"
        ],
        "GHSA": [
          "GHSA-x4jg-mjrx-434g"
        ],
        "CVE": [
          "CVE-2022-24772"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-03-20T16:39:52.726979Z",
      "moduleName": "node-forge",
      "packageManager": "npm",
      "packageName": "node-forge",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-03-20T16:39:52.700898Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/digitalbazaar/forge/commit/3f0b49a0573ef1bb7af7f5673c0cfebf00424df1"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Improper Verification of Cryptographic Signature",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.3.0"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "webpack-dev-server@3.11.0",
        "selfsigned@1.10.11",
        "node-forge@0.10.0"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "webpack-dev-server@3.11.0",
        "selfsigned@1.10.13",
        "node-forge@1.3.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "node-forge",
      "version": "0.10.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L",
      "alternativeIds": [],
      "creationTime": "2022-03-20T09:20:18.671201Z",
      "credit": [
        "Moosa Yahyazadeh"
      ],
      "cvssScore": 5.6,
      "description": "## Overview\n[node-forge](https://github.com/digitalbazaar/forge) is a JavaScript implementations of network transports, cryptography, ciphers, PKI, message digests, and various utilities.\n\nAffected versions of this package are vulnerable to Improper Verification of Cryptographic Signature due to RSA`s `PKCS#1` v1.5 signature verification code which is lenient in checking the digest algorithm structure. This can allow a crafted structure that steals padding bytes and uses unchecked portion of the PKCS#1 encoded message to forge a signature when a low public exponent is being used.\n## Remediation\nUpgrade `node-forge` to version 1.3.0 or higher.\n## References\n- [GitHub Commit](https://github.com/digitalbazaar/forge/commit/3f0b49a0573ef1bb7af7f5673c0cfebf00424df1)\n",
      "disclosureTime": "2022-03-20T09:07:01Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "1.3.0"
      ],
      "id": "SNYK-JS-NODEFORGE-2430341",
      "identifiers": {
        "CWE": [
          "CWE-347"
        ],
        "GHSA": [
          "GHSA-cfm4-qjh2-4765"
        ],
        "CVE": [
          "CVE-2022-24771"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-03-20T16:39:53.013303Z",
      "moduleName": "node-forge",
      "packageManager": "npm",
      "packageName": "node-forge",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-03-20T16:39:53.005772Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/digitalbazaar/forge/commit/3f0b49a0573ef1bb7af7f5673c0cfebf00424df1"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Improper Verification of Cryptographic Signature",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.3.0"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "webpack-dev-server@3.11.0",
        "selfsigned@1.10.11",
        "node-forge@0.10.0"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "webpack-dev-server@3.11.0",
        "selfsigned@1.10.13",
        "node-forge@1.3.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "node-forge",
      "version": "0.10.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "alternativeIds": [],
      "creationTime": "2021-09-17T14:35:00.993728Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) when parsing crafted invalid CSS nth-checks, due to the sub-pattern `\\s*(?:([+-]?)\\s*(\\d+))?` in `RE_NTH_ELEMENT` with quantified overlapping adjacency.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `nth-check` to version 2.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/fb55/nth-check/commit/9894c1d2010870c351f66c6f6efcf656e26bb726)\n",
      "disclosureTime": "2021-09-17T14:32:39Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "2.0.1"
      ],
      "id": "SNYK-JS-NTHCHECK-1586032",
      "identifiers": {
        "CWE": [
          "CWE-1333"
        ],
        "CVE": [
          "CVE-2021-3803"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-13T10:42:22.281450Z",
      "moduleName": "nth-check",
      "packageManager": "npm",
      "packageName": "nth-check",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-09-17T15:20:51Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/fb55/nth-check/commit/9894c1d2010870c351f66c6f6efcf656e26bb726"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<2.0.1"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "acme-review@1.0.0",
        "enzyme@3.11.0",
        "cheerio@1.0.0-rc.9",
        "cheerio-select@1.4.0",
        "css-select@4.1.2",
        "nth-check@2.0.0"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "nth-check",
      "version": "2.0.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "alternativeIds": [],
      "creationTime": "2021-09-17T14:35:00.993728Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) when parsing crafted invalid CSS nth-checks, due to the sub-pattern `\\s*(?:([+-]?)\\s*(\\d+))?` in `RE_NTH_ELEMENT` with quantified overlapping adjacency.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `nth-check` to version 2.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/fb55/nth-check/commit/9894c1d2010870c351f66c6f6efcf656e26bb726)\n",
      "disclosureTime": "2021-09-17T14:32:39Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "2.0.1"
      ],
      "id": "SNYK-JS-NTHCHECK-1586032",
      "identifiers": {
        "CWE": [
          "CWE-1333"
        ],
        "CVE": [
          "CVE-2021-3803"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-13T10:42:22.281450Z",
      "moduleName": "nth-check",
      "packageManager": "npm",
      "packageName": "nth-check",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-09-17T15:20:51Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/fb55/nth-check/commit/9894c1d2010870c351f66c6f6efcf656e26bb726"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<2.0.1"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "acme-review@1.0.0",
        "react-native-svg@9.13.6",
        "css-select@2.1.0",
        "nth-check@1.0.2"
      ],
      "upgradePath": [
        false,
        "react-native-svg@12.3.0",
        "css-select@4.2.1",
        "nth-check@2.0.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "nth-check",
      "version": "1.0.2"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "alternativeIds": [],
      "creationTime": "2021-09-17T14:35:00.993728Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) when parsing crafted invalid CSS nth-checks, due to the sub-pattern `\\s*(?:([+-]?)\\s*(\\d+))?` in `RE_NTH_ELEMENT` with quantified overlapping adjacency.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `nth-check` to version 2.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/fb55/nth-check/commit/9894c1d2010870c351f66c6f6efcf656e26bb726)\n",
      "disclosureTime": "2021-09-17T14:32:39Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "2.0.1"
      ],
      "id": "SNYK-JS-NTHCHECK-1586032",
      "identifiers": {
        "CWE": [
          "CWE-1333"
        ],
        "CVE": [
          "CVE-2021-3803"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-04-13T10:42:22.281450Z",
      "moduleName": "nth-check",
      "packageManager": "npm",
      "packageName": "nth-check",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-09-17T15:20:51Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/fb55/nth-check/commit/9894c1d2010870c351f66c6f6efcf656e26bb726"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<2.0.1"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "@svgr/webpack@4.3.3",
        "@svgr/plugin-svgo@4.3.1",
        "svgo@1.3.2",
        "css-select@2.1.0",
        "nth-check@1.0.2"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "nth-check",
      "version": "1.0.2"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
      "alternativeIds": [],
      "creationTime": "2022-05-23T12:23:14.606493Z",
      "credit": [
        "Diego Perini"
      ],
      "cvssScore": 6.2,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Denial of Service (DoS) when it is provided the invalid selector `_:-ms-fullscreen`. This triggers an infinite loop.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nA fix was pushed into the `master` branch but not yet published.\n## References\n- [GitHub Commit](https://github.com/dperini/nwsapi/commit/ab9cde1eb05ec9badfc3abaf15687b1a6f9e9ad3)\n- [GitHub Issue](https://github.com/dperini/nwsapi/issues/46#issuecomment-1134223659)\n",
      "disclosureTime": "2022-05-23T12:06:55Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [],
      "id": "SNYK-JS-NWSAPI-2841516",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": []
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-06-15T15:35:57.288474Z",
      "moduleName": "nwsapi",
      "packageManager": "npm",
      "packageName": "nwsapi",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-06-15T15:35:57.286030Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/dperini/nwsapi/commit/ab9cde1eb05ec9badfc3abaf15687b1a6f9e9ad3"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/dperini/nwsapi/issues/46%23issuecomment-1134223659"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Denial of Service (DoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "*"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "jest-environment-jsdom-fourteen@1.0.1",
        "jsdom@14.1.0",
        "nwsapi@2.2.0"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "nwsapi",
      "version": "2.2.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
      "alternativeIds": [],
      "creationTime": "2022-05-23T12:23:14.606493Z",
      "credit": [
        "Diego Perini"
      ],
      "cvssScore": 6.2,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Denial of Service (DoS) when it is provided the invalid selector `_:-ms-fullscreen`. This triggers an infinite loop.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nA fix was pushed into the `master` branch but not yet published.\n## References\n- [GitHub Commit](https://github.com/dperini/nwsapi/commit/ab9cde1eb05ec9badfc3abaf15687b1a6f9e9ad3)\n- [GitHub Issue](https://github.com/dperini/nwsapi/issues/46#issuecomment-1134223659)\n",
      "disclosureTime": "2022-05-23T12:06:55Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [],
      "id": "SNYK-JS-NWSAPI-2841516",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": []
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-06-15T15:35:57.288474Z",
      "moduleName": "nwsapi",
      "packageManager": "npm",
      "packageName": "nwsapi",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-06-15T15:35:57.286030Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/dperini/nwsapi/commit/ab9cde1eb05ec9badfc3abaf15687b1a6f9e9ad3"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/dperini/nwsapi/issues/46%23issuecomment-1134223659"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Denial of Service (DoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "*"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "jest-enzyme@7.1.2",
        "jest-environment-enzyme@7.1.2",
        "jest-environment-jsdom@24.9.0",
        "jsdom@11.12.0",
        "nwsapi@2.2.0"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "nwsapi",
      "version": "2.2.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
      "alternativeIds": [],
      "creationTime": "2022-05-23T12:23:14.606493Z",
      "credit": [
        "Diego Perini"
      ],
      "cvssScore": 6.2,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Denial of Service (DoS) when it is provided the invalid selector `_:-ms-fullscreen`. This triggers an infinite loop.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nA fix was pushed into the `master` branch but not yet published.\n## References\n- [GitHub Commit](https://github.com/dperini/nwsapi/commit/ab9cde1eb05ec9badfc3abaf15687b1a6f9e9ad3)\n- [GitHub Issue](https://github.com/dperini/nwsapi/issues/46#issuecomment-1134223659)\n",
      "disclosureTime": "2022-05-23T12:06:55Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [],
      "id": "SNYK-JS-NWSAPI-2841516",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": []
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-06-15T15:35:57.288474Z",
      "moduleName": "nwsapi",
      "packageManager": "npm",
      "packageName": "nwsapi",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-06-15T15:35:57.286030Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/dperini/nwsapi/commit/ab9cde1eb05ec9badfc3abaf15687b1a6f9e9ad3"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/dperini/nwsapi/issues/46%23issuecomment-1134223659"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Denial of Service (DoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "*"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "jest@24.9.0",
        "jest-cli@24.9.0",
        "@jest/core@24.9.0",
        "@jest/reporters@24.9.0",
        "jest-runtime@24.9.0",
        "jest-config@24.9.0",
        "jest-environment-jsdom@24.9.0",
        "jsdom@11.12.0",
        "nwsapi@2.2.0"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "nwsapi",
      "version": "2.2.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-02-19T16:00:22.449519Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[path-parse](https://www.npmjs.org/package/path-parse) is a Node.js path.parse() ponyfill\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `splitDeviceRe`, `splitTailRe`, and `splitPathRe` regular expressions. ReDoS exhibits polynomial worst-case time complexity.\r\n\r\n### PoC\r\n```\r\nvar pathParse = require('path-parse');\r\nfunction build_attack(n) {\r\n    var ret = \"\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/\"\r\n    }\r\n    return ret + \"◎\";\r\n}\r\n\r\nfor(var i = 1; i <= 5000000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        pathParse(attack_str);\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `path-parse` to version 1.0.7 or higher.\n## References\n- [GitHub Issue 1](https://github.com/jbgutierrez/path-parse/issues/8)\n- [GitHub PR](https://github.com/jbgutierrez/path-parse/pull/10)\n",
      "disclosureTime": "2021-02-19T15:54:01Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "1.0.7"
      ],
      "id": "SNYK-JS-PATHPARSE-1077067",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23343"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.024375Z",
      "moduleName": "path-parse",
      "packageManager": "npm",
      "packageName": "path-parse",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-05-04T08:38:49Z",
      "references": [
        {
          "title": "GitHub Issue 1",
          "url": "https://github.com/jbgutierrez/path-parse/issues/8"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/jbgutierrez/path-parse/pull/10"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.0.7"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "@babel/core@7.9.0",
        "resolve@1.15.0",
        "path-parse@1.0.6"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "@babel/core@7.9.0",
        "resolve@1.15.0",
        "path-parse@1.0.7"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "path-parse",
      "version": "1.0.6"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-02-19T16:00:22.449519Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[path-parse](https://www.npmjs.org/package/path-parse) is a Node.js path.parse() ponyfill\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `splitDeviceRe`, `splitTailRe`, and `splitPathRe` regular expressions. ReDoS exhibits polynomial worst-case time complexity.\r\n\r\n### PoC\r\n```\r\nvar pathParse = require('path-parse');\r\nfunction build_attack(n) {\r\n    var ret = \"\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/\"\r\n    }\r\n    return ret + \"◎\";\r\n}\r\n\r\nfor(var i = 1; i <= 5000000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        pathParse(attack_str);\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `path-parse` to version 1.0.7 or higher.\n## References\n- [GitHub Issue 1](https://github.com/jbgutierrez/path-parse/issues/8)\n- [GitHub PR](https://github.com/jbgutierrez/path-parse/pull/10)\n",
      "disclosureTime": "2021-02-19T15:54:01Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "1.0.7"
      ],
      "id": "SNYK-JS-PATHPARSE-1077067",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23343"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.024375Z",
      "moduleName": "path-parse",
      "packageManager": "npm",
      "packageName": "path-parse",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-05-04T08:38:49Z",
      "references": [
        {
          "title": "GitHub Issue 1",
          "url": "https://github.com/jbgutierrez/path-parse/issues/8"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/jbgutierrez/path-parse/pull/10"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.0.7"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "@svgr/webpack@4.3.3",
        "@babel/preset-env@7.14.1",
        "babel-plugin-polyfill-corejs2@0.2.0",
        "@babel/helper-define-polyfill-provider@0.2.0",
        "resolve@1.20.0",
        "path-parse@1.0.6"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "@svgr/webpack@4.3.3",
        "@babel/preset-env@7.14.1",
        "babel-plugin-polyfill-corejs2@0.2.0",
        "@babel/helper-define-polyfill-provider@0.2.0",
        "resolve@1.20.0",
        "path-parse@1.0.7"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "path-parse",
      "version": "1.0.6"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-02-19T16:00:22.449519Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[path-parse](https://www.npmjs.org/package/path-parse) is a Node.js path.parse() ponyfill\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `splitDeviceRe`, `splitTailRe`, and `splitPathRe` regular expressions. ReDoS exhibits polynomial worst-case time complexity.\r\n\r\n### PoC\r\n```\r\nvar pathParse = require('path-parse');\r\nfunction build_attack(n) {\r\n    var ret = \"\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/\"\r\n    }\r\n    return ret + \"◎\";\r\n}\r\n\r\nfor(var i = 1; i <= 5000000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        pathParse(attack_str);\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `path-parse` to version 1.0.7 or higher.\n## References\n- [GitHub Issue 1](https://github.com/jbgutierrez/path-parse/issues/8)\n- [GitHub PR](https://github.com/jbgutierrez/path-parse/pull/10)\n",
      "disclosureTime": "2021-02-19T15:54:01Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "1.0.7"
      ],
      "id": "SNYK-JS-PATHPARSE-1077067",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23343"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.024375Z",
      "moduleName": "path-parse",
      "packageManager": "npm",
      "packageName": "path-parse",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-05-04T08:38:49Z",
      "references": [
        {
          "title": "GitHub Issue 1",
          "url": "https://github.com/jbgutierrez/path-parse/issues/8"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/jbgutierrez/path-parse/pull/10"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.0.7"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "jest-enzyme@7.1.2",
        "jest-environment-enzyme@7.1.2",
        "jest-environment-jsdom@24.9.0",
        "@jest/environment@24.9.0",
        "@jest/transform@24.9.0",
        "babel-plugin-istanbul@5.2.0",
        "test-exclude@5.2.3",
        "read-pkg-up@4.0.0",
        "read-pkg@3.0.0",
        "normalize-package-data@2.5.0",
        "resolve@1.20.0",
        "path-parse@1.0.6"
      ],
      "upgradePath": [
        false,
        "jest-enzyme@7.1.2",
        "jest-environment-enzyme@7.1.2",
        "jest-environment-jsdom@24.9.0",
        "@jest/environment@24.9.0",
        "@jest/transform@24.9.0",
        "babel-plugin-istanbul@5.2.0",
        "test-exclude@5.2.3",
        "read-pkg-up@4.0.0",
        "read-pkg@3.0.0",
        "normalize-package-data@2.5.0",
        "resolve@1.20.0",
        "path-parse@1.0.7"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "path-parse",
      "version": "1.0.6"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "css-loader@3.4.2",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "css-loader@3.4.2",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "css-loader@3.4.2",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "css-loader@3.4.2",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-flexbugs-fixes@4.1.0",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-flexbugs-fixes@4.1.0",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-flexbugs-fixes@4.1.0",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-flexbugs-fixes@4.1.0",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-loader@3.0.0",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-loader@3.0.0",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-loader@3.0.0",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-loader@3.0.0",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-normalize@8.0.1",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-normalize@8.0.1",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-normalize@8.0.1",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-normalize@8.0.1",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-safe-parser@4.0.1",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-safe-parser@4.0.1",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-safe-parser@4.0.1",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-safe-parser@4.0.1",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "css-loader@3.4.2",
        "icss-utils@4.1.1",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "css-loader@3.4.2",
        "icss-utils@4.1.1",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "css-loader@3.4.2",
        "icss-utils@4.1.1",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "css-loader@3.4.2",
        "icss-utils@4.1.1",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "css-loader@3.4.2",
        "postcss-modules-extract-imports@2.0.0",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "css-loader@3.4.2",
        "postcss-modules-extract-imports@2.0.0",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "css-loader@3.4.2",
        "postcss-modules-extract-imports@2.0.0",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "css-loader@3.4.2",
        "postcss-modules-extract-imports@2.0.0",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "css-loader@3.4.2",
        "postcss-modules-local-by-default@3.0.3",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "css-loader@3.4.2",
        "postcss-modules-local-by-default@3.0.3",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "css-loader@3.4.2",
        "postcss-modules-local-by-default@3.0.3",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "css-loader@3.4.2",
        "postcss-modules-local-by-default@3.0.3",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "css-loader@3.4.2",
        "postcss-modules-scope@2.2.0",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "css-loader@3.4.2",
        "postcss-modules-scope@2.2.0",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "css-loader@3.4.2",
        "postcss-modules-scope@2.2.0",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "css-loader@3.4.2",
        "postcss-modules-scope@2.2.0",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "css-loader@3.4.2",
        "postcss-modules-values@3.0.0",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "css-loader@3.4.2",
        "postcss-modules-values@3.0.0",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "css-loader@3.4.2",
        "postcss-modules-values@3.0.0",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "css-loader@3.4.2",
        "postcss-modules-values@3.0.0",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-normalize@8.0.1",
        "postcss-browser-comments@3.0.0",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-normalize@8.0.1",
        "postcss-browser-comments@3.0.0",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-normalize@8.0.1",
        "postcss-browser-comments@3.0.0",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-normalize@8.0.1",
        "postcss-browser-comments@3.0.0",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "autoprefixer@9.8.6",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "autoprefixer@9.8.6",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "autoprefixer@9.8.6",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "autoprefixer@9.8.6",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "css-blank-pseudo@0.1.4",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "css-blank-pseudo@0.1.4",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "css-blank-pseudo@0.1.4",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "css-blank-pseudo@0.1.4",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "css-has-pseudo@0.10.0",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "css-has-pseudo@0.10.0",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "css-has-pseudo@0.10.0",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "css-has-pseudo@0.10.0",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "css-prefers-color-scheme@3.1.1",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "css-prefers-color-scheme@3.1.1",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "css-prefers-color-scheme@3.1.1",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "css-prefers-color-scheme@3.1.1",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-attribute-case-insensitive@4.0.2",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-attribute-case-insensitive@4.0.2",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-attribute-case-insensitive@4.0.2",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-attribute-case-insensitive@4.0.2",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-color-functional-notation@2.0.1",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-color-functional-notation@2.0.1",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-color-functional-notation@2.0.1",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-color-functional-notation@2.0.1",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-color-gray@5.0.0",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-color-gray@5.0.0",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-color-gray@5.0.0",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-color-gray@5.0.0",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-color-hex-alpha@5.0.3",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-color-hex-alpha@5.0.3",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-color-hex-alpha@5.0.3",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-color-hex-alpha@5.0.3",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-color-mod-function@3.0.3",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-color-mod-function@3.0.3",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-color-mod-function@3.0.3",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-color-mod-function@3.0.3",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-color-rebeccapurple@4.0.1",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-color-rebeccapurple@4.0.1",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-color-rebeccapurple@4.0.1",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-color-rebeccapurple@4.0.1",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-custom-media@7.0.8",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-custom-media@7.0.8",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-custom-media@7.0.8",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-custom-media@7.0.8",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-custom-properties@8.0.11",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-custom-properties@8.0.11",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-custom-properties@8.0.11",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-custom-properties@8.0.11",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-custom-selectors@5.1.2",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-custom-selectors@5.1.2",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-custom-selectors@5.1.2",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-custom-selectors@5.1.2",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-dir-pseudo-class@5.0.0",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-dir-pseudo-class@5.0.0",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-dir-pseudo-class@5.0.0",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-dir-pseudo-class@5.0.0",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-double-position-gradients@1.0.0",
        "postcss@7.0.35"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-double-position-gradients@1.0.0",
        "postcss@7.0.35"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-env-function@2.0.2",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-env-function@2.0.2",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-env-function@2.0.2",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-env-function@2.0.2",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-focus-visible@4.0.0",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-focus-visible@4.0.0",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-focus-visible@4.0.0",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-focus-visible@4.0.0",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-focus-within@3.0.0",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-focus-within@3.0.0",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-focus-within@3.0.0",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-focus-within@3.0.0",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-font-variant@4.0.1",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-font-variant@4.0.1",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-font-variant@4.0.1",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-font-variant@4.0.1",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-gap-properties@2.0.0",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-gap-properties@2.0.0",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-gap-properties@2.0.0",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-gap-properties@2.0.0",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-image-set-function@3.0.1",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-image-set-function@3.0.1",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-image-set-function@3.0.1",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-image-set-function@3.0.1",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-initial@3.0.4",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-initial@3.0.4",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-initial@3.0.4",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-initial@3.0.4",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-lab-function@2.0.1",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-lab-function@2.0.1",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-lab-function@2.0.1",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-lab-function@2.0.1",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-logical@3.0.0",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-logical@3.0.0",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-logical@3.0.0",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-logical@3.0.0",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-media-minmax@4.0.0",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-media-minmax@4.0.0",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-media-minmax@4.0.0",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-media-minmax@4.0.0",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-nesting@7.0.1",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-nesting@7.0.1",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-nesting@7.0.1",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-nesting@7.0.1",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-overflow-shorthand@2.0.0",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-overflow-shorthand@2.0.0",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-overflow-shorthand@2.0.0",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-overflow-shorthand@2.0.0",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-page-break@2.0.0",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-page-break@2.0.0",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-page-break@2.0.0",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-page-break@2.0.0",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-place@4.0.1",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-place@4.0.1",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-place@4.0.1",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-place@4.0.1",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-pseudo-class-any-link@6.0.0",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-pseudo-class-any-link@6.0.0",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-pseudo-class-any-link@6.0.0",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-pseudo-class-any-link@6.0.0",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-replace-overflow-wrap@3.0.0",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-replace-overflow-wrap@3.0.0",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-replace-overflow-wrap@3.0.0",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-replace-overflow-wrap@3.0.0",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-selector-matches@4.0.0",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-selector-matches@4.0.0",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-selector-matches@4.0.0",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-selector-matches@4.0.0",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-selector-not@4.0.1",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-selector-not@4.0.1",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-selector-not@4.0.1",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "postcss-preset-env@6.7.0",
        "postcss-selector-not@4.0.1",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "css-declaration-sorter@4.0.1",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "css-declaration-sorter@4.0.1",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "css-declaration-sorter@4.0.1",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "css-declaration-sorter@4.0.1",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "cssnano-util-raw-cache@4.0.1",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "cssnano-util-raw-cache@4.0.1",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "cssnano-util-raw-cache@4.0.1",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "cssnano-util-raw-cache@4.0.1",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-calc@7.0.5",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-calc@7.0.5",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-calc@7.0.5",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-calc@7.0.5",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-colormin@4.0.3",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-colormin@4.0.3",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-colormin@4.0.3",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-colormin@4.0.3",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-convert-values@4.0.1",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-convert-values@4.0.1",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-convert-values@4.0.1",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-convert-values@4.0.1",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-discard-comments@4.0.2",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-discard-comments@4.0.2",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-discard-comments@4.0.2",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-discard-comments@4.0.2",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-discard-duplicates@4.0.2",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-discard-duplicates@4.0.2",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-discard-duplicates@4.0.2",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-discard-duplicates@4.0.2",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-discard-empty@4.0.1",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-discard-empty@4.0.1",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-discard-empty@4.0.1",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-discard-empty@4.0.1",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-discard-overridden@4.0.1",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-discard-overridden@4.0.1",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-discard-overridden@4.0.1",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-discard-overridden@4.0.1",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-merge-longhand@4.0.11",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-merge-longhand@4.0.11",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-merge-longhand@4.0.11",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-merge-longhand@4.0.11",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-merge-rules@4.0.3",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-merge-rules@4.0.3",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-merge-rules@4.0.3",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-merge-rules@4.0.3",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-minify-font-values@4.0.2",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-minify-font-values@4.0.2",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-minify-font-values@4.0.2",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-minify-font-values@4.0.2",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-minify-gradients@4.0.2",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-minify-gradients@4.0.2",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-minify-gradients@4.0.2",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-minify-gradients@4.0.2",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-minify-params@4.0.2",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-minify-params@4.0.2",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-minify-params@4.0.2",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-minify-params@4.0.2",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-minify-selectors@4.0.2",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-minify-selectors@4.0.2",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-minify-selectors@4.0.2",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-minify-selectors@4.0.2",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-normalize-charset@4.0.1",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-normalize-charset@4.0.1",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-normalize-charset@4.0.1",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-normalize-charset@4.0.1",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-normalize-display-values@4.0.2",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-normalize-display-values@4.0.2",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-normalize-display-values@4.0.2",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-normalize-display-values@4.0.2",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-normalize-positions@4.0.2",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-normalize-positions@4.0.2",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-normalize-positions@4.0.2",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-normalize-positions@4.0.2",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-normalize-repeat-style@4.0.2",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-normalize-repeat-style@4.0.2",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-normalize-repeat-style@4.0.2",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-normalize-repeat-style@4.0.2",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-normalize-string@4.0.2",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-normalize-string@4.0.2",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-normalize-string@4.0.2",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-normalize-string@4.0.2",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-normalize-timing-functions@4.0.2",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-normalize-timing-functions@4.0.2",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-normalize-timing-functions@4.0.2",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-normalize-timing-functions@4.0.2",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-normalize-unicode@4.0.1",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-normalize-unicode@4.0.1",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-normalize-unicode@4.0.1",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-normalize-unicode@4.0.1",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-normalize-url@4.0.1",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-normalize-url@4.0.1",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-normalize-url@4.0.1",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-normalize-url@4.0.1",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-normalize-whitespace@4.0.2",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-normalize-whitespace@4.0.2",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-normalize-whitespace@4.0.2",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-normalize-whitespace@4.0.2",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-ordered-values@4.1.2",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-ordered-values@4.1.2",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-ordered-values@4.1.2",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-ordered-values@4.1.2",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-reduce-initial@4.0.3",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-reduce-initial@4.0.3",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-reduce-initial@4.0.3",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-reduce-initial@4.0.3",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-reduce-transforms@4.0.2",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-reduce-transforms@4.0.2",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-reduce-transforms@4.0.2",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-reduce-transforms@4.0.2",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-svgo@4.0.3",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-svgo@4.0.3",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-svgo@4.0.3",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-svgo@4.0.3",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-unique-selectors@4.0.1",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-unique-selectors@4.0.1",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-unique-selectors@4.0.1",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-unique-selectors@4.0.1",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-merge-longhand@4.0.11",
        "stylehacks@4.0.3",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-merge-longhand@4.0.11",
        "stylehacks@4.0.3",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-merge-longhand@4.0.11",
        "stylehacks@4.0.3",
        "postcss@7.0.35"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "optimize-css-assets-webpack-plugin@5.0.3",
        "cssnano@4.1.11",
        "cssnano-preset-default@4.0.8",
        "postcss-merge-longhand@4.0.11",
        "stylehacks@4.0.3",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.35"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-05T10:34:06.518802Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) during source map parsing.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}/*# sourceMappingURL=\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \" \"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 7.0.36, 8.2.10 or higher.\n## References\n- [Fix Commit #1](https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5)\n- [Fix Commit #2](https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4)\n- [GitHub Advisory](https://github.com/advisories/GHSA-hwj9-h5mp-3pm3)\n",
      "disclosureTime": "2021-04-05T10:32:44Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.0.36",
        "8.2.10"
      ],
      "id": "SNYK-JS-POSTCSS-1090595",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-hwj9-h5mp-3pm3"
        ],
        "CVE": [
          "CVE-2021-23368"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.030348Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-12T13:07:14Z",
      "references": [
        {
          "title": "Fix Commit #1",
          "url": "https://github.com/postcss/postcss/commit/b6f3e4d5a8d7504d553267f80384373af3a3dec5"
        },
        {
          "title": "Fix Commit #2",
          "url": "https://github.com/postcss/postcss/commit/8682b1e4e328432ba692bed52326e84439cec9e4"
        },
        {
          "title": "GitHub Advisory",
          "url": "https://github.com/advisories/GHSA-hwj9-h5mp-3pm3"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.0.36",
          ">=8.0.0 <8.2.10"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "resolve-url-loader@3.1.2",
        "postcss@7.0.21"
      ],
      "upgradePath": [
        false,
        "react-scripts@4.0.0",
        "resolve-url-loader@3.1.4",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.21"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-04-26T15:22:41.908415Z",
      "credit": [
        "Yeting Li"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[postcss](https://www.npmjs.com/package/postcss) is a PostCSS is a tool for transforming styles with JS plugins.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `getAnnotationURL()` and `loadAnnotation()` in `lib/previous-map.js`. The vulnerable regexes are caused mainly by the sub-pattern `\\/\\*\\s*# sourceMappingURL=(.*)`.\r\n\r\n### PoC\r\n```\r\nvar postcss = require(\"postcss\")\r\nfunction build_attack(n) {\r\n    var ret = \"a{}\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/*# sourceMappingURL=\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\n// postcss.parse('a{}/*# sourceMappingURL=a.css.map */')\r\nfor(var i = 1; i <= 500000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        try{\r\n            postcss.parse(attack_str)\r\n            var time_cost = Date.now() - time;\r\n            console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n            }\r\n        catch(e){\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\");\r\n        }\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `postcss` to version 8.2.13, 7.0.36 or higher.\n## References\n- [GitHub Commit](https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956)\n",
      "disclosureTime": "2021-04-26T15:09:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "8.2.13",
        "7.0.36"
      ],
      "id": "SNYK-JS-POSTCSS-1255640",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-23382"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.050563Z",
      "moduleName": "postcss",
      "packageManager": "npm",
      "packageName": "postcss",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2021-04-26T16:18:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/postcss/postcss/commit/2b1d04c867995e55124e0a165b7c6622c1735956"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=8.0.0 <8.2.13",
          "<7.0.36"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "resolve-url-loader@3.1.2",
        "postcss@7.0.21"
      ],
      "upgradePath": [
        false,
        "react-scripts@4.0.0",
        "resolve-url-loader@3.1.4",
        "postcss@7.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "postcss",
      "version": "7.0.21"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-10-08T12:15:58.593115Z",
      "credit": [
        "Ready Research"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). An attacker that is able to provide a crafted input to the strip functionality may cause an application to consume an excessive amount of CPU.\r\n\r\n### PoC\r\n```\r\nconst strip = require('prompts/lib/util/strip.js');\r\nfor(var i = 1; i <= 5000; i++) {\r\nvar time = Date.now();\r\nvar attack_str = \"\\u001B[\"+\";\".repeat(i*1000);\r\nstrip(attack_str)\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `prompts` to version 2.4.2 or higher.\n## References\n- [GitHub PR](https://github.com/terkelg/prompts/pull/333)\n- [GitHub Release](https://github.com/terkelg/prompts/releases/tag/v2.4.2)\n",
      "disclosureTime": "2021-10-08T12:09:35Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "2.4.2"
      ],
      "id": "SNYK-JS-PROMPTS-1729737",
      "identifiers": {
        "CWE": [
          "CWE-1333"
        ],
        "CVE": [
          "CVE-2021-3868"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-10-18T11:52:51.626359Z",
      "moduleName": "prompts",
      "packageManager": "npm",
      "packageName": "prompts",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-10-08T13:48:51Z",
      "references": [
        {
          "title": "GitHub PR",
          "url": "https://github.com/terkelg/prompts/pull/333"
        },
        {
          "title": "GitHub Release",
          "url": "https://github.com/terkelg/prompts/releases/tag/v2.4.2"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<2.4.2"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "jest@24.9.0",
        "jest-cli@24.9.0",
        "prompts@2.4.1"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "jest@24.9.0",
        "jest-cli@24.9.0",
        "prompts@2.4.2"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "prompts",
      "version": "2.4.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-03-09T10:16:13.615967Z",
      "credit": [
        "zpbrent(zhou",
        "peng@shu)"
      ],
      "cvssScore": 5.6,
      "description": "## Overview\n[react-dev-utils](https://www.npmjs.com/package/react-dev-utils) is an includes some utilities used by Create React App.\n\nAffected versions of this package are vulnerable to Command Injection via `getProcessForPort` - where an input argument is concatenated into a command string to be executed. This function is typically used from react-scripts (in Create React App projects), where the usage is safe. Only when this function is manually invoked with user-provided values (ie: by custom code) is there the potential for command injection. If you're consuming it from react-scripts then this issue does not affect you.\n## Remediation\nUpgrade `react-dev-utils` to version 11.0.4 or higher.\n## References\n- [Facebook Advisory](https://www.facebook.com/security/advisories/cve-2021-24033)\n- [POC: GitHub PR](https://github.com/facebook/create-react-app/pull/10644)\n",
      "disclosureTime": "2021-03-09T10:14:45Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "11.0.4"
      ],
      "id": "SNYK-JS-REACTDEVUTILS-1083268",
      "identifiers": {
        "CWE": [
          "CWE-78"
        ],
        "GHSA": [
          "GHSA-5q6m-3h65-w53x"
        ],
        "CVE": [
          "CVE-2021-24033"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-09-24T13:25:49.294067Z",
      "moduleName": "react-dev-utils",
      "packageManager": "npm",
      "packageName": "react-dev-utils",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-03-09T15:18:51Z",
      "references": [
        {
          "title": "Facebook Advisory",
          "url": "https://www.facebook.com/security/advisories/cve-2021-24033"
        },
        {
          "title": "POC: GitHub PR",
          "url": "https://github.com/facebook/create-react-app/pull/10644"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Command Injection",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<11.0.4"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "react-dev-utils@10.2.1"
      ],
      "upgradePath": [
        false,
        "react-scripts@4.0.0",
        "react-dev-utils@11.0.4"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "react-dev-utils",
      "version": "10.2.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2021-10-22T13:41:32.060118Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[shell-quote](https://www.npmjs.com/package/shell-quote) is a package used to quote and parse shell commands.\n\nAffected versions of this package are vulnerable to Remote Code Execution (RCE). An attacker can inject unescaped shell metacharacters through a regex designed to support Windows drive letters. If the output of this package is passed to a real shell as a quoted argument to a command with exec(), an attacker can inject arbitrary commands. This is because the Windows drive letter regex character class is `{A-z]` instead of the correct `{A-Za-z]`. Several shell metacharacters exist in the space between capital letter Z and lower case letter a, such as the backtick character.\n## Remediation\nUpgrade `shell-quote` to version 1.7.3 or higher.\n## References\n- [GitHub ChangeLog](https://github.com/substack/node-shell-quote/blob/master/CHANGELOG.md#173)\n- [GitHub Commit](https://github.com/substack/node-shell-quote/commit/5799416ed454aa4ec9afafc895b4e31760ea1abe)\n",
      "disclosureTime": "2021-10-22T13:39:50Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "1.7.3"
      ],
      "id": "SNYK-JS-SHELLQUOTE-1766506",
      "identifiers": {
        "CWE": [
          "CWE-94"
        ],
        "CVE": [
          "CVE-2021-42740"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-06-23T09:36:55.477345Z",
      "moduleName": "shell-quote",
      "packageManager": "npm",
      "packageName": "shell-quote",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-10-22T14:42:50.335737Z",
      "references": [
        {
          "title": "GitHub ChangeLog",
          "url": "https://github.com/substack/node-shell-quote/blob/master/CHANGELOG.md%23173"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/substack/node-shell-quote/commit/5799416ed454aa4ec9afafc895b4e31760ea1abe"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Remote Code Execution (RCE)",
      "insights": {
        "triageAdvice": "This vulnerability is only applicable on Windows operating system"
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.7.3"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "react-dev-utils@10.2.1",
        "shell-quote@1.7.2"
      ],
      "upgradePath": [
        false,
        "react-scripts@5.0.0",
        "react-dev-utils@12.0.0",
        "shell-quote@1.7.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "shell-quote",
      "version": "1.7.2"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:R",
      "alternativeIds": [],
      "creationTime": "2021-04-15T12:21:08.776563Z",
      "credit": [
        "Yeting Li",
        "Ben Caller"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n[ssri](https://github.com/zkat/ssri) is a Standard Subresource Integrity library --  parses, serializes, generates, and verifies integrity metadata according to the SRI spec.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). `ssri` processes SRIs using a regular expression which is vulnerable to a denial of service. Malicious SRIs could take an extremely long time to process, leading to denial of service. This issue only affects consumers using the strict option.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ssri` to version 6.0.2, 7.1.1, 8.0.1 or higher.\n## References\n- [GitHub Additional Information](https://github.com/yetingli/SaveResults/blob/main/pdf/ssri-redos.pdf)\n- [GitHub Commit](https://github.com/npm/ssri/commit/76e223317d971f19e4db8191865bdad5edee40d2)\n",
      "disclosureTime": "2018-02-14T20:39:06Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "6.0.2",
        "7.1.1",
        "8.0.1"
      ],
      "id": "SNYK-JS-SSRI-1246392",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "NSP": [
          "565"
        ],
        "CVE": [
          "CVE-2021-27290"
        ],
        "GHSA": [
          "GHSA-vx3p-948g-6vhq"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-07-23T14:33:16.198456Z",
      "moduleName": "ssri",
      "packageManager": "npm",
      "packageName": "ssri",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-04-15T14:43:24Z",
      "references": [
        {
          "title": "GitHub Additional Information",
          "url": "https://github.com/yetingli/SaveResults/blob/main/pdf/ssri-redos.pdf"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/npm/ssri/commit/76e223317d971f19e4db8191865bdad5edee40d2"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=5.2.2 <6.0.2",
          ">=7.0.0 <7.1.1",
          ">=8.0.0 <8.0.1"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "terser-webpack-plugin@2.3.8",
        "cacache@13.0.1",
        "ssri@7.1.0"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "terser-webpack-plugin@2.3.8",
        "cacache@13.0.1",
        "ssri@7.1.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ssri",
      "version": "7.1.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2021-09-08T12:39:02.502663Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the main functionality.\r\n\r\n### PoC\r\n```\r\nvar tmpl = require(\"tmpl\")\r\nfor(var i = 1; i <= 1000; i++) {\r\n        var time = Date.now();\r\n        payload = \"hello, \" + \"{\".repeat(i*10000) + \"day\"\r\n        tmpl(payload, {day: \"tomorrow\"})\r\n        var time_taken = Date.now() - time;\r\n        console.log(\"payload length: \" + payload.length + \" - time taken: \" + time_taken + \"ms\")\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `tmpl` to version 1.0.5 or higher.\n## References\n- [GitHub Commit](https://github.com/daaku/nodejs-tmpl/commit/4c654e4d1542f329ed561fd95ccd80f30c6872d6)\n",
      "disclosureTime": "2021-09-08T11:19:47Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "1.0.5"
      ],
      "id": "SNYK-JS-TMPL-1583443",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-3777"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-09-15T18:40:54.505298Z",
      "moduleName": "tmpl",
      "packageManager": "npm",
      "packageName": "tmpl",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-09-15T18:40:54.502927Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/daaku/nodejs-tmpl/commit/4c654e4d1542f329ed561fd95ccd80f30c6872d6"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.0.5"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "babel-jest@24.9.0",
        "@jest/transform@24.9.0",
        "jest-haste-map@24.9.0",
        "sane@4.1.0",
        "walker@1.0.7",
        "makeerror@1.0.11",
        "tmpl@1.0.4"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "babel-jest@24.9.0",
        "@jest/transform@24.9.0",
        "jest-haste-map@24.9.0",
        "sane@4.1.0",
        "walker@1.0.7",
        "makeerror@1.0.11",
        "tmpl@1.0.5"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "tmpl",
      "version": "1.0.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2021-09-08T12:39:02.502663Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the main functionality.\r\n\r\n### PoC\r\n```\r\nvar tmpl = require(\"tmpl\")\r\nfor(var i = 1; i <= 1000; i++) {\r\n        var time = Date.now();\r\n        payload = \"hello, \" + \"{\".repeat(i*10000) + \"day\"\r\n        tmpl(payload, {day: \"tomorrow\"})\r\n        var time_taken = Date.now() - time;\r\n        console.log(\"payload length: \" + payload.length + \" - time taken: \" + time_taken + \"ms\")\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `tmpl` to version 1.0.5 or higher.\n## References\n- [GitHub Commit](https://github.com/daaku/nodejs-tmpl/commit/4c654e4d1542f329ed561fd95ccd80f30c6872d6)\n",
      "disclosureTime": "2021-09-08T11:19:47Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "1.0.5"
      ],
      "id": "SNYK-JS-TMPL-1583443",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "CVE": [
          "CVE-2021-3777"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-09-15T18:40:54.505298Z",
      "moduleName": "tmpl",
      "packageManager": "npm",
      "packageName": "tmpl",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-09-15T18:40:54.502927Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/daaku/nodejs-tmpl/commit/4c654e4d1542f329ed561fd95ccd80f30c6872d6"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.0.5"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "acme-review@1.0.0",
        "jest-enzyme@7.1.2",
        "jest-environment-enzyme@7.1.2",
        "jest-environment-jsdom@24.9.0",
        "@jest/environment@24.9.0",
        "@jest/transform@24.9.0",
        "jest-haste-map@24.9.0",
        "sane@4.1.0",
        "walker@1.0.7",
        "makeerror@1.0.11",
        "tmpl@1.0.4"
      ],
      "upgradePath": [
        false,
        "jest-enzyme@7.1.2",
        "jest-environment-enzyme@7.1.2",
        "jest-environment-jsdom@24.9.0",
        "@jest/environment@24.9.0",
        "@jest/transform@24.9.0",
        "jest-haste-map@24.9.0",
        "sane@4.1.0",
        "walker@1.0.7",
        "makeerror@1.0.11",
        "tmpl@1.0.5"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "tmpl",
      "version": "1.0.4"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
      "alternativeIds": [],
      "creationTime": "2022-02-13T14:46:07.185334Z",
      "credit": [
        "khizar"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `unset` function in `index.js`, because it allows access to object prototype properties.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `unset-value` to version 2.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/jonschlinkert/unset-value/pull/12/commits/abb534769f6ea62c3dd988f5ce0a4ebd1f91b561)\n- [GitHub Issue](https://github.com/jonschlinkert/unset-value/issues/11)\n- [GitHub PR](https://github.com/jonschlinkert/unset-value/pull/12)\n- [GitHub Release](https://github.com/jonschlinkert/unset-value/releases)\n",
      "disclosureTime": "2022-02-13T14:44:04Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "2.0.1"
      ],
      "id": "SNYK-JS-UNSETVALUE-2400660",
      "identifiers": {
        "CWE": [
          "CWE-1321"
        ],
        "CVE": []
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-02-13T15:26:38.065734Z",
      "moduleName": "unset-value",
      "packageManager": "npm",
      "packageName": "unset-value",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-02-13T15:26:38.063549Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/jonschlinkert/unset-value/pull/12/commits/abb534769f6ea62c3dd988f5ce0a4ebd1f91b561"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/jonschlinkert/unset-value/issues/11"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/jonschlinkert/unset-value/pull/12"
        },
        {
          "title": "GitHub Release",
          "url": "https://github.com/jonschlinkert/unset-value/releases"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<2.0.1"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "babel-jest@24.9.0",
        "@jest/transform@24.9.0",
        "jest-haste-map@24.9.0",
        "anymatch@2.0.0",
        "micromatch@3.1.10",
        "braces@2.3.2",
        "snapdragon@0.8.2",
        "base@0.11.2",
        "cache-base@1.0.1",
        "unset-value@1.0.0"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "unset-value",
      "version": "1.0.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
      "alternativeIds": [],
      "creationTime": "2022-02-13T14:46:07.185334Z",
      "credit": [
        "khizar"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `unset` function in `index.js`, because it allows access to object prototype properties.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `unset-value` to version 2.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/jonschlinkert/unset-value/pull/12/commits/abb534769f6ea62c3dd988f5ce0a4ebd1f91b561)\n- [GitHub Issue](https://github.com/jonschlinkert/unset-value/issues/11)\n- [GitHub PR](https://github.com/jonschlinkert/unset-value/pull/12)\n- [GitHub Release](https://github.com/jonschlinkert/unset-value/releases)\n",
      "disclosureTime": "2022-02-13T14:44:04Z",
      "exploit": "Not Defined",
      "functions": [],
      "fixedIn": [
        "2.0.1"
      ],
      "id": "SNYK-JS-UNSETVALUE-2400660",
      "identifiers": {
        "CWE": [
          "CWE-1321"
        ],
        "CVE": []
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-02-13T15:26:38.065734Z",
      "moduleName": "unset-value",
      "packageManager": "npm",
      "packageName": "unset-value",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-02-13T15:26:38.063549Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/jonschlinkert/unset-value/pull/12/commits/abb534769f6ea62c3dd988f5ce0a4ebd1f91b561"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/jonschlinkert/unset-value/issues/11"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/jonschlinkert/unset-value/pull/12"
        },
        {
          "title": "GitHub Release",
          "url": "https://github.com/jonschlinkert/unset-value/releases"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<2.0.1"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "acme-review@1.0.0",
        "jest-enzyme@7.1.2",
        "jest-environment-enzyme@7.1.2",
        "jest-environment-jsdom@24.9.0",
        "@jest/environment@24.9.0",
        "@jest/fake-timers@24.9.0",
        "jest-message-util@24.9.0",
        "micromatch@3.1.10",
        "braces@2.3.2",
        "snapdragon@0.8.2",
        "base@0.11.2",
        "cache-base@1.0.1",
        "unset-value@1.0.0"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "unset-value",
      "version": "1.0.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N/E:P",
      "alternativeIds": [],
      "creationTime": "2021-07-26T12:59:09.903181Z",
      "credit": [
        "ready-research"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[url-parse](https://www.npmjs.com/package/url-parse) is a Small footprint URL parser that works seamlessly across Node.js and browser environments.\n\nAffected versions of this package are vulnerable to Open Redirect due to improper escaping of slash characters.\n## Remediation\nUpgrade `url-parse` to version 1.5.2 or higher.\n## References\n- [GitHub Commit](https://github.com/unshiftio/url-parse/commit/81ab967889b08112d3356e451bf03e6aa0cbb7e0)\n- [GitHub Issue](https://github.com/unshiftio/url-parse/issues/206)\n- [GitHub PR](https://github.com/unshiftio/url-parse/pull/208)\n",
      "disclosureTime": "2021-07-26T12:57:37Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "1.5.2"
      ],
      "id": "SNYK-JS-URLPARSE-1533425",
      "identifiers": {
        "CWE": [
          "CWE-601"
        ],
        "CVE": [
          "CVE-2021-3664"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-07-26T15:23:41.208720Z",
      "moduleName": "url-parse",
      "packageManager": "npm",
      "packageName": "url-parse",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-07-26T15:23:41.206700Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/unshiftio/url-parse/commit/81ab967889b08112d3356e451bf03e6aa0cbb7e0"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/unshiftio/url-parse/issues/206"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/unshiftio/url-parse/pull/208"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Open Redirect",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.5.2"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "@microsoft/signalr@3.1.14",
        "eventsource@1.1.0",
        "original@1.0.2",
        "url-parse@1.5.1"
      ],
      "upgradePath": [
        false,
        "@microsoft/signalr@3.1.14",
        "eventsource@1.1.0",
        "original@1.0.2",
        "url-parse@1.5.2"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "url-parse",
      "version": "1.5.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:L/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2022-02-15T10:01:29.002928Z",
      "credit": [
        "ranjit-git"
      ],
      "cvssScore": 6.4,
      "description": "## Overview\n[url-parse](https://www.npmjs.com/package/url-parse) is a Small footprint URL parser that works seamlessly across Node.js and browser environments.\n\nAffected versions of this package are vulnerable to Access Restriction Bypass due to improper parsing process, that may lead to incorrect handling of authentication credentials and hostname, which allows bypass of hostname validation.\r\n\r\n## PoC:\r\n\r\n```js\r\n// PoC.js\r\n var parse = require('url-parse')\r\nvar cc=parse(\"http://admin:password123@@127.0.0.1\")\r\n\r\n//Output:\r\n{ slashes: true,\r\n  protocol: 'http:',\r\n  hash: '',\r\n  query: '',\r\n  pathname: '/',\r\n  auth: 'admin:password123',\r\n  host: '@127.0.0.1',\r\n  port: '',\r\n  hostname: '@127.0.0.1',\r\n  password: 'password123',\r\n  username: 'admin',\r\n  origin: 'http://@127.0.0.1',\r\n  href: 'http://admin:password123@@127.0.0.1/' }\r\n```\n## Remediation\nUpgrade `url-parse` to version 1.5.6 or higher.\n## References\n- [GitHub Commit](https://github.com/unshiftio/url-parse/commit/9be7ee88afd2bb04e4d5a1a8da9a389ac13f8c40)\n- [GitHub PR](https://github.com/unshiftio/url-parse/pull/223)\n",
      "disclosureTime": "2022-02-15T09:53:25Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "1.5.6"
      ],
      "id": "SNYK-JS-URLPARSE-2401205",
      "identifiers": {
        "CWE": [
          "CWE-639"
        ],
        "CVE": [
          "CVE-2022-0512"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-02-15T15:27:36.795014Z",
      "moduleName": "url-parse",
      "packageManager": "npm",
      "packageName": "url-parse",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-02-15T13:06:08Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/unshiftio/url-parse/commit/9be7ee88afd2bb04e4d5a1a8da9a389ac13f8c40"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/unshiftio/url-parse/pull/223"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Access Restriction Bypass",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.5.6"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "@microsoft/signalr@3.1.14",
        "eventsource@1.1.0",
        "original@1.0.2",
        "url-parse@1.5.1"
      ],
      "upgradePath": [
        false,
        "@microsoft/signalr@3.1.14",
        "eventsource@1.1.0",
        "original@1.0.2",
        "url-parse@1.5.6"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "url-parse",
      "version": "1.5.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:L/I:L/A:N/E:P",
      "alternativeIds": [],
      "creationTime": "2022-02-21T10:47:02.113879Z",
      "credit": [
        "Rohan Sharma"
      ],
      "cvssScore": 6.4,
      "description": "## Overview\n[url-parse](https://www.npmjs.com/package/url-parse) is a Small footprint URL parser that works seamlessly across Node.js and browser environments.\n\nAffected versions of this package are vulnerable to Authorization Bypass via the `hostname` field of a parsed URL, because \"url-parse\" is unable to find the correct hostname when no port number is provided in the URL.\r\n\r\n## PoC:\r\n```js\r\nvar Url = require('url-parse');\r\nvar PAYLOAD = \"http://example.com:\";\r\n\r\nconsole.log(Url(PAYLOAD));\r\n\r\n// Expected hostname: example.com\r\n// Actual hostname by url-parse: example.com:\r\n```\r\n\r\nOutput:\r\n\r\n```\r\n{\r\n  slashes: true,\r\n  protocol: 'http:',\r\n  hash: '',\r\n  query: '',\r\n  pathname: '/',\r\n  auth: '',\r\n  host: 'example.com:',\r\n  port: '',\r\n  hostname: 'example.com:',\r\n  password: '',\r\n  username: '',\r\n  origin: 'http://example.com:',\r\n  href: 'http://example.com:/'\r\n}\r\n```\n## Remediation\nUpgrade `url-parse` to version 1.5.8 or higher.\n## References\n- [GitHub Commit](https://github.com/unshiftio/url-parse/commit/d5c64791ef496ca5459ae7f2176a31ea53b127e5)\n",
      "disclosureTime": "2022-02-21T10:36:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "1.5.8"
      ],
      "id": "SNYK-JS-URLPARSE-2407759",
      "identifiers": {
        "CWE": [
          "CWE-285"
        ],
        "CVE": [
          "CVE-2022-0686"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-02-21T16:02:45.057937Z",
      "moduleName": "url-parse",
      "packageManager": "npm",
      "packageName": "url-parse",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-02-21T16:02:45.055472Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/unshiftio/url-parse/commit/d5c64791ef496ca5459ae7f2176a31ea53b127e5"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Authorization Bypass",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.5.8"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "@microsoft/signalr@3.1.14",
        "eventsource@1.1.0",
        "original@1.0.2",
        "url-parse@1.5.1"
      ],
      "upgradePath": [
        false,
        "@microsoft/signalr@3.1.14",
        "eventsource@1.1.0",
        "original@1.0.2",
        "url-parse@1.5.8"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "url-parse",
      "version": "1.5.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:N/E:P",
      "alternativeIds": [],
      "creationTime": "2022-02-21T12:56:54.006952Z",
      "credit": [
        "haxatron"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[url-parse](https://www.npmjs.com/package/url-parse) is a Small footprint URL parser that works seamlessly across Node.js and browser environments.\n\nAffected versions of this package are vulnerable to Improper Input Validation due to improper fix of [CVE-2020-8124](https://security.snyk.io/vuln/SNYK-JS-URLPARSE-543307) , it is possible to be exploited via the `\\b` (backspace) character.\r\n\r\n## PoC:\r\n```js\r\nconst parse = require('./index.js')\r\n\r\nurl = parse('\\bhttp://google.com')\r\n\r\nconsole.log(url)\r\n```\r\nOutput:\r\n\r\n```\r\n{\r\n  slashes: false,\r\n  protocol: '',\r\n  hash: '',\r\n  query: '',\r\n  pathname: '\\bhttp://google.com',\r\n  auth: '',\r\n  host: '',\r\n  port: '',\r\n  hostname: '',\r\n  password: '',\r\n  username: '',\r\n  origin: 'null',\r\n  href: '\\bhttp://google.com'\r\n}\r\n```\n## Remediation\nUpgrade `url-parse` to version 1.5.9 or higher.\n## References\n- [GitHub Commit](https://github.com/unshiftio/url-parse/commit/0e3fb542d60ddbf6933f22eb9b1e06e25eaa5b63)\n",
      "disclosureTime": "2022-02-21T12:49:06Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "1.5.9"
      ],
      "id": "SNYK-JS-URLPARSE-2407770",
      "identifiers": {
        "CWE": [
          "CWE-20"
        ],
        "CVE": [
          "CVE-2022-0691"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-06-09T15:13:29.620707Z",
      "moduleName": "url-parse",
      "packageManager": "npm",
      "packageName": "url-parse",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-02-21T16:02:45Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/unshiftio/url-parse/commit/0e3fb542d60ddbf6933f22eb9b1e06e25eaa5b63"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Improper Input Validation",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.5.9"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "acme-review@1.0.0",
        "@microsoft/signalr@3.1.14",
        "eventsource@1.1.0",
        "original@1.0.2",
        "url-parse@1.5.1"
      ],
      "upgradePath": [
        false,
        "@microsoft/signalr@3.1.14",
        "eventsource@1.1.0",
        "original@1.0.2",
        "url-parse@1.5.9"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "url-parse",
      "version": "1.5.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N/E:P",
      "alternativeIds": [],
      "creationTime": "2022-02-24T09:02:19.641584Z",
      "credit": [
        "haxatron"
      ],
      "cvssScore": 6.2,
      "description": "## Overview\n[url-parse](https://www.npmjs.com/package/url-parse) is a Small footprint URL parser that works seamlessly across Node.js and browser environments.\n\nAffected versions of this package are vulnerable to Authorization Bypass Through User-Controlled Key due to incorrect conversion of `@` in the protocol field of the HREF.\r\n\r\n## PoC:\r\n```\r\nparse = require('url-parse')\r\n\r\nconsole.log(parse(\"http:@/127.0.0.1\"))\r\n```\r\nOutput:\r\n\r\n```\r\n{\r\n  slashes: true,\r\n  protocol: 'http:',\r\n  hash: '',\r\n  query: '',\r\n  pathname: '/127.0.0.1',\r\n  auth: '',\r\n  host: '',\r\n  port: '',\r\n  hostname: '',\r\n  password: '',\r\n  username: '',\r\n  origin: 'null',\r\n  href: 'http:///127.0.0.1'\r\n}\r\n```\n## Remediation\nUpgrade `url-parse` to version 1.5.7 or higher.\n## References\n- [GitHub Commit](https://github.com/unshiftio/url-parse/commit/ef45a1355375a8244063793a19059b4f62fc8788)\n- [GitHub PR](https://github.com/unshiftio/url-parse/pull/226)\n",
      "disclosureTime": "2022-02-17T00:00:00Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "1.5.7"
      ],
      "id": "SNYK-JS-URLPARSE-2412697",
      "identifiers": {
        "CWE": [
          "CWE-639"
        ],
        "CVE": [
          "CVE-2022-0639"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-02-24T16:08:31.527221Z",
      "moduleName": "url-parse",
      "packageManager": "npm",
      "packageName": "url-parse",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-02-24T16:08:31.525302Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/unshiftio/url-parse/commit/ef45a1355375a8244063793a19059b4f62fc8788"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/unshiftio/url-parse/pull/226"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Authorization Bypass Through User-Controlled Key",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.5.7"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "@microsoft/signalr@3.1.14",
        "eventsource@1.1.0",
        "original@1.0.2",
        "url-parse@1.5.1"
      ],
      "upgradePath": [
        false,
        "@microsoft/signalr@3.1.14",
        "eventsource@1.1.0",
        "original@1.0.2",
        "url-parse@1.5.7"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "url-parse",
      "version": "1.5.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N/E:P",
      "alternativeIds": [],
      "creationTime": "2021-07-26T12:59:09.903181Z",
      "credit": [
        "ready-research"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[url-parse](https://www.npmjs.com/package/url-parse) is a Small footprint URL parser that works seamlessly across Node.js and browser environments.\n\nAffected versions of this package are vulnerable to Open Redirect due to improper escaping of slash characters.\n## Remediation\nUpgrade `url-parse` to version 1.5.2 or higher.\n## References\n- [GitHub Commit](https://github.com/unshiftio/url-parse/commit/81ab967889b08112d3356e451bf03e6aa0cbb7e0)\n- [GitHub Issue](https://github.com/unshiftio/url-parse/issues/206)\n- [GitHub PR](https://github.com/unshiftio/url-parse/pull/208)\n",
      "disclosureTime": "2021-07-26T12:57:37Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "1.5.2"
      ],
      "id": "SNYK-JS-URLPARSE-1533425",
      "identifiers": {
        "CWE": [
          "CWE-601"
        ],
        "CVE": [
          "CVE-2021-3664"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-07-26T15:23:41.208720Z",
      "moduleName": "url-parse",
      "packageManager": "npm",
      "packageName": "url-parse",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-07-26T15:23:41.206700Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/unshiftio/url-parse/commit/81ab967889b08112d3356e451bf03e6aa0cbb7e0"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/unshiftio/url-parse/issues/206"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/unshiftio/url-parse/pull/208"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Open Redirect",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.5.2"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "webpack-dev-server@3.11.0",
        "sockjs-client@1.4.0",
        "url-parse@1.5.1"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "webpack-dev-server@3.11.0",
        "sockjs-client@1.4.0",
        "url-parse@1.5.2"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "url-parse",
      "version": "1.5.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:L/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2022-02-15T10:01:29.002928Z",
      "credit": [
        "ranjit-git"
      ],
      "cvssScore": 6.4,
      "description": "## Overview\n[url-parse](https://www.npmjs.com/package/url-parse) is a Small footprint URL parser that works seamlessly across Node.js and browser environments.\n\nAffected versions of this package are vulnerable to Access Restriction Bypass due to improper parsing process, that may lead to incorrect handling of authentication credentials and hostname, which allows bypass of hostname validation.\r\n\r\n## PoC:\r\n\r\n```js\r\n// PoC.js\r\n var parse = require('url-parse')\r\nvar cc=parse(\"http://admin:password123@@127.0.0.1\")\r\n\r\n//Output:\r\n{ slashes: true,\r\n  protocol: 'http:',\r\n  hash: '',\r\n  query: '',\r\n  pathname: '/',\r\n  auth: 'admin:password123',\r\n  host: '@127.0.0.1',\r\n  port: '',\r\n  hostname: '@127.0.0.1',\r\n  password: 'password123',\r\n  username: 'admin',\r\n  origin: 'http://@127.0.0.1',\r\n  href: 'http://admin:password123@@127.0.0.1/' }\r\n```\n## Remediation\nUpgrade `url-parse` to version 1.5.6 or higher.\n## References\n- [GitHub Commit](https://github.com/unshiftio/url-parse/commit/9be7ee88afd2bb04e4d5a1a8da9a389ac13f8c40)\n- [GitHub PR](https://github.com/unshiftio/url-parse/pull/223)\n",
      "disclosureTime": "2022-02-15T09:53:25Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "1.5.6"
      ],
      "id": "SNYK-JS-URLPARSE-2401205",
      "identifiers": {
        "CWE": [
          "CWE-639"
        ],
        "CVE": [
          "CVE-2022-0512"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-02-15T15:27:36.795014Z",
      "moduleName": "url-parse",
      "packageManager": "npm",
      "packageName": "url-parse",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-02-15T13:06:08Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/unshiftio/url-parse/commit/9be7ee88afd2bb04e4d5a1a8da9a389ac13f8c40"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/unshiftio/url-parse/pull/223"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Access Restriction Bypass",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.5.6"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "webpack-dev-server@3.11.0",
        "sockjs-client@1.4.0",
        "url-parse@1.5.1"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "webpack-dev-server@3.11.0",
        "sockjs-client@1.4.0",
        "url-parse@1.5.6"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "url-parse",
      "version": "1.5.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:L/I:L/A:N/E:P",
      "alternativeIds": [],
      "creationTime": "2022-02-21T10:47:02.113879Z",
      "credit": [
        "Rohan Sharma"
      ],
      "cvssScore": 6.4,
      "description": "## Overview\n[url-parse](https://www.npmjs.com/package/url-parse) is a Small footprint URL parser that works seamlessly across Node.js and browser environments.\n\nAffected versions of this package are vulnerable to Authorization Bypass via the `hostname` field of a parsed URL, because \"url-parse\" is unable to find the correct hostname when no port number is provided in the URL.\r\n\r\n## PoC:\r\n```js\r\nvar Url = require('url-parse');\r\nvar PAYLOAD = \"http://example.com:\";\r\n\r\nconsole.log(Url(PAYLOAD));\r\n\r\n// Expected hostname: example.com\r\n// Actual hostname by url-parse: example.com:\r\n```\r\n\r\nOutput:\r\n\r\n```\r\n{\r\n  slashes: true,\r\n  protocol: 'http:',\r\n  hash: '',\r\n  query: '',\r\n  pathname: '/',\r\n  auth: '',\r\n  host: 'example.com:',\r\n  port: '',\r\n  hostname: 'example.com:',\r\n  password: '',\r\n  username: '',\r\n  origin: 'http://example.com:',\r\n  href: 'http://example.com:/'\r\n}\r\n```\n## Remediation\nUpgrade `url-parse` to version 1.5.8 or higher.\n## References\n- [GitHub Commit](https://github.com/unshiftio/url-parse/commit/d5c64791ef496ca5459ae7f2176a31ea53b127e5)\n",
      "disclosureTime": "2022-02-21T10:36:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "1.5.8"
      ],
      "id": "SNYK-JS-URLPARSE-2407759",
      "identifiers": {
        "CWE": [
          "CWE-285"
        ],
        "CVE": [
          "CVE-2022-0686"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-02-21T16:02:45.057937Z",
      "moduleName": "url-parse",
      "packageManager": "npm",
      "packageName": "url-parse",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-02-21T16:02:45.055472Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/unshiftio/url-parse/commit/d5c64791ef496ca5459ae7f2176a31ea53b127e5"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Authorization Bypass",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.5.8"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "webpack-dev-server@3.11.0",
        "sockjs-client@1.4.0",
        "url-parse@1.5.1"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "webpack-dev-server@3.11.0",
        "sockjs-client@1.4.0",
        "url-parse@1.5.8"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "url-parse",
      "version": "1.5.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:N/E:P",
      "alternativeIds": [],
      "creationTime": "2022-02-21T12:56:54.006952Z",
      "credit": [
        "haxatron"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[url-parse](https://www.npmjs.com/package/url-parse) is a Small footprint URL parser that works seamlessly across Node.js and browser environments.\n\nAffected versions of this package are vulnerable to Improper Input Validation due to improper fix of [CVE-2020-8124](https://security.snyk.io/vuln/SNYK-JS-URLPARSE-543307) , it is possible to be exploited via the `\\b` (backspace) character.\r\n\r\n## PoC:\r\n```js\r\nconst parse = require('./index.js')\r\n\r\nurl = parse('\\bhttp://google.com')\r\n\r\nconsole.log(url)\r\n```\r\nOutput:\r\n\r\n```\r\n{\r\n  slashes: false,\r\n  protocol: '',\r\n  hash: '',\r\n  query: '',\r\n  pathname: '\\bhttp://google.com',\r\n  auth: '',\r\n  host: '',\r\n  port: '',\r\n  hostname: '',\r\n  password: '',\r\n  username: '',\r\n  origin: 'null',\r\n  href: '\\bhttp://google.com'\r\n}\r\n```\n## Remediation\nUpgrade `url-parse` to version 1.5.9 or higher.\n## References\n- [GitHub Commit](https://github.com/unshiftio/url-parse/commit/0e3fb542d60ddbf6933f22eb9b1e06e25eaa5b63)\n",
      "disclosureTime": "2022-02-21T12:49:06Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "1.5.9"
      ],
      "id": "SNYK-JS-URLPARSE-2407770",
      "identifiers": {
        "CWE": [
          "CWE-20"
        ],
        "CVE": [
          "CVE-2022-0691"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-06-09T15:13:29.620707Z",
      "moduleName": "url-parse",
      "packageManager": "npm",
      "packageName": "url-parse",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-02-21T16:02:45Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/unshiftio/url-parse/commit/0e3fb542d60ddbf6933f22eb9b1e06e25eaa5b63"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Improper Input Validation",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.5.9"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "webpack-dev-server@3.11.0",
        "sockjs-client@1.4.0",
        "url-parse@1.5.1"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "webpack-dev-server@3.11.0",
        "sockjs-client@1.4.0",
        "url-parse@1.5.9"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "url-parse",
      "version": "1.5.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N/E:P",
      "alternativeIds": [],
      "creationTime": "2022-02-24T09:02:19.641584Z",
      "credit": [
        "haxatron"
      ],
      "cvssScore": 6.2,
      "description": "## Overview\n[url-parse](https://www.npmjs.com/package/url-parse) is a Small footprint URL parser that works seamlessly across Node.js and browser environments.\n\nAffected versions of this package are vulnerable to Authorization Bypass Through User-Controlled Key due to incorrect conversion of `@` in the protocol field of the HREF.\r\n\r\n## PoC:\r\n```\r\nparse = require('url-parse')\r\n\r\nconsole.log(parse(\"http:@/127.0.0.1\"))\r\n```\r\nOutput:\r\n\r\n```\r\n{\r\n  slashes: true,\r\n  protocol: 'http:',\r\n  hash: '',\r\n  query: '',\r\n  pathname: '/127.0.0.1',\r\n  auth: '',\r\n  host: '',\r\n  port: '',\r\n  hostname: '',\r\n  password: '',\r\n  username: '',\r\n  origin: 'null',\r\n  href: 'http:///127.0.0.1'\r\n}\r\n```\n## Remediation\nUpgrade `url-parse` to version 1.5.7 or higher.\n## References\n- [GitHub Commit](https://github.com/unshiftio/url-parse/commit/ef45a1355375a8244063793a19059b4f62fc8788)\n- [GitHub PR](https://github.com/unshiftio/url-parse/pull/226)\n",
      "disclosureTime": "2022-02-17T00:00:00Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "1.5.7"
      ],
      "id": "SNYK-JS-URLPARSE-2412697",
      "identifiers": {
        "CWE": [
          "CWE-639"
        ],
        "CVE": [
          "CVE-2022-0639"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-02-24T16:08:31.527221Z",
      "moduleName": "url-parse",
      "packageManager": "npm",
      "packageName": "url-parse",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-02-24T16:08:31.525302Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/unshiftio/url-parse/commit/ef45a1355375a8244063793a19059b4f62fc8788"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/unshiftio/url-parse/pull/226"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Authorization Bypass Through User-Controlled Key",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.5.7"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "webpack-dev-server@3.11.0",
        "sockjs-client@1.4.0",
        "url-parse@1.5.1"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "webpack-dev-server@3.11.0",
        "sockjs-client@1.4.0",
        "url-parse@1.5.7"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "url-parse",
      "version": "1.5.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N/E:P",
      "alternativeIds": [],
      "creationTime": "2021-07-26T12:59:09.903181Z",
      "credit": [
        "ready-research"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[url-parse](https://www.npmjs.com/package/url-parse) is a Small footprint URL parser that works seamlessly across Node.js and browser environments.\n\nAffected versions of this package are vulnerable to Open Redirect due to improper escaping of slash characters.\n## Remediation\nUpgrade `url-parse` to version 1.5.2 or higher.\n## References\n- [GitHub Commit](https://github.com/unshiftio/url-parse/commit/81ab967889b08112d3356e451bf03e6aa0cbb7e0)\n- [GitHub Issue](https://github.com/unshiftio/url-parse/issues/206)\n- [GitHub PR](https://github.com/unshiftio/url-parse/pull/208)\n",
      "disclosureTime": "2021-07-26T12:57:37Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "1.5.2"
      ],
      "id": "SNYK-JS-URLPARSE-1533425",
      "identifiers": {
        "CWE": [
          "CWE-601"
        ],
        "CVE": [
          "CVE-2021-3664"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-07-26T15:23:41.208720Z",
      "moduleName": "url-parse",
      "packageManager": "npm",
      "packageName": "url-parse",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-07-26T15:23:41.206700Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/unshiftio/url-parse/commit/81ab967889b08112d3356e451bf03e6aa0cbb7e0"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/unshiftio/url-parse/issues/206"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/unshiftio/url-parse/pull/208"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Open Redirect",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.5.2"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "webpack-dev-server@3.11.0",
        "sockjs-client@1.4.0",
        "eventsource@1.1.0",
        "original@1.0.2",
        "url-parse@1.5.1"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "webpack-dev-server@3.11.0",
        "sockjs-client@1.4.0",
        "eventsource@1.1.0",
        "original@1.0.2",
        "url-parse@1.5.2"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "url-parse",
      "version": "1.5.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:L/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2022-02-15T10:01:29.002928Z",
      "credit": [
        "ranjit-git"
      ],
      "cvssScore": 6.4,
      "description": "## Overview\n[url-parse](https://www.npmjs.com/package/url-parse) is a Small footprint URL parser that works seamlessly across Node.js and browser environments.\n\nAffected versions of this package are vulnerable to Access Restriction Bypass due to improper parsing process, that may lead to incorrect handling of authentication credentials and hostname, which allows bypass of hostname validation.\r\n\r\n## PoC:\r\n\r\n```js\r\n// PoC.js\r\n var parse = require('url-parse')\r\nvar cc=parse(\"http://admin:password123@@127.0.0.1\")\r\n\r\n//Output:\r\n{ slashes: true,\r\n  protocol: 'http:',\r\n  hash: '',\r\n  query: '',\r\n  pathname: '/',\r\n  auth: 'admin:password123',\r\n  host: '@127.0.0.1',\r\n  port: '',\r\n  hostname: '@127.0.0.1',\r\n  password: 'password123',\r\n  username: 'admin',\r\n  origin: 'http://@127.0.0.1',\r\n  href: 'http://admin:password123@@127.0.0.1/' }\r\n```\n## Remediation\nUpgrade `url-parse` to version 1.5.6 or higher.\n## References\n- [GitHub Commit](https://github.com/unshiftio/url-parse/commit/9be7ee88afd2bb04e4d5a1a8da9a389ac13f8c40)\n- [GitHub PR](https://github.com/unshiftio/url-parse/pull/223)\n",
      "disclosureTime": "2022-02-15T09:53:25Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "1.5.6"
      ],
      "id": "SNYK-JS-URLPARSE-2401205",
      "identifiers": {
        "CWE": [
          "CWE-639"
        ],
        "CVE": [
          "CVE-2022-0512"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-02-15T15:27:36.795014Z",
      "moduleName": "url-parse",
      "packageManager": "npm",
      "packageName": "url-parse",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-02-15T13:06:08Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/unshiftio/url-parse/commit/9be7ee88afd2bb04e4d5a1a8da9a389ac13f8c40"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/unshiftio/url-parse/pull/223"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Access Restriction Bypass",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.5.6"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "webpack-dev-server@3.11.0",
        "sockjs-client@1.4.0",
        "eventsource@1.1.0",
        "original@1.0.2",
        "url-parse@1.5.1"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "webpack-dev-server@3.11.0",
        "sockjs-client@1.4.0",
        "eventsource@1.1.0",
        "original@1.0.2",
        "url-parse@1.5.6"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "url-parse",
      "version": "1.5.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:L/I:L/A:N/E:P",
      "alternativeIds": [],
      "creationTime": "2022-02-21T10:47:02.113879Z",
      "credit": [
        "Rohan Sharma"
      ],
      "cvssScore": 6.4,
      "description": "## Overview\n[url-parse](https://www.npmjs.com/package/url-parse) is a Small footprint URL parser that works seamlessly across Node.js and browser environments.\n\nAffected versions of this package are vulnerable to Authorization Bypass via the `hostname` field of a parsed URL, because \"url-parse\" is unable to find the correct hostname when no port number is provided in the URL.\r\n\r\n## PoC:\r\n```js\r\nvar Url = require('url-parse');\r\nvar PAYLOAD = \"http://example.com:\";\r\n\r\nconsole.log(Url(PAYLOAD));\r\n\r\n// Expected hostname: example.com\r\n// Actual hostname by url-parse: example.com:\r\n```\r\n\r\nOutput:\r\n\r\n```\r\n{\r\n  slashes: true,\r\n  protocol: 'http:',\r\n  hash: '',\r\n  query: '',\r\n  pathname: '/',\r\n  auth: '',\r\n  host: 'example.com:',\r\n  port: '',\r\n  hostname: 'example.com:',\r\n  password: '',\r\n  username: '',\r\n  origin: 'http://example.com:',\r\n  href: 'http://example.com:/'\r\n}\r\n```\n## Remediation\nUpgrade `url-parse` to version 1.5.8 or higher.\n## References\n- [GitHub Commit](https://github.com/unshiftio/url-parse/commit/d5c64791ef496ca5459ae7f2176a31ea53b127e5)\n",
      "disclosureTime": "2022-02-21T10:36:50Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "1.5.8"
      ],
      "id": "SNYK-JS-URLPARSE-2407759",
      "identifiers": {
        "CWE": [
          "CWE-285"
        ],
        "CVE": [
          "CVE-2022-0686"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-02-21T16:02:45.057937Z",
      "moduleName": "url-parse",
      "packageManager": "npm",
      "packageName": "url-parse",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-02-21T16:02:45.055472Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/unshiftio/url-parse/commit/d5c64791ef496ca5459ae7f2176a31ea53b127e5"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Authorization Bypass",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.5.8"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "webpack-dev-server@3.11.0",
        "sockjs-client@1.4.0",
        "eventsource@1.1.0",
        "original@1.0.2",
        "url-parse@1.5.1"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "webpack-dev-server@3.11.0",
        "sockjs-client@1.4.0",
        "eventsource@1.1.0",
        "original@1.0.2",
        "url-parse@1.5.8"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "url-parse",
      "version": "1.5.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:N/E:P",
      "alternativeIds": [],
      "creationTime": "2022-02-21T12:56:54.006952Z",
      "credit": [
        "haxatron"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[url-parse](https://www.npmjs.com/package/url-parse) is a Small footprint URL parser that works seamlessly across Node.js and browser environments.\n\nAffected versions of this package are vulnerable to Improper Input Validation due to improper fix of [CVE-2020-8124](https://security.snyk.io/vuln/SNYK-JS-URLPARSE-543307) , it is possible to be exploited via the `\\b` (backspace) character.\r\n\r\n## PoC:\r\n```js\r\nconst parse = require('./index.js')\r\n\r\nurl = parse('\\bhttp://google.com')\r\n\r\nconsole.log(url)\r\n```\r\nOutput:\r\n\r\n```\r\n{\r\n  slashes: false,\r\n  protocol: '',\r\n  hash: '',\r\n  query: '',\r\n  pathname: '\\bhttp://google.com',\r\n  auth: '',\r\n  host: '',\r\n  port: '',\r\n  hostname: '',\r\n  password: '',\r\n  username: '',\r\n  origin: 'null',\r\n  href: '\\bhttp://google.com'\r\n}\r\n```\n## Remediation\nUpgrade `url-parse` to version 1.5.9 or higher.\n## References\n- [GitHub Commit](https://github.com/unshiftio/url-parse/commit/0e3fb542d60ddbf6933f22eb9b1e06e25eaa5b63)\n",
      "disclosureTime": "2022-02-21T12:49:06Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "1.5.9"
      ],
      "id": "SNYK-JS-URLPARSE-2407770",
      "identifiers": {
        "CWE": [
          "CWE-20"
        ],
        "CVE": [
          "CVE-2022-0691"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-06-09T15:13:29.620707Z",
      "moduleName": "url-parse",
      "packageManager": "npm",
      "packageName": "url-parse",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-02-21T16:02:45Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/unshiftio/url-parse/commit/0e3fb542d60ddbf6933f22eb9b1e06e25eaa5b63"
        }
      ],
      "severity": "high",
      "socialTrendAlert": false,
      "title": "Improper Input Validation",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.5.9"
        ]
      },
      "severityWithCritical": "high",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "webpack-dev-server@3.11.0",
        "sockjs-client@1.4.0",
        "eventsource@1.1.0",
        "original@1.0.2",
        "url-parse@1.5.1"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "webpack-dev-server@3.11.0",
        "sockjs-client@1.4.0",
        "eventsource@1.1.0",
        "original@1.0.2",
        "url-parse@1.5.9"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "url-parse",
      "version": "1.5.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N/E:P",
      "alternativeIds": [],
      "creationTime": "2022-02-24T09:02:19.641584Z",
      "credit": [
        "haxatron"
      ],
      "cvssScore": 6.2,
      "description": "## Overview\n[url-parse](https://www.npmjs.com/package/url-parse) is a Small footprint URL parser that works seamlessly across Node.js and browser environments.\n\nAffected versions of this package are vulnerable to Authorization Bypass Through User-Controlled Key due to incorrect conversion of `@` in the protocol field of the HREF.\r\n\r\n## PoC:\r\n```\r\nparse = require('url-parse')\r\n\r\nconsole.log(parse(\"http:@/127.0.0.1\"))\r\n```\r\nOutput:\r\n\r\n```\r\n{\r\n  slashes: true,\r\n  protocol: 'http:',\r\n  hash: '',\r\n  query: '',\r\n  pathname: '/127.0.0.1',\r\n  auth: '',\r\n  host: '',\r\n  port: '',\r\n  hostname: '',\r\n  password: '',\r\n  username: '',\r\n  origin: 'null',\r\n  href: 'http:///127.0.0.1'\r\n}\r\n```\n## Remediation\nUpgrade `url-parse` to version 1.5.7 or higher.\n## References\n- [GitHub Commit](https://github.com/unshiftio/url-parse/commit/ef45a1355375a8244063793a19059b4f62fc8788)\n- [GitHub PR](https://github.com/unshiftio/url-parse/pull/226)\n",
      "disclosureTime": "2022-02-17T00:00:00Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "1.5.7"
      ],
      "id": "SNYK-JS-URLPARSE-2412697",
      "identifiers": {
        "CWE": [
          "CWE-639"
        ],
        "CVE": [
          "CVE-2022-0639"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-02-24T16:08:31.527221Z",
      "moduleName": "url-parse",
      "packageManager": "npm",
      "packageName": "url-parse",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-02-24T16:08:31.525302Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/unshiftio/url-parse/commit/ef45a1355375a8244063793a19059b4f62fc8788"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/unshiftio/url-parse/pull/226"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Authorization Bypass Through User-Controlled Key",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<1.5.7"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "webpack-dev-server@3.11.0",
        "sockjs-client@1.4.0",
        "eventsource@1.1.0",
        "original@1.0.2",
        "url-parse@1.5.1"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "webpack-dev-server@3.11.0",
        "sockjs-client@1.4.0",
        "eventsource@1.1.0",
        "original@1.0.2",
        "url-parse@1.5.7"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "url-parse",
      "version": "1.5.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-05-26T08:37:36.519338Z",
      "credit": [
        "Robert McLaughlin"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[ws](https://www.npmjs.com/package/ws) is a simple to use websocket client, server and console for node.js.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). A specially crafted value of the `Sec-Websocket-Protocol` header can be used to significantly slow down a `ws` server.\r\n\r\n##PoC\r\n```\r\nfor (const length of [1000, 2000, 4000, 8000, 16000, 32000]) {\r\n  const value = 'b' + ' '.repeat(length) + 'x';\r\n  const start = process.hrtime.bigint();\r\n\r\n  value.trim().split(/ *, */);\r\n\r\n  const end = process.hrtime.bigint();\r\n\r\n  console.log('length = %d, time = %f ns', length, end - start);\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ws` to version 7.4.6, 6.2.2, 5.2.3 or higher.\n## References\n- [GitHub Commit](https://github.com/websockets/ws/commit/00c425ec77993773d823f018f64a5c44e17023ff)\n",
      "disclosureTime": "2021-05-26T08:34:58Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.4.6",
        "6.2.2",
        "5.2.3"
      ],
      "id": "SNYK-JS-WS-1296835",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-6fc8-4gx4-v693"
        ],
        "CVE": [
          "CVE-2021-32640"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.072977Z",
      "moduleName": "ws",
      "packageManager": "npm",
      "packageName": "ws",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-05-26T11:57:43Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/websockets/ws/commit/00c425ec77993773d823f018f64a5c44e17023ff"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.4.6",
          ">=6.0.0 <6.2.2",
          "<5.2.3"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "@microsoft/signalr@3.1.14",
        "ws@6.2.1"
      ],
      "upgradePath": [
        false,
        "@microsoft/signalr@3.1.14",
        "ws@6.2.2"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ws",
      "version": "6.2.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-05-26T08:37:36.519338Z",
      "credit": [
        "Robert McLaughlin"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[ws](https://www.npmjs.com/package/ws) is a simple to use websocket client, server and console for node.js.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). A specially crafted value of the `Sec-Websocket-Protocol` header can be used to significantly slow down a `ws` server.\r\n\r\n##PoC\r\n```\r\nfor (const length of [1000, 2000, 4000, 8000, 16000, 32000]) {\r\n  const value = 'b' + ' '.repeat(length) + 'x';\r\n  const start = process.hrtime.bigint();\r\n\r\n  value.trim().split(/ *, */);\r\n\r\n  const end = process.hrtime.bigint();\r\n\r\n  console.log('length = %d, time = %f ns', length, end - start);\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ws` to version 7.4.6, 6.2.2, 5.2.3 or higher.\n## References\n- [GitHub Commit](https://github.com/websockets/ws/commit/00c425ec77993773d823f018f64a5c44e17023ff)\n",
      "disclosureTime": "2021-05-26T08:34:58Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.4.6",
        "6.2.2",
        "5.2.3"
      ],
      "id": "SNYK-JS-WS-1296835",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-6fc8-4gx4-v693"
        ],
        "CVE": [
          "CVE-2021-32640"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.072977Z",
      "moduleName": "ws",
      "packageManager": "npm",
      "packageName": "ws",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-05-26T11:57:43Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/websockets/ws/commit/00c425ec77993773d823f018f64a5c44e17023ff"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.4.6",
          ">=6.0.0 <6.2.2",
          "<5.2.3"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "webpack-dev-server@3.11.0",
        "ws@6.2.1"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "webpack-dev-server@3.11.0",
        "ws@6.2.2"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ws",
      "version": "6.2.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-05-26T08:37:36.519338Z",
      "credit": [
        "Robert McLaughlin"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[ws](https://www.npmjs.com/package/ws) is a simple to use websocket client, server and console for node.js.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). A specially crafted value of the `Sec-Websocket-Protocol` header can be used to significantly slow down a `ws` server.\r\n\r\n##PoC\r\n```\r\nfor (const length of [1000, 2000, 4000, 8000, 16000, 32000]) {\r\n  const value = 'b' + ' '.repeat(length) + 'x';\r\n  const start = process.hrtime.bigint();\r\n\r\n  value.trim().split(/ *, */);\r\n\r\n  const end = process.hrtime.bigint();\r\n\r\n  console.log('length = %d, time = %f ns', length, end - start);\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ws` to version 7.4.6, 6.2.2, 5.2.3 or higher.\n## References\n- [GitHub Commit](https://github.com/websockets/ws/commit/00c425ec77993773d823f018f64a5c44e17023ff)\n",
      "disclosureTime": "2021-05-26T08:34:58Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.4.6",
        "6.2.2",
        "5.2.3"
      ],
      "id": "SNYK-JS-WS-1296835",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-6fc8-4gx4-v693"
        ],
        "CVE": [
          "CVE-2021-32640"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.072977Z",
      "moduleName": "ws",
      "packageManager": "npm",
      "packageName": "ws",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-05-26T11:57:43Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/websockets/ws/commit/00c425ec77993773d823f018f64a5c44e17023ff"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.4.6",
          ">=6.0.0 <6.2.2",
          "<5.2.3"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "jest-environment-jsdom-fourteen@1.0.1",
        "jsdom@14.1.0",
        "ws@6.2.1"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "jest-environment-jsdom-fourteen@1.0.1",
        "jsdom@14.1.0",
        "ws@6.2.2"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ws",
      "version": "6.2.1"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-05-26T08:37:36.519338Z",
      "credit": [
        "Robert McLaughlin"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[ws](https://www.npmjs.com/package/ws) is a simple to use websocket client, server and console for node.js.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). A specially crafted value of the `Sec-Websocket-Protocol` header can be used to significantly slow down a `ws` server.\r\n\r\n##PoC\r\n```\r\nfor (const length of [1000, 2000, 4000, 8000, 16000, 32000]) {\r\n  const value = 'b' + ' '.repeat(length) + 'x';\r\n  const start = process.hrtime.bigint();\r\n\r\n  value.trim().split(/ *, */);\r\n\r\n  const end = process.hrtime.bigint();\r\n\r\n  console.log('length = %d, time = %f ns', length, end - start);\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ws` to version 7.4.6, 6.2.2, 5.2.3 or higher.\n## References\n- [GitHub Commit](https://github.com/websockets/ws/commit/00c425ec77993773d823f018f64a5c44e17023ff)\n",
      "disclosureTime": "2021-05-26T08:34:58Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.4.6",
        "6.2.2",
        "5.2.3"
      ],
      "id": "SNYK-JS-WS-1296835",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-6fc8-4gx4-v693"
        ],
        "CVE": [
          "CVE-2021-32640"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.072977Z",
      "moduleName": "ws",
      "packageManager": "npm",
      "packageName": "ws",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-05-26T11:57:43Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/websockets/ws/commit/00c425ec77993773d823f018f64a5c44e17023ff"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.4.6",
          ">=6.0.0 <6.2.2",
          "<5.2.3"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "jest-enzyme@7.1.2",
        "jest-environment-enzyme@7.1.2",
        "jest-environment-jsdom@24.9.0",
        "jsdom@11.12.0",
        "ws@5.2.2"
      ],
      "upgradePath": [
        false,
        "jest-enzyme@7.1.2",
        "jest-environment-enzyme@7.1.2",
        "jest-environment-jsdom@24.9.0",
        "jsdom@11.12.0",
        "ws@5.2.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ws",
      "version": "5.2.2"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2021-05-26T08:37:36.519338Z",
      "credit": [
        "Robert McLaughlin"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[ws](https://www.npmjs.com/package/ws) is a simple to use websocket client, server and console for node.js.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). A specially crafted value of the `Sec-Websocket-Protocol` header can be used to significantly slow down a `ws` server.\r\n\r\n##PoC\r\n```\r\nfor (const length of [1000, 2000, 4000, 8000, 16000, 32000]) {\r\n  const value = 'b' + ' '.repeat(length) + 'x';\r\n  const start = process.hrtime.bigint();\r\n\r\n  value.trim().split(/ *, */);\r\n\r\n  const end = process.hrtime.bigint();\r\n\r\n  console.log('length = %d, time = %f ns', length, end - start);\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ws` to version 7.4.6, 6.2.2, 5.2.3 or higher.\n## References\n- [GitHub Commit](https://github.com/websockets/ws/commit/00c425ec77993773d823f018f64a5c44e17023ff)\n",
      "disclosureTime": "2021-05-26T08:34:58Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "7.4.6",
        "6.2.2",
        "5.2.3"
      ],
      "id": "SNYK-JS-WS-1296835",
      "identifiers": {
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-6fc8-4gx4-v693"
        ],
        "CVE": [
          "CVE-2021-32640"
        ]
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2021-08-08T13:56:55.072977Z",
      "moduleName": "ws",
      "packageManager": "npm",
      "packageName": "ws",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2021-05-26T11:57:43Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/websockets/ws/commit/00c425ec77993773d823f018f64a5c44e17023ff"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Regular Expression Denial of Service (ReDoS)",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          ">=7.0.0 <7.4.6",
          ">=6.0.0 <6.2.2",
          "<5.2.3"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "react-scripts@3.4.4",
        "jest@24.9.0",
        "jest-cli@24.9.0",
        "@jest/core@24.9.0",
        "@jest/reporters@24.9.0",
        "jest-runtime@24.9.0",
        "jest-config@24.9.0",
        "jest-environment-jsdom@24.9.0",
        "jsdom@11.12.0",
        "ws@5.2.2"
      ],
      "upgradePath": [
        false,
        "react-scripts@3.4.4",
        "jest@24.9.0",
        "jest-cli@24.9.0",
        "@jest/core@24.9.0",
        "@jest/reporters@24.9.0",
        "jest-runtime@24.9.0",
        "jest-config@24.9.0",
        "jest-environment-jsdom@24.9.0",
        "jsdom@11.12.0",
        "ws@5.2.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ws",
      "version": "5.2.2"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
      "alternativeIds": [],
      "creationTime": "2022-03-10T10:54:16.017794Z",
      "credit": [
        "gkmrrr"
      ],
      "cvssScore": 5.6,
      "description": "## Overview\n[yup](https://www.npmjs.org/package/yup) is a Dead simple Object schema validation\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `.SetLocale` function.\r\n\r\n## PoC\r\n```js\r\nlet yup = require('yup');\r\nconst payload = JSON.parse('{\"__proto__\":{\"polluted\":\"Yes! Its Polluted\"}}');\r\nyup.setLocale(payload);\r\nconsole.log({}.polluted)\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `yup` to version 0.30.0 or higher.\n## References\n- [GitHub Commit](https://github.com/jquense/yup/commit/15a0f43007d2468d90a4917101d63e3d335e04b3)\n- [GitHub PR](https://github.com/jquense/yup/pull/1088)\n",
      "disclosureTime": "2020-10-25T10:54:13Z",
      "exploit": "Proof of Concept",
      "functions": [],
      "fixedIn": [
        "0.30.0"
      ],
      "id": "SNYK-JS-YUP-2420835",
      "identifiers": {
        "CWE": [
          "CWE-1321"
        ],
        "CVE": []
      },
      "language": "js",
      "malicious": false,
      "modificationTime": "2022-03-10T16:03:23.644669Z",
      "moduleName": "yup",
      "packageManager": "npm",
      "packageName": "yup",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2022-03-10T16:03:23.643288Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/jquense/yup/commit/15a0f43007d2468d90a4917101d63e3d335e04b3"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/jquense/yup/pull/1088"
        }
      ],
      "severity": "medium",
      "socialTrendAlert": false,
      "title": "Prototype Pollution",
      "insights": {
        "triageAdvice": null
      },
      "functions_new": [],
      "semver": {
        "vulnerable": [
          "<0.30.0"
        ]
      },
      "severityWithCritical": "medium",
      "from": [
        "acme-review@1.0.0",
        "yup@0.29.3"
      ],
      "upgradePath": [
        false,
        "yup@0.30.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "yup",
      "version": "0.29.3"
    }
  ],
  "ok": false,
  "dependencyCount": 1628,
  "org": "brice-syslogic",
  "policy": "# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.25.0\nignore: {}\npatch: {}\n",
  "isPrivate": true,
  "licensesPolicy": {
    "severities": {},
    "orgLicenseRules": {
      "AGPL-1.0": {
        "licenseType": "AGPL-1.0",
        "severity": "high",
        "instructions": ""
      },
      "AGPL-3.0": {
        "licenseType": "AGPL-3.0",
        "severity": "high",
        "instructions": ""
      },
      "Artistic-1.0": {
        "licenseType": "Artistic-1.0",
        "severity": "medium",
        "instructions": ""
      },
      "Artistic-2.0": {
        "licenseType": "Artistic-2.0",
        "severity": "medium",
        "instructions": ""
      },
      "CDDL-1.0": {
        "licenseType": "CDDL-1.0",
        "severity": "medium",
        "instructions": ""
      },
      "CPOL-1.02": {
        "licenseType": "CPOL-1.02",
        "severity": "high",
        "instructions": ""
      },
      "EPL-1.0": {
        "licenseType": "EPL-1.0",
        "severity": "medium",
        "instructions": ""
      },
      "GPL-2.0": {
        "licenseType": "GPL-2.0",
        "severity": "high",
        "instructions": ""
      },
      "GPL-3.0": {
        "licenseType": "GPL-3.0",
        "severity": "high",
        "instructions": ""
      },
      "LGPL-2.0": {
        "licenseType": "LGPL-2.0",
        "severity": "medium",
        "instructions": ""
      },
      "LGPL-2.1": {
        "licenseType": "LGPL-2.1",
        "severity": "medium",
        "instructions": ""
      },
      "LGPL-3.0": {
        "licenseType": "LGPL-3.0",
        "severity": "medium",
        "instructions": ""
      },
      "MPL-1.1": {
        "licenseType": "MPL-1.1",
        "severity": "medium",
        "instructions": ""
      },
      "MPL-2.0": {
        "licenseType": "MPL-2.0",
        "severity": "medium",
        "instructions": ""
      },
      "MS-RL": {
        "licenseType": "MS-RL",
        "severity": "medium",
        "instructions": ""
      },
      "SimPL-2.0": {
        "licenseType": "SimPL-2.0",
        "severity": "high",
        "instructions": ""
      }
    }
  },
  "packageManager": "npm",
  "ignoreSettings": {
    "adminOnly": false,
    "reasonRequired": false,
    "disregardFilesystemIgnores": false
  },
  "summary": "254 vulnerable dependency paths",
  "remediation": {
    "unresolved": [
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "alternativeIds": [],
        "creationTime": "2021-05-26T14:30:51.778839Z",
        "credit": [
          "Ben Caller",
          "Robert McLaughlin"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n[ansi-html](https://www.npmjs.org/package/ansi-html) is an An elegant lib that converts the chalked (ANSI) text to HTML.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). If an attacker provides a malicious string, it will get stuck processing the input for an extremely long time.\r\n\r\n### PoC\r\n```\r\nrequire('ansi-html')('x1b[0mx1b[' + '0'.repeat(35))\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ansi-html` to version 0.0.9 or higher.\n## References\n- [GitHub Issue](https://github.com/Tjatse/ansi-html/issues/19)\n- [GitHub PR](https://github.com/Tjatse/ansi-html/pull/20)\n",
        "disclosureTime": "2021-05-26T14:19:05Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "0.0.9"
        ],
        "id": "SNYK-JS-ANSIHTML-1296849",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "CVE": [
            "CVE-2021-23424"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-03-13T13:31:55.912082Z",
        "moduleName": "ansi-html",
        "packageManager": "npm",
        "packageName": "ansi-html",
        "patches": [],
        "proprietary": true,
        "publicationTime": "2021-08-18T15:37:20Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/Tjatse/ansi-html/issues/19"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/Tjatse/ansi-html/pull/20"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<0.0.9"
          ]
        },
        "from": [
          "acme-review@1.0.0",
          "react-scripts@3.4.4",
          "webpack-dev-server@3.11.0",
          "ansi-html@0.0.7"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "ansi-html",
        "version": "0.0.7",
        "severityWithCritical": "high"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "alternativeIds": [],
        "creationTime": "2022-04-07T07:58:38.528444Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `mapValues()` method, due to improper check in `createObjectIterator` function.\r\n\r\n## PoC\r\n\r\n```js\r\n//when objects are parsed, all properties are created as own (the objects can come from outside sources (http requests/ file))\r\nconst hasOwn = JSON.parse('{\"__proto__\": {\"isAdmin\": true}}');\r\n\r\n//does not have the property,  because it's inside object's own \"__proto__\"\r\nconsole.log(hasOwn.isAdmin);\r\n\r\nasync.mapValues(hasOwn, (val, key, cb) => cb(null, val), (error, result) => {\r\n  // after the method executes, hasOwn.__proto__ value (isAdmin: true) replaces the prototype of the newly created object, leading to potential exploits.\r\n  console.log(result.isAdmin);\r\n});\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `async` to version 2.6.4, 3.2.2 or higher.\n## References\n- [GitHub Backport PR](https://github.com/caolan/async/pull/1828)\n- [GitHub Commit](https://github.com/caolan/async/commit/8f7f90342a6571ba1c197d747ebed30c368096d2)\n- [GitHub Commit](https://github.com/caolan/async/commit/e1ecdbf79264f9ab488c7799f4c76996d5dca66d)\n- [PoC](https://jsfiddle.net/oz5twjd9/)\n",
        "disclosureTime": "2022-04-07T07:49:24Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "2.6.4",
          "3.2.2"
        ],
        "id": "SNYK-JS-ASYNC-2441827",
        "identifiers": {
          "CWE": [
            "CWE-1321"
          ],
          "CVE": [
            "CVE-2021-43138"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-06-14T08:24:43.116685Z",
        "moduleName": "async",
        "packageManager": "npm",
        "packageName": "async",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2022-04-07T14:22:18Z",
        "references": [
          {
            "title": "GitHub Backport PR",
            "url": "https://github.com/caolan/async/pull/1828"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/caolan/async/commit/8f7f90342a6571ba1c197d747ebed30c368096d2"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/caolan/async/commit/e1ecdbf79264f9ab488c7799f4c76996d5dca66d"
          },
          {
            "title": "PoC",
            "url": "https://jsfiddle.net/oz5twjd9/"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Prototype Pollution",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            ">=2.0.0 <2.6.4",
            ">=3.0.0 <3.2.2"
          ]
        },
        "from": [
          "acme-review@1.0.0",
          "react-scripts@3.4.4",
          "webpack-dev-server@3.11.0",
          "portfinder@1.0.28",
          "async@2.6.3"
        ],
        "upgradePath": [
          false,
          "react-scripts@3.4.4",
          "webpack-dev-server@3.11.0",
          "portfinder@1.0.28",
          "async@2.6.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "async",
        "version": "2.6.3",
        "severityWithCritical": "high"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
        "alternativeIds": [],
        "creationTime": "2021-02-18T13:32:47.195986Z",
        "credit": [
          "Yeting Li"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n[d3-color](https://www.npmjs.org/package/d3-color) is a Color spaces! RGB, HSL, Cubehelix, Lab and HCL (Lch).\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `rgb()` and `hrc()` functions. \r\n\r\nPoC by Yeting Li: \r\n```\r\nvar d3Color = require(\"d3-color\")\r\n// d3Color.rgb(\"rgb(255,255,255)\")\r\n\r\nfunction build_blank(n) {\r\n    var ret = \"rgb(\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"1\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\nfor(var i = 1; i <= 5000000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_blank(i)\r\n        d3Color.rgb(attack_str)\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `d3-color` to version 3.1.0 or higher.\n## References\n- [Github PR](https://github.com/d3/d3-color/pull/100)\n- [Github PR](https://github.com/d3/d3-color/pull/99)\n- [GitHub PR](https://github.com/d3/d3-color/pull/89)\n- [Github Releases](https://github.com/d3/d3-color/releases/tag/v3.1.0)\n",
        "disclosureTime": "2021-02-18T13:30:50Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "3.1.0"
        ],
        "id": "SNYK-JS-D3COLOR-1076592",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "CVE": []
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-06-09T15:16:21.616192Z",
        "moduleName": "d3-color",
        "packageManager": "npm",
        "packageName": "d3-color",
        "patches": [],
        "proprietary": true,
        "publicationTime": "2021-07-05T14:17:56Z",
        "references": [
          {
            "title": "Github PR",
            "url": "https://github.com/d3/d3-color/pull/100"
          },
          {
            "title": "Github PR",
            "url": "https://github.com/d3/d3-color/pull/99"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/d3/d3-color/pull/89"
          },
          {
            "title": "Github Releases",
            "url": "https://github.com/d3/d3-color/releases/tag/v3.1.0"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<3.1.0"
          ]
        },
        "from": [
          "acme-review@1.0.0",
          "@nivo/line@0.67.0",
          "@nivo/annotations@0.67.0",
          "@nivo/colors@0.67.0",
          "d3-scale@3.3.0",
          "d3-interpolate@2.0.1",
          "d3-color@2.0.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "d3-color",
        "version": "2.0.0",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:H/I:L/A:L",
        "alternativeIds": [],
        "creationTime": "2021-05-18T16:51:02.039581Z",
        "credit": [
          "chalker"
        ],
        "cvssScore": 7.7,
        "description": "## Overview\n[dns-packet](https://www.npmjs.com/package/dns-packet) is an An abstract-encoding compliant module for encoding / decoding DNS packets\n\nAffected versions of this package are vulnerable to Remote Memory Exposure. It creates buffers with `allocUnsafe` and does not always fill them before forming network packets. This can expose internal application memory over unencrypted network when querying crafted invalid domain names.\n## Remediation\nUpgrade `dns-packet` to version 1.3.4, 5.2.4 or higher.\n## References\n- [GitHub Commit](https://github.com/mafintosh/dns-packet/commit/25f15dd0fedc53688b25fd053ebbdffe3d5c1c56)\n- [HackerOne Report](https://hackerone.com/bugs?subject=user&amp;report_id=968858)\n",
        "disclosureTime": "2021-05-18T16:19:47Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "1.3.4",
          "5.2.4"
        ],
        "id": "SNYK-JS-DNSPACKET-1293563",
        "identifiers": {
          "CWE": [
            "CWE-201"
          ],
          "GHSA": [
            "GHSA-3wcq-x3mq-6r9p"
          ],
          "CVE": [
            "CVE-2021-23386"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2021-07-06T14:08:52.020369Z",
        "moduleName": "dns-packet",
        "packageManager": "npm",
        "packageName": "dns-packet",
        "patches": [],
        "proprietary": true,
        "publicationTime": "2021-05-20T14:40:43Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/mafintosh/dns-packet/commit/25f15dd0fedc53688b25fd053ebbdffe3d5c1c56"
          },
          {
            "title": "HackerOne Report",
            "url": "https://hackerone.com/bugs?subject=user&amp%3Breport_id=968858"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Remote Memory Exposure",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<1.3.4",
            ">=2.0.0 <5.2.4"
          ]
        },
        "from": [
          "acme-review@1.0.0",
          "react-scripts@3.4.4",
          "webpack-dev-server@3.11.0",
          "bonjour@3.5.0",
          "multicast-dns@6.2.3",
          "dns-packet@1.3.1"
        ],
        "upgradePath": [
          false,
          "react-scripts@3.4.4",
          "webpack-dev-server@3.11.0",
          "bonjour@3.5.0",
          "multicast-dns@6.2.3",
          "dns-packet@1.3.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "dns-packet",
        "version": "1.3.1",
        "severityWithCritical": "high"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N/E:P",
        "alternativeIds": [],
        "creationTime": "2022-05-12T14:16:29.503630Z",
        "credit": [
          "Timothee Desurmont"
        ],
        "cvssScore": 6.5,
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Information Exposure by allowing cookies and the authorization headers to be leaked to external sites.\n## Remediation\nUpgrade `eventsource` to version 1.1.1, 2.0.2 or higher.\n## References\n- [GitHub Commit](https://github.com/eventsource/eventsource/commit/10ee0c4881a6ba2fe65ec18ed195ac35889583c4)\n",
        "disclosureTime": "2022-05-12T14:14:39Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "1.1.1",
          "2.0.2"
        ],
        "id": "SNYK-JS-EVENTSOURCE-2823375",
        "identifiers": {
          "CWE": [
            "CWE-200"
          ],
          "CVE": [
            "CVE-2022-1650"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-05-26T16:55:11.791827Z",
        "moduleName": "eventsource",
        "packageManager": "npm",
        "packageName": "eventsource",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2022-05-12T14:23:37Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/eventsource/eventsource/commit/10ee0c4881a6ba2fe65ec18ed195ac35889583c4"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Information Exposure",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<1.1.1",
            ">=2.0.0 <2.0.2"
          ]
        },
        "from": [
          "acme-review@1.0.0",
          "react-scripts@3.4.4",
          "webpack-dev-server@3.11.0",
          "sockjs-client@1.4.0",
          "eventsource@1.1.0"
        ],
        "upgradePath": [
          false,
          "react-scripts@3.4.4",
          "webpack-dev-server@3.11.0",
          "sockjs-client@1.4.0",
          "eventsource@1.1.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "eventsource",
        "version": "1.1.0",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:N/A:N/E:P",
        "alternativeIds": [],
        "creationTime": "2022-01-11T12:27:16.635235Z",
        "credit": [
          "ranjit-git"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Information Exposure by leaking the cookie header to a third party site in the process of fetching a remote URL with the cookie in the request body. If the response contains a `location` header, it will follow the redirect to another URL of a potentially malicious actor, to which the cookie would be exposed.\n## Remediation\nUpgrade `follow-redirects` to version 1.14.7 or higher.\n## References\n- [GitHub Commit](https://github.com/follow-redirects/follow-redirects/commit/8b347cbcef7c7b72a6e9be20f5710c17d6163c22)\n",
        "disclosureTime": "2022-01-11T12:06:36Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "1.14.7"
        ],
        "id": "SNYK-JS-FOLLOWREDIRECTS-2332181",
        "identifiers": {
          "CWE": [
            "CWE-359"
          ],
          "CVE": [
            "CVE-2022-0155"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-01-12T12:49:36.151110Z",
        "moduleName": "follow-redirects",
        "packageManager": "npm",
        "packageName": "follow-redirects",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2022-01-12T12:49:36.149349Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/follow-redirects/follow-redirects/commit/8b347cbcef7c7b72a6e9be20f5710c17d6163c22"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Information Exposure",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<1.14.7"
          ]
        },
        "from": [
          "acme-review@1.0.0",
          "react-scripts@3.4.4",
          "webpack-dev-server@3.11.0",
          "http-proxy-middleware@0.19.1",
          "http-proxy@1.18.1",
          "follow-redirects@1.14.1"
        ],
        "upgradePath": [
          false,
          "react-scripts@3.4.4",
          "webpack-dev-server@3.11.0",
          "http-proxy-middleware@0.19.1",
          "http-proxy@1.18.1",
          "follow-redirects@1.14.7"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "follow-redirects",
        "version": "1.14.1",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:A/AC:H/PR:L/UI:N/S:U/C:L/I:N/A:N",
        "alternativeIds": [],
        "creationTime": "2022-02-09T13:37:15.331538Z",
        "credit": [
          "haxatron"
        ],
        "cvssScore": 2.6,
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Information Exposure due a leakage of the Authorization header from the same hostname during HTTPS to HTTP redirection. An attacker who can listen in on the wire (or perform a MITM attack) will be able to receive the Authorization header due to the usage of the insecure HTTP protocol which does not verify the hostname the request is sending to.\n## Remediation\nUpgrade `follow-redirects` to version 1.14.8 or higher.\n## References\n- [GitHub Commit](https://github.com/follow-redirects/follow-redirects/commit/62e546a99c07c3ee5e4e0718c84a6ca127c5c445)\n",
        "disclosureTime": "2022-02-09T12:43:30Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "1.14.8"
        ],
        "id": "SNYK-JS-FOLLOWREDIRECTS-2396346",
        "identifiers": {
          "CWE": [
            "CWE-200"
          ],
          "CVE": [
            "CVE-2022-0536"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-02-09T17:20:22.056440Z",
        "moduleName": "follow-redirects",
        "packageManager": "npm",
        "packageName": "follow-redirects",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2022-02-09T17:20:22.054220Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/follow-redirects/follow-redirects/commit/62e546a99c07c3ee5e4e0718c84a6ca127c5c445"
          }
        ],
        "severity": "low",
        "socialTrendAlert": false,
        "title": "Information Exposure",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<1.14.8"
          ]
        },
        "from": [
          "acme-review@1.0.0",
          "react-scripts@3.4.4",
          "webpack-dev-server@3.11.0",
          "http-proxy-middleware@0.19.1",
          "http-proxy@1.18.1",
          "follow-redirects@1.14.1"
        ],
        "upgradePath": [
          false,
          "react-scripts@3.4.4",
          "webpack-dev-server@3.11.0",
          "http-proxy-middleware@0.19.1",
          "http-proxy@1.18.1",
          "follow-redirects@1.14.8"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "follow-redirects",
        "version": "1.14.1",
        "severityWithCritical": "low"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:H",
        "alternativeIds": [],
        "creationTime": "2021-11-14T15:11:37.579980Z",
        "credit": [
          "Yoshino-s"
        ],
        "cvssScore": 8.6,
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `validate` function, which when given a special payload will pollute `Object` with undesired attributes.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `json-schema` to version 0.4.0 or higher.\n## References\n- [GitHub Commit](https://github.com/kriszyp/json-schema/commit/22f146111f541d9737e832823699ad3528ca7741)\n",
        "disclosureTime": "2021-11-14T15:05:57Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "0.4.0"
        ],
        "id": "SNYK-JS-JSONSCHEMA-1920922",
        "identifiers": {
          "CWE": [
            "CWE-1321"
          ],
          "CVE": [
            "CVE-2021-3918"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2021-12-17T15:25:44.736835Z",
        "moduleName": "json-schema",
        "packageManager": "npm",
        "packageName": "json-schema",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2021-11-14T16:49:43.070251Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/kriszyp/json-schema/commit/22f146111f541d9737e832823699ad3528ca7741"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Prototype Pollution",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<0.4.0"
          ]
        },
        "from": [
          "acme-review@1.0.0",
          "react-scripts@3.4.4",
          "jest@24.9.0",
          "jest-cli@24.9.0",
          "@jest/core@24.9.0",
          "@jest/reporters@24.9.0",
          "jest-runtime@24.9.0",
          "jest-config@24.9.0",
          "jest-environment-jsdom@24.9.0",
          "jsdom@11.12.0",
          "request@2.88.2",
          "http-signature@1.2.0",
          "jsprim@1.4.1",
          "json-schema@0.2.3"
        ],
        "upgradePath": [
          false,
          "react-scripts@3.4.4",
          "jest@24.9.0",
          "jest-cli@24.9.0",
          "@jest/core@24.9.0",
          "@jest/reporters@24.9.0",
          "jest-runtime@24.9.0",
          "jest-config@24.9.0",
          "jest-environment-jsdom@24.9.0",
          "jsdom@11.12.0",
          "request@2.88.2",
          "http-signature@1.2.0",
          "jsprim@1.4.2",
          "json-schema@0.4.0"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "json-schema",
        "version": "0.2.3",
        "severityWithCritical": "high"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
        "alternativeIds": [],
        "creationTime": "2021-03-22T12:03:39.360085Z",
        "credit": [
          "Marc Hassan"
        ],
        "cvssScore": 7.2,
        "description": "## Overview\n[lodash.template](https://www.npmjs.com/package/lodash.template) is a The Lodash method _.template exported as a Node.js module.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nThere is no fixed version for `lodash.template`.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
        "disclosureTime": "2020-11-17T13:02:10Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [],
        "id": "SNYK-JS-LODASHTEMPLATE-1088054",
        "identifiers": {
          "CWE": [
            "CWE-78"
          ],
          "GHSA": [
            "GHSA-35jh-r3h4-6jhm"
          ],
          "CVE": [
            "CVE-2021-23337"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-04-05T12:28:18.096614Z",
        "moduleName": "lodash.template",
        "packageManager": "npm",
        "packageName": "lodash.template",
        "patches": [],
        "proprietary": true,
        "publicationTime": "2021-02-15T11:50:50Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c"
          },
          {
            "title": "Vulnerable Code",
            "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Command Injection",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "*"
          ]
        },
        "from": [
          "acme-review@1.0.0",
          "react-scripts@3.4.4",
          "workbox-webpack-plugin@4.3.1",
          "workbox-build@4.3.1",
          "lodash.template@4.5.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "lodash.template",
        "version": "4.5.0",
        "severityWithCritical": "high"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
        "alternativeIds": [],
        "creationTime": "2022-03-18T13:02:08.840039Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 3.7,
        "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution due to a missing handler to `Function.prototype`.\r\n\r\n**Notes:** \r\n\r\n- This vulnerability is a bypass to [CVE-2020-7598](https://security.snyk.io/vuln/SNYK-JS-MINIMIST-559764)\r\n\r\n- The reason for the different CVSS between CVE-2021-44906 to CVE-2020-7598, is that CVE-2020-7598 can pollute objects, while CVE-2021-44906 can pollute only function.\r\n\r\n\r\n## PoC by Snyk\r\n```js\r\nrequire('minimist')('--_.constructor.constructor.prototype.foo bar'.split(' '));\r\nconsole.log((function(){}).foo); // bar\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 1.2.6 or higher.\n## References\n- [Fix Commit](https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d)\n- [GitHub Issue](https://github.com/substack/minimist/issues/164)\n- [Vulnerable Code](https://github.com/substack/minimist/blob/master/index.js#L69)\n",
        "disclosureTime": "2022-03-18T12:24:05Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "1.2.6"
        ],
        "id": "SNYK-JS-MINIMIST-2429795",
        "identifiers": {
          "CWE": [
            "CWE-1321"
          ],
          "SNYK": [
            "SNYK-JS-MINIMIST-559764"
          ],
          "CVE": [
            "CVE-2021-44906"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-06-06T12:01:22.204194Z",
        "moduleName": "minimist",
        "packageManager": "npm",
        "packageName": "minimist",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2022-03-21T12:09:35Z",
        "references": [
          {
            "title": "Fix Commit",
            "url": "https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/substack/minimist/issues/164"
          },
          {
            "title": "Vulnerable Code",
            "url": "https://github.com/substack/minimist/blob/master/index.js%23L69"
          }
        ],
        "severity": "low",
        "socialTrendAlert": false,
        "title": "Prototype Pollution",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<1.2.6"
          ]
        },
        "from": [
          "acme-review@1.0.0",
          "jest-enzyme@7.1.2",
          "jest-environment-enzyme@7.1.2",
          "jest-environment-jsdom@24.9.0",
          "@jest/environment@24.9.0",
          "@jest/transform@24.9.0",
          "jest-haste-map@24.9.0",
          "sane@4.1.0",
          "@cnakazawa/watch@1.0.4",
          "minimist@1.2.5"
        ],
        "upgradePath": [
          false,
          "jest-enzyme@7.1.2",
          "jest-environment-enzyme@7.1.2",
          "jest-environment-jsdom@24.9.0",
          "@jest/environment@24.9.0",
          "@jest/transform@24.9.0",
          "jest-haste-map@24.9.0",
          "sane@4.1.0",
          "@cnakazawa/watch@1.0.4",
          "minimist@1.2.6"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "minimist",
        "version": "1.2.5",
        "severityWithCritical": "low"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
        "alternativeIds": [],
        "creationTime": "2022-04-05T08:46:07.677588Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n[moment](https://www.npmjs.com/package/moment) is a lightweight JavaScript date library for parsing, validating, manipulating, and formatting dates.\n\nAffected versions of this package are vulnerable to Directory Traversal when a user provides a locale string which is directly used to switch moment locale.\n\n## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`. \n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```\n\n## Remediation\nUpgrade `moment` to version 2.29.2 or higher.\n## References\n- [GitHub Commit](https://github.com/moment/moment/commit/4211bfc8f15746be4019bba557e29a7ba83d54c5)\n",
        "disclosureTime": "2022-04-05T08:39:23Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "2.29.2"
        ],
        "id": "SNYK-JS-MOMENT-2440688",
        "identifiers": {
          "CWE": [
            "CWE-22"
          ],
          "GHSA": [
            "GHSA-8hfj-j24r-96c4"
          ],
          "CVE": [
            "CVE-2022-24785"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-04-05T12:30:50.880408Z",
        "moduleName": "moment",
        "packageManager": "npm",
        "packageName": "moment",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2022-04-05T12:30:50.878091Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/moment/moment/commit/4211bfc8f15746be4019bba557e29a7ba83d54c5"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Directory Traversal",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<2.29.2"
          ]
        },
        "from": [
          "acme-review@1.0.0",
          "@types/moment-timezone@0.5.30",
          "moment-timezone@0.5.33",
          "moment@2.29.1"
        ],
        "upgradePath": [
          false,
          "@types/moment-timezone@0.5.30",
          "moment-timezone@0.5.33",
          "moment@2.29.2"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "moment",
        "version": "2.29.1",
        "severityWithCritical": "high"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
        "alternativeIds": [],
        "creationTime": "2022-01-17T12:08:00.675849Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 6.5,
        "description": "## Overview\n[node-fetch](https://www.npmjs.com/package/node-fetch) is a light-weight module that brings window.fetch to node.js\n\nAffected versions of this package are vulnerable to Information Exposure when fetching a remote url with Cookie, if it get a `Location` response header, it will follow that url and try to fetch that url with provided cookie. This can lead to forwarding secure headers to 3th party.\n## Remediation\nUpgrade `node-fetch` to version 2.6.7, 3.1.1 or higher.\n## References\n- [Github Commit](https://github.com/node-fetch/node-fetch/commit/1ef4b560a17e644a02a3bfdea7631ffeee578b35)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/commit/36e47e8a6406185921e4985dcbeff140d73eaa10)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/pull/1449/commits/5c32f002fdd65b1c6a8f1e3620210813d45c7e60)\n- [GitHub PR](https://github.com/node-fetch/node-fetch/pull/1449)\n",
        "disclosureTime": "2022-01-17T12:00:01Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "2.6.7",
          "3.1.1"
        ],
        "id": "SNYK-JS-NODEFETCH-2342118",
        "identifiers": {
          "CWE": [
            "CWE-200"
          ],
          "CVE": [
            "CVE-2022-0235",
            "CVE-2022-1365"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-04-18T09:45:11.278222Z",
        "moduleName": "node-fetch",
        "packageManager": "npm",
        "packageName": "node-fetch",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2022-01-17T16:25:00Z",
        "references": [
          {
            "title": "Github Commit",
            "url": "https://github.com/node-fetch/node-fetch/commit/1ef4b560a17e644a02a3bfdea7631ffeee578b35"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/node-fetch/node-fetch/commit/36e47e8a6406185921e4985dcbeff140d73eaa10"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/node-fetch/node-fetch/pull/1449/commits/5c32f002fdd65b1c6a8f1e3620210813d45c7e60"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/node-fetch/node-fetch/pull/1449"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Information Exposure",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<2.6.7",
            ">=3.0.0 <3.1.1"
          ]
        },
        "from": [
          "acme-review@1.0.0",
          "jest-fetch-mock@3.0.3",
          "cross-fetch@3.1.4",
          "node-fetch@2.6.1"
        ],
        "upgradePath": [
          false,
          "jest-fetch-mock@3.0.3",
          "cross-fetch@3.1.5",
          "node-fetch@2.6.7"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "node-fetch",
        "version": "2.6.1",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H/E:U/RL:O/RC:R",
        "alternativeIds": [],
        "creationTime": "2020-09-11T10:50:56.354201Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 5.9,
        "description": "## Overview\n[node-fetch](https://www.npmjs.com/package/node-fetch) is a light-weight module that brings window.fetch to node.js\n\nAffected versions of this package are vulnerable to Denial of Service. Node Fetch did not honor the `size` option after following a redirect, which means that when a content size was over the limit, a FetchError would never get thrown and the process would end without failure.\n## Remediation\nUpgrade `node-fetch` to version 2.6.1, 3.0.0-beta.9 or higher.\n## References\n- [GitHub Advisory](https://github.com/node-fetch/node-fetch/security/advisories/GHSA-w7rc-rwvf-8q5r)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/commit/2358a6c2563d1730a0cdaccc197c611949f6a334)\n",
        "disclosureTime": "2020-09-10T17:55:53Z",
        "exploit": "Unproven",
        "functions": [
          {
            "functionId": {
              "filePath": "lib/index.js",
              "className": null,
              "functionName": "fetch"
            },
            "version": [
              ">1.7.1 <1.7.4",
              ">2.0.0-alpha.7 <2.6.1"
            ]
          }
        ],
        "fixedIn": [
          "2.6.1",
          "3.0.0-beta.9"
        ],
        "id": "SNYK-JS-NODEFETCH-674311",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "GHSA": [
            "GHSA-w7rc-rwvf-8q5r"
          ],
          "CVE": [
            "CVE-2020-15168"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-01-26T16:47:31.069025Z",
        "moduleName": "node-fetch",
        "packageManager": "npm",
        "packageName": "node-fetch",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-09-11T14:12:46Z",
        "references": [
          {
            "title": "GitHub Advisory",
            "url": "https://github.com/node-fetch/node-fetch/security/advisories/GHSA-w7rc-rwvf-8q5r"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/node-fetch/node-fetch/commit/2358a6c2563d1730a0cdaccc197c611949f6a334"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Denial of Service",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [
          {
            "functionId": {
              "filePath": "lib/index.js",
              "functionName": "fetch"
            },
            "version": [
              ">1.7.1 <1.7.4",
              ">2.0.0-alpha.7 <2.6.1"
            ]
          }
        ],
        "semver": {
          "vulnerable": [
            "<2.6.1",
            ">=3.0.0-beta.1 <3.0.0-beta.9"
          ]
        },
        "from": [
          "acme-review@1.0.0",
          "@nivo/line@0.67.0",
          "@nivo/legends@0.67.0",
          "recompose@0.30.0",
          "fbjs@0.8.17",
          "isomorphic-fetch@2.2.1",
          "node-fetch@1.7.3"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "node-fetch",
        "version": "1.7.3",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N/E:P",
        "alternativeIds": [],
        "creationTime": "2022-01-06T11:16:25.853884Z",
        "credit": [
          "ready-research"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n[node-forge](https://github.com/digitalbazaar/forge) is a JavaScript implementations of network transports, cryptography, ciphers, PKI, message digests, and various utilities.\n\nAffected versions of this package are vulnerable to Open Redirect via `parseUrl` function when it mishandles certain uses of backslash such as `https:/\\/\\/\\` and interprets the URI as a relative path.\r\n\r\n### PoC:\r\n```js\r\n\r\n// poc.js\r\nvar forge = require(\"node-forge\");\r\nvar url = forge.util.parseUrl(\"https:/\\/\\/\\www.github.com/foo/bar\");\r\nconsole.log(url);\r\n\r\n// Output of node poc.js:\r\n\r\n{\r\n  full: 'https://',\r\n  scheme: 'https',\r\n  host: '',\r\n  port: 443,\r\n  path: '/www.github.com/foo/bar',                        <<<---- path  should be \"/foo/bar\"\r\n  fullHost: ''\r\n}\r\n\r\n```\n## Remediation\nUpgrade `node-forge` to version 1.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/digitalbazaar/forge/commit/db8016c805371e72b06d8e2edfe0ace0df934a5e)\n- [URL Confusion Explained - Snyk Blog](https://snyk.io/blog/url-confusion-vulnerabilities/)\n",
        "disclosureTime": "2022-01-06T11:09:34Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "1.0.0"
        ],
        "id": "SNYK-JS-NODEFORGE-2330875",
        "identifiers": {
          "CWE": [
            "CWE-601"
          ],
          "GHSA": [
            "GHSA-gf8q-jrpm-jvxq"
          ],
          "CVE": [
            "CVE-2022-0122"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-01-10T22:56:46.640081Z",
        "moduleName": "node-forge",
        "packageManager": "npm",
        "packageName": "node-forge",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2022-01-06T17:17:25Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/digitalbazaar/forge/commit/db8016c805371e72b06d8e2edfe0ace0df934a5e"
          },
          {
            "title": "URL Confusion Explained - Snyk Blog",
            "url": "https://snyk.io/blog/url-confusion-vulnerabilities/"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Open Redirect",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<1.0.0"
          ]
        },
        "from": [
          "acme-review@1.0.0",
          "react-scripts@3.4.4",
          "webpack-dev-server@3.11.0",
          "selfsigned@1.10.11",
          "node-forge@0.10.0"
        ],
        "upgradePath": [
          false,
          "react-scripts@3.4.4",
          "webpack-dev-server@3.11.0",
          "selfsigned@1.10.13",
          "node-forge@1.2.0"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "node-forge",
        "version": "0.10.0",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L",
        "alternativeIds": [],
        "creationTime": "2022-01-09T10:11:24.467022Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 6.3,
        "description": "## Overview\n[node-forge](https://github.com/digitalbazaar/forge) is a JavaScript implementations of network transports, cryptography, ciphers, PKI, message digests, and various utilities.\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `forge.debug` API if called with untrusted input.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `node-forge` to version 1.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/digitalbazaar/forge/commit/51228083550dde97701ac8e06c629a5184117562)\n",
        "disclosureTime": "2022-01-08T00:22:42Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "1.0.0"
        ],
        "id": "SNYK-JS-NODEFORGE-2331908",
        "identifiers": {
          "CWE": [
            "CWE-1321"
          ],
          "GHSA": [
            "GHSA-5rrq-pxf6-6jx5"
          ],
          "CVE": []
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-01-09T15:54:48.990788Z",
        "moduleName": "node-forge",
        "packageManager": "npm",
        "packageName": "node-forge",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2022-01-09T15:54:48.988558Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/digitalbazaar/forge/commit/51228083550dde97701ac8e06c629a5184117562"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Prototype Pollution",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<1.0.0"
          ]
        },
        "from": [
          "acme-review@1.0.0",
          "react-scripts@3.4.4",
          "webpack-dev-server@3.11.0",
          "selfsigned@1.10.11",
          "node-forge@0.10.0"
        ],
        "upgradePath": [
          false,
          "react-scripts@3.4.4",
          "webpack-dev-server@3.11.0",
          "selfsigned@1.10.13",
          "node-forge@1.2.0"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "node-forge",
        "version": "0.10.0",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L",
        "alternativeIds": [],
        "creationTime": "2022-03-20T08:56:55.258238Z",
        "credit": [
          "Moosa Yahyazadeh"
        ],
        "cvssScore": 5.6,
        "description": "## Overview\n[node-forge](https://github.com/digitalbazaar/forge) is a JavaScript implementations of network transports, cryptography, ciphers, PKI, message digests, and various utilities.\n\nAffected versions of this package are vulnerable to Improper Verification of Cryptographic Signature due to RSA's `PKCS#1 v1.5` signature verification code which does not properly check `DigestInfo` for a proper `ASN.1` structure. This can lead to successful verification with signatures that contain invalid structures but a valid digest.\n## Remediation\nUpgrade `node-forge` to version 1.3.0 or higher.\n## References\n- [GitHub Commit](https://github.com/digitalbazaar/forge/commit/3f0b49a0573ef1bb7af7f5673c0cfebf00424df1)\n",
        "disclosureTime": "2022-03-20T08:47:53Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "1.3.0"
        ],
        "id": "SNYK-JS-NODEFORGE-2430337",
        "identifiers": {
          "CWE": [
            "CWE-347"
          ],
          "GHSA": [
            "GHSA-2r2c-g63r-vccr"
          ],
          "CVE": [
            "CVE-2022-24773"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-03-20T16:39:53.367585Z",
        "moduleName": "node-forge",
        "packageManager": "npm",
        "packageName": "node-forge",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2022-03-20T16:39:53.330824Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/digitalbazaar/forge/commit/3f0b49a0573ef1bb7af7f5673c0cfebf00424df1"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Improper Verification of Cryptographic Signature",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<1.3.0"
          ]
        },
        "from": [
          "acme-review@1.0.0",
          "react-scripts@3.4.4",
          "webpack-dev-server@3.11.0",
          "selfsigned@1.10.11",
          "node-forge@0.10.0"
        ],
        "upgradePath": [
          false,
          "react-scripts@3.4.4",
          "webpack-dev-server@3.11.0",
          "selfsigned@1.10.13",
          "node-forge@1.3.0"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "node-forge",
        "version": "0.10.0",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
        "alternativeIds": [],
        "creationTime": "2022-03-20T09:05:59.631233Z",
        "credit": [
          "Moosa Yahyazadeh"
        ],
        "cvssScore": 7.3,
        "description": "## Overview\n[node-forge](https://github.com/digitalbazaar/forge) is a JavaScript implementations of network transports, cryptography, ciphers, PKI, message digests, and various utilities.\n\nAffected versions of this package are vulnerable to Improper Verification of Cryptographic Signature due to RSA's `PKCS#1` v1.5 signature verification code which does not check for tailing garbage bytes after decoding a `DigestInfo` ASN.1 structure. This can allow padding bytes to be removed and garbage data added to forge a signature when a low public exponent is being used.\n## Remediation\nUpgrade `node-forge` to version 1.3.0 or higher.\n## References\n- [GitHub Commit](https://github.com/digitalbazaar/forge/commit/3f0b49a0573ef1bb7af7f5673c0cfebf00424df1)\n",
        "disclosureTime": "2022-03-20T08:57:14Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "1.3.0"
        ],
        "id": "SNYK-JS-NODEFORGE-2430339",
        "identifiers": {
          "CWE": [
            "CWE-347"
          ],
          "GHSA": [
            "GHSA-x4jg-mjrx-434g"
          ],
          "CVE": [
            "CVE-2022-24772"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-03-20T16:39:52.726979Z",
        "moduleName": "node-forge",
        "packageManager": "npm",
        "packageName": "node-forge",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2022-03-20T16:39:52.700898Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/digitalbazaar/forge/commit/3f0b49a0573ef1bb7af7f5673c0cfebf00424df1"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Improper Verification of Cryptographic Signature",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<1.3.0"
          ]
        },
        "from": [
          "acme-review@1.0.0",
          "react-scripts@3.4.4",
          "webpack-dev-server@3.11.0",
          "selfsigned@1.10.11",
          "node-forge@0.10.0"
        ],
        "upgradePath": [
          false,
          "react-scripts@3.4.4",
          "webpack-dev-server@3.11.0",
          "selfsigned@1.10.13",
          "node-forge@1.3.0"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "node-forge",
        "version": "0.10.0",
        "severityWithCritical": "high"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L",
        "alternativeIds": [],
        "creationTime": "2022-03-20T09:20:18.671201Z",
        "credit": [
          "Moosa Yahyazadeh"
        ],
        "cvssScore": 5.6,
        "description": "## Overview\n[node-forge](https://github.com/digitalbazaar/forge) is a JavaScript implementations of network transports, cryptography, ciphers, PKI, message digests, and various utilities.\n\nAffected versions of this package are vulnerable to Improper Verification of Cryptographic Signature due to RSA`s `PKCS#1` v1.5 signature verification code which is lenient in checking the digest algorithm structure. This can allow a crafted structure that steals padding bytes and uses unchecked portion of the PKCS#1 encoded message to forge a signature when a low public exponent is being used.\n## Remediation\nUpgrade `node-forge` to version 1.3.0 or higher.\n## References\n- [GitHub Commit](https://github.com/digitalbazaar/forge/commit/3f0b49a0573ef1bb7af7f5673c0cfebf00424df1)\n",
        "disclosureTime": "2022-03-20T09:07:01Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "1.3.0"
        ],
        "id": "SNYK-JS-NODEFORGE-2430341",
        "identifiers": {
          "CWE": [
            "CWE-347"
          ],
          "GHSA": [
            "GHSA-cfm4-qjh2-4765"
          ],
          "CVE": [
            "CVE-2022-24771"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-03-20T16:39:53.013303Z",
        "moduleName": "node-forge",
        "packageManager": "npm",
        "packageName": "node-forge",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2022-03-20T16:39:53.005772Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/digitalbazaar/forge/commit/3f0b49a0573ef1bb7af7f5673c0cfebf00424df1"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Improper Verification of Cryptographic Signature",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<1.3.0"
          ]
        },
        "from": [
          "acme-review@1.0.0",
          "react-scripts@3.4.4",
          "webpack-dev-server@3.11.0",
          "selfsigned@1.10.11",
          "node-forge@0.10.0"
        ],
        "upgradePath": [
          false,
          "react-scripts@3.4.4",
          "webpack-dev-server@3.11.0",
          "selfsigned@1.10.13",
          "node-forge@1.3.0"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "node-forge",
        "version": "0.10.0",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2022-05-23T12:23:14.606493Z",
        "credit": [
          "Diego Perini"
        ],
        "cvssScore": 6.2,
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Denial of Service (DoS) when it is provided the invalid selector `_:-ms-fullscreen`. This triggers an infinite loop.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nA fix was pushed into the `master` branch but not yet published.\n## References\n- [GitHub Commit](https://github.com/dperini/nwsapi/commit/ab9cde1eb05ec9badfc3abaf15687b1a6f9e9ad3)\n- [GitHub Issue](https://github.com/dperini/nwsapi/issues/46#issuecomment-1134223659)\n",
        "disclosureTime": "2022-05-23T12:06:55Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [],
        "id": "SNYK-JS-NWSAPI-2841516",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "CVE": []
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-06-15T15:35:57.288474Z",
        "moduleName": "nwsapi",
        "packageManager": "npm",
        "packageName": "nwsapi",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2022-06-15T15:35:57.286030Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/dperini/nwsapi/commit/ab9cde1eb05ec9badfc3abaf15687b1a6f9e9ad3"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/dperini/nwsapi/issues/46%23issuecomment-1134223659"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Denial of Service (DoS)",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "*"
          ]
        },
        "from": [
          "acme-review@1.0.0",
          "react-scripts@3.4.4",
          "jest@24.9.0",
          "jest-cli@24.9.0",
          "@jest/core@24.9.0",
          "@jest/reporters@24.9.0",
          "jest-runtime@24.9.0",
          "jest-config@24.9.0",
          "jest-environment-jsdom@24.9.0",
          "jsdom@11.12.0",
          "nwsapi@2.2.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "nwsapi",
        "version": "2.2.0",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
        "alternativeIds": [],
        "creationTime": "2021-02-19T16:00:22.449519Z",
        "credit": [
          "Yeting Li"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n[path-parse](https://www.npmjs.org/package/path-parse) is a Node.js path.parse() ponyfill\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `splitDeviceRe`, `splitTailRe`, and `splitPathRe` regular expressions. ReDoS exhibits polynomial worst-case time complexity.\r\n\r\n### PoC\r\n```\r\nvar pathParse = require('path-parse');\r\nfunction build_attack(n) {\r\n    var ret = \"\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/\"\r\n    }\r\n    return ret + \"◎\";\r\n}\r\n\r\nfor(var i = 1; i <= 5000000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        pathParse(attack_str);\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `path-parse` to version 1.0.7 or higher.\n## References\n- [GitHub Issue 1](https://github.com/jbgutierrez/path-parse/issues/8)\n- [GitHub PR](https://github.com/jbgutierrez/path-parse/pull/10)\n",
        "disclosureTime": "2021-02-19T15:54:01Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "1.0.7"
        ],
        "id": "SNYK-JS-PATHPARSE-1077067",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "CVE": [
            "CVE-2021-23343"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2021-08-08T13:56:55.024375Z",
        "moduleName": "path-parse",
        "packageManager": "npm",
        "packageName": "path-parse",
        "patches": [],
        "proprietary": true,
        "publicationTime": "2021-05-04T08:38:49Z",
        "references": [
          {
            "title": "GitHub Issue 1",
            "url": "https://github.com/jbgutierrez/path-parse/issues/8"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/jbgutierrez/path-parse/pull/10"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<1.0.7"
          ]
        },
        "from": [
          "acme-review@1.0.0",
          "jest-enzyme@7.1.2",
          "jest-environment-enzyme@7.1.2",
          "jest-environment-jsdom@24.9.0",
          "@jest/environment@24.9.0",
          "@jest/transform@24.9.0",
          "babel-plugin-istanbul@5.2.0",
          "test-exclude@5.2.3",
          "read-pkg-up@4.0.0",
          "read-pkg@3.0.0",
          "normalize-package-data@2.5.0",
          "resolve@1.20.0",
          "path-parse@1.0.6"
        ],
        "upgradePath": [
          false,
          "jest-enzyme@7.1.2",
          "jest-environment-enzyme@7.1.2",
          "jest-environment-jsdom@24.9.0",
          "@jest/environment@24.9.0",
          "@jest/transform@24.9.0",
          "babel-plugin-istanbul@5.2.0",
          "test-exclude@5.2.3",
          "read-pkg-up@4.0.0",
          "read-pkg@3.0.0",
          "normalize-package-data@2.5.0",
          "resolve@1.20.0",
          "path-parse@1.0.7"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "path-parse",
        "version": "1.0.6",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
        "alternativeIds": [],
        "creationTime": "2021-10-08T12:15:58.593115Z",
        "credit": [
          "Ready Research"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). An attacker that is able to provide a crafted input to the strip functionality may cause an application to consume an excessive amount of CPU.\r\n\r\n### PoC\r\n```\r\nconst strip = require('prompts/lib/util/strip.js');\r\nfor(var i = 1; i <= 5000; i++) {\r\nvar time = Date.now();\r\nvar attack_str = \"\\u001B[\"+\";\".repeat(i*1000);\r\nstrip(attack_str)\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `prompts` to version 2.4.2 or higher.\n## References\n- [GitHub PR](https://github.com/terkelg/prompts/pull/333)\n- [GitHub Release](https://github.com/terkelg/prompts/releases/tag/v2.4.2)\n",
        "disclosureTime": "2021-10-08T12:09:35Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "2.4.2"
        ],
        "id": "SNYK-JS-PROMPTS-1729737",
        "identifiers": {
          "CWE": [
            "CWE-1333"
          ],
          "CVE": [
            "CVE-2021-3868"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2021-10-18T11:52:51.626359Z",
        "moduleName": "prompts",
        "packageManager": "npm",
        "packageName": "prompts",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2021-10-08T13:48:51Z",
        "references": [
          {
            "title": "GitHub PR",
            "url": "https://github.com/terkelg/prompts/pull/333"
          },
          {
            "title": "GitHub Release",
            "url": "https://github.com/terkelg/prompts/releases/tag/v2.4.2"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<2.4.2"
          ]
        },
        "from": [
          "acme-review@1.0.0",
          "react-scripts@3.4.4",
          "jest@24.9.0",
          "jest-cli@24.9.0",
          "prompts@2.4.1"
        ],
        "upgradePath": [
          false,
          "react-scripts@3.4.4",
          "jest@24.9.0",
          "jest-cli@24.9.0",
          "prompts@2.4.2"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "prompts",
        "version": "2.4.1",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:R",
        "alternativeIds": [],
        "creationTime": "2021-04-15T12:21:08.776563Z",
        "credit": [
          "Yeting Li",
          "Ben Caller"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n[ssri](https://github.com/zkat/ssri) is a Standard Subresource Integrity library --  parses, serializes, generates, and verifies integrity metadata according to the SRI spec.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). `ssri` processes SRIs using a regular expression which is vulnerable to a denial of service. Malicious SRIs could take an extremely long time to process, leading to denial of service. This issue only affects consumers using the strict option.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ssri` to version 6.0.2, 7.1.1, 8.0.1 or higher.\n## References\n- [GitHub Additional Information](https://github.com/yetingli/SaveResults/blob/main/pdf/ssri-redos.pdf)\n- [GitHub Commit](https://github.com/npm/ssri/commit/76e223317d971f19e4db8191865bdad5edee40d2)\n",
        "disclosureTime": "2018-02-14T20:39:06Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "6.0.2",
          "7.1.1",
          "8.0.1"
        ],
        "id": "SNYK-JS-SSRI-1246392",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            "565"
          ],
          "CVE": [
            "CVE-2021-27290"
          ],
          "GHSA": [
            "GHSA-vx3p-948g-6vhq"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2021-07-23T14:33:16.198456Z",
        "moduleName": "ssri",
        "packageManager": "npm",
        "packageName": "ssri",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2021-04-15T14:43:24Z",
        "references": [
          {
            "title": "GitHub Additional Information",
            "url": "https://github.com/yetingli/SaveResults/blob/main/pdf/ssri-redos.pdf"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/npm/ssri/commit/76e223317d971f19e4db8191865bdad5edee40d2"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            ">=5.2.2 <6.0.2",
            ">=7.0.0 <7.1.1",
            ">=8.0.0 <8.0.1"
          ]
        },
        "from": [
          "acme-review@1.0.0",
          "react-scripts@3.4.4",
          "terser-webpack-plugin@2.3.8",
          "cacache@13.0.1",
          "ssri@7.1.0"
        ],
        "upgradePath": [
          false,
          "react-scripts@3.4.4",
          "terser-webpack-plugin@2.3.8",
          "cacache@13.0.1",
          "ssri@7.1.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "ssri",
        "version": "7.1.0",
        "severityWithCritical": "high"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
        "alternativeIds": [],
        "creationTime": "2021-09-08T12:39:02.502663Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the main functionality.\r\n\r\n### PoC\r\n```\r\nvar tmpl = require(\"tmpl\")\r\nfor(var i = 1; i <= 1000; i++) {\r\n        var time = Date.now();\r\n        payload = \"hello, \" + \"{\".repeat(i*10000) + \"day\"\r\n        tmpl(payload, {day: \"tomorrow\"})\r\n        var time_taken = Date.now() - time;\r\n        console.log(\"payload length: \" + payload.length + \" - time taken: \" + time_taken + \"ms\")\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `tmpl` to version 1.0.5 or higher.\n## References\n- [GitHub Commit](https://github.com/daaku/nodejs-tmpl/commit/4c654e4d1542f329ed561fd95ccd80f30c6872d6)\n",
        "disclosureTime": "2021-09-08T11:19:47Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "1.0.5"
        ],
        "id": "SNYK-JS-TMPL-1583443",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "CVE": [
            "CVE-2021-3777"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2021-09-15T18:40:54.505298Z",
        "moduleName": "tmpl",
        "packageManager": "npm",
        "packageName": "tmpl",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2021-09-15T18:40:54.502927Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/daaku/nodejs-tmpl/commit/4c654e4d1542f329ed561fd95ccd80f30c6872d6"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<1.0.5"
          ]
        },
        "from": [
          "acme-review@1.0.0",
          "jest-enzyme@7.1.2",
          "jest-environment-enzyme@7.1.2",
          "jest-environment-jsdom@24.9.0",
          "@jest/environment@24.9.0",
          "@jest/transform@24.9.0",
          "jest-haste-map@24.9.0",
          "sane@4.1.0",
          "walker@1.0.7",
          "makeerror@1.0.11",
          "tmpl@1.0.4"
        ],
        "upgradePath": [
          false,
          "jest-enzyme@7.1.2",
          "jest-environment-enzyme@7.1.2",
          "jest-environment-jsdom@24.9.0",
          "@jest/environment@24.9.0",
          "@jest/transform@24.9.0",
          "jest-haste-map@24.9.0",
          "sane@4.1.0",
          "walker@1.0.7",
          "makeerror@1.0.11",
          "tmpl@1.0.5"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "tmpl",
        "version": "1.0.4",
        "severityWithCritical": "high"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2022-02-13T14:46:07.185334Z",
        "credit": [
          "khizar"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `unset` function in `index.js`, because it allows access to object prototype properties.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `unset-value` to version 2.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/jonschlinkert/unset-value/pull/12/commits/abb534769f6ea62c3dd988f5ce0a4ebd1f91b561)\n- [GitHub Issue](https://github.com/jonschlinkert/unset-value/issues/11)\n- [GitHub PR](https://github.com/jonschlinkert/unset-value/pull/12)\n- [GitHub Release](https://github.com/jonschlinkert/unset-value/releases)\n",
        "disclosureTime": "2022-02-13T14:44:04Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "2.0.1"
        ],
        "id": "SNYK-JS-UNSETVALUE-2400660",
        "identifiers": {
          "CWE": [
            "CWE-1321"
          ],
          "CVE": []
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-02-13T15:26:38.065734Z",
        "moduleName": "unset-value",
        "packageManager": "npm",
        "packageName": "unset-value",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2022-02-13T15:26:38.063549Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/jonschlinkert/unset-value/pull/12/commits/abb534769f6ea62c3dd988f5ce0a4ebd1f91b561"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/jonschlinkert/unset-value/issues/11"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/jonschlinkert/unset-value/pull/12"
          },
          {
            "title": "GitHub Release",
            "url": "https://github.com/jonschlinkert/unset-value/releases"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Prototype Pollution",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<2.0.1"
          ]
        },
        "from": [
          "acme-review@1.0.0",
          "jest-enzyme@7.1.2",
          "jest-environment-enzyme@7.1.2",
          "jest-environment-jsdom@24.9.0",
          "@jest/environment@24.9.0",
          "@jest/fake-timers@24.9.0",
          "jest-message-util@24.9.0",
          "micromatch@3.1.10",
          "braces@2.3.2",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "cache-base@1.0.1",
          "unset-value@1.0.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "unset-value",
        "version": "1.0.0",
        "severityWithCritical": "high"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N/E:P",
        "alternativeIds": [],
        "creationTime": "2021-07-26T12:59:09.903181Z",
        "credit": [
          "ready-research"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n[url-parse](https://www.npmjs.com/package/url-parse) is a Small footprint URL parser that works seamlessly across Node.js and browser environments.\n\nAffected versions of this package are vulnerable to Open Redirect due to improper escaping of slash characters.\n## Remediation\nUpgrade `url-parse` to version 1.5.2 or higher.\n## References\n- [GitHub Commit](https://github.com/unshiftio/url-parse/commit/81ab967889b08112d3356e451bf03e6aa0cbb7e0)\n- [GitHub Issue](https://github.com/unshiftio/url-parse/issues/206)\n- [GitHub PR](https://github.com/unshiftio/url-parse/pull/208)\n",
        "disclosureTime": "2021-07-26T12:57:37Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "1.5.2"
        ],
        "id": "SNYK-JS-URLPARSE-1533425",
        "identifiers": {
          "CWE": [
            "CWE-601"
          ],
          "CVE": [
            "CVE-2021-3664"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2021-07-26T15:23:41.208720Z",
        "moduleName": "url-parse",
        "packageManager": "npm",
        "packageName": "url-parse",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2021-07-26T15:23:41.206700Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/unshiftio/url-parse/commit/81ab967889b08112d3356e451bf03e6aa0cbb7e0"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/unshiftio/url-parse/issues/206"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/unshiftio/url-parse/pull/208"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Open Redirect",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<1.5.2"
          ]
        },
        "from": [
          "acme-review@1.0.0",
          "react-scripts@3.4.4",
          "webpack-dev-server@3.11.0",
          "sockjs-client@1.4.0",
          "eventsource@1.1.0",
          "original@1.0.2",
          "url-parse@1.5.1"
        ],
        "upgradePath": [
          false,
          "react-scripts@3.4.4",
          "webpack-dev-server@3.11.0",
          "sockjs-client@1.4.0",
          "eventsource@1.1.0",
          "original@1.0.2",
          "url-parse@1.5.2"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "url-parse",
        "version": "1.5.1",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:L/A:L/E:P",
        "alternativeIds": [],
        "creationTime": "2022-02-15T10:01:29.002928Z",
        "credit": [
          "ranjit-git"
        ],
        "cvssScore": 6.4,
        "description": "## Overview\n[url-parse](https://www.npmjs.com/package/url-parse) is a Small footprint URL parser that works seamlessly across Node.js and browser environments.\n\nAffected versions of this package are vulnerable to Access Restriction Bypass due to improper parsing process, that may lead to incorrect handling of authentication credentials and hostname, which allows bypass of hostname validation.\r\n\r\n## PoC:\r\n\r\n```js\r\n// PoC.js\r\n var parse = require('url-parse')\r\nvar cc=parse(\"http://admin:password123@@127.0.0.1\")\r\n\r\n//Output:\r\n{ slashes: true,\r\n  protocol: 'http:',\r\n  hash: '',\r\n  query: '',\r\n  pathname: '/',\r\n  auth: 'admin:password123',\r\n  host: '@127.0.0.1',\r\n  port: '',\r\n  hostname: '@127.0.0.1',\r\n  password: 'password123',\r\n  username: 'admin',\r\n  origin: 'http://@127.0.0.1',\r\n  href: 'http://admin:password123@@127.0.0.1/' }\r\n```\n## Remediation\nUpgrade `url-parse` to version 1.5.6 or higher.\n## References\n- [GitHub Commit](https://github.com/unshiftio/url-parse/commit/9be7ee88afd2bb04e4d5a1a8da9a389ac13f8c40)\n- [GitHub PR](https://github.com/unshiftio/url-parse/pull/223)\n",
        "disclosureTime": "2022-02-15T09:53:25Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "1.5.6"
        ],
        "id": "SNYK-JS-URLPARSE-2401205",
        "identifiers": {
          "CWE": [
            "CWE-639"
          ],
          "CVE": [
            "CVE-2022-0512"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-02-15T15:27:36.795014Z",
        "moduleName": "url-parse",
        "packageManager": "npm",
        "packageName": "url-parse",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2022-02-15T13:06:08Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/unshiftio/url-parse/commit/9be7ee88afd2bb04e4d5a1a8da9a389ac13f8c40"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/unshiftio/url-parse/pull/223"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Access Restriction Bypass",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<1.5.6"
          ]
        },
        "from": [
          "acme-review@1.0.0",
          "react-scripts@3.4.4",
          "webpack-dev-server@3.11.0",
          "sockjs-client@1.4.0",
          "eventsource@1.1.0",
          "original@1.0.2",
          "url-parse@1.5.1"
        ],
        "upgradePath": [
          false,
          "react-scripts@3.4.4",
          "webpack-dev-server@3.11.0",
          "sockjs-client@1.4.0",
          "eventsource@1.1.0",
          "original@1.0.2",
          "url-parse@1.5.6"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "url-parse",
        "version": "1.5.1",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:L/I:L/A:N/E:P",
        "alternativeIds": [],
        "creationTime": "2022-02-21T10:47:02.113879Z",
        "credit": [
          "Rohan Sharma"
        ],
        "cvssScore": 6.4,
        "description": "## Overview\n[url-parse](https://www.npmjs.com/package/url-parse) is a Small footprint URL parser that works seamlessly across Node.js and browser environments.\n\nAffected versions of this package are vulnerable to Authorization Bypass via the `hostname` field of a parsed URL, because \"url-parse\" is unable to find the correct hostname when no port number is provided in the URL.\r\n\r\n## PoC:\r\n```js\r\nvar Url = require('url-parse');\r\nvar PAYLOAD = \"http://example.com:\";\r\n\r\nconsole.log(Url(PAYLOAD));\r\n\r\n// Expected hostname: example.com\r\n// Actual hostname by url-parse: example.com:\r\n```\r\n\r\nOutput:\r\n\r\n```\r\n{\r\n  slashes: true,\r\n  protocol: 'http:',\r\n  hash: '',\r\n  query: '',\r\n  pathname: '/',\r\n  auth: '',\r\n  host: 'example.com:',\r\n  port: '',\r\n  hostname: 'example.com:',\r\n  password: '',\r\n  username: '',\r\n  origin: 'http://example.com:',\r\n  href: 'http://example.com:/'\r\n}\r\n```\n## Remediation\nUpgrade `url-parse` to version 1.5.8 or higher.\n## References\n- [GitHub Commit](https://github.com/unshiftio/url-parse/commit/d5c64791ef496ca5459ae7f2176a31ea53b127e5)\n",
        "disclosureTime": "2022-02-21T10:36:50Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "1.5.8"
        ],
        "id": "SNYK-JS-URLPARSE-2407759",
        "identifiers": {
          "CWE": [
            "CWE-285"
          ],
          "CVE": [
            "CVE-2022-0686"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-02-21T16:02:45.057937Z",
        "moduleName": "url-parse",
        "packageManager": "npm",
        "packageName": "url-parse",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2022-02-21T16:02:45.055472Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/unshiftio/url-parse/commit/d5c64791ef496ca5459ae7f2176a31ea53b127e5"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Authorization Bypass",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<1.5.8"
          ]
        },
        "from": [
          "acme-review@1.0.0",
          "react-scripts@3.4.4",
          "webpack-dev-server@3.11.0",
          "sockjs-client@1.4.0",
          "eventsource@1.1.0",
          "original@1.0.2",
          "url-parse@1.5.1"
        ],
        "upgradePath": [
          false,
          "react-scripts@3.4.4",
          "webpack-dev-server@3.11.0",
          "sockjs-client@1.4.0",
          "eventsource@1.1.0",
          "original@1.0.2",
          "url-parse@1.5.8"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "url-parse",
        "version": "1.5.1",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:N/E:P",
        "alternativeIds": [],
        "creationTime": "2022-02-21T12:56:54.006952Z",
        "credit": [
          "haxatron"
        ],
        "cvssScore": 8.1,
        "description": "## Overview\n[url-parse](https://www.npmjs.com/package/url-parse) is a Small footprint URL parser that works seamlessly across Node.js and browser environments.\n\nAffected versions of this package are vulnerable to Improper Input Validation due to improper fix of [CVE-2020-8124](https://security.snyk.io/vuln/SNYK-JS-URLPARSE-543307) , it is possible to be exploited via the `\\b` (backspace) character.\r\n\r\n## PoC:\r\n```js\r\nconst parse = require('./index.js')\r\n\r\nurl = parse('\\bhttp://google.com')\r\n\r\nconsole.log(url)\r\n```\r\nOutput:\r\n\r\n```\r\n{\r\n  slashes: false,\r\n  protocol: '',\r\n  hash: '',\r\n  query: '',\r\n  pathname: '\\bhttp://google.com',\r\n  auth: '',\r\n  host: '',\r\n  port: '',\r\n  hostname: '',\r\n  password: '',\r\n  username: '',\r\n  origin: 'null',\r\n  href: '\\bhttp://google.com'\r\n}\r\n```\n## Remediation\nUpgrade `url-parse` to version 1.5.9 or higher.\n## References\n- [GitHub Commit](https://github.com/unshiftio/url-parse/commit/0e3fb542d60ddbf6933f22eb9b1e06e25eaa5b63)\n",
        "disclosureTime": "2022-02-21T12:49:06Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "1.5.9"
        ],
        "id": "SNYK-JS-URLPARSE-2407770",
        "identifiers": {
          "CWE": [
            "CWE-20"
          ],
          "CVE": [
            "CVE-2022-0691"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-06-09T15:13:29.620707Z",
        "moduleName": "url-parse",
        "packageManager": "npm",
        "packageName": "url-parse",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2022-02-21T16:02:45Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/unshiftio/url-parse/commit/0e3fb542d60ddbf6933f22eb9b1e06e25eaa5b63"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Improper Input Validation",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<1.5.9"
          ]
        },
        "from": [
          "acme-review@1.0.0",
          "react-scripts@3.4.4",
          "webpack-dev-server@3.11.0",
          "sockjs-client@1.4.0",
          "eventsource@1.1.0",
          "original@1.0.2",
          "url-parse@1.5.1"
        ],
        "upgradePath": [
          false,
          "react-scripts@3.4.4",
          "webpack-dev-server@3.11.0",
          "sockjs-client@1.4.0",
          "eventsource@1.1.0",
          "original@1.0.2",
          "url-parse@1.5.9"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "url-parse",
        "version": "1.5.1",
        "severityWithCritical": "high"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N/E:P",
        "alternativeIds": [],
        "creationTime": "2022-02-24T09:02:19.641584Z",
        "credit": [
          "haxatron"
        ],
        "cvssScore": 6.2,
        "description": "## Overview\n[url-parse](https://www.npmjs.com/package/url-parse) is a Small footprint URL parser that works seamlessly across Node.js and browser environments.\n\nAffected versions of this package are vulnerable to Authorization Bypass Through User-Controlled Key due to incorrect conversion of `@` in the protocol field of the HREF.\r\n\r\n## PoC:\r\n```\r\nparse = require('url-parse')\r\n\r\nconsole.log(parse(\"http:@/127.0.0.1\"))\r\n```\r\nOutput:\r\n\r\n```\r\n{\r\n  slashes: true,\r\n  protocol: 'http:',\r\n  hash: '',\r\n  query: '',\r\n  pathname: '/127.0.0.1',\r\n  auth: '',\r\n  host: '',\r\n  port: '',\r\n  hostname: '',\r\n  password: '',\r\n  username: '',\r\n  origin: 'null',\r\n  href: 'http:///127.0.0.1'\r\n}\r\n```\n## Remediation\nUpgrade `url-parse` to version 1.5.7 or higher.\n## References\n- [GitHub Commit](https://github.com/unshiftio/url-parse/commit/ef45a1355375a8244063793a19059b4f62fc8788)\n- [GitHub PR](https://github.com/unshiftio/url-parse/pull/226)\n",
        "disclosureTime": "2022-02-17T00:00:00Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "1.5.7"
        ],
        "id": "SNYK-JS-URLPARSE-2412697",
        "identifiers": {
          "CWE": [
            "CWE-639"
          ],
          "CVE": [
            "CVE-2022-0639"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-02-24T16:08:31.527221Z",
        "moduleName": "url-parse",
        "packageManager": "npm",
        "packageName": "url-parse",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2022-02-24T16:08:31.525302Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/unshiftio/url-parse/commit/ef45a1355375a8244063793a19059b4f62fc8788"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/unshiftio/url-parse/pull/226"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Authorization Bypass Through User-Controlled Key",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<1.5.7"
          ]
        },
        "from": [
          "acme-review@1.0.0",
          "react-scripts@3.4.4",
          "webpack-dev-server@3.11.0",
          "sockjs-client@1.4.0",
          "eventsource@1.1.0",
          "original@1.0.2",
          "url-parse@1.5.1"
        ],
        "upgradePath": [
          false,
          "react-scripts@3.4.4",
          "webpack-dev-server@3.11.0",
          "sockjs-client@1.4.0",
          "eventsource@1.1.0",
          "original@1.0.2",
          "url-parse@1.5.7"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "url-parse",
        "version": "1.5.1",
        "severityWithCritical": "medium"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
        "alternativeIds": [],
        "creationTime": "2021-05-26T08:37:36.519338Z",
        "credit": [
          "Robert McLaughlin"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n[ws](https://www.npmjs.com/package/ws) is a simple to use websocket client, server and console for node.js.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). A specially crafted value of the `Sec-Websocket-Protocol` header can be used to significantly slow down a `ws` server.\r\n\r\n##PoC\r\n```\r\nfor (const length of [1000, 2000, 4000, 8000, 16000, 32000]) {\r\n  const value = 'b' + ' '.repeat(length) + 'x';\r\n  const start = process.hrtime.bigint();\r\n\r\n  value.trim().split(/ *, */);\r\n\r\n  const end = process.hrtime.bigint();\r\n\r\n  console.log('length = %d, time = %f ns', length, end - start);\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ws` to version 7.4.6, 6.2.2, 5.2.3 or higher.\n## References\n- [GitHub Commit](https://github.com/websockets/ws/commit/00c425ec77993773d823f018f64a5c44e17023ff)\n",
        "disclosureTime": "2021-05-26T08:34:58Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "7.4.6",
          "6.2.2",
          "5.2.3"
        ],
        "id": "SNYK-JS-WS-1296835",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "GHSA": [
            "GHSA-6fc8-4gx4-v693"
          ],
          "CVE": [
            "CVE-2021-32640"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2021-08-08T13:56:55.072977Z",
        "moduleName": "ws",
        "packageManager": "npm",
        "packageName": "ws",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2021-05-26T11:57:43Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/websockets/ws/commit/00c425ec77993773d823f018f64a5c44e17023ff"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            ">=7.0.0 <7.4.6",
            ">=6.0.0 <6.2.2",
            "<5.2.3"
          ]
        },
        "from": [
          "acme-review@1.0.0",
          "react-scripts@3.4.4",
          "jest@24.9.0",
          "jest-cli@24.9.0",
          "@jest/core@24.9.0",
          "@jest/reporters@24.9.0",
          "jest-runtime@24.9.0",
          "jest-config@24.9.0",
          "jest-environment-jsdom@24.9.0",
          "jsdom@11.12.0",
          "ws@5.2.2"
        ],
        "upgradePath": [
          false,
          "react-scripts@3.4.4",
          "jest@24.9.0",
          "jest-cli@24.9.0",
          "@jest/core@24.9.0",
          "@jest/reporters@24.9.0",
          "jest-runtime@24.9.0",
          "jest-config@24.9.0",
          "jest-environment-jsdom@24.9.0",
          "jsdom@11.12.0",
          "ws@5.2.3"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "ws",
        "version": "5.2.2",
        "severityWithCritical": "medium"
      }
    ],
    "upgrade": {
      "react-native-svg@9.13.6": {
        "upgradeTo": "react-native-svg@12.3.0",
        "upgrades": [
          "css-what@3.4.2",
          "nth-check@1.0.2"
        ],
        "vulns": [
          "SNYK-JS-CSSWHAT-1298035",
          "SNYK-JS-NTHCHECK-1586032"
        ]
      },
      "react-scripts@3.4.4": {
        "upgradeTo": "react-scripts@5.0.0",
        "upgrades": [
          "browserslist@4.10.0",
          "immer@1.10.0",
          "shell-quote@1.7.2",
          "ansi-regex@2.1.1",
          "glob-parent@3.1.0",
          "immer@1.10.0",
          "istanbul-reports@2.2.7",
          "postcss@7.0.21",
          "postcss@7.0.21",
          "react-dev-utils@10.2.1"
        ],
        "vulns": [
          "SNYK-JS-BROWSERSLIST-1090194",
          "SNYK-JS-IMMER-1540542",
          "SNYK-JS-SHELLQUOTE-1766506",
          "SNYK-JS-ANSIREGEX-1583908",
          "SNYK-JS-GLOBPARENT-1016905",
          "SNYK-JS-IMMER-1019369",
          "SNYK-JS-ISTANBULREPORTS-2328088",
          "SNYK-JS-POSTCSS-1090595",
          "SNYK-JS-POSTCSS-1255640",
          "SNYK-JS-REACTDEVUTILS-1083268"
        ]
      },
      "yup@0.29.3": {
        "upgradeTo": "yup@0.30.0",
        "upgrades": [
          "yup@0.29.3"
        ],
        "vulns": [
          "SNYK-JS-YUP-2420835"
        ]
      }
    },
    "patch": {},
    "ignore": {},
    "pin": {}
  },
  "filesystemPolicy": false,
  "filtered": {
    "ignore": [],
    "patch": []
  },
  "uniqueCount": 43,
  "projectName": "acme-review",
  "foundProjectCount": 1,
  "displayTargetFile": "package-lock.json",
  "path": "F:\\acme\\foobar-two"
}
