[
  {
    "vulnerabilities": [
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:N",
        "alternativeIds": [],
        "creationTime": "2022-07-04T09:30:02.378909Z",
        "credit": [
          "Takuto Yoshikai"
        ],
        "cvssScore": 9.1,
        "description": "## Overview\n[Django](https://pypi.org/project/Django/) is a high-level Python Web framework that encourages rapid development and clean, pragmatic design.\n\nAffected versions of this package are vulnerable to SQL Injection via the `Trunc(kind)` and `Extract(lookup_name)` arguments, if untrusted data is used as a `kind/lookup_name` value.\r\n\r\n**Note:** Applications that constrain the lookup name and kind choice to a known safe list are unaffected.\r\n\r\nDjango 4.1 pre-released versions (4.1a1, 4.1a2) are being affected by this issue, please avoid using the 4.1 branch until 4.1.0 is released.\n## Remediation\nUpgrade `Django` to version 3.2.14, 4.0.6 or higher.\n## References\n- [Django Security Release](https://www.djangoproject.com/weblog/2022/jul/04/security-releases/)\n- [GitHub Commit](https://github.com/django/django/commit/0dc9c016fadb71a067e5a42be30164e3f96c0492)\n- [GitHub Commit](https://github.com/django/django/commit/284b188a4194e8fa5d72a73b09a869d7dd9f0dc5)\n- [GitHub Commit](https://github.com/django/django/commit/54eb8a374d5d98594b264e8ec22337819b37443c)\n- [GitHub Commit](https://github.com/django/django/commit/a9010fe5555e6086a9d9ae50069579400ef0685e)\n",
        "disclosureTime": "2022-07-04T09:14:12Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "3.2.14",
          "4.0.6"
        ],
        "id": "SNYK-PYTHON-DJANGO-2940618",
        "identifiers": {
          "CWE": [
            "CWE-89"
          ],
          "CVE": [
            "CVE-2022-34265"
          ]
        },
        "language": "python",
        "malicious": false,
        "modificationTime": "2022-07-04T10:19:35.965182Z",
        "moduleName": "django",
        "packageManager": "pip",
        "packageName": "django",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2022-07-04T10:19:35.962957Z",
        "references": [
          {
            "title": "Django Security Release",
            "url": "https://www.djangoproject.com/weblog/2022/jul/04/security-releases/"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/django/django/commit/0dc9c016fadb71a067e5a42be30164e3f96c0492"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/django/django/commit/284b188a4194e8fa5d72a73b09a869d7dd9f0dc5"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/django/django/commit/54eb8a374d5d98594b264e8ec22337819b37443c"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/django/django/commit/a9010fe5555e6086a9d9ae50069579400ef0685e"
          }
        ],
        "severity": "critical",
        "socialTrendAlert": false,
        "title": "SQL Injection",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[,3.2.14)",
            "[4.0a1,4.0.6)"
          ]
        },
        "severityWithCritical": "critical",
        "from": [
          "Mobile-Security-Framework-MobSF@0.0.0",
          "django@4.0.5"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "django",
        "version": "4.0.5"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
        "alternativeIds": [],
        "creationTime": "2022-07-05T10:15:12.872000Z",
        "credit": [
          "Kishin Yagami"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n\nAffected versions of this package are vulnerable to NULL Pointer Dereference in the `iterwalk()` function (used by `canonicalize`) that can be triggered by malicious input.\r\n\r\n**NOTE:** \r\nThis only applies when lxml is used together with libxml2 2.9.10 through 2.9.14.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `lxml` to version 4.9.1 or higher.\n## References\n- [GitHub Commit](https://github.com/lxml/lxml/commit/86368e9cf70a0ad23cccd5ee32de847149af0c6f)\n",
        "disclosureTime": "2022-07-05T10:09:47Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "4.9.1"
        ],
        "id": "SNYK-PYTHON-LXML-2940874",
        "identifiers": {
          "CWE": [
            "CWE-476"
          ],
          "CVE": [
            "CVE-2022-2309"
          ]
        },
        "language": "python",
        "malicious": false,
        "modificationTime": "2022-07-05T12:53:27.224197Z",
        "moduleName": "lxml",
        "packageManager": "pip",
        "packageName": "lxml",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2022-07-05T12:53:27.206935Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/lxml/lxml/commit/86368e9cf70a0ad23cccd5ee32de847149af0c6f"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "NULL Pointer Dereference",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[,4.9.1)"
          ]
        },
        "severityWithCritical": "medium",
        "from": [
          "Mobile-Security-Framework-MobSF@0.0.0",
          "lxml@4.8.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "lxml",
        "version": "4.8.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
        "alternativeIds": [],
        "creationTime": "2022-07-05T10:15:12.872000Z",
        "credit": [
          "Kishin Yagami"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n\nAffected versions of this package are vulnerable to NULL Pointer Dereference in the `iterwalk()` function (used by `canonicalize`) that can be triggered by malicious input.\r\n\r\n**NOTE:** \r\nThis only applies when lxml is used together with libxml2 2.9.10 through 2.9.14.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `lxml` to version 4.9.1 or higher.\n## References\n- [GitHub Commit](https://github.com/lxml/lxml/commit/86368e9cf70a0ad23cccd5ee32de847149af0c6f)\n",
        "disclosureTime": "2022-07-05T10:09:47Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "4.9.1"
        ],
        "id": "SNYK-PYTHON-LXML-2940874",
        "identifiers": {
          "CWE": [
            "CWE-476"
          ],
          "CVE": [
            "CVE-2022-2309"
          ]
        },
        "language": "python",
        "malicious": false,
        "modificationTime": "2022-07-05T12:53:27.224197Z",
        "moduleName": "lxml",
        "packageManager": "pip",
        "packageName": "lxml",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2022-07-05T12:53:27.206935Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/lxml/lxml/commit/86368e9cf70a0ad23cccd5ee32de847149af0c6f"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "NULL Pointer Dereference",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[,4.9.1)"
          ]
        },
        "severityWithCritical": "medium",
        "from": [
          "Mobile-Security-Framework-MobSF@0.0.0",
          "androguard@3.4.0a1",
          "lxml@4.8.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "lxml",
        "version": "4.8.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
        "alternativeIds": [],
        "creationTime": "2022-07-05T10:15:12.872000Z",
        "credit": [
          "Kishin Yagami"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n\nAffected versions of this package are vulnerable to NULL Pointer Dereference in the `iterwalk()` function (used by `canonicalize`) that can be triggered by malicious input.\r\n\r\n**NOTE:** \r\nThis only applies when lxml is used together with libxml2 2.9.10 through 2.9.14.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `lxml` to version 4.9.1 or higher.\n## References\n- [GitHub Commit](https://github.com/lxml/lxml/commit/86368e9cf70a0ad23cccd5ee32de847149af0c6f)\n",
        "disclosureTime": "2022-07-05T10:09:47Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "4.9.1"
        ],
        "id": "SNYK-PYTHON-LXML-2940874",
        "identifiers": {
          "CWE": [
            "CWE-476"
          ],
          "CVE": [
            "CVE-2022-2309"
          ]
        },
        "language": "python",
        "malicious": false,
        "modificationTime": "2022-07-05T12:53:27.224197Z",
        "moduleName": "lxml",
        "packageManager": "pip",
        "packageName": "lxml",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2022-07-05T12:53:27.206935Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/lxml/lxml/commit/86368e9cf70a0ad23cccd5ee32de847149af0c6f"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "NULL Pointer Dereference",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[,4.9.1)"
          ]
        },
        "severityWithCritical": "medium",
        "from": [
          "Mobile-Security-Framework-MobSF@0.0.0",
          "quark-engine@22.2.1",
          "androguard@3.4.0a1",
          "lxml@4.8.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "lxml",
        "version": "4.8.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2021-01-20T11:40:10.785788Z",
        "credit": [
          "Ajmal Aboobacker"
        ],
        "cvssScore": 8.8,
        "description": "## Overview\n[networkx](https://pypi.org/project/networkx/) is a Python package for creating and manipulating graphs and networks\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. This package is vulnerable to arbitrary code execution via insecure YAML deserialization due to the use of a known vulnerable function `load()` in yaml, which is called in `read_yaml()` in `networkx/readwrite/nx_yaml.py`.\r\n\r\n`networkx/readwrite/nx_yaml.py` is deprecated and scheduled to be removed in the next release of Networkx. Users should avoid using this function completely.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\n\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\n\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\n\n  \nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\n  \n\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\n\n- Apache Blog\n  \n## Remediation\nUpgrade `networkx` to version 2.6 or higher.\n## References\n- [GitHub PR](https://github.com/networkx/networkx/pull/4541)\n",
        "disclosureTime": "2021-01-20T11:20:00Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "2.6"
        ],
        "id": "SNYK-PYTHON-NETWORKX-1062709",
        "identifiers": {
          "CWE": [
            "CWE-502"
          ],
          "CVE": []
        },
        "language": "python",
        "malicious": false,
        "modificationTime": "2021-07-09T09:31:56.016717Z",
        "moduleName": "networkx",
        "packageManager": "pip",
        "packageName": "networkx",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2021-03-21T16:33:35Z",
        "references": [
          {
            "title": "GitHub PR",
            "url": "https://github.com/networkx/networkx/pull/4541"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Deserialization of Untrusted Data",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[,2.6)"
          ]
        },
        "severityWithCritical": "high",
        "from": [
          "Mobile-Security-Framework-MobSF@0.0.0",
          "androguard@3.4.0a1",
          "networkx@2.5"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "networkx",
        "version": "2.5"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2021-01-20T11:40:10.785788Z",
        "credit": [
          "Ajmal Aboobacker"
        ],
        "cvssScore": 8.8,
        "description": "## Overview\n[networkx](https://pypi.org/project/networkx/) is a Python package for creating and manipulating graphs and networks\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. This package is vulnerable to arbitrary code execution via insecure YAML deserialization due to the use of a known vulnerable function `load()` in yaml, which is called in `read_yaml()` in `networkx/readwrite/nx_yaml.py`.\r\n\r\n`networkx/readwrite/nx_yaml.py` is deprecated and scheduled to be removed in the next release of Networkx. Users should avoid using this function completely.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\n\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\n\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\n\n  \nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\n  \n\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\n\n- Apache Blog\n  \n## Remediation\nUpgrade `networkx` to version 2.6 or higher.\n## References\n- [GitHub PR](https://github.com/networkx/networkx/pull/4541)\n",
        "disclosureTime": "2021-01-20T11:20:00Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "2.6"
        ],
        "id": "SNYK-PYTHON-NETWORKX-1062709",
        "identifiers": {
          "CWE": [
            "CWE-502"
          ],
          "CVE": []
        },
        "language": "python",
        "malicious": false,
        "modificationTime": "2021-07-09T09:31:56.016717Z",
        "moduleName": "networkx",
        "packageManager": "pip",
        "packageName": "networkx",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2021-03-21T16:33:35Z",
        "references": [
          {
            "title": "GitHub PR",
            "url": "https://github.com/networkx/networkx/pull/4541"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Deserialization of Untrusted Data",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[,2.6)"
          ]
        },
        "severityWithCritical": "high",
        "from": [
          "Mobile-Security-Framework-MobSF@0.0.0",
          "quark-engine@22.2.1",
          "androguard@3.4.0a1",
          "networkx@2.5"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "networkx",
        "version": "2.5"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
        "alternativeIds": [],
        "creationTime": "2021-12-19T10:23:33.311250Z",
        "credit": [
          "Daybreak2019"
        ],
        "cvssScore": 3.7,
        "description": "## Overview\n[numpy](https://github.com/numpy/numpy) is a fundamental package needed for scientific computing with Python.\n\nAffected versions of this package are vulnerable to NULL Pointer Dereference due to missing return-value validation in the `PyArray_DescrNew` function, which may allow attackers to conduct Denial of Service attacks by repetitively creating and sort arrays.\r\n\r\n**Note:** This may likely only happen if application memory is already exhausted, as it requires the `newdescr` object of the `PyArray_DescrNew` to evaluate to `NULL`.\n## Remediation\nUpgrade `numpy` to version 1.22.2 or higher.\n## References\n- [GitHub Issue](https://github.com/numpy/numpy/issues/19038)\n- [GitHub PR](https://github.com/numpy/numpy/pull/20960)\n- [GitHub Release](https://github.com/numpy/numpy/releases/tag/v1.22.2)\n",
        "disclosureTime": "2021-12-19T10:02:22Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "1.22.2"
        ],
        "id": "SNYK-PYTHON-NUMPY-2321964",
        "identifiers": {
          "CWE": [
            "CWE-476"
          ],
          "CVE": [
            "CVE-2021-41495"
          ]
        },
        "language": "python",
        "malicious": false,
        "modificationTime": "2022-02-04T08:02:18.455219Z",
        "moduleName": "numpy",
        "packageManager": "pip",
        "packageName": "numpy",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2021-12-19T15:16:24Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/numpy/numpy/issues/19038"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/numpy/numpy/pull/20960"
          },
          {
            "title": "GitHub Release",
            "url": "https://github.com/numpy/numpy/releases/tag/v1.22.2"
          }
        ],
        "severity": "low",
        "socialTrendAlert": false,
        "title": "NULL Pointer Dereference",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[0,1.22.2)"
          ]
        },
        "severityWithCritical": "low",
        "from": [
          "Mobile-Security-Framework-MobSF@0.0.0",
          "quark-engine@22.2.1",
          "pandas@1.4.3",
          "numpy@1.21.5"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "numpy",
        "version": "1.21.5"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "alternativeIds": [],
        "creationTime": "2021-12-19T10:52:47.566097Z",
        "credit": [
          "Daybreak2019"
        ],
        "cvssScore": 3.7,
        "description": "## Overview\n[numpy](https://github.com/numpy/numpy) is a fundamental package needed for scientific computing with Python.\n\nAffected versions of this package are vulnerable to Buffer Overflow due to missing boundary checks in the `array_from_pyobj` function of `fortranobject.c`. This may allow an attacker to conduct Denial of Service by carefully constructing an array with negative values.\n## Remediation\nUpgrade `numpy` to version 1.22.0 or higher.\n## References\n- [GitHub Commit](https://github.com/numpy/numpy/commit/271010f1037150e95017f803f4214b8861e528f2)\n- [GitHub Issue](https://github.com/numpy/numpy/issues/19000)\n",
        "disclosureTime": "2021-12-19T10:41:15Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "1.22.0"
        ],
        "id": "SNYK-PYTHON-NUMPY-2321966",
        "identifiers": {
          "CWE": [
            "CWE-119",
            "CWE-120"
          ],
          "CVE": [
            "CVE-2021-41496"
          ]
        },
        "language": "python",
        "malicious": false,
        "modificationTime": "2022-05-29T14:25:40.751786Z",
        "moduleName": "numpy",
        "packageManager": "pip",
        "packageName": "numpy",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2021-12-19T15:16:24Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/numpy/numpy/commit/271010f1037150e95017f803f4214b8861e528f2"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/numpy/numpy/issues/19000"
          }
        ],
        "severity": "low",
        "socialTrendAlert": false,
        "title": "Buffer Overflow",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[,1.22.0)"
          ]
        },
        "severityWithCritical": "low",
        "from": [
          "Mobile-Security-Framework-MobSF@0.0.0",
          "quark-engine@22.2.1",
          "pandas@1.4.3",
          "numpy@1.21.5"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "numpy",
        "version": "1.21.5"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
        "alternativeIds": [],
        "creationTime": "2021-12-19T11:15:21.052159Z",
        "credit": [
          "Daybreak2019"
        ],
        "cvssScore": 3.7,
        "description": "## Overview\n[numpy](https://github.com/numpy/numpy) is a fundamental package needed for scientific computing with Python.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS) due to an incomplete string comparison in the `numpy.core` component, which may allow attackers to fail the APIs via constructing specific string objects.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `numpy` to version 1.22.0rc1 or higher.\n## References\n- [GitHub Commit](https://github.com/numpy/numpy/commit/eeef9d4646103c3b1afd3085f1393f2b3f9575b2)\n- [GitHub Issue](https://github.com/numpy/numpy/issues/18993)\n- [GitHub PR](https://github.com/numpy/numpy/pull/19539)\n",
        "disclosureTime": "2021-12-19T11:06:43Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "1.22.0rc1"
        ],
        "id": "SNYK-PYTHON-NUMPY-2321970",
        "identifiers": {
          "CWE": [
            "CWE-400",
            "CWE-1023"
          ],
          "CVE": [
            "CVE-2021-34141"
          ]
        },
        "language": "python",
        "malicious": false,
        "modificationTime": "2021-12-19T15:16:23.795046Z",
        "moduleName": "numpy",
        "packageManager": "pip",
        "packageName": "numpy",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2021-12-19T15:16:23.793333Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/numpy/numpy/commit/eeef9d4646103c3b1afd3085f1393f2b3f9575b2"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/numpy/numpy/issues/18993"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/numpy/numpy/pull/19539"
          }
        ],
        "severity": "low",
        "socialTrendAlert": false,
        "title": "Denial of Service (DoS)",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[,1.22.0rc1)"
          ]
        },
        "severityWithCritical": "low",
        "from": [
          "Mobile-Security-Framework-MobSF@0.0.0",
          "quark-engine@22.2.1",
          "pandas@1.4.3",
          "numpy@1.21.5"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "numpy",
        "version": "1.21.5"
      }
    ],
    "ok": false,
    "dependencyCount": 76,
    "org": "wmcsl",
    "policy": "# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.25.0\nignore: {}\npatch: {}\n",
    "isPrivate": true,
    "licensesPolicy": {
      "severities": {},
      "orgLicenseRules": {
        "AGPL-1.0": {
          "licenseType": "AGPL-1.0",
          "severity": "high",
          "instructions": ""
        },
        "AGPL-3.0": {
          "licenseType": "AGPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "Artistic-1.0": {
          "licenseType": "Artistic-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "Artistic-2.0": {
          "licenseType": "Artistic-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "CDDL-1.0": {
          "licenseType": "CDDL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "CPOL-1.02": {
          "licenseType": "CPOL-1.02",
          "severity": "high",
          "instructions": ""
        },
        "EPL-1.0": {
          "licenseType": "EPL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "GPL-2.0": {
          "licenseType": "GPL-2.0",
          "severity": "high",
          "instructions": ""
        },
        "GPL-3.0": {
          "licenseType": "GPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "LGPL-2.0": {
          "licenseType": "LGPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-2.1": {
          "licenseType": "LGPL-2.1",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-3.0": {
          "licenseType": "LGPL-3.0",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-1.1": {
          "licenseType": "MPL-1.1",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-2.0": {
          "licenseType": "MPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "MS-RL": {
          "licenseType": "MS-RL",
          "severity": "medium",
          "instructions": ""
        },
        "SimPL-2.0": {
          "licenseType": "SimPL-2.0",
          "severity": "high",
          "instructions": ""
        }
      }
    },
    "packageManager": "pip",
    "ignoreSettings": {
      "adminOnly": false,
      "reasonRequired": false,
      "disregardFilesystemIgnores": false
    },
    "summary": "9 vulnerable dependency paths",
    "remediation": {
      "unresolved": [
        {
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:N",
          "alternativeIds": [],
          "creationTime": "2022-07-04T09:30:02.378909Z",
          "credit": [
            "Takuto Yoshikai"
          ],
          "cvssScore": 9.1,
          "description": "## Overview\n[Django](https://pypi.org/project/Django/) is a high-level Python Web framework that encourages rapid development and clean, pragmatic design.\n\nAffected versions of this package are vulnerable to SQL Injection via the `Trunc(kind)` and `Extract(lookup_name)` arguments, if untrusted data is used as a `kind/lookup_name` value.\r\n\r\n**Note:** Applications that constrain the lookup name and kind choice to a known safe list are unaffected.\r\n\r\nDjango 4.1 pre-released versions (4.1a1, 4.1a2) are being affected by this issue, please avoid using the 4.1 branch until 4.1.0 is released.\n## Remediation\nUpgrade `Django` to version 3.2.14, 4.0.6 or higher.\n## References\n- [Django Security Release](https://www.djangoproject.com/weblog/2022/jul/04/security-releases/)\n- [GitHub Commit](https://github.com/django/django/commit/0dc9c016fadb71a067e5a42be30164e3f96c0492)\n- [GitHub Commit](https://github.com/django/django/commit/284b188a4194e8fa5d72a73b09a869d7dd9f0dc5)\n- [GitHub Commit](https://github.com/django/django/commit/54eb8a374d5d98594b264e8ec22337819b37443c)\n- [GitHub Commit](https://github.com/django/django/commit/a9010fe5555e6086a9d9ae50069579400ef0685e)\n",
          "disclosureTime": "2022-07-04T09:14:12Z",
          "exploit": "Not Defined",
          "functions": [],
          "fixedIn": [
            "3.2.14",
            "4.0.6"
          ],
          "id": "SNYK-PYTHON-DJANGO-2940618",
          "identifiers": {
            "CWE": [
              "CWE-89"
            ],
            "CVE": [
              "CVE-2022-34265"
            ]
          },
          "language": "python",
          "malicious": false,
          "modificationTime": "2022-07-04T10:19:35.965182Z",
          "moduleName": "django",
          "packageManager": "pip",
          "packageName": "django",
          "patches": [],
          "proprietary": false,
          "publicationTime": "2022-07-04T10:19:35.962957Z",
          "references": [
            {
              "title": "Django Security Release",
              "url": "https://www.djangoproject.com/weblog/2022/jul/04/security-releases/"
            },
            {
              "title": "GitHub Commit",
              "url": "https://github.com/django/django/commit/0dc9c016fadb71a067e5a42be30164e3f96c0492"
            },
            {
              "title": "GitHub Commit",
              "url": "https://github.com/django/django/commit/284b188a4194e8fa5d72a73b09a869d7dd9f0dc5"
            },
            {
              "title": "GitHub Commit",
              "url": "https://github.com/django/django/commit/54eb8a374d5d98594b264e8ec22337819b37443c"
            },
            {
              "title": "GitHub Commit",
              "url": "https://github.com/django/django/commit/a9010fe5555e6086a9d9ae50069579400ef0685e"
            }
          ],
          "severity": "critical",
          "socialTrendAlert": false,
          "title": "SQL Injection",
          "insights": {
            "triageAdvice": null
          },
          "functions_new": [],
          "semver": {
            "vulnerable": [
              "[,3.2.14)",
              "[4.0a1,4.0.6)"
            ]
          },
          "from": [
            "Mobile-Security-Framework-MobSF@0.0.0",
            "django@4.0.5"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": true,
          "isRuntime": false,
          "name": "django",
          "version": "4.0.5",
          "severityWithCritical": "critical"
        },
        {
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
          "alternativeIds": [],
          "creationTime": "2022-07-05T10:15:12.872000Z",
          "credit": [
            "Kishin Yagami"
          ],
          "cvssScore": 5.3,
          "description": "## Overview\n\nAffected versions of this package are vulnerable to NULL Pointer Dereference in the `iterwalk()` function (used by `canonicalize`) that can be triggered by malicious input.\r\n\r\n**NOTE:** \r\nThis only applies when lxml is used together with libxml2 2.9.10 through 2.9.14.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `lxml` to version 4.9.1 or higher.\n## References\n- [GitHub Commit](https://github.com/lxml/lxml/commit/86368e9cf70a0ad23cccd5ee32de847149af0c6f)\n",
          "disclosureTime": "2022-07-05T10:09:47Z",
          "exploit": "Proof of Concept",
          "functions": [],
          "fixedIn": [
            "4.9.1"
          ],
          "id": "SNYK-PYTHON-LXML-2940874",
          "identifiers": {
            "CWE": [
              "CWE-476"
            ],
            "CVE": [
              "CVE-2022-2309"
            ]
          },
          "language": "python",
          "malicious": false,
          "modificationTime": "2022-07-05T12:53:27.224197Z",
          "moduleName": "lxml",
          "packageManager": "pip",
          "packageName": "lxml",
          "patches": [],
          "proprietary": false,
          "publicationTime": "2022-07-05T12:53:27.206935Z",
          "references": [
            {
              "title": "GitHub Commit",
              "url": "https://github.com/lxml/lxml/commit/86368e9cf70a0ad23cccd5ee32de847149af0c6f"
            }
          ],
          "severity": "medium",
          "socialTrendAlert": false,
          "title": "NULL Pointer Dereference",
          "insights": {
            "triageAdvice": null
          },
          "functions_new": [],
          "semver": {
            "vulnerable": [
              "[,4.9.1)"
            ]
          },
          "from": [
            "Mobile-Security-Framework-MobSF@0.0.0",
            "quark-engine@22.2.1",
            "androguard@3.4.0a1",
            "lxml@4.8.0"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": true,
          "isRuntime": false,
          "name": "lxml",
          "version": "4.8.0",
          "severityWithCritical": "medium"
        },
        {
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H",
          "alternativeIds": [],
          "creationTime": "2021-01-20T11:40:10.785788Z",
          "credit": [
            "Ajmal Aboobacker"
          ],
          "cvssScore": 8.8,
          "description": "## Overview\n[networkx](https://pypi.org/project/networkx/) is a Python package for creating and manipulating graphs and networks\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. This package is vulnerable to arbitrary code execution via insecure YAML deserialization due to the use of a known vulnerable function `load()` in yaml, which is called in `read_yaml()` in `networkx/readwrite/nx_yaml.py`.\r\n\r\n`networkx/readwrite/nx_yaml.py` is deprecated and scheduled to be removed in the next release of Networkx. Users should avoid using this function completely.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\n\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\n\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\n\n  \nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\n  \n\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\n\n- Apache Blog\n  \n## Remediation\nUpgrade `networkx` to version 2.6 or higher.\n## References\n- [GitHub PR](https://github.com/networkx/networkx/pull/4541)\n",
          "disclosureTime": "2021-01-20T11:20:00Z",
          "exploit": "Not Defined",
          "functions": [],
          "fixedIn": [
            "2.6"
          ],
          "id": "SNYK-PYTHON-NETWORKX-1062709",
          "identifiers": {
            "CWE": [
              "CWE-502"
            ],
            "CVE": []
          },
          "language": "python",
          "malicious": false,
          "modificationTime": "2021-07-09T09:31:56.016717Z",
          "moduleName": "networkx",
          "packageManager": "pip",
          "packageName": "networkx",
          "patches": [],
          "proprietary": false,
          "publicationTime": "2021-03-21T16:33:35Z",
          "references": [
            {
              "title": "GitHub PR",
              "url": "https://github.com/networkx/networkx/pull/4541"
            }
          ],
          "severity": "high",
          "socialTrendAlert": false,
          "title": "Deserialization of Untrusted Data",
          "insights": {
            "triageAdvice": null
          },
          "functions_new": [],
          "semver": {
            "vulnerable": [
              "[,2.6)"
            ]
          },
          "from": [
            "Mobile-Security-Framework-MobSF@0.0.0",
            "quark-engine@22.2.1",
            "androguard@3.4.0a1",
            "networkx@2.5"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": true,
          "isRuntime": false,
          "name": "networkx",
          "version": "2.5",
          "severityWithCritical": "high"
        },
        {
          "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
          "alternativeIds": [],
          "creationTime": "2021-12-19T10:23:33.311250Z",
          "credit": [
            "Daybreak2019"
          ],
          "cvssScore": 3.7,
          "description": "## Overview\n[numpy](https://github.com/numpy/numpy) is a fundamental package needed for scientific computing with Python.\n\nAffected versions of this package are vulnerable to NULL Pointer Dereference due to missing return-value validation in the `PyArray_DescrNew` function, which may allow attackers to conduct Denial of Service attacks by repetitively creating and sort arrays.\r\n\r\n**Note:** This may likely only happen if application memory is already exhausted, as it requires the `newdescr` object of the `PyArray_DescrNew` to evaluate to `NULL`.\n## Remediation\nUpgrade `numpy` to version 1.22.2 or higher.\n## References\n- [GitHub Issue](https://github.com/numpy/numpy/issues/19038)\n- [GitHub PR](https://github.com/numpy/numpy/pull/20960)\n- [GitHub Release](https://github.com/numpy/numpy/releases/tag/v1.22.2)\n",
          "disclosureTime": "2021-12-19T10:02:22Z",
          "exploit": "Proof of Concept",
          "functions": [],
          "fixedIn": [
            "1.22.2"
          ],
          "id": "SNYK-PYTHON-NUMPY-2321964",
          "identifiers": {
            "CWE": [
              "CWE-476"
            ],
            "CVE": [
              "CVE-2021-41495"
            ]
          },
          "language": "python",
          "malicious": false,
          "modificationTime": "2022-02-04T08:02:18.455219Z",
          "moduleName": "numpy",
          "packageManager": "pip",
          "packageName": "numpy",
          "patches": [],
          "proprietary": false,
          "publicationTime": "2021-12-19T15:16:24Z",
          "references": [
            {
              "title": "GitHub Issue",
              "url": "https://github.com/numpy/numpy/issues/19038"
            },
            {
              "title": "GitHub PR",
              "url": "https://github.com/numpy/numpy/pull/20960"
            },
            {
              "title": "GitHub Release",
              "url": "https://github.com/numpy/numpy/releases/tag/v1.22.2"
            }
          ],
          "severity": "low",
          "socialTrendAlert": false,
          "title": "NULL Pointer Dereference",
          "insights": {
            "triageAdvice": null
          },
          "functions_new": [],
          "semver": {
            "vulnerable": [
              "[0,1.22.2)"
            ]
          },
          "from": [
            "Mobile-Security-Framework-MobSF@0.0.0",
            "quark-engine@22.2.1",
            "pandas@1.4.3",
            "numpy@1.21.5"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": true,
          "isRuntime": false,
          "name": "numpy",
          "version": "1.21.5",
          "severityWithCritical": "low"
        },
        {
          "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
          "alternativeIds": [],
          "creationTime": "2021-12-19T10:52:47.566097Z",
          "credit": [
            "Daybreak2019"
          ],
          "cvssScore": 3.7,
          "description": "## Overview\n[numpy](https://github.com/numpy/numpy) is a fundamental package needed for scientific computing with Python.\n\nAffected versions of this package are vulnerable to Buffer Overflow due to missing boundary checks in the `array_from_pyobj` function of `fortranobject.c`. This may allow an attacker to conduct Denial of Service by carefully constructing an array with negative values.\n## Remediation\nUpgrade `numpy` to version 1.22.0 or higher.\n## References\n- [GitHub Commit](https://github.com/numpy/numpy/commit/271010f1037150e95017f803f4214b8861e528f2)\n- [GitHub Issue](https://github.com/numpy/numpy/issues/19000)\n",
          "disclosureTime": "2021-12-19T10:41:15Z",
          "exploit": "Not Defined",
          "functions": [],
          "fixedIn": [
            "1.22.0"
          ],
          "id": "SNYK-PYTHON-NUMPY-2321966",
          "identifiers": {
            "CWE": [
              "CWE-119",
              "CWE-120"
            ],
            "CVE": [
              "CVE-2021-41496"
            ]
          },
          "language": "python",
          "malicious": false,
          "modificationTime": "2022-05-29T14:25:40.751786Z",
          "moduleName": "numpy",
          "packageManager": "pip",
          "packageName": "numpy",
          "patches": [],
          "proprietary": false,
          "publicationTime": "2021-12-19T15:16:24Z",
          "references": [
            {
              "title": "GitHub Commit",
              "url": "https://github.com/numpy/numpy/commit/271010f1037150e95017f803f4214b8861e528f2"
            },
            {
              "title": "GitHub Issue",
              "url": "https://github.com/numpy/numpy/issues/19000"
            }
          ],
          "severity": "low",
          "socialTrendAlert": false,
          "title": "Buffer Overflow",
          "insights": {
            "triageAdvice": null
          },
          "functions_new": [],
          "semver": {
            "vulnerable": [
              "[,1.22.0)"
            ]
          },
          "from": [
            "Mobile-Security-Framework-MobSF@0.0.0",
            "quark-engine@22.2.1",
            "pandas@1.4.3",
            "numpy@1.21.5"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": true,
          "isRuntime": false,
          "name": "numpy",
          "version": "1.21.5",
          "severityWithCritical": "low"
        },
        {
          "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
          "alternativeIds": [],
          "creationTime": "2021-12-19T11:15:21.052159Z",
          "credit": [
            "Daybreak2019"
          ],
          "cvssScore": 3.7,
          "description": "## Overview\n[numpy](https://github.com/numpy/numpy) is a fundamental package needed for scientific computing with Python.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS) due to an incomplete string comparison in the `numpy.core` component, which may allow attackers to fail the APIs via constructing specific string objects.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `numpy` to version 1.22.0rc1 or higher.\n## References\n- [GitHub Commit](https://github.com/numpy/numpy/commit/eeef9d4646103c3b1afd3085f1393f2b3f9575b2)\n- [GitHub Issue](https://github.com/numpy/numpy/issues/18993)\n- [GitHub PR](https://github.com/numpy/numpy/pull/19539)\n",
          "disclosureTime": "2021-12-19T11:06:43Z",
          "exploit": "Proof of Concept",
          "functions": [],
          "fixedIn": [
            "1.22.0rc1"
          ],
          "id": "SNYK-PYTHON-NUMPY-2321970",
          "identifiers": {
            "CWE": [
              "CWE-400",
              "CWE-1023"
            ],
            "CVE": [
              "CVE-2021-34141"
            ]
          },
          "language": "python",
          "malicious": false,
          "modificationTime": "2021-12-19T15:16:23.795046Z",
          "moduleName": "numpy",
          "packageManager": "pip",
          "packageName": "numpy",
          "patches": [],
          "proprietary": false,
          "publicationTime": "2021-12-19T15:16:23.793333Z",
          "references": [
            {
              "title": "GitHub Commit",
              "url": "https://github.com/numpy/numpy/commit/eeef9d4646103c3b1afd3085f1393f2b3f9575b2"
            },
            {
              "title": "GitHub Issue",
              "url": "https://github.com/numpy/numpy/issues/18993"
            },
            {
              "title": "GitHub PR",
              "url": "https://github.com/numpy/numpy/pull/19539"
            }
          ],
          "severity": "low",
          "socialTrendAlert": false,
          "title": "Denial of Service (DoS)",
          "insights": {
            "triageAdvice": null
          },
          "functions_new": [],
          "semver": {
            "vulnerable": [
              "[,1.22.0rc1)"
            ]
          },
          "from": [
            "Mobile-Security-Framework-MobSF@0.0.0",
            "quark-engine@22.2.1",
            "pandas@1.4.3",
            "numpy@1.21.5"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": true,
          "isRuntime": false,
          "name": "numpy",
          "version": "1.21.5",
          "severityWithCritical": "low"
        }
      ],
      "upgrade": {},
      "patch": {},
      "ignore": {},
      "pin": {
        "django@4.0.5": {
          "upgradeTo": "django@4.0.6",
          "vulns": [
            "SNYK-PYTHON-DJANGO-2940618"
          ],
          "isTransitive": false
        },
        "lxml@4.8.0": {
          "upgradeTo": "lxml@4.9.1",
          "vulns": [
            "SNYK-PYTHON-LXML-2940874"
          ],
          "isTransitive": false
        },
        "networkx@2.5": {
          "upgradeTo": "networkx@2.6",
          "vulns": [
            "SNYK-PYTHON-NETWORKX-1062709"
          ],
          "isTransitive": true
        },
        "numpy@1.21.5": {
          "upgradeTo": "numpy@1.22.2",
          "vulns": [
            "SNYK-PYTHON-NUMPY-2321964",
            "SNYK-PYTHON-NUMPY-2321966",
            "SNYK-PYTHON-NUMPY-2321970"
          ],
          "isTransitive": true
        }
      }
    },
    "filesystemPolicy": false,
    "filtered": {
      "ignore": [],
      "patch": []
    },
    "uniqueCount": 6,
    "projectName": "Mobile-Security-Framework-MobSF",
    "foundProjectCount": 8,
    "displayTargetFile": "Mobile-Security-Framework-MobSF/requirements.txt",
    "path": "/mnt/c/Projects/cyberspect"
  },
  {
    "vulnerabilities": [
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:L/I:L/A:N/E:P",
        "alternativeIds": [],
        "creationTime": "2022-05-10T08:56:54.870883Z",
        "credit": [
          "uberbrady"
        ],
        "cvssScore": 4.2,
        "description": "## Overview\n[bootstrap-table](https://www.npmjs.com/package/bootstrap-table) is an extended table to integration with some of the most widely used CSS frameworks. (Supports Bootstrap, Semantic UI, Bulma, Material Design, Foundation, Vue.js).\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) due to improper sanitization of the `onCellHtmlData` callback method, it is possible to be exploited when `exportOptions` is set to \"true\".\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `bootstrap-table` to version 1.20.2 or higher.\n## References\n- [GitHub Commit](https://github.com/wenzhixin/bootstrap-table/commit/66ef886d5d325777c8727274c9e018f9c17bc0b9)\n- [GitHub Issue](https://github.com/wenzhixin/bootstrap-table/issues/6144)\n- [GitHub PR](https://github.com/wenzhixin/bootstrap-table/pull/6145)\n",
        "disclosureTime": "2022-05-10T08:50:36Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "1.20.2"
        ],
        "id": "SNYK-JS-BOOTSTRAPTABLE-2812823",
        "identifiers": {
          "CWE": [
            "CWE-79"
          ],
          "CVE": [
            "CVE-2022-1726"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-05-26T12:26:58.496442Z",
        "moduleName": "bootstrap-table",
        "packageManager": "npm",
        "packageName": "bootstrap-table",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2022-05-17T13:46:44Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/wenzhixin/bootstrap-table/commit/66ef886d5d325777c8727274c9e018f9c17bc0b9"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/wenzhixin/bootstrap-table/issues/6144"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/wenzhixin/bootstrap-table/pull/6145"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Cross-site Scripting (XSS)",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<1.20.2"
          ]
        },
        "severityWithCritical": "medium",
        "from": [
          "@dependencytrack/frontend@4.4.0",
          "bootstrap-table@1.19.1"
        ],
        "upgradePath": [
          false,
          "bootstrap-table@1.20.2"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "bootstrap-table",
        "version": "1.19.1"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:L/I:L/A:N/E:P",
        "alternativeIds": [],
        "creationTime": "2022-05-15T13:30:42.632133Z",
        "credit": [
          "Brady Wetherington (@uberbrady)"
        ],
        "cvssScore": 4.2,
        "description": "## Overview\n[bootstrap-table](https://www.npmjs.com/package/bootstrap-table) is an extended table to integration with some of the most widely used CSS frameworks. (Supports Bootstrap, Semantic UI, Bulma, Material Design, Foundation, Vue.js).\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) in the `onCellHtmlData` function. If you set the `exportOptions` in the Bootstrap Table to true, it will allow arbitrary Javascript to execute.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `bootstrap-table` to version 1.20.2 or higher.\n## References\n- [GitHub Commit](https://github.com/wenzhixin/bootstrap-table/commit/66ef886d5d325777c8727274c9e018f9c17bc0b9)\n- [GitHub Issue](https://github.com/wenzhixin/bootstrap-table/issues/4005)\n- [GitHub Issue](https://github.com/wenzhixin/bootstrap-table/issues/6144)\n- [GitHub PR](https://github.com/wenzhixin/bootstrap-table/pull/6145)\n- [PoC](https://live.bootstrap-table.com/code/uberbrady/11033)\n",
        "disclosureTime": "2022-05-15T13:26:35Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "1.20.2"
        ],
        "id": "SNYK-JS-BOOTSTRAPTABLE-2825191",
        "identifiers": {
          "CWE": [
            "CWE-79"
          ],
          "CVE": []
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-05-29T15:09:34.811742Z",
        "moduleName": "bootstrap-table",
        "packageManager": "npm",
        "packageName": "bootstrap-table",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2022-05-29T15:09:34.810428Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/wenzhixin/bootstrap-table/commit/66ef886d5d325777c8727274c9e018f9c17bc0b9"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/wenzhixin/bootstrap-table/issues/4005"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/wenzhixin/bootstrap-table/issues/6144"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/wenzhixin/bootstrap-table/pull/6145"
          },
          {
            "title": "PoC",
            "url": "https://live.bootstrap-table.com/code/uberbrady/11033"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Cross-site Scripting (XSS)",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<1.20.2"
          ]
        },
        "severityWithCritical": "medium",
        "from": [
          "@dependencytrack/frontend@4.4.0",
          "bootstrap-table@1.19.1"
        ],
        "upgradePath": [
          false,
          "bootstrap-table@1.20.2"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "bootstrap-table",
        "version": "1.19.1"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2020-11-16T13:56:08.785340Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n[merge](https://github.com/yeikos/js.merge) is a library that allows you to merge multiple objects into one, optionally creating a new cloned object. Similar to the jQuery.extend but more flexible. Works in Node.js and the browser.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The 'merge' function already checks for '__proto__' keys in an object to prevent prototype pollution, but does not check for 'constructor' or 'prototype' keys.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `merge` to version 2.1.0 or higher.\n## References\n- [GitHub PR](https://github.com/yeikos/js.merge/pull/38)\n",
        "disclosureTime": "2020-11-16T13:33:17Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "2.1.0"
        ],
        "id": "SNYK-JS-MERGE-1040469",
        "identifiers": {
          "WS": [
            "WS-2020-0218"
          ],
          "CWE": [
            "CWE-400"
          ],
          "CVE": []
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2021-01-07T08:27:14.285738Z",
        "moduleName": "merge",
        "packageManager": "npm",
        "packageName": "merge",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-11-16T16:28:38Z",
        "references": [
          {
            "title": "GitHub PR",
            "url": "https://github.com/yeikos/js.merge/pull/38"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Prototype Pollution",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<2.1.0"
          ]
        },
        "severityWithCritical": "high",
        "from": [
          "@dependencytrack/frontend@4.4.0",
          "vue-bootstrap-toggle@1.1.4",
          "merge@1.2.1"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "merge",
        "version": "1.2.1"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
        "alternativeIds": [],
        "creationTime": "2020-11-22T15:18:43.156000Z",
        "credit": [
          "Alessio Della Libera (d3lla)"
        ],
        "cvssScore": 7.3,
        "description": "## Overview\n[merge](https://github.com/yeikos/js.merge) is a library that allows you to merge multiple objects into one, optionally creating a new cloned object. Similar to the jQuery.extend but more flexible. Works in Node.js and the browser.\n\nAffected versions of this package are vulnerable to Prototype Pollution via `_recursiveMerge `. \r\n\r\n## PoC: \r\n\r\n```javascript\r\nconst merge = require('merge');\r\n\r\nconst payload2 = JSON.parse('{\"x\": {\"__proto__\":{\"polluted\":\"yes\"}}}');\r\n\r\nlet obj1 = {x: {y:1}};\r\n\r\nconsole.log(\"Before : \" + obj1.polluted);\r\nmerge.recursive(obj1, payload2);\r\nconsole.log(\"After : \" + obj1.polluted);\r\nconsole.log(\"After : \" + {}.polluted);\r\n```\r\n\r\nOutput:\r\n```console\r\nBefore : undefined\r\nAfter : yes\r\nAfter : yes\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `merge` to version 2.1.1 or higher.\n## References\n- [GitHub Commit](https://github.com/yeikos/js.merge/commit/7b0ddc2701d813f2ba289b32d6a4b9d4cc235fb4)\n- [Vulnerable Code](https://github.com/yeikos/js.merge/blob/master/src/index.ts#L64)\n",
        "disclosureTime": "2020-11-22T15:13:53Z",
        "exploit": "Proof of Concept",
        "functions": [],
        "fixedIn": [
          "2.1.1"
        ],
        "id": "SNYK-JS-MERGE-1042987",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "GHSA": [
            "GHSA-7wpw-2hjm-89gp"
          ],
          "CVE": [
            "CVE-2020-28499"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2021-07-06T14:08:07.366296Z",
        "moduleName": "merge",
        "packageManager": "npm",
        "packageName": "merge",
        "patches": [],
        "proprietary": true,
        "publicationTime": "2021-02-23T16:42:39.612000Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/yeikos/js.merge/commit/7b0ddc2701d813f2ba289b32d6a4b9d4cc235fb4"
          },
          {
            "title": "Vulnerable Code",
            "url": "https://github.com/yeikos/js.merge/blob/master/src/index.ts%23L64"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Prototype Pollution",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<2.1.1"
          ]
        },
        "severityWithCritical": "high",
        "from": [
          "@dependencytrack/frontend@4.4.0",
          "vue-bootstrap-toggle@1.1.4",
          "merge@1.2.1"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "merge",
        "version": "1.2.1"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
        "alternativeIds": [],
        "creationTime": "2022-04-05T08:46:07.677588Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n[moment](https://www.npmjs.com/package/moment) is a lightweight JavaScript date library for parsing, validating, manipulating, and formatting dates.\n\nAffected versions of this package are vulnerable to Directory Traversal when a user provides a locale string which is directly used to switch moment locale.\n\n## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`. \n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```\n\n## Remediation\nUpgrade `moment` to version 2.29.2 or higher.\n## References\n- [GitHub Commit](https://github.com/moment/moment/commit/4211bfc8f15746be4019bba557e29a7ba83d54c5)\n",
        "disclosureTime": "2022-04-05T08:39:23Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "2.29.2"
        ],
        "id": "SNYK-JS-MOMENT-2440688",
        "identifiers": {
          "CWE": [
            "CWE-22"
          ],
          "GHSA": [
            "GHSA-8hfj-j24r-96c4"
          ],
          "CVE": [
            "CVE-2022-24785"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-04-05T12:30:50.880408Z",
        "moduleName": "moment",
        "packageManager": "npm",
        "packageName": "moment",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2022-04-05T12:30:50.878091Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/moment/moment/commit/4211bfc8f15746be4019bba557e29a7ba83d54c5"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Directory Traversal",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<2.29.2"
          ]
        },
        "severityWithCritical": "high",
        "from": [
          "@dependencytrack/frontend@4.4.0",
          "chart.js@2.9.4",
          "moment@2.24.0"
        ],
        "upgradePath": [
          false,
          "chart.js@2.9.4",
          "moment@2.29.2"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "moment",
        "version": "2.24.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
        "alternativeIds": [],
        "creationTime": "2022-04-05T08:46:07.677588Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n[moment](https://www.npmjs.com/package/moment) is a lightweight JavaScript date library for parsing, validating, manipulating, and formatting dates.\n\nAffected versions of this package are vulnerable to Directory Traversal when a user provides a locale string which is directly used to switch moment locale.\n\n## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`. \n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```\n\n## Remediation\nUpgrade `moment` to version 2.29.2 or higher.\n## References\n- [GitHub Commit](https://github.com/moment/moment/commit/4211bfc8f15746be4019bba557e29a7ba83d54c5)\n",
        "disclosureTime": "2022-04-05T08:39:23Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "2.29.2"
        ],
        "id": "SNYK-JS-MOMENT-2440688",
        "identifiers": {
          "CWE": [
            "CWE-22"
          ],
          "GHSA": [
            "GHSA-8hfj-j24r-96c4"
          ],
          "CVE": [
            "CVE-2022-24785"
          ]
        },
        "language": "js",
        "malicious": false,
        "modificationTime": "2022-04-05T12:30:50.880408Z",
        "moduleName": "moment",
        "packageManager": "npm",
        "packageName": "moment",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2022-04-05T12:30:50.878091Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/moment/moment/commit/4211bfc8f15746be4019bba557e29a7ba83d54c5"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Directory Traversal",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "<2.29.2"
          ]
        },
        "severityWithCritical": "high",
        "from": [
          "@dependencytrack/frontend@4.4.0",
          "vue-chartjs@3.5.1",
          "@types/chart.js@2.9.24",
          "moment@2.24.0"
        ],
        "upgradePath": [
          false,
          "vue-chartjs@3.5.1",
          "@types/chart.js@2.9.24",
          "moment@2.29.2"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "moment",
        "version": "2.24.0"
      }
    ],
    "ok": false,
    "dependencyCount": 113,
    "org": "wmcsl",
    "policy": "# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.25.0\nignore: {}\npatch: {}\n",
    "isPrivate": true,
    "licensesPolicy": {
      "severities": {},
      "orgLicenseRules": {
        "AGPL-1.0": {
          "licenseType": "AGPL-1.0",
          "severity": "high",
          "instructions": ""
        },
        "AGPL-3.0": {
          "licenseType": "AGPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "Artistic-1.0": {
          "licenseType": "Artistic-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "Artistic-2.0": {
          "licenseType": "Artistic-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "CDDL-1.0": {
          "licenseType": "CDDL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "CPOL-1.02": {
          "licenseType": "CPOL-1.02",
          "severity": "high",
          "instructions": ""
        },
        "EPL-1.0": {
          "licenseType": "EPL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "GPL-2.0": {
          "licenseType": "GPL-2.0",
          "severity": "high",
          "instructions": ""
        },
        "GPL-3.0": {
          "licenseType": "GPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "LGPL-2.0": {
          "licenseType": "LGPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-2.1": {
          "licenseType": "LGPL-2.1",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-3.0": {
          "licenseType": "LGPL-3.0",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-1.1": {
          "licenseType": "MPL-1.1",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-2.0": {
          "licenseType": "MPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "MS-RL": {
          "licenseType": "MS-RL",
          "severity": "medium",
          "instructions": ""
        },
        "SimPL-2.0": {
          "licenseType": "SimPL-2.0",
          "severity": "high",
          "instructions": ""
        }
      }
    },
    "packageManager": "npm",
    "ignoreSettings": {
      "adminOnly": false,
      "reasonRequired": false,
      "disregardFilesystemIgnores": false
    },
    "summary": "6 vulnerable dependency paths",
    "remediation": {
      "unresolved": [
        {
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "alternativeIds": [],
          "creationTime": "2020-11-16T13:56:08.785340Z",
          "credit": [
            "Unknown"
          ],
          "cvssScore": 7.5,
          "description": "## Overview\n[merge](https://github.com/yeikos/js.merge) is a library that allows you to merge multiple objects into one, optionally creating a new cloned object. Similar to the jQuery.extend but more flexible. Works in Node.js and the browser.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The 'merge' function already checks for '__proto__' keys in an object to prevent prototype pollution, but does not check for 'constructor' or 'prototype' keys.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `merge` to version 2.1.0 or higher.\n## References\n- [GitHub PR](https://github.com/yeikos/js.merge/pull/38)\n",
          "disclosureTime": "2020-11-16T13:33:17Z",
          "exploit": "Not Defined",
          "functions": [],
          "fixedIn": [
            "2.1.0"
          ],
          "id": "SNYK-JS-MERGE-1040469",
          "identifiers": {
            "WS": [
              "WS-2020-0218"
            ],
            "CWE": [
              "CWE-400"
            ],
            "CVE": []
          },
          "language": "js",
          "malicious": false,
          "modificationTime": "2021-01-07T08:27:14.285738Z",
          "moduleName": "merge",
          "packageManager": "npm",
          "packageName": "merge",
          "patches": [],
          "proprietary": false,
          "publicationTime": "2020-11-16T16:28:38Z",
          "references": [
            {
              "title": "GitHub PR",
              "url": "https://github.com/yeikos/js.merge/pull/38"
            }
          ],
          "severity": "high",
          "socialTrendAlert": false,
          "title": "Prototype Pollution",
          "insights": {
            "triageAdvice": null
          },
          "functions_new": [],
          "semver": {
            "vulnerable": [
              "<2.1.0"
            ]
          },
          "from": [
            "@dependencytrack/frontend@4.4.0",
            "vue-bootstrap-toggle@1.1.4",
            "merge@1.2.1"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "isRuntime": false,
          "name": "merge",
          "version": "1.2.1",
          "severityWithCritical": "high"
        },
        {
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
          "alternativeIds": [],
          "creationTime": "2020-11-22T15:18:43.156000Z",
          "credit": [
            "Alessio Della Libera (d3lla)"
          ],
          "cvssScore": 7.3,
          "description": "## Overview\n[merge](https://github.com/yeikos/js.merge) is a library that allows you to merge multiple objects into one, optionally creating a new cloned object. Similar to the jQuery.extend but more flexible. Works in Node.js and the browser.\n\nAffected versions of this package are vulnerable to Prototype Pollution via `_recursiveMerge `. \r\n\r\n## PoC: \r\n\r\n```javascript\r\nconst merge = require('merge');\r\n\r\nconst payload2 = JSON.parse('{\"x\": {\"__proto__\":{\"polluted\":\"yes\"}}}');\r\n\r\nlet obj1 = {x: {y:1}};\r\n\r\nconsole.log(\"Before : \" + obj1.polluted);\r\nmerge.recursive(obj1, payload2);\r\nconsole.log(\"After : \" + obj1.polluted);\r\nconsole.log(\"After : \" + {}.polluted);\r\n```\r\n\r\nOutput:\r\n```console\r\nBefore : undefined\r\nAfter : yes\r\nAfter : yes\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `merge` to version 2.1.1 or higher.\n## References\n- [GitHub Commit](https://github.com/yeikos/js.merge/commit/7b0ddc2701d813f2ba289b32d6a4b9d4cc235fb4)\n- [Vulnerable Code](https://github.com/yeikos/js.merge/blob/master/src/index.ts#L64)\n",
          "disclosureTime": "2020-11-22T15:13:53Z",
          "exploit": "Proof of Concept",
          "functions": [],
          "fixedIn": [
            "2.1.1"
          ],
          "id": "SNYK-JS-MERGE-1042987",
          "identifiers": {
            "CWE": [
              "CWE-400"
            ],
            "GHSA": [
              "GHSA-7wpw-2hjm-89gp"
            ],
            "CVE": [
              "CVE-2020-28499"
            ]
          },
          "language": "js",
          "malicious": false,
          "modificationTime": "2021-07-06T14:08:07.366296Z",
          "moduleName": "merge",
          "packageManager": "npm",
          "packageName": "merge",
          "patches": [],
          "proprietary": true,
          "publicationTime": "2021-02-23T16:42:39.612000Z",
          "references": [
            {
              "title": "GitHub Commit",
              "url": "https://github.com/yeikos/js.merge/commit/7b0ddc2701d813f2ba289b32d6a4b9d4cc235fb4"
            },
            {
              "title": "Vulnerable Code",
              "url": "https://github.com/yeikos/js.merge/blob/master/src/index.ts%23L64"
            }
          ],
          "severity": "high",
          "socialTrendAlert": false,
          "title": "Prototype Pollution",
          "insights": {
            "triageAdvice": null
          },
          "functions_new": [],
          "semver": {
            "vulnerable": [
              "<2.1.1"
            ]
          },
          "from": [
            "@dependencytrack/frontend@4.4.0",
            "vue-bootstrap-toggle@1.1.4",
            "merge@1.2.1"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "isRuntime": false,
          "name": "merge",
          "version": "1.2.1",
          "severityWithCritical": "high"
        },
        {
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
          "alternativeIds": [],
          "creationTime": "2022-04-05T08:46:07.677588Z",
          "credit": [
            "Unknown"
          ],
          "cvssScore": 7.5,
          "description": "## Overview\n[moment](https://www.npmjs.com/package/moment) is a lightweight JavaScript date library for parsing, validating, manipulating, and formatting dates.\n\nAffected versions of this package are vulnerable to Directory Traversal when a user provides a locale string which is directly used to switch moment locale.\n\n## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`. \n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```\n\n## Remediation\nUpgrade `moment` to version 2.29.2 or higher.\n## References\n- [GitHub Commit](https://github.com/moment/moment/commit/4211bfc8f15746be4019bba557e29a7ba83d54c5)\n",
          "disclosureTime": "2022-04-05T08:39:23Z",
          "exploit": "Not Defined",
          "functions": [],
          "fixedIn": [
            "2.29.2"
          ],
          "id": "SNYK-JS-MOMENT-2440688",
          "identifiers": {
            "CWE": [
              "CWE-22"
            ],
            "GHSA": [
              "GHSA-8hfj-j24r-96c4"
            ],
            "CVE": [
              "CVE-2022-24785"
            ]
          },
          "language": "js",
          "malicious": false,
          "modificationTime": "2022-04-05T12:30:50.880408Z",
          "moduleName": "moment",
          "packageManager": "npm",
          "packageName": "moment",
          "patches": [],
          "proprietary": false,
          "publicationTime": "2022-04-05T12:30:50.878091Z",
          "references": [
            {
              "title": "GitHub Commit",
              "url": "https://github.com/moment/moment/commit/4211bfc8f15746be4019bba557e29a7ba83d54c5"
            }
          ],
          "severity": "high",
          "socialTrendAlert": false,
          "title": "Directory Traversal",
          "insights": {
            "triageAdvice": null
          },
          "functions_new": [],
          "semver": {
            "vulnerable": [
              "<2.29.2"
            ]
          },
          "from": [
            "@dependencytrack/frontend@4.4.0",
            "vue-chartjs@3.5.1",
            "@types/chart.js@2.9.24",
            "moment@2.24.0"
          ],
          "upgradePath": [
            false,
            "vue-chartjs@3.5.1",
            "@types/chart.js@2.9.24",
            "moment@2.29.2"
          ],
          "isUpgradable": true,
          "isPatchable": false,
          "isPinnable": false,
          "isRuntime": false,
          "name": "moment",
          "version": "2.24.0",
          "severityWithCritical": "high"
        }
      ],
      "upgrade": {
        "bootstrap-table@1.19.1": {
          "upgradeTo": "bootstrap-table@1.20.2",
          "upgrades": [
            "bootstrap-table@1.19.1",
            "bootstrap-table@1.19.1"
          ],
          "vulns": [
            "SNYK-JS-BOOTSTRAPTABLE-2812823",
            "SNYK-JS-BOOTSTRAPTABLE-2825191"
          ]
        }
      },
      "patch": {},
      "ignore": {},
      "pin": {}
    },
    "filesystemPolicy": false,
    "filtered": {
      "ignore": [],
      "patch": []
    },
    "uniqueCount": 5,
    "projectName": "@dependencytrack/frontend",
    "foundProjectCount": 8,
    "displayTargetFile": "frontend/package-lock.json",
    "path": "/mnt/c/Projects/cyberspect/frontend"
  },
  {
    "vulnerabilities": [],
    "ok": true,
    "dependencyCount": 17,
    "org": "wmcsl",
    "policy": "# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.25.0\nignore: {}\npatch: {}\n",
    "isPrivate": true,
    "licensesPolicy": {
      "severities": {},
      "orgLicenseRules": {
        "AGPL-1.0": {
          "licenseType": "AGPL-1.0",
          "severity": "high",
          "instructions": ""
        },
        "AGPL-3.0": {
          "licenseType": "AGPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "Artistic-1.0": {
          "licenseType": "Artistic-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "Artistic-2.0": {
          "licenseType": "Artistic-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "CDDL-1.0": {
          "licenseType": "CDDL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "CPOL-1.02": {
          "licenseType": "CPOL-1.02",
          "severity": "high",
          "instructions": ""
        },
        "EPL-1.0": {
          "licenseType": "EPL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "GPL-2.0": {
          "licenseType": "GPL-2.0",
          "severity": "high",
          "instructions": ""
        },
        "GPL-3.0": {
          "licenseType": "GPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "LGPL-2.0": {
          "licenseType": "LGPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-2.1": {
          "licenseType": "LGPL-2.1",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-3.0": {
          "licenseType": "LGPL-3.0",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-1.1": {
          "licenseType": "MPL-1.1",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-2.0": {
          "licenseType": "MPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "MS-RL": {
          "licenseType": "MS-RL",
          "severity": "medium",
          "instructions": ""
        },
        "SimPL-2.0": {
          "licenseType": "SimPL-2.0",
          "severity": "high",
          "instructions": ""
        }
      }
    },
    "packageManager": "nuget",
    "ignoreSettings": {
      "adminOnly": false,
      "reasonRequired": false,
      "disregardFilesystemIgnores": false
    },
    "summary": "No known vulnerabilities",
    "filesystemPolicy": false,
    "uniqueCount": 0,
    "targetFile": "sbom/Lambda/obj/project.assets.json",
    "projectName": "cyberspect",
    "foundProjectCount": 8,
    "displayTargetFile": "sbom/Lambda/obj/project.assets.json",
    "path": "/mnt/c/Projects/cyberspect"
  },
  {
    "vulnerabilities": [],
    "ok": true,
    "dependencyCount": 1,
    "org": "wmcsl",
    "policy": "# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.25.0\nignore: {}\npatch: {}\n",
    "isPrivate": true,
    "licensesPolicy": {
      "severities": {},
      "orgLicenseRules": {
        "AGPL-1.0": {
          "licenseType": "AGPL-1.0",
          "severity": "high",
          "instructions": ""
        },
        "AGPL-3.0": {
          "licenseType": "AGPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "Artistic-1.0": {
          "licenseType": "Artistic-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "Artistic-2.0": {
          "licenseType": "Artistic-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "CDDL-1.0": {
          "licenseType": "CDDL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "CPOL-1.02": {
          "licenseType": "CPOL-1.02",
          "severity": "high",
          "instructions": ""
        },
        "EPL-1.0": {
          "licenseType": "EPL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "GPL-2.0": {
          "licenseType": "GPL-2.0",
          "severity": "high",
          "instructions": ""
        },
        "GPL-3.0": {
          "licenseType": "GPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "LGPL-2.0": {
          "licenseType": "LGPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-2.1": {
          "licenseType": "LGPL-2.1",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-3.0": {
          "licenseType": "LGPL-3.0",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-1.1": {
          "licenseType": "MPL-1.1",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-2.0": {
          "licenseType": "MPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "MS-RL": {
          "licenseType": "MS-RL",
          "severity": "medium",
          "instructions": ""
        },
        "SimPL-2.0": {
          "licenseType": "SimPL-2.0",
          "severity": "high",
          "instructions": ""
        }
      }
    },
    "packageManager": "nuget",
    "ignoreSettings": {
      "adminOnly": false,
      "reasonRequired": false,
      "disregardFilesystemIgnores": false
    },
    "summary": "No known vulnerabilities",
    "filesystemPolicy": false,
    "uniqueCount": 0,
    "targetFile": "sbom/LicenseCacheBuilder/obj/project.assets.json",
    "projectName": "cyberspect",
    "foundProjectCount": 8,
    "displayTargetFile": "sbom/LicenseCacheBuilder/obj/project.assets.json",
    "path": "/mnt/c/Projects/cyberspect"
  },
  {
    "vulnerabilities": [],
    "ok": true,
    "dependencyCount": 48,
    "org": "wmcsl",
    "policy": "# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.25.0\nignore: {}\npatch: {}\n",
    "isPrivate": true,
    "licensesPolicy": {
      "severities": {},
      "orgLicenseRules": {
        "AGPL-1.0": {
          "licenseType": "AGPL-1.0",
          "severity": "high",
          "instructions": ""
        },
        "AGPL-3.0": {
          "licenseType": "AGPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "Artistic-1.0": {
          "licenseType": "Artistic-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "Artistic-2.0": {
          "licenseType": "Artistic-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "CDDL-1.0": {
          "licenseType": "CDDL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "CPOL-1.02": {
          "licenseType": "CPOL-1.02",
          "severity": "high",
          "instructions": ""
        },
        "EPL-1.0": {
          "licenseType": "EPL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "GPL-2.0": {
          "licenseType": "GPL-2.0",
          "severity": "high",
          "instructions": ""
        },
        "GPL-3.0": {
          "licenseType": "GPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "LGPL-2.0": {
          "licenseType": "LGPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-2.1": {
          "licenseType": "LGPL-2.1",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-3.0": {
          "licenseType": "LGPL-3.0",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-1.1": {
          "licenseType": "MPL-1.1",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-2.0": {
          "licenseType": "MPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "MS-RL": {
          "licenseType": "MS-RL",
          "severity": "medium",
          "instructions": ""
        },
        "SimPL-2.0": {
          "licenseType": "SimPL-2.0",
          "severity": "high",
          "instructions": ""
        }
      }
    },
    "packageManager": "nuget",
    "ignoreSettings": {
      "adminOnly": false,
      "reasonRequired": false,
      "disregardFilesystemIgnores": false
    },
    "summary": "No known vulnerabilities",
    "filesystemPolicy": false,
    "uniqueCount": 0,
    "targetFile": "sbom/SBOM/obj/project.assets.json",
    "projectName": "cyberspect",
    "foundProjectCount": 8,
    "displayTargetFile": "sbom/SBOM/obj/project.assets.json",
    "path": "/mnt/c/Projects/cyberspect"
  },
  {
    "vulnerabilities": [],
    "ok": true,
    "dependencyCount": 107,
    "org": "wmcsl",
    "policy": "# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.25.0\nignore: {}\npatch: {}\n",
    "isPrivate": true,
    "licensesPolicy": {
      "severities": {},
      "orgLicenseRules": {
        "AGPL-1.0": {
          "licenseType": "AGPL-1.0",
          "severity": "high",
          "instructions": ""
        },
        "AGPL-3.0": {
          "licenseType": "AGPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "Artistic-1.0": {
          "licenseType": "Artistic-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "Artistic-2.0": {
          "licenseType": "Artistic-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "CDDL-1.0": {
          "licenseType": "CDDL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "CPOL-1.02": {
          "licenseType": "CPOL-1.02",
          "severity": "high",
          "instructions": ""
        },
        "EPL-1.0": {
          "licenseType": "EPL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "GPL-2.0": {
          "licenseType": "GPL-2.0",
          "severity": "high",
          "instructions": ""
        },
        "GPL-3.0": {
          "licenseType": "GPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "LGPL-2.0": {
          "licenseType": "LGPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-2.1": {
          "licenseType": "LGPL-2.1",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-3.0": {
          "licenseType": "LGPL-3.0",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-1.1": {
          "licenseType": "MPL-1.1",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-2.0": {
          "licenseType": "MPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "MS-RL": {
          "licenseType": "MS-RL",
          "severity": "medium",
          "instructions": ""
        },
        "SimPL-2.0": {
          "licenseType": "SimPL-2.0",
          "severity": "high",
          "instructions": ""
        }
      }
    },
    "packageManager": "cocoapods",
    "ignoreSettings": {
      "adminOnly": false,
      "reasonRequired": false,
      "disregardFilesystemIgnores": false
    },
    "summary": "No known vulnerabilities",
    "filesystemPolicy": false,
    "uniqueCount": 0,
    "targetFile": "sbom/SBOMTests/TestFiles/Podfile",
    "projectName": "TestFiles",
    "foundProjectCount": 8,
    "displayTargetFile": "sbom/SBOMTests/TestFiles/Podfile",
    "path": "/mnt/c/Projects/cyberspect"
  },
  {
    "vulnerabilities": [
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
        "alternativeIds": [],
        "creationTime": "2017-07-19T00:00:00Z",
        "credit": [
          "David Fernandez"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n\n[System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) is an Provides a programming interface for modern HTTP applications, including HTTP client components that allow applications to consume web services over HTTP and HTTP components that can be used by both clients and servers for parsing HTTP headers.\n\n\nAffected versions of this package are vulnerable to Denial of Service (DoS)\nas `ASP.NET Core` fails to properly validate web requests.\r\n\r\n**NOTE:** Microsoft has not commented on third-party claims that the issue is that the `TextEncoder.EncodeCore` function in the `System.Text.Encodings.Web` package in ASP.NET Core Mvc before 1.0.4 and 1.1.x before 1.1.3 allows remote attackers to cause a denial of service by leveraging failure to properly calculate the length of 4-byte characters in the Unicode Non-Character range.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\r\n\r\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\r\n\r\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\r\n\r\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\r\n\r\nTwo common types of DoS vulnerabilities:\r\n\r\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\r\n\r\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\n\n## Remediation\n\nUpgrade `System.Net.Http` to version 4.1.2, 4.3.2 or higher.\n\n\n## References\n\n- [David Fernandez Blog](https://www.sidertia.com/Home/Community/Blog/2017/05/18/ASPNET-Core-Unicode-Non-Char-Encoding-DoS)\n\n- [GitHub Issue](https://github.com/aspnet/Announcements/issues/239)\n\n- [Microsoft Security Advisory](https://technet.microsoft.com/en-us/library/security/4021279.aspx)\n\n- [NVD](https://nvd.nist.gov/vuln/detail/2017-0247)\n",
        "disclosureTime": "2017-05-09T00:00:00Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "4.1.2",
          "4.3.2"
        ],
        "id": "SNYK-DOTNET-SYSTEMNETHTTP-60045",
        "identifiers": {
          "CWE": [
            "CWE-254"
          ],
          "CVE": [
            "CVE-2017-0247"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2021-08-24T14:49:07.708862Z",
        "moduleName": "system.net.http",
        "packageManager": "nuget",
        "packageName": "System.Net.Http",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2017-05-09T00:00:00Z",
        "references": [
          {
            "title": "David Fernandez Blog",
            "url": "https://www.sidertia.com/Home/Community/Blog/2017/05/18/ASPNET-Core-Unicode-Non-Char-Encoding-DoS"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/aspnet/Announcements/issues/239"
          },
          {
            "title": "Microsoft Security Advisory",
            "url": "https://technet.microsoft.com/en-us/library/security/4021279.aspx"
          },
          {
            "title": "NVD",
            "url": "https://nvd.nist.gov/vuln/detail/2017-0247"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Denial of Service (DoS)",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[,4.1.2)",
            "[4.3.0,4.3.2)"
          ]
        },
        "severityWithCritical": "high",
        "from": [
          "cyberspect@1.0.0",
          "MSTest.TestAdapter@2.2.8",
          "NETStandard.Library@1.6.1",
          "System.Net.Http@4.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "System.Net.Http",
        "version": "4.3.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
        "alternativeIds": [],
        "creationTime": "2017-07-19T00:00:00Z",
        "credit": [
          "Joonwoo Yu",
          "Hyoung-Kee Choi"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n[System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) is a Provides a programming interface for modern HTTP applications, including HTTP client components that allow applications to consume web services over HTTP and HTTP components that can be used by both clients and servers for parsing HTTP headers.\n\nAffected versions of this package are vulnerable to Improper Certificate Validation. It allows an attacker to bypass _Enhanced Security Usage_ tagging when they present a certificate that is invalid for a specific use.\n## Remediation\nUpgrade `System.Net.Http` to version 4.1.2, 4.3.2 or higher.\n## References\n- [GitHub Issue](https://github.com/aspnet/Announcements/issues/239)\n- [Microsoft Security Advisory](https://technet.microsoft.com/en-us/library/security/4021279.aspx)\n- [NVD](https://nvd.nist.gov/vuln/detail/2017-0248)\n",
        "disclosureTime": "2017-05-12T00:00:00Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "4.1.2",
          "4.3.2"
        ],
        "id": "SNYK-DOTNET-SYSTEMNETHTTP-60046",
        "identifiers": {
          "CWE": [
            "CWE-287"
          ],
          "CVE": [
            "CVE-2017-0248"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2021-08-24T14:49:07.783290Z",
        "moduleName": "system.net.http",
        "packageManager": "nuget",
        "packageName": "System.Net.Http",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2017-05-12T00:00:00Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/aspnet/Announcements/issues/239"
          },
          {
            "title": "Microsoft Security Advisory",
            "url": "https://technet.microsoft.com/en-us/library/security/4021279.aspx"
          },
          {
            "title": "NVD",
            "url": "https://nvd.nist.gov/vuln/detail/2017-0248"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Improper Certificate Validation",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[,4.1.2)",
            "[4.3,4.3.2)"
          ]
        },
        "severityWithCritical": "high",
        "from": [
          "cyberspect@1.0.0",
          "MSTest.TestAdapter@2.2.8",
          "NETStandard.Library@1.6.1",
          "System.Net.Http@4.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "System.Net.Http",
        "version": "4.3.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
        "alternativeIds": [],
        "creationTime": "2017-07-19T00:00:00Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.3,
        "description": "## Overview\n\n[System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) Provides a programming interface for modern HTTP applications, including HTTP client components that allow applications to consume web services over HTTP and HTTP components that can be used by both clients and servers for parsing HTTP headers.\n\n\nAffected versions of this package are vulnerable to Privilege Escalation\ndue to failing to properly sanitize web requests.\n\n## Remediation\n\nUpgrade `System.Net.Http` to version 4.1.2, 4.3.2 or higher.\n\n\n## References\n\n- [GitHub Issue](https://github.com/aspnet/Announcements/issues/239)\n",
        "disclosureTime": "2017-05-12T00:00:00Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "4.1.2",
          "4.3.2"
        ],
        "id": "SNYK-DOTNET-SYSTEMNETHTTP-60047",
        "identifiers": {
          "CWE": [
            "CWE-269"
          ],
          "CVE": [
            "CVE-2017-0249"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2021-10-09T14:33:54.951128Z",
        "moduleName": "system.net.http",
        "packageManager": "nuget",
        "packageName": "System.Net.Http",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2017-05-12T00:00:00Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/aspnet/Announcements/issues/239"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Privilege Escalation",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[,4.1.2)",
            "[4.3,4.3.2)"
          ]
        },
        "severityWithCritical": "high",
        "from": [
          "cyberspect@1.0.0",
          "MSTest.TestAdapter@2.2.8",
          "NETStandard.Library@1.6.1",
          "System.Net.Http@4.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "System.Net.Http",
        "version": "4.3.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
        "alternativeIds": [],
        "creationTime": "2017-07-19T00:00:00Z",
        "credit": [
          "Mikhail Shcherbakov"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\nThe ASP.NET Core fails to properly sanitize the _Web Request Handler_ component, allowing an attacker to spoof web requests and bypass authentication.\n\n## References\n- [GitHub Issue](https://github.com/aspnet/Announcements/issues/239)\n- [Microsoft Security Advisory](https://technet.microsoft.com/en-us/library/security/4021279.aspx)\n- [NVD](https://nvd.nist.gov/vuln/detail/2017-0256)\n",
        "disclosureTime": "2017-05-12T00:00:00Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "4.1.2",
          "4.3.2"
        ],
        "id": "SNYK-DOTNET-SYSTEMNETHTTP-60048",
        "identifiers": {
          "CWE": [
            "CWE-20"
          ],
          "CVE": [
            "CVE-2017-0256"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2021-08-24T14:49:07.613538Z",
        "moduleName": "system.net.http",
        "packageManager": "nuget",
        "packageName": "System.Net.Http",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2017-05-12T00:00:00Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/aspnet/Announcements/issues/239"
          },
          {
            "title": "Microsoft Security Advisory",
            "url": "https://technet.microsoft.com/en-us/library/security/4021279.aspx"
          },
          {
            "title": "NVD",
            "url": "https://nvd.nist.gov/vuln/detail/2017-0256"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Authentication Bypass",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[,4.1.2)",
            "[4.3,4.3.2)"
          ]
        },
        "severityWithCritical": "medium",
        "from": [
          "cyberspect@1.0.0",
          "MSTest.TestAdapter@2.2.8",
          "NETStandard.Library@1.6.1",
          "System.Net.Http@4.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "System.Net.Http",
        "version": "4.3.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
        "alternativeIds": [],
        "creationTime": "2018-10-11T06:50:22.411410Z",
        "credit": [
          "leecow"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n\n[System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) Provides a programming interface for modern HTTP applications, including HTTP client components that allow applications to consume web services over HTTP and HTTP components that can be used by both clients and servers for parsing HTTP headers.\n\n\nAffected versions of this package are vulnerable to Information Exposure.\nWhen HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\n**Note:** The presence of `System.Net.Http` in the dependency graph of `netcoreapp2.0` isn't the final determination of what is loaded at runtime. The version conflict resolution logic will prefer what is present in `Microsoft.NETCore.App/2.1.5`, or the latest patch release. As such, is not considered an issue.\n\n## Remediation\n\nUpgrade `System.Net.Http` to version 2.0.20710, 4.0.1-beta-23225, 4.1.4, 4.3.4 or higher.\n\n\n## References\n\n- [GitHub Issue](https://github.com/dotnet/announcements/issues/88)\n",
        "disclosureTime": "2018-10-09T22:51:18Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "2.0.20710",
          "4.0.1-beta-23225",
          "4.1.4",
          "4.3.4"
        ],
        "id": "SNYK-DOTNET-SYSTEMNETHTTP-72439",
        "identifiers": {
          "CWE": [
            "CWE-200"
          ],
          "GHSA": [
            "GHSA-7jgj-8wvc-jh57"
          ],
          "CVE": [
            "CVE-2018-8292"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2022-06-14T06:22:44.080361Z",
        "moduleName": "system.net.http",
        "packageManager": "nuget",
        "packageName": "System.Net.Http",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2018-10-10T15:24:52Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/dotnet/announcements/issues/88"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Information Exposure",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[2.0.20126.16343, 2.0.20710)",
            "[4.0.0,4.0.1-beta-23225)",
            "[4.1.0,4.1.4)",
            "[4.3.0,4.3.4)"
          ]
        },
        "severityWithCritical": "high",
        "from": [
          "cyberspect@1.0.0",
          "MSTest.TestAdapter@2.2.8",
          "NETStandard.Library@1.6.1",
          "System.Net.Http@4.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "System.Net.Http",
        "version": "4.3.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
        "alternativeIds": [],
        "creationTime": "2017-07-19T00:00:00Z",
        "credit": [
          "David Fernandez"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n\n[System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) is an Provides a programming interface for modern HTTP applications, including HTTP client components that allow applications to consume web services over HTTP and HTTP components that can be used by both clients and servers for parsing HTTP headers.\n\n\nAffected versions of this package are vulnerable to Denial of Service (DoS)\nas `ASP.NET Core` fails to properly validate web requests.\r\n\r\n**NOTE:** Microsoft has not commented on third-party claims that the issue is that the `TextEncoder.EncodeCore` function in the `System.Text.Encodings.Web` package in ASP.NET Core Mvc before 1.0.4 and 1.1.x before 1.1.3 allows remote attackers to cause a denial of service by leveraging failure to properly calculate the length of 4-byte characters in the Unicode Non-Character range.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\r\n\r\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\r\n\r\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\r\n\r\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\r\n\r\nTwo common types of DoS vulnerabilities:\r\n\r\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\r\n\r\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\n\n## Remediation\n\nUpgrade `System.Net.Http` to version 4.1.2, 4.3.2 or higher.\n\n\n## References\n\n- [David Fernandez Blog](https://www.sidertia.com/Home/Community/Blog/2017/05/18/ASPNET-Core-Unicode-Non-Char-Encoding-DoS)\n\n- [GitHub Issue](https://github.com/aspnet/Announcements/issues/239)\n\n- [Microsoft Security Advisory](https://technet.microsoft.com/en-us/library/security/4021279.aspx)\n\n- [NVD](https://nvd.nist.gov/vuln/detail/2017-0247)\n",
        "disclosureTime": "2017-05-09T00:00:00Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "4.1.2",
          "4.3.2"
        ],
        "id": "SNYK-DOTNET-SYSTEMNETHTTP-60045",
        "identifiers": {
          "CWE": [
            "CWE-254"
          ],
          "CVE": [
            "CVE-2017-0247"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2021-08-24T14:49:07.708862Z",
        "moduleName": "system.net.http",
        "packageManager": "nuget",
        "packageName": "System.Net.Http",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2017-05-09T00:00:00Z",
        "references": [
          {
            "title": "David Fernandez Blog",
            "url": "https://www.sidertia.com/Home/Community/Blog/2017/05/18/ASPNET-Core-Unicode-Non-Char-Encoding-DoS"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/aspnet/Announcements/issues/239"
          },
          {
            "title": "Microsoft Security Advisory",
            "url": "https://technet.microsoft.com/en-us/library/security/4021279.aspx"
          },
          {
            "title": "NVD",
            "url": "https://nvd.nist.gov/vuln/detail/2017-0247"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Denial of Service (DoS)",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[,4.1.2)",
            "[4.3.0,4.3.2)"
          ]
        },
        "severityWithCritical": "high",
        "from": [
          "cyberspect@1.0.0",
          "MSTest.TestFramework@2.2.8",
          "NETStandard.Library@1.6.1",
          "System.Net.Http@4.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "System.Net.Http",
        "version": "4.3.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
        "alternativeIds": [],
        "creationTime": "2017-07-19T00:00:00Z",
        "credit": [
          "Joonwoo Yu",
          "Hyoung-Kee Choi"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n[System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) is a Provides a programming interface for modern HTTP applications, including HTTP client components that allow applications to consume web services over HTTP and HTTP components that can be used by both clients and servers for parsing HTTP headers.\n\nAffected versions of this package are vulnerable to Improper Certificate Validation. It allows an attacker to bypass _Enhanced Security Usage_ tagging when they present a certificate that is invalid for a specific use.\n## Remediation\nUpgrade `System.Net.Http` to version 4.1.2, 4.3.2 or higher.\n## References\n- [GitHub Issue](https://github.com/aspnet/Announcements/issues/239)\n- [Microsoft Security Advisory](https://technet.microsoft.com/en-us/library/security/4021279.aspx)\n- [NVD](https://nvd.nist.gov/vuln/detail/2017-0248)\n",
        "disclosureTime": "2017-05-12T00:00:00Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "4.1.2",
          "4.3.2"
        ],
        "id": "SNYK-DOTNET-SYSTEMNETHTTP-60046",
        "identifiers": {
          "CWE": [
            "CWE-287"
          ],
          "CVE": [
            "CVE-2017-0248"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2021-08-24T14:49:07.783290Z",
        "moduleName": "system.net.http",
        "packageManager": "nuget",
        "packageName": "System.Net.Http",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2017-05-12T00:00:00Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/aspnet/Announcements/issues/239"
          },
          {
            "title": "Microsoft Security Advisory",
            "url": "https://technet.microsoft.com/en-us/library/security/4021279.aspx"
          },
          {
            "title": "NVD",
            "url": "https://nvd.nist.gov/vuln/detail/2017-0248"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Improper Certificate Validation",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[,4.1.2)",
            "[4.3,4.3.2)"
          ]
        },
        "severityWithCritical": "high",
        "from": [
          "cyberspect@1.0.0",
          "MSTest.TestFramework@2.2.8",
          "NETStandard.Library@1.6.1",
          "System.Net.Http@4.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "System.Net.Http",
        "version": "4.3.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
        "alternativeIds": [],
        "creationTime": "2017-07-19T00:00:00Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.3,
        "description": "## Overview\n\n[System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) Provides a programming interface for modern HTTP applications, including HTTP client components that allow applications to consume web services over HTTP and HTTP components that can be used by both clients and servers for parsing HTTP headers.\n\n\nAffected versions of this package are vulnerable to Privilege Escalation\ndue to failing to properly sanitize web requests.\n\n## Remediation\n\nUpgrade `System.Net.Http` to version 4.1.2, 4.3.2 or higher.\n\n\n## References\n\n- [GitHub Issue](https://github.com/aspnet/Announcements/issues/239)\n",
        "disclosureTime": "2017-05-12T00:00:00Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "4.1.2",
          "4.3.2"
        ],
        "id": "SNYK-DOTNET-SYSTEMNETHTTP-60047",
        "identifiers": {
          "CWE": [
            "CWE-269"
          ],
          "CVE": [
            "CVE-2017-0249"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2021-10-09T14:33:54.951128Z",
        "moduleName": "system.net.http",
        "packageManager": "nuget",
        "packageName": "System.Net.Http",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2017-05-12T00:00:00Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/aspnet/Announcements/issues/239"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Privilege Escalation",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[,4.1.2)",
            "[4.3,4.3.2)"
          ]
        },
        "severityWithCritical": "high",
        "from": [
          "cyberspect@1.0.0",
          "MSTest.TestFramework@2.2.8",
          "NETStandard.Library@1.6.1",
          "System.Net.Http@4.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "System.Net.Http",
        "version": "4.3.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
        "alternativeIds": [],
        "creationTime": "2017-07-19T00:00:00Z",
        "credit": [
          "Mikhail Shcherbakov"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\nThe ASP.NET Core fails to properly sanitize the _Web Request Handler_ component, allowing an attacker to spoof web requests and bypass authentication.\n\n## References\n- [GitHub Issue](https://github.com/aspnet/Announcements/issues/239)\n- [Microsoft Security Advisory](https://technet.microsoft.com/en-us/library/security/4021279.aspx)\n- [NVD](https://nvd.nist.gov/vuln/detail/2017-0256)\n",
        "disclosureTime": "2017-05-12T00:00:00Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "4.1.2",
          "4.3.2"
        ],
        "id": "SNYK-DOTNET-SYSTEMNETHTTP-60048",
        "identifiers": {
          "CWE": [
            "CWE-20"
          ],
          "CVE": [
            "CVE-2017-0256"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2021-08-24T14:49:07.613538Z",
        "moduleName": "system.net.http",
        "packageManager": "nuget",
        "packageName": "System.Net.Http",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2017-05-12T00:00:00Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/aspnet/Announcements/issues/239"
          },
          {
            "title": "Microsoft Security Advisory",
            "url": "https://technet.microsoft.com/en-us/library/security/4021279.aspx"
          },
          {
            "title": "NVD",
            "url": "https://nvd.nist.gov/vuln/detail/2017-0256"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Authentication Bypass",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[,4.1.2)",
            "[4.3,4.3.2)"
          ]
        },
        "severityWithCritical": "medium",
        "from": [
          "cyberspect@1.0.0",
          "MSTest.TestFramework@2.2.8",
          "NETStandard.Library@1.6.1",
          "System.Net.Http@4.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "System.Net.Http",
        "version": "4.3.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
        "alternativeIds": [],
        "creationTime": "2018-10-11T06:50:22.411410Z",
        "credit": [
          "leecow"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n\n[System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) Provides a programming interface for modern HTTP applications, including HTTP client components that allow applications to consume web services over HTTP and HTTP components that can be used by both clients and servers for parsing HTTP headers.\n\n\nAffected versions of this package are vulnerable to Information Exposure.\nWhen HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\n**Note:** The presence of `System.Net.Http` in the dependency graph of `netcoreapp2.0` isn't the final determination of what is loaded at runtime. The version conflict resolution logic will prefer what is present in `Microsoft.NETCore.App/2.1.5`, or the latest patch release. As such, is not considered an issue.\n\n## Remediation\n\nUpgrade `System.Net.Http` to version 2.0.20710, 4.0.1-beta-23225, 4.1.4, 4.3.4 or higher.\n\n\n## References\n\n- [GitHub Issue](https://github.com/dotnet/announcements/issues/88)\n",
        "disclosureTime": "2018-10-09T22:51:18Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "2.0.20710",
          "4.0.1-beta-23225",
          "4.1.4",
          "4.3.4"
        ],
        "id": "SNYK-DOTNET-SYSTEMNETHTTP-72439",
        "identifiers": {
          "CWE": [
            "CWE-200"
          ],
          "GHSA": [
            "GHSA-7jgj-8wvc-jh57"
          ],
          "CVE": [
            "CVE-2018-8292"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2022-06-14T06:22:44.080361Z",
        "moduleName": "system.net.http",
        "packageManager": "nuget",
        "packageName": "System.Net.Http",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2018-10-10T15:24:52Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/dotnet/announcements/issues/88"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Information Exposure",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[2.0.20126.16343, 2.0.20710)",
            "[4.0.0,4.0.1-beta-23225)",
            "[4.1.0,4.1.4)",
            "[4.3.0,4.3.4)"
          ]
        },
        "severityWithCritical": "high",
        "from": [
          "cyberspect@1.0.0",
          "MSTest.TestFramework@2.2.8",
          "NETStandard.Library@1.6.1",
          "System.Net.Http@4.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "System.Net.Http",
        "version": "4.3.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
        "alternativeIds": [],
        "creationTime": "2017-07-19T00:00:00Z",
        "credit": [
          "David Fernandez"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n\n[System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) is an Provides a programming interface for modern HTTP applications, including HTTP client components that allow applications to consume web services over HTTP and HTTP components that can be used by both clients and servers for parsing HTTP headers.\n\n\nAffected versions of this package are vulnerable to Denial of Service (DoS)\nas `ASP.NET Core` fails to properly validate web requests.\r\n\r\n**NOTE:** Microsoft has not commented on third-party claims that the issue is that the `TextEncoder.EncodeCore` function in the `System.Text.Encodings.Web` package in ASP.NET Core Mvc before 1.0.4 and 1.1.x before 1.1.3 allows remote attackers to cause a denial of service by leveraging failure to properly calculate the length of 4-byte characters in the Unicode Non-Character range.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\r\n\r\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\r\n\r\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\r\n\r\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\r\n\r\nTwo common types of DoS vulnerabilities:\r\n\r\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\r\n\r\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\n\n## Remediation\n\nUpgrade `System.Net.Http` to version 4.1.2, 4.3.2 or higher.\n\n\n## References\n\n- [David Fernandez Blog](https://www.sidertia.com/Home/Community/Blog/2017/05/18/ASPNET-Core-Unicode-Non-Char-Encoding-DoS)\n\n- [GitHub Issue](https://github.com/aspnet/Announcements/issues/239)\n\n- [Microsoft Security Advisory](https://technet.microsoft.com/en-us/library/security/4021279.aspx)\n\n- [NVD](https://nvd.nist.gov/vuln/detail/2017-0247)\n",
        "disclosureTime": "2017-05-09T00:00:00Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "4.1.2",
          "4.3.2"
        ],
        "id": "SNYK-DOTNET-SYSTEMNETHTTP-60045",
        "identifiers": {
          "CWE": [
            "CWE-254"
          ],
          "CVE": [
            "CVE-2017-0247"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2021-08-24T14:49:07.708862Z",
        "moduleName": "system.net.http",
        "packageManager": "nuget",
        "packageName": "System.Net.Http",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2017-05-09T00:00:00Z",
        "references": [
          {
            "title": "David Fernandez Blog",
            "url": "https://www.sidertia.com/Home/Community/Blog/2017/05/18/ASPNET-Core-Unicode-Non-Char-Encoding-DoS"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/aspnet/Announcements/issues/239"
          },
          {
            "title": "Microsoft Security Advisory",
            "url": "https://technet.microsoft.com/en-us/library/security/4021279.aspx"
          },
          {
            "title": "NVD",
            "url": "https://nvd.nist.gov/vuln/detail/2017-0247"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Denial of Service (DoS)",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[,4.1.2)",
            "[4.3.0,4.3.2)"
          ]
        },
        "severityWithCritical": "high",
        "from": [
          "cyberspect@1.0.0",
          "Moq@4.17.2",
          "Castle.Core@4.4.1",
          "NETStandard.Library@1.6.1",
          "System.Net.Http@4.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "System.Net.Http",
        "version": "4.3.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
        "alternativeIds": [],
        "creationTime": "2017-07-19T00:00:00Z",
        "credit": [
          "Joonwoo Yu",
          "Hyoung-Kee Choi"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n[System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) is a Provides a programming interface for modern HTTP applications, including HTTP client components that allow applications to consume web services over HTTP and HTTP components that can be used by both clients and servers for parsing HTTP headers.\n\nAffected versions of this package are vulnerable to Improper Certificate Validation. It allows an attacker to bypass _Enhanced Security Usage_ tagging when they present a certificate that is invalid for a specific use.\n## Remediation\nUpgrade `System.Net.Http` to version 4.1.2, 4.3.2 or higher.\n## References\n- [GitHub Issue](https://github.com/aspnet/Announcements/issues/239)\n- [Microsoft Security Advisory](https://technet.microsoft.com/en-us/library/security/4021279.aspx)\n- [NVD](https://nvd.nist.gov/vuln/detail/2017-0248)\n",
        "disclosureTime": "2017-05-12T00:00:00Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "4.1.2",
          "4.3.2"
        ],
        "id": "SNYK-DOTNET-SYSTEMNETHTTP-60046",
        "identifiers": {
          "CWE": [
            "CWE-287"
          ],
          "CVE": [
            "CVE-2017-0248"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2021-08-24T14:49:07.783290Z",
        "moduleName": "system.net.http",
        "packageManager": "nuget",
        "packageName": "System.Net.Http",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2017-05-12T00:00:00Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/aspnet/Announcements/issues/239"
          },
          {
            "title": "Microsoft Security Advisory",
            "url": "https://technet.microsoft.com/en-us/library/security/4021279.aspx"
          },
          {
            "title": "NVD",
            "url": "https://nvd.nist.gov/vuln/detail/2017-0248"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Improper Certificate Validation",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[,4.1.2)",
            "[4.3,4.3.2)"
          ]
        },
        "severityWithCritical": "high",
        "from": [
          "cyberspect@1.0.0",
          "Moq@4.17.2",
          "Castle.Core@4.4.1",
          "NETStandard.Library@1.6.1",
          "System.Net.Http@4.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "System.Net.Http",
        "version": "4.3.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
        "alternativeIds": [],
        "creationTime": "2017-07-19T00:00:00Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.3,
        "description": "## Overview\n\n[System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) Provides a programming interface for modern HTTP applications, including HTTP client components that allow applications to consume web services over HTTP and HTTP components that can be used by both clients and servers for parsing HTTP headers.\n\n\nAffected versions of this package are vulnerable to Privilege Escalation\ndue to failing to properly sanitize web requests.\n\n## Remediation\n\nUpgrade `System.Net.Http` to version 4.1.2, 4.3.2 or higher.\n\n\n## References\n\n- [GitHub Issue](https://github.com/aspnet/Announcements/issues/239)\n",
        "disclosureTime": "2017-05-12T00:00:00Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "4.1.2",
          "4.3.2"
        ],
        "id": "SNYK-DOTNET-SYSTEMNETHTTP-60047",
        "identifiers": {
          "CWE": [
            "CWE-269"
          ],
          "CVE": [
            "CVE-2017-0249"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2021-10-09T14:33:54.951128Z",
        "moduleName": "system.net.http",
        "packageManager": "nuget",
        "packageName": "System.Net.Http",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2017-05-12T00:00:00Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/aspnet/Announcements/issues/239"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Privilege Escalation",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[,4.1.2)",
            "[4.3,4.3.2)"
          ]
        },
        "severityWithCritical": "high",
        "from": [
          "cyberspect@1.0.0",
          "Moq@4.17.2",
          "Castle.Core@4.4.1",
          "NETStandard.Library@1.6.1",
          "System.Net.Http@4.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "System.Net.Http",
        "version": "4.3.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
        "alternativeIds": [],
        "creationTime": "2017-07-19T00:00:00Z",
        "credit": [
          "Mikhail Shcherbakov"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\nThe ASP.NET Core fails to properly sanitize the _Web Request Handler_ component, allowing an attacker to spoof web requests and bypass authentication.\n\n## References\n- [GitHub Issue](https://github.com/aspnet/Announcements/issues/239)\n- [Microsoft Security Advisory](https://technet.microsoft.com/en-us/library/security/4021279.aspx)\n- [NVD](https://nvd.nist.gov/vuln/detail/2017-0256)\n",
        "disclosureTime": "2017-05-12T00:00:00Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "4.1.2",
          "4.3.2"
        ],
        "id": "SNYK-DOTNET-SYSTEMNETHTTP-60048",
        "identifiers": {
          "CWE": [
            "CWE-20"
          ],
          "CVE": [
            "CVE-2017-0256"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2021-08-24T14:49:07.613538Z",
        "moduleName": "system.net.http",
        "packageManager": "nuget",
        "packageName": "System.Net.Http",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2017-05-12T00:00:00Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/aspnet/Announcements/issues/239"
          },
          {
            "title": "Microsoft Security Advisory",
            "url": "https://technet.microsoft.com/en-us/library/security/4021279.aspx"
          },
          {
            "title": "NVD",
            "url": "https://nvd.nist.gov/vuln/detail/2017-0256"
          }
        ],
        "severity": "medium",
        "socialTrendAlert": false,
        "title": "Authentication Bypass",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[,4.1.2)",
            "[4.3,4.3.2)"
          ]
        },
        "severityWithCritical": "medium",
        "from": [
          "cyberspect@1.0.0",
          "Moq@4.17.2",
          "Castle.Core@4.4.1",
          "NETStandard.Library@1.6.1",
          "System.Net.Http@4.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "System.Net.Http",
        "version": "4.3.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
        "alternativeIds": [],
        "creationTime": "2018-10-11T06:50:22.411410Z",
        "credit": [
          "leecow"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n\n[System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) Provides a programming interface for modern HTTP applications, including HTTP client components that allow applications to consume web services over HTTP and HTTP components that can be used by both clients and servers for parsing HTTP headers.\n\n\nAffected versions of this package are vulnerable to Information Exposure.\nWhen HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\n**Note:** The presence of `System.Net.Http` in the dependency graph of `netcoreapp2.0` isn't the final determination of what is loaded at runtime. The version conflict resolution logic will prefer what is present in `Microsoft.NETCore.App/2.1.5`, or the latest patch release. As such, is not considered an issue.\n\n## Remediation\n\nUpgrade `System.Net.Http` to version 2.0.20710, 4.0.1-beta-23225, 4.1.4, 4.3.4 or higher.\n\n\n## References\n\n- [GitHub Issue](https://github.com/dotnet/announcements/issues/88)\n",
        "disclosureTime": "2018-10-09T22:51:18Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "2.0.20710",
          "4.0.1-beta-23225",
          "4.1.4",
          "4.3.4"
        ],
        "id": "SNYK-DOTNET-SYSTEMNETHTTP-72439",
        "identifiers": {
          "CWE": [
            "CWE-200"
          ],
          "GHSA": [
            "GHSA-7jgj-8wvc-jh57"
          ],
          "CVE": [
            "CVE-2018-8292"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2022-06-14T06:22:44.080361Z",
        "moduleName": "system.net.http",
        "packageManager": "nuget",
        "packageName": "System.Net.Http",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2018-10-10T15:24:52Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/dotnet/announcements/issues/88"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Information Exposure",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[2.0.20126.16343, 2.0.20710)",
            "[4.0.0,4.0.1-beta-23225)",
            "[4.1.0,4.1.4)",
            "[4.3.0,4.3.4)"
          ]
        },
        "severityWithCritical": "high",
        "from": [
          "cyberspect@1.0.0",
          "Moq@4.17.2",
          "Castle.Core@4.4.1",
          "NETStandard.Library@1.6.1",
          "System.Net.Http@4.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "System.Net.Http",
        "version": "4.3.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2019-05-15T16:00:51.866263Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n\n[System.Text.RegularExpressions](https://www.nuget.org/packages/System.Text.RegularExpressions/) is a regular expression engine.\n\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS)\ndue to improperly processing of RegEx strings.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\n\nUpgrade `System.Text.RegularExpressions` to version 4.3.1 or higher.\n\n\n## References\n\n- [GitHub Issue](https://github.com/dotnet/announcements/issues/111)\n\n- [Microsoft Security Advisory](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0820)\n",
        "disclosureTime": "2019-05-14T07:00:00Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "4.3.1"
        ],
        "id": "SNYK-DOTNET-SYSTEMTEXTREGULAREXPRESSIONS-174708",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "CVE": [
            "CVE-2019-0820"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2020-12-14T14:40:55.968790Z",
        "moduleName": "system.text.regularexpressions",
        "packageManager": "nuget",
        "packageName": "System.Text.RegularExpressions",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-05-16T15:55:53Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/dotnet/announcements/issues/111"
          },
          {
            "title": "Microsoft Security Advisory",
            "url": "https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0820"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[4.3.0, 4.3.1)"
          ]
        },
        "severityWithCritical": "high",
        "from": [
          "cyberspect@1.0.0",
          "MSTest.TestAdapter@2.2.8",
          "NETStandard.Library@1.6.1",
          "System.Text.RegularExpressions@4.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "System.Text.RegularExpressions",
        "version": "4.3.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2019-05-15T16:00:51.866263Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n\n[System.Text.RegularExpressions](https://www.nuget.org/packages/System.Text.RegularExpressions/) is a regular expression engine.\n\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS)\ndue to improperly processing of RegEx strings.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\n\nUpgrade `System.Text.RegularExpressions` to version 4.3.1 or higher.\n\n\n## References\n\n- [GitHub Issue](https://github.com/dotnet/announcements/issues/111)\n\n- [Microsoft Security Advisory](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0820)\n",
        "disclosureTime": "2019-05-14T07:00:00Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "4.3.1"
        ],
        "id": "SNYK-DOTNET-SYSTEMTEXTREGULAREXPRESSIONS-174708",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "CVE": [
            "CVE-2019-0820"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2020-12-14T14:40:55.968790Z",
        "moduleName": "system.text.regularexpressions",
        "packageManager": "nuget",
        "packageName": "System.Text.RegularExpressions",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-05-16T15:55:53Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/dotnet/announcements/issues/111"
          },
          {
            "title": "Microsoft Security Advisory",
            "url": "https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0820"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[4.3.0, 4.3.1)"
          ]
        },
        "severityWithCritical": "high",
        "from": [
          "cyberspect@1.0.0",
          "MSTest.TestFramework@2.2.8",
          "NETStandard.Library@1.6.1",
          "System.Text.RegularExpressions@4.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "System.Text.RegularExpressions",
        "version": "4.3.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2019-05-15T16:00:51.866263Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n\n[System.Text.RegularExpressions](https://www.nuget.org/packages/System.Text.RegularExpressions/) is a regular expression engine.\n\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS)\ndue to improperly processing of RegEx strings.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\n\nUpgrade `System.Text.RegularExpressions` to version 4.3.1 or higher.\n\n\n## References\n\n- [GitHub Issue](https://github.com/dotnet/announcements/issues/111)\n\n- [Microsoft Security Advisory](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0820)\n",
        "disclosureTime": "2019-05-14T07:00:00Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "4.3.1"
        ],
        "id": "SNYK-DOTNET-SYSTEMTEXTREGULAREXPRESSIONS-174708",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "CVE": [
            "CVE-2019-0820"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2020-12-14T14:40:55.968790Z",
        "moduleName": "system.text.regularexpressions",
        "packageManager": "nuget",
        "packageName": "System.Text.RegularExpressions",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-05-16T15:55:53Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/dotnet/announcements/issues/111"
          },
          {
            "title": "Microsoft Security Advisory",
            "url": "https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0820"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[4.3.0, 4.3.1)"
          ]
        },
        "severityWithCritical": "high",
        "from": [
          "cyberspect@1.0.0",
          "MSTest.TestAdapter@2.2.8",
          "NETStandard.Library@1.6.1",
          "System.Xml.ReaderWriter@4.3.0",
          "System.Text.RegularExpressions@4.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "System.Text.RegularExpressions",
        "version": "4.3.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2019-05-15T16:00:51.866263Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n\n[System.Text.RegularExpressions](https://www.nuget.org/packages/System.Text.RegularExpressions/) is a regular expression engine.\n\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS)\ndue to improperly processing of RegEx strings.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\n\nUpgrade `System.Text.RegularExpressions` to version 4.3.1 or higher.\n\n\n## References\n\n- [GitHub Issue](https://github.com/dotnet/announcements/issues/111)\n\n- [Microsoft Security Advisory](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0820)\n",
        "disclosureTime": "2019-05-14T07:00:00Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "4.3.1"
        ],
        "id": "SNYK-DOTNET-SYSTEMTEXTREGULAREXPRESSIONS-174708",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "CVE": [
            "CVE-2019-0820"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2020-12-14T14:40:55.968790Z",
        "moduleName": "system.text.regularexpressions",
        "packageManager": "nuget",
        "packageName": "System.Text.RegularExpressions",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-05-16T15:55:53Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/dotnet/announcements/issues/111"
          },
          {
            "title": "Microsoft Security Advisory",
            "url": "https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0820"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[4.3.0, 4.3.1)"
          ]
        },
        "severityWithCritical": "high",
        "from": [
          "cyberspect@1.0.0",
          "MSTest.TestFramework@2.2.8",
          "NETStandard.Library@1.6.1",
          "System.Xml.ReaderWriter@4.3.0",
          "System.Text.RegularExpressions@4.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "System.Text.RegularExpressions",
        "version": "4.3.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2019-05-15T16:00:51.866263Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n\n[System.Text.RegularExpressions](https://www.nuget.org/packages/System.Text.RegularExpressions/) is a regular expression engine.\n\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS)\ndue to improperly processing of RegEx strings.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\n\nUpgrade `System.Text.RegularExpressions` to version 4.3.1 or higher.\n\n\n## References\n\n- [GitHub Issue](https://github.com/dotnet/announcements/issues/111)\n\n- [Microsoft Security Advisory](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0820)\n",
        "disclosureTime": "2019-05-14T07:00:00Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "4.3.1"
        ],
        "id": "SNYK-DOTNET-SYSTEMTEXTREGULAREXPRESSIONS-174708",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "CVE": [
            "CVE-2019-0820"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2020-12-14T14:40:55.968790Z",
        "moduleName": "system.text.regularexpressions",
        "packageManager": "nuget",
        "packageName": "System.Text.RegularExpressions",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-05-16T15:55:53Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/dotnet/announcements/issues/111"
          },
          {
            "title": "Microsoft Security Advisory",
            "url": "https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0820"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[4.3.0, 4.3.1)"
          ]
        },
        "severityWithCritical": "high",
        "from": [
          "cyberspect@1.0.0",
          "Moq@4.17.2",
          "Castle.Core@4.4.1",
          "NETStandard.Library@1.6.1",
          "System.Text.RegularExpressions@4.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "System.Text.RegularExpressions",
        "version": "4.3.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2019-05-15T16:00:51.866263Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n\n[System.Text.RegularExpressions](https://www.nuget.org/packages/System.Text.RegularExpressions/) is a regular expression engine.\n\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS)\ndue to improperly processing of RegEx strings.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\n\nUpgrade `System.Text.RegularExpressions` to version 4.3.1 or higher.\n\n\n## References\n\n- [GitHub Issue](https://github.com/dotnet/announcements/issues/111)\n\n- [Microsoft Security Advisory](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0820)\n",
        "disclosureTime": "2019-05-14T07:00:00Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "4.3.1"
        ],
        "id": "SNYK-DOTNET-SYSTEMTEXTREGULAREXPRESSIONS-174708",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "CVE": [
            "CVE-2019-0820"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2020-12-14T14:40:55.968790Z",
        "moduleName": "system.text.regularexpressions",
        "packageManager": "nuget",
        "packageName": "System.Text.RegularExpressions",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-05-16T15:55:53Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/dotnet/announcements/issues/111"
          },
          {
            "title": "Microsoft Security Advisory",
            "url": "https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0820"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[4.3.0, 4.3.1)"
          ]
        },
        "severityWithCritical": "high",
        "from": [
          "cyberspect@1.0.0",
          "MSTest.TestAdapter@2.2.8",
          "NETStandard.Library@1.6.1",
          "System.Xml.XDocument@4.3.0",
          "System.Xml.ReaderWriter@4.3.0",
          "System.Text.RegularExpressions@4.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "System.Text.RegularExpressions",
        "version": "4.3.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2019-05-15T16:00:51.866263Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n\n[System.Text.RegularExpressions](https://www.nuget.org/packages/System.Text.RegularExpressions/) is a regular expression engine.\n\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS)\ndue to improperly processing of RegEx strings.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\n\nUpgrade `System.Text.RegularExpressions` to version 4.3.1 or higher.\n\n\n## References\n\n- [GitHub Issue](https://github.com/dotnet/announcements/issues/111)\n\n- [Microsoft Security Advisory](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0820)\n",
        "disclosureTime": "2019-05-14T07:00:00Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "4.3.1"
        ],
        "id": "SNYK-DOTNET-SYSTEMTEXTREGULAREXPRESSIONS-174708",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "CVE": [
            "CVE-2019-0820"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2020-12-14T14:40:55.968790Z",
        "moduleName": "system.text.regularexpressions",
        "packageManager": "nuget",
        "packageName": "System.Text.RegularExpressions",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-05-16T15:55:53Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/dotnet/announcements/issues/111"
          },
          {
            "title": "Microsoft Security Advisory",
            "url": "https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0820"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[4.3.0, 4.3.1)"
          ]
        },
        "severityWithCritical": "high",
        "from": [
          "cyberspect@1.0.0",
          "MSTest.TestFramework@2.2.8",
          "NETStandard.Library@1.6.1",
          "System.Xml.XDocument@4.3.0",
          "System.Xml.ReaderWriter@4.3.0",
          "System.Text.RegularExpressions@4.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "System.Text.RegularExpressions",
        "version": "4.3.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2019-05-15T16:00:51.866263Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n\n[System.Text.RegularExpressions](https://www.nuget.org/packages/System.Text.RegularExpressions/) is a regular expression engine.\n\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS)\ndue to improperly processing of RegEx strings.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\n\nUpgrade `System.Text.RegularExpressions` to version 4.3.1 or higher.\n\n\n## References\n\n- [GitHub Issue](https://github.com/dotnet/announcements/issues/111)\n\n- [Microsoft Security Advisory](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0820)\n",
        "disclosureTime": "2019-05-14T07:00:00Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "4.3.1"
        ],
        "id": "SNYK-DOTNET-SYSTEMTEXTREGULAREXPRESSIONS-174708",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "CVE": [
            "CVE-2019-0820"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2020-12-14T14:40:55.968790Z",
        "moduleName": "system.text.regularexpressions",
        "packageManager": "nuget",
        "packageName": "System.Text.RegularExpressions",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-05-16T15:55:53Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/dotnet/announcements/issues/111"
          },
          {
            "title": "Microsoft Security Advisory",
            "url": "https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0820"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[4.3.0, 4.3.1)"
          ]
        },
        "severityWithCritical": "high",
        "from": [
          "cyberspect@1.0.0",
          "Moq@4.17.2",
          "Castle.Core@4.4.1",
          "NETStandard.Library@1.6.1",
          "System.Xml.ReaderWriter@4.3.0",
          "System.Text.RegularExpressions@4.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "System.Text.RegularExpressions",
        "version": "4.3.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2019-05-15T16:00:51.866263Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n\n[System.Text.RegularExpressions](https://www.nuget.org/packages/System.Text.RegularExpressions/) is a regular expression engine.\n\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS)\ndue to improperly processing of RegEx strings.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\n\nUpgrade `System.Text.RegularExpressions` to version 4.3.1 or higher.\n\n\n## References\n\n- [GitHub Issue](https://github.com/dotnet/announcements/issues/111)\n\n- [Microsoft Security Advisory](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0820)\n",
        "disclosureTime": "2019-05-14T07:00:00Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "4.3.1"
        ],
        "id": "SNYK-DOTNET-SYSTEMTEXTREGULAREXPRESSIONS-174708",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "CVE": [
            "CVE-2019-0820"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2020-12-14T14:40:55.968790Z",
        "moduleName": "system.text.regularexpressions",
        "packageManager": "nuget",
        "packageName": "System.Text.RegularExpressions",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-05-16T15:55:53Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/dotnet/announcements/issues/111"
          },
          {
            "title": "Microsoft Security Advisory",
            "url": "https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0820"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[4.3.0, 4.3.1)"
          ]
        },
        "severityWithCritical": "high",
        "from": [
          "cyberspect@1.0.0",
          "Moq@4.17.2",
          "Castle.Core@4.4.1",
          "System.Xml.XmlDocument@4.3.0",
          "System.Xml.ReaderWriter@4.3.0",
          "System.Text.RegularExpressions@4.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "System.Text.RegularExpressions",
        "version": "4.3.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2019-05-15T16:00:51.866263Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n\n[System.Text.RegularExpressions](https://www.nuget.org/packages/System.Text.RegularExpressions/) is a regular expression engine.\n\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS)\ndue to improperly processing of RegEx strings.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\n\nUpgrade `System.Text.RegularExpressions` to version 4.3.1 or higher.\n\n\n## References\n\n- [GitHub Issue](https://github.com/dotnet/announcements/issues/111)\n\n- [Microsoft Security Advisory](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0820)\n",
        "disclosureTime": "2019-05-14T07:00:00Z",
        "exploit": "Not Defined",
        "functions": [],
        "fixedIn": [
          "4.3.1"
        ],
        "id": "SNYK-DOTNET-SYSTEMTEXTREGULAREXPRESSIONS-174708",
        "identifiers": {
          "CWE": [
            "CWE-400"
          ],
          "CVE": [
            "CVE-2019-0820"
          ]
        },
        "language": "dotnet",
        "malicious": false,
        "modificationTime": "2020-12-14T14:40:55.968790Z",
        "moduleName": "system.text.regularexpressions",
        "packageManager": "nuget",
        "packageName": "System.Text.RegularExpressions",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-05-16T15:55:53Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/dotnet/announcements/issues/111"
          },
          {
            "title": "Microsoft Security Advisory",
            "url": "https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0820"
          }
        ],
        "severity": "high",
        "socialTrendAlert": false,
        "title": "Regular Expression Denial of Service (ReDoS)",
        "insights": {
          "triageAdvice": null
        },
        "functions_new": [],
        "semver": {
          "vulnerable": [
            "[4.3.0, 4.3.1)"
          ]
        },
        "severityWithCritical": "high",
        "from": [
          "cyberspect@1.0.0",
          "Moq@4.17.2",
          "Castle.Core@4.4.1",
          "NETStandard.Library@1.6.1",
          "System.Xml.XDocument@4.3.0",
          "System.Xml.ReaderWriter@4.3.0",
          "System.Text.RegularExpressions@4.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "System.Text.RegularExpressions",
        "version": "4.3.0"
      }
    ],
    "ok": false,
    "dependencyCount": 106,
    "org": "wmcsl",
    "policy": "# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.25.0\nignore: {}\npatch: {}\n",
    "isPrivate": true,
    "licensesPolicy": {
      "severities": {},
      "orgLicenseRules": {
        "AGPL-1.0": {
          "licenseType": "AGPL-1.0",
          "severity": "high",
          "instructions": ""
        },
        "AGPL-3.0": {
          "licenseType": "AGPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "Artistic-1.0": {
          "licenseType": "Artistic-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "Artistic-2.0": {
          "licenseType": "Artistic-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "CDDL-1.0": {
          "licenseType": "CDDL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "CPOL-1.02": {
          "licenseType": "CPOL-1.02",
          "severity": "high",
          "instructions": ""
        },
        "EPL-1.0": {
          "licenseType": "EPL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "GPL-2.0": {
          "licenseType": "GPL-2.0",
          "severity": "high",
          "instructions": ""
        },
        "GPL-3.0": {
          "licenseType": "GPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "LGPL-2.0": {
          "licenseType": "LGPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-2.1": {
          "licenseType": "LGPL-2.1",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-3.0": {
          "licenseType": "LGPL-3.0",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-1.1": {
          "licenseType": "MPL-1.1",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-2.0": {
          "licenseType": "MPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "MS-RL": {
          "licenseType": "MS-RL",
          "severity": "medium",
          "instructions": ""
        },
        "SimPL-2.0": {
          "licenseType": "SimPL-2.0",
          "severity": "high",
          "instructions": ""
        }
      }
    },
    "packageManager": "nuget",
    "ignoreSettings": {
      "adminOnly": false,
      "reasonRequired": false,
      "disregardFilesystemIgnores": false
    },
    "summary": "25 vulnerable dependency paths",
    "remediation": {
      "unresolved": [
        {
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
          "alternativeIds": [],
          "creationTime": "2017-07-19T00:00:00Z",
          "credit": [
            "David Fernandez"
          ],
          "cvssScore": 7.5,
          "description": "## Overview\n\n[System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) is an Provides a programming interface for modern HTTP applications, including HTTP client components that allow applications to consume web services over HTTP and HTTP components that can be used by both clients and servers for parsing HTTP headers.\n\n\nAffected versions of this package are vulnerable to Denial of Service (DoS)\nas `ASP.NET Core` fails to properly validate web requests.\r\n\r\n**NOTE:** Microsoft has not commented on third-party claims that the issue is that the `TextEncoder.EncodeCore` function in the `System.Text.Encodings.Web` package in ASP.NET Core Mvc before 1.0.4 and 1.1.x before 1.1.3 allows remote attackers to cause a denial of service by leveraging failure to properly calculate the length of 4-byte characters in the Unicode Non-Character range.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\r\n\r\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\r\n\r\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\r\n\r\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\r\n\r\nTwo common types of DoS vulnerabilities:\r\n\r\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\r\n\r\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\n\n## Remediation\n\nUpgrade `System.Net.Http` to version 4.1.2, 4.3.2 or higher.\n\n\n## References\n\n- [David Fernandez Blog](https://www.sidertia.com/Home/Community/Blog/2017/05/18/ASPNET-Core-Unicode-Non-Char-Encoding-DoS)\n\n- [GitHub Issue](https://github.com/aspnet/Announcements/issues/239)\n\n- [Microsoft Security Advisory](https://technet.microsoft.com/en-us/library/security/4021279.aspx)\n\n- [NVD](https://nvd.nist.gov/vuln/detail/2017-0247)\n",
          "disclosureTime": "2017-05-09T00:00:00Z",
          "exploit": "Not Defined",
          "functions": [],
          "fixedIn": [
            "4.1.2",
            "4.3.2"
          ],
          "id": "SNYK-DOTNET-SYSTEMNETHTTP-60045",
          "identifiers": {
            "CWE": [
              "CWE-254"
            ],
            "CVE": [
              "CVE-2017-0247"
            ]
          },
          "language": "dotnet",
          "malicious": false,
          "modificationTime": "2021-08-24T14:49:07.708862Z",
          "moduleName": "system.net.http",
          "packageManager": "nuget",
          "packageName": "System.Net.Http",
          "patches": [],
          "proprietary": false,
          "publicationTime": "2017-05-09T00:00:00Z",
          "references": [
            {
              "title": "David Fernandez Blog",
              "url": "https://www.sidertia.com/Home/Community/Blog/2017/05/18/ASPNET-Core-Unicode-Non-Char-Encoding-DoS"
            },
            {
              "title": "GitHub Issue",
              "url": "https://github.com/aspnet/Announcements/issues/239"
            },
            {
              "title": "Microsoft Security Advisory",
              "url": "https://technet.microsoft.com/en-us/library/security/4021279.aspx"
            },
            {
              "title": "NVD",
              "url": "https://nvd.nist.gov/vuln/detail/2017-0247"
            }
          ],
          "severity": "high",
          "socialTrendAlert": false,
          "title": "Denial of Service (DoS)",
          "insights": {
            "triageAdvice": null
          },
          "functions_new": [],
          "semver": {
            "vulnerable": [
              "[,4.1.2)",
              "[4.3.0,4.3.2)"
            ]
          },
          "from": [
            "cyberspect@1.0.0",
            "Moq@4.17.2",
            "Castle.Core@4.4.1",
            "NETStandard.Library@1.6.1",
            "System.Net.Http@4.3.0"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "isRuntime": true,
          "name": "System.Net.Http",
          "version": "4.3.0",
          "severityWithCritical": "high"
        },
        {
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
          "alternativeIds": [],
          "creationTime": "2017-07-19T00:00:00Z",
          "credit": [
            "Joonwoo Yu",
            "Hyoung-Kee Choi"
          ],
          "cvssScore": 7.5,
          "description": "## Overview\n[System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) is a Provides a programming interface for modern HTTP applications, including HTTP client components that allow applications to consume web services over HTTP and HTTP components that can be used by both clients and servers for parsing HTTP headers.\n\nAffected versions of this package are vulnerable to Improper Certificate Validation. It allows an attacker to bypass _Enhanced Security Usage_ tagging when they present a certificate that is invalid for a specific use.\n## Remediation\nUpgrade `System.Net.Http` to version 4.1.2, 4.3.2 or higher.\n## References\n- [GitHub Issue](https://github.com/aspnet/Announcements/issues/239)\n- [Microsoft Security Advisory](https://technet.microsoft.com/en-us/library/security/4021279.aspx)\n- [NVD](https://nvd.nist.gov/vuln/detail/2017-0248)\n",
          "disclosureTime": "2017-05-12T00:00:00Z",
          "exploit": "Not Defined",
          "functions": [],
          "fixedIn": [
            "4.1.2",
            "4.3.2"
          ],
          "id": "SNYK-DOTNET-SYSTEMNETHTTP-60046",
          "identifiers": {
            "CWE": [
              "CWE-287"
            ],
            "CVE": [
              "CVE-2017-0248"
            ]
          },
          "language": "dotnet",
          "malicious": false,
          "modificationTime": "2021-08-24T14:49:07.783290Z",
          "moduleName": "system.net.http",
          "packageManager": "nuget",
          "packageName": "System.Net.Http",
          "patches": [],
          "proprietary": false,
          "publicationTime": "2017-05-12T00:00:00Z",
          "references": [
            {
              "title": "GitHub Issue",
              "url": "https://github.com/aspnet/Announcements/issues/239"
            },
            {
              "title": "Microsoft Security Advisory",
              "url": "https://technet.microsoft.com/en-us/library/security/4021279.aspx"
            },
            {
              "title": "NVD",
              "url": "https://nvd.nist.gov/vuln/detail/2017-0248"
            }
          ],
          "severity": "high",
          "socialTrendAlert": false,
          "title": "Improper Certificate Validation",
          "insights": {
            "triageAdvice": null
          },
          "functions_new": [],
          "semver": {
            "vulnerable": [
              "[,4.1.2)",
              "[4.3,4.3.2)"
            ]
          },
          "from": [
            "cyberspect@1.0.0",
            "Moq@4.17.2",
            "Castle.Core@4.4.1",
            "NETStandard.Library@1.6.1",
            "System.Net.Http@4.3.0"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "isRuntime": true,
          "name": "System.Net.Http",
          "version": "4.3.0",
          "severityWithCritical": "high"
        },
        {
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
          "alternativeIds": [],
          "creationTime": "2017-07-19T00:00:00Z",
          "credit": [
            "Unknown"
          ],
          "cvssScore": 7.3,
          "description": "## Overview\n\n[System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) Provides a programming interface for modern HTTP applications, including HTTP client components that allow applications to consume web services over HTTP and HTTP components that can be used by both clients and servers for parsing HTTP headers.\n\n\nAffected versions of this package are vulnerable to Privilege Escalation\ndue to failing to properly sanitize web requests.\n\n## Remediation\n\nUpgrade `System.Net.Http` to version 4.1.2, 4.3.2 or higher.\n\n\n## References\n\n- [GitHub Issue](https://github.com/aspnet/Announcements/issues/239)\n",
          "disclosureTime": "2017-05-12T00:00:00Z",
          "exploit": "Not Defined",
          "functions": [],
          "fixedIn": [
            "4.1.2",
            "4.3.2"
          ],
          "id": "SNYK-DOTNET-SYSTEMNETHTTP-60047",
          "identifiers": {
            "CWE": [
              "CWE-269"
            ],
            "CVE": [
              "CVE-2017-0249"
            ]
          },
          "language": "dotnet",
          "malicious": false,
          "modificationTime": "2021-10-09T14:33:54.951128Z",
          "moduleName": "system.net.http",
          "packageManager": "nuget",
          "packageName": "System.Net.Http",
          "patches": [],
          "proprietary": false,
          "publicationTime": "2017-05-12T00:00:00Z",
          "references": [
            {
              "title": "GitHub Issue",
              "url": "https://github.com/aspnet/Announcements/issues/239"
            }
          ],
          "severity": "high",
          "socialTrendAlert": false,
          "title": "Privilege Escalation",
          "insights": {
            "triageAdvice": null
          },
          "functions_new": [],
          "semver": {
            "vulnerable": [
              "[,4.1.2)",
              "[4.3,4.3.2)"
            ]
          },
          "from": [
            "cyberspect@1.0.0",
            "Moq@4.17.2",
            "Castle.Core@4.4.1",
            "NETStandard.Library@1.6.1",
            "System.Net.Http@4.3.0"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "isRuntime": true,
          "name": "System.Net.Http",
          "version": "4.3.0",
          "severityWithCritical": "high"
        },
        {
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
          "alternativeIds": [],
          "creationTime": "2017-07-19T00:00:00Z",
          "credit": [
            "Mikhail Shcherbakov"
          ],
          "cvssScore": 5.3,
          "description": "## Overview\nThe ASP.NET Core fails to properly sanitize the _Web Request Handler_ component, allowing an attacker to spoof web requests and bypass authentication.\n\n## References\n- [GitHub Issue](https://github.com/aspnet/Announcements/issues/239)\n- [Microsoft Security Advisory](https://technet.microsoft.com/en-us/library/security/4021279.aspx)\n- [NVD](https://nvd.nist.gov/vuln/detail/2017-0256)\n",
          "disclosureTime": "2017-05-12T00:00:00Z",
          "exploit": "Not Defined",
          "functions": [],
          "fixedIn": [
            "4.1.2",
            "4.3.2"
          ],
          "id": "SNYK-DOTNET-SYSTEMNETHTTP-60048",
          "identifiers": {
            "CWE": [
              "CWE-20"
            ],
            "CVE": [
              "CVE-2017-0256"
            ]
          },
          "language": "dotnet",
          "malicious": false,
          "modificationTime": "2021-08-24T14:49:07.613538Z",
          "moduleName": "system.net.http",
          "packageManager": "nuget",
          "packageName": "System.Net.Http",
          "patches": [],
          "proprietary": false,
          "publicationTime": "2017-05-12T00:00:00Z",
          "references": [
            {
              "title": "GitHub Issue",
              "url": "https://github.com/aspnet/Announcements/issues/239"
            },
            {
              "title": "Microsoft Security Advisory",
              "url": "https://technet.microsoft.com/en-us/library/security/4021279.aspx"
            },
            {
              "title": "NVD",
              "url": "https://nvd.nist.gov/vuln/detail/2017-0256"
            }
          ],
          "severity": "medium",
          "socialTrendAlert": false,
          "title": "Authentication Bypass",
          "insights": {
            "triageAdvice": null
          },
          "functions_new": [],
          "semver": {
            "vulnerable": [
              "[,4.1.2)",
              "[4.3,4.3.2)"
            ]
          },
          "from": [
            "cyberspect@1.0.0",
            "Moq@4.17.2",
            "Castle.Core@4.4.1",
            "NETStandard.Library@1.6.1",
            "System.Net.Http@4.3.0"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "isRuntime": true,
          "name": "System.Net.Http",
          "version": "4.3.0",
          "severityWithCritical": "medium"
        },
        {
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
          "alternativeIds": [],
          "creationTime": "2018-10-11T06:50:22.411410Z",
          "credit": [
            "leecow"
          ],
          "cvssScore": 7.5,
          "description": "## Overview\n\n[System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) Provides a programming interface for modern HTTP applications, including HTTP client components that allow applications to consume web services over HTTP and HTTP components that can be used by both clients and servers for parsing HTTP headers.\n\n\nAffected versions of this package are vulnerable to Information Exposure.\nWhen HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\n**Note:** The presence of `System.Net.Http` in the dependency graph of `netcoreapp2.0` isn't the final determination of what is loaded at runtime. The version conflict resolution logic will prefer what is present in `Microsoft.NETCore.App/2.1.5`, or the latest patch release. As such, is not considered an issue.\n\n## Remediation\n\nUpgrade `System.Net.Http` to version 2.0.20710, 4.0.1-beta-23225, 4.1.4, 4.3.4 or higher.\n\n\n## References\n\n- [GitHub Issue](https://github.com/dotnet/announcements/issues/88)\n",
          "disclosureTime": "2018-10-09T22:51:18Z",
          "exploit": "Not Defined",
          "functions": [],
          "fixedIn": [
            "2.0.20710",
            "4.0.1-beta-23225",
            "4.1.4",
            "4.3.4"
          ],
          "id": "SNYK-DOTNET-SYSTEMNETHTTP-72439",
          "identifiers": {
            "CWE": [
              "CWE-200"
            ],
            "GHSA": [
              "GHSA-7jgj-8wvc-jh57"
            ],
            "CVE": [
              "CVE-2018-8292"
            ]
          },
          "language": "dotnet",
          "malicious": false,
          "modificationTime": "2022-06-14T06:22:44.080361Z",
          "moduleName": "system.net.http",
          "packageManager": "nuget",
          "packageName": "System.Net.Http",
          "patches": [],
          "proprietary": false,
          "publicationTime": "2018-10-10T15:24:52Z",
          "references": [
            {
              "title": "GitHub Issue",
              "url": "https://github.com/dotnet/announcements/issues/88"
            }
          ],
          "severity": "high",
          "socialTrendAlert": false,
          "title": "Information Exposure",
          "insights": {
            "triageAdvice": null
          },
          "functions_new": [],
          "semver": {
            "vulnerable": [
              "[2.0.20126.16343, 2.0.20710)",
              "[4.0.0,4.0.1-beta-23225)",
              "[4.1.0,4.1.4)",
              "[4.3.0,4.3.4)"
            ]
          },
          "from": [
            "cyberspect@1.0.0",
            "Moq@4.17.2",
            "Castle.Core@4.4.1",
            "NETStandard.Library@1.6.1",
            "System.Net.Http@4.3.0"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "isRuntime": true,
          "name": "System.Net.Http",
          "version": "4.3.0",
          "severityWithCritical": "high"
        },
        {
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "alternativeIds": [],
          "creationTime": "2019-05-15T16:00:51.866263Z",
          "credit": [
            "Unknown"
          ],
          "cvssScore": 7.5,
          "description": "## Overview\n\n[System.Text.RegularExpressions](https://www.nuget.org/packages/System.Text.RegularExpressions/) is a regular expression engine.\n\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS)\ndue to improperly processing of RegEx strings.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\n\nUpgrade `System.Text.RegularExpressions` to version 4.3.1 or higher.\n\n\n## References\n\n- [GitHub Issue](https://github.com/dotnet/announcements/issues/111)\n\n- [Microsoft Security Advisory](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0820)\n",
          "disclosureTime": "2019-05-14T07:00:00Z",
          "exploit": "Not Defined",
          "functions": [],
          "fixedIn": [
            "4.3.1"
          ],
          "id": "SNYK-DOTNET-SYSTEMTEXTREGULAREXPRESSIONS-174708",
          "identifiers": {
            "CWE": [
              "CWE-400"
            ],
            "CVE": [
              "CVE-2019-0820"
            ]
          },
          "language": "dotnet",
          "malicious": false,
          "modificationTime": "2020-12-14T14:40:55.968790Z",
          "moduleName": "system.text.regularexpressions",
          "packageManager": "nuget",
          "packageName": "System.Text.RegularExpressions",
          "patches": [],
          "proprietary": false,
          "publicationTime": "2019-05-16T15:55:53Z",
          "references": [
            {
              "title": "GitHub Issue",
              "url": "https://github.com/dotnet/announcements/issues/111"
            },
            {
              "title": "Microsoft Security Advisory",
              "url": "https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0820"
            }
          ],
          "severity": "high",
          "socialTrendAlert": false,
          "title": "Regular Expression Denial of Service (ReDoS)",
          "insights": {
            "triageAdvice": null
          },
          "functions_new": [],
          "semver": {
            "vulnerable": [
              "[4.3.0, 4.3.1)"
            ]
          },
          "from": [
            "cyberspect@1.0.0",
            "Moq@4.17.2",
            "Castle.Core@4.4.1",
            "NETStandard.Library@1.6.1",
            "System.Xml.XDocument@4.3.0",
            "System.Xml.ReaderWriter@4.3.0",
            "System.Text.RegularExpressions@4.3.0"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "isRuntime": true,
          "name": "System.Text.RegularExpressions",
          "version": "4.3.0",
          "severityWithCritical": "high"
        }
      ],
      "upgrade": {},
      "patch": {},
      "ignore": {},
      "pin": {}
    },
    "filesystemPolicy": false,
    "filtered": {
      "ignore": [],
      "patch": []
    },
    "uniqueCount": 6,
    "targetFile": "sbom/SBOMTests/obj/project.assets.json",
    "projectName": "cyberspect",
    "foundProjectCount": 8,
    "displayTargetFile": "sbom/SBOMTests/obj/project.assets.json",
    "path": "/mnt/c/Projects/cyberspect"
  }
]
