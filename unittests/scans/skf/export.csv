title,description,mitigation
"Authentication Verification Requirements : Verify that user set passwords are at least 12 characters in length. (C6)","The product does not require that users should have strong passwords\, which makes it easier for attackers to compromise user accounts. Authentication mechanisms often rely on a memorized secret (also known as a password) to provide an assertion of identity for a user of a system. It is therefore important that this password be of sufficient complexity and impractical for an adversary to guess. The specific requirements around how complex a password needs to be depends on the type of system being protected. Selecting the correct password requirements and enforcing them through implementation are critical to the overall success of the authentication mechanism.","PHASE:Architecture and Design: A product''s design should require adherance to an appropriate password policy. Specific password requirements depend strongly on contextual factors\, but it is recommended to contain the following attributes: Enforcement of a minimum and maximum length Restrictions against password reuse Restrictions against using common passwords Restrictions against using contextual string in the password (e.g.\, user id\, app name) Depending on the threat model\, the password policy may include several additional attributes. Complex passwords requiring mixed character sets (alpha\, numeric\, special\, mixed case) Increasing the range of characters makes the password harder to crack and may be appropriate for systems relying on single factor authentication. Unfortunately\, a complex password may be difficult to memorize\, encouraging a user to select a short password or to incorrectly manage the password (write it down). Another disadvantage of this approach is that it often does not result in a significant increases in overal password complexity due to people''s predictable usage of various symbols. Large Minimum Length (encouraging passphrases instead of passwords) Increasing the number of characters makes the password harder to crack and may be appropriate for systems relying on single factor authentication. A disadvantage of this approach is that selecting a good passphrase is not easy and poor passwords can still be generated. Some prompting may be needed to encourage long unpredictable passwords. Randomly Chosen Secrets Generating a password for the user can help make sure that length and complexity requirements are met\, and can result in secure passwords being used. A disadvantage of this approach is that the resulting password or passpharse may be too difficult to memorize\, encouraging them to be written down. Password Expiration Requiring a periodic password change can reduce the time window that an adversary has to crack a password\, while also limiting the damage caused by password exposures at other locations. Password expiration may be a good mitigating technique when long complex passwords are not desired. See NIST 80063B https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.80063b.pdf Sections: 5.1.1\, 10.2.1\, and Appendix A for further information on password requirements. PHASE:Architecture and Design: Consider a second authentication factor beyond the password\, which prevents the password from being a single point of failure. See CWE308 for further information. PHASE:Implementation: Consider implementing a password complexity meter to inform users when a chosen password meets the required attributes."
"Authentication Verification Requirements : Verify that passwords 64 characters or longer are permitted.","The product does not require that users should have strong passwords\, which makes it easier for attackers to compromise user accounts. Authentication mechanisms often rely on a memorized secret (also known as a password) to provide an assertion of identity for a user of a system. It is therefore important that this password be of sufficient complexity and impractical for an adversary to guess. The specific requirements around how complex a password needs to be depends on the type of system being protected. Selecting the correct password requirements and enforcing them through implementation are critical to the overall success of the authentication mechanism.","PHASE:Architecture and Design: A product''s design should require adherance to an appropriate password policy. Specific password requirements depend strongly on contextual factors\, but it is recommended to contain the following attributes: Enforcement of a minimum and maximum length Restrictions against password reuse Restrictions against using common passwords Restrictions against using contextual string in the password (e.g.\, user id\, app name) Depending on the threat model\, the password policy may include several additional attributes. Complex passwords requiring mixed character sets (alpha\, numeric\, special\, mixed case) Increasing the range of characters makes the password harder to crack and may be appropriate for systems relying on single factor authentication. Unfortunately\, a complex password may be difficult to memorize\, encouraging a user to select a short password or to incorrectly manage the password (write it down). Another disadvantage of this approach is that it often does not result in a significant increases in overal password complexity due to people''s predictable usage of various symbols. Large Minimum Length (encouraging passphrases instead of passwords) Increasing the number of characters makes the password harder to crack and may be appropriate for systems relying on single factor authentication. A disadvantage of this approach is that selecting a good passphrase is not easy and poor passwords can still be generated. Some prompting may be needed to encourage long unpredictable passwords. Randomly Chosen Secrets Generating a password for the user can help make sure that length and complexity requirements are met\, and can result in secure passwords being used. A disadvantage of this approach is that the resulting password or passpharse may be too difficult to memorize\, encouraging them to be written down. Password Expiration Requiring a periodic password change can reduce the time window that an adversary has to crack a password\, while also limiting the damage caused by password exposures at other locations. Password expiration may be a good mitigating technique when long complex passwords are not desired. See NIST 80063B https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.80063b.pdf Sections: 5.1.1\, 10.2.1\, and Appendix A for further information on password requirements. PHASE:Architecture and Design: Consider a second authentication factor beyond the password\, which prevents the password from being a single point of failure. See CWE308 for further information. PHASE:Implementation: Consider implementing a password complexity meter to inform users when a chosen password meets the required attributes."
"Authentication Verification Requirements : Verify that passwords can contain spaces and truncation is not performed. Consecutive multiple spaces MAY optionally be coalesced.","The product does not require that users should have strong passwords\, which makes it easier for attackers to compromise user accounts. Authentication mechanisms often rely on a memorized secret (also known as a password) to provide an assertion of identity for a user of a system. It is therefore important that this password be of sufficient complexity and impractical for an adversary to guess. The specific requirements around how complex a password needs to be depends on the type of system being protected. Selecting the correct password requirements and enforcing them through implementation are critical to the overall success of the authentication mechanism.","PHASE:Architecture and Design: A product''s design should require adherance to an appropriate password policy. Specific password requirements depend strongly on contextual factors\, but it is recommended to contain the following attributes: Enforcement of a minimum and maximum length Restrictions against password reuse Restrictions against using common passwords Restrictions against using contextual string in the password (e.g.\, user id\, app name) Depending on the threat model\, the password policy may include several additional attributes. Complex passwords requiring mixed character sets (alpha\, numeric\, special\, mixed case) Increasing the range of characters makes the password harder to crack and may be appropriate for systems relying on single factor authentication. Unfortunately\, a complex password may be difficult to memorize\, encouraging a user to select a short password or to incorrectly manage the password (write it down). Another disadvantage of this approach is that it often does not result in a significant increases in overal password complexity due to people''s predictable usage of various symbols. Large Minimum Length (encouraging passphrases instead of passwords) Increasing the number of characters makes the password harder to crack and may be appropriate for systems relying on single factor authentication. A disadvantage of this approach is that selecting a good passphrase is not easy and poor passwords can still be generated. Some prompting may be needed to encourage long unpredictable passwords. Randomly Chosen Secrets Generating a password for the user can help make sure that length and complexity requirements are met\, and can result in secure passwords being used. A disadvantage of this approach is that the resulting password or passpharse may be too difficult to memorize\, encouraging them to be written down. Password Expiration Requiring a periodic password change can reduce the time window that an adversary has to crack a password\, while also limiting the damage caused by password exposures at other locations. Password expiration may be a good mitigating technique when long complex passwords are not desired. See NIST 80063B https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.80063b.pdf Sections: 5.1.1\, 10.2.1\, and Appendix A for further information on password requirements. PHASE:Architecture and Design: Consider a second authentication factor beyond the password\, which prevents the password from being a single point of failure. See CWE308 for further information. PHASE:Implementation: Consider implementing a password complexity meter to inform users when a chosen password meets the required attributes."
"Authentication Verification Requirements : Verify that Unicode characters are permitted in passwords. A single Unicode code point is considered a character\, so 12 emoji or 64 kanji characters should be valid and permitted.","The product does not require that users should have strong passwords\, which makes it easier for attackers to compromise user accounts. Authentication mechanisms often rely on a memorized secret (also known as a password) to provide an assertion of identity for a user of a system. It is therefore important that this password be of sufficient complexity and impractical for an adversary to guess. The specific requirements around how complex a password needs to be depends on the type of system being protected. Selecting the correct password requirements and enforcing them through implementation are critical to the overall success of the authentication mechanism.","PHASE:Architecture and Design: A product''s design should require adherance to an appropriate password policy. Specific password requirements depend strongly on contextual factors\, but it is recommended to contain the following attributes: Enforcement of a minimum and maximum length Restrictions against password reuse Restrictions against using common passwords Restrictions against using contextual string in the password (e.g.\, user id\, app name) Depending on the threat model\, the password policy may include several additional attributes. Complex passwords requiring mixed character sets (alpha\, numeric\, special\, mixed case) Increasing the range of characters makes the password harder to crack and may be appropriate for systems relying on single factor authentication. Unfortunately\, a complex password may be difficult to memorize\, encouraging a user to select a short password or to incorrectly manage the password (write it down). Another disadvantage of this approach is that it often does not result in a significant increases in overal password complexity due to people''s predictable usage of various symbols. Large Minimum Length (encouraging passphrases instead of passwords) Increasing the number of characters makes the password harder to crack and may be appropriate for systems relying on single factor authentication. A disadvantage of this approach is that selecting a good passphrase is not easy and poor passwords can still be generated. Some prompting may be needed to encourage long unpredictable passwords. Randomly Chosen Secrets Generating a password for the user can help make sure that length and complexity requirements are met\, and can result in secure passwords being used. A disadvantage of this approach is that the resulting password or passpharse may be too difficult to memorize\, encouraging them to be written down. Password Expiration Requiring a periodic password change can reduce the time window that an adversary has to crack a password\, while also limiting the damage caused by password exposures at other locations. Password expiration may be a good mitigating technique when long complex passwords are not desired. See NIST 80063B https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.80063b.pdf Sections: 5.1.1\, 10.2.1\, and Appendix A for further information on password requirements. PHASE:Architecture and Design: Consider a second authentication factor beyond the password\, which prevents the password from being a single point of failure. See CWE308 for further information. PHASE:Implementation: Consider implementing a password complexity meter to inform users when a chosen password meets the required attributes."
"Authentication Verification Requirements : Verify users can change their password.","When setting a new password for a user\, the product does not require knowledge of the original password\, or using another form of authentication. This could be used by an attacker to change passwords for another user\, thus gaining the privileges associated with that user.","PHASE:Architecture and Design: When prompting for a password change\, force the user to provide the original password in addition to the new password. PHASE:Architecture and Design: Do not use forgotten password functionality. But if you must\, ensure that you are only providing information to the actual user\, e.g. by using an email address or challenge question that the legitimate user already provided in the past; do not allow the current user to change this identity information until the correct password has been provided."
"Authentication Verification Requirements : Verify that password change functionality requires the user\s current and new password.","When setting a new password for a user\, the product does not require knowledge of the original password\, or using another form of authentication. This could be used by an attacker to change passwords for another user\, thus gaining the privileges associated with that user.","PHASE:Architecture and Design: When prompting for a password change\, force the user to provide the original password in addition to the new password. PHASE:Architecture and Design: Do not use forgotten password functionality. But if you must\, ensure that you are only providing information to the actual user\, e.g. by using an email address or challenge question that the legitimate user already provided in the past; do not allow the current user to change this identity information until the correct password has been provided."
"Authentication Verification Requirements : Verify that passwords submitted during account registration\, login\, and password change are checked against a set of breached passwords either locally (such as the top 1\,000 or 10\,000 most common passwords which match the system\s password policy) or using an external API. If using an API a zero knowledge proof or other mechanism should be used to ensure that the plain text password is not sent or used in verifying the breach status of the password. If the password is breached\, the application must require the user to set a new non-breached password.","The product does not require that users should have strong passwords\, which makes it easier for attackers to compromise user accounts. Authentication mechanisms often rely on a memorized secret (also known as a password) to provide an assertion of identity for a user of a system. It is therefore important that this password be of sufficient complexity and impractical for an adversary to guess. The specific requirements around how complex a password needs to be depends on the type of system being protected. Selecting the correct password requirements and enforcing them through implementation are critical to the overall success of the authentication mechanism.","PHASE:Architecture and Design: A product''s design should require adherance to an appropriate password policy. Specific password requirements depend strongly on contextual factors\, but it is recommended to contain the following attributes: Enforcement of a minimum and maximum length Restrictions against password reuse Restrictions against using common passwords Restrictions against using contextual string in the password (e.g.\, user id\, app name) Depending on the threat model\, the password policy may include several additional attributes. Complex passwords requiring mixed character sets (alpha\, numeric\, special\, mixed case) Increasing the range of characters makes the password harder to crack and may be appropriate for systems relying on single factor authentication. Unfortunately\, a complex password may be difficult to memorize\, encouraging a user to select a short password or to incorrectly manage the password (write it down). Another disadvantage of this approach is that it often does not result in a significant increases in overal password complexity due to people''s predictable usage of various symbols. Large Minimum Length (encouraging passphrases instead of passwords) Increasing the number of characters makes the password harder to crack and may be appropriate for systems relying on single factor authentication. A disadvantage of this approach is that selecting a good passphrase is not easy and poor passwords can still be generated. Some prompting may be needed to encourage long unpredictable passwords. Randomly Chosen Secrets Generating a password for the user can help make sure that length and complexity requirements are met\, and can result in secure passwords being used. A disadvantage of this approach is that the resulting password or passpharse may be too difficult to memorize\, encouraging them to be written down. Password Expiration Requiring a periodic password change can reduce the time window that an adversary has to crack a password\, while also limiting the damage caused by password exposures at other locations. Password expiration may be a good mitigating technique when long complex passwords are not desired. See NIST 80063B https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.80063b.pdf Sections: 5.1.1\, 10.2.1\, and Appendix A for further information on password requirements. PHASE:Architecture and Design: Consider a second authentication factor beyond the password\, which prevents the password from being a single point of failure. See CWE308 for further information. PHASE:Implementation: Consider implementing a password complexity meter to inform users when a chosen password meets the required attributes."
"Authentication Verification Requirements : Verify that a password strength meter is provided to help users set a stronger password.","The product does not require that users should have strong passwords\, which makes it easier for attackers to compromise user accounts. Authentication mechanisms often rely on a memorized secret (also known as a password) to provide an assertion of identity for a user of a system. It is therefore important that this password be of sufficient complexity and impractical for an adversary to guess. The specific requirements around how complex a password needs to be depends on the type of system being protected. Selecting the correct password requirements and enforcing them through implementation are critical to the overall success of the authentication mechanism.","PHASE:Architecture and Design: A product''s design should require adherance to an appropriate password policy. Specific password requirements depend strongly on contextual factors\, but it is recommended to contain the following attributes: Enforcement of a minimum and maximum length Restrictions against password reuse Restrictions against using common passwords Restrictions against using contextual string in the password (e.g.\, user id\, app name) Depending on the threat model\, the password policy may include several additional attributes. Complex passwords requiring mixed character sets (alpha\, numeric\, special\, mixed case) Increasing the range of characters makes the password harder to crack and may be appropriate for systems relying on single factor authentication. Unfortunately\, a complex password may be difficult to memorize\, encouraging a user to select a short password or to incorrectly manage the password (write it down). Another disadvantage of this approach is that it often does not result in a significant increases in overal password complexity due to people''s predictable usage of various symbols. Large Minimum Length (encouraging passphrases instead of passwords) Increasing the number of characters makes the password harder to crack and may be appropriate for systems relying on single factor authentication. A disadvantage of this approach is that selecting a good passphrase is not easy and poor passwords can still be generated. Some prompting may be needed to encourage long unpredictable passwords. Randomly Chosen Secrets Generating a password for the user can help make sure that length and complexity requirements are met\, and can result in secure passwords being used. A disadvantage of this approach is that the resulting password or passpharse may be too difficult to memorize\, encouraging them to be written down. Password Expiration Requiring a periodic password change can reduce the time window that an adversary has to crack a password\, while also limiting the damage caused by password exposures at other locations. Password expiration may be a good mitigating technique when long complex passwords are not desired. See NIST 80063B https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.80063b.pdf Sections: 5.1.1\, 10.2.1\, and Appendix A for further information on password requirements. PHASE:Architecture and Design: Consider a second authentication factor beyond the password\, which prevents the password from being a single point of failure. See CWE308 for further information. PHASE:Implementation: Consider implementing a password complexity meter to inform users when a chosen password meets the required attributes."
"Authentication Verification Requirements : Verify that there are no password composition rules limiting the type of characters permitted. There should be no requirement for upper or lower case or numbers or special characters.","The product does not require that users should have strong passwords\, which makes it easier for attackers to compromise user accounts. Authentication mechanisms often rely on a memorized secret (also known as a password) to provide an assertion of identity for a user of a system. It is therefore important that this password be of sufficient complexity and impractical for an adversary to guess. The specific requirements around how complex a password needs to be depends on the type of system being protected. Selecting the correct password requirements and enforcing them through implementation are critical to the overall success of the authentication mechanism.","PHASE:Architecture and Design: A product''s design should require adherance to an appropriate password policy. Specific password requirements depend strongly on contextual factors\, but it is recommended to contain the following attributes: Enforcement of a minimum and maximum length Restrictions against password reuse Restrictions against using common passwords Restrictions against using contextual string in the password (e.g.\, user id\, app name) Depending on the threat model\, the password policy may include several additional attributes. Complex passwords requiring mixed character sets (alpha\, numeric\, special\, mixed case) Increasing the range of characters makes the password harder to crack and may be appropriate for systems relying on single factor authentication. Unfortunately\, a complex password may be difficult to memorize\, encouraging a user to select a short password or to incorrectly manage the password (write it down). Another disadvantage of this approach is that it often does not result in a significant increases in overal password complexity due to people''s predictable usage of various symbols. Large Minimum Length (encouraging passphrases instead of passwords) Increasing the number of characters makes the password harder to crack and may be appropriate for systems relying on single factor authentication. A disadvantage of this approach is that selecting a good passphrase is not easy and poor passwords can still be generated. Some prompting may be needed to encourage long unpredictable passwords. Randomly Chosen Secrets Generating a password for the user can help make sure that length and complexity requirements are met\, and can result in secure passwords being used. A disadvantage of this approach is that the resulting password or passpharse may be too difficult to memorize\, encouraging them to be written down. Password Expiration Requiring a periodic password change can reduce the time window that an adversary has to crack a password\, while also limiting the damage caused by password exposures at other locations. Password expiration may be a good mitigating technique when long complex passwords are not desired. See NIST 80063B https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.80063b.pdf Sections: 5.1.1\, 10.2.1\, and Appendix A for further information on password requirements. PHASE:Architecture and Design: Consider a second authentication factor beyond the password\, which prevents the password from being a single point of failure. See CWE308 for further information. PHASE:Implementation: Consider implementing a password complexity meter to inform users when a chosen password meets the required attributes."
"Authentication Verification Requirements : Verify that there are no periodic credential rotation or password history requirements.","Allowing password aging to occur unchecked can result in the possibility of diminished password integrity. Just as neglecting to include functionality for the management of password aging is dangerous\, so is allowing password aging to continue unchecked. Passwords must be given a maximum life span\, after which a user is required to update with a new and different password.","PHASE:Architecture and Design: Ensure that password aging is limited so that there is a defined maximum age for passwords and so that the user is notified several times leading up to the password expiration."
"Authentication Verification Requirements : Verify that "paste" functionality\, browser password helpers\, and external password managers are permitted.","The product does not require that users should have strong passwords\, which makes it easier for attackers to compromise user accounts. Authentication mechanisms often rely on a memorized secret (also known as a password) to provide an assertion of identity for a user of a system. It is therefore important that this password be of sufficient complexity and impractical for an adversary to guess. The specific requirements around how complex a password needs to be depends on the type of system being protected. Selecting the correct password requirements and enforcing them through implementation are critical to the overall success of the authentication mechanism.","PHASE:Architecture and Design: A product''s design should require adherance to an appropriate password policy. Specific password requirements depend strongly on contextual factors\, but it is recommended to contain the following attributes: Enforcement of a minimum and maximum length Restrictions against password reuse Restrictions against using common passwords Restrictions against using contextual string in the password (e.g.\, user id\, app name) Depending on the threat model\, the password policy may include several additional attributes. Complex passwords requiring mixed character sets (alpha\, numeric\, special\, mixed case) Increasing the range of characters makes the password harder to crack and may be appropriate for systems relying on single factor authentication. Unfortunately\, a complex password may be difficult to memorize\, encouraging a user to select a short password or to incorrectly manage the password (write it down). Another disadvantage of this approach is that it often does not result in a significant increases in overal password complexity due to people''s predictable usage of various symbols. Large Minimum Length (encouraging passphrases instead of passwords) Increasing the number of characters makes the password harder to crack and may be appropriate for systems relying on single factor authentication. A disadvantage of this approach is that selecting a good passphrase is not easy and poor passwords can still be generated. Some prompting may be needed to encourage long unpredictable passwords. Randomly Chosen Secrets Generating a password for the user can help make sure that length and complexity requirements are met\, and can result in secure passwords being used. A disadvantage of this approach is that the resulting password or passpharse may be too difficult to memorize\, encouraging them to be written down. Password Expiration Requiring a periodic password change can reduce the time window that an adversary has to crack a password\, while also limiting the damage caused by password exposures at other locations. Password expiration may be a good mitigating technique when long complex passwords are not desired. See NIST 80063B https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.80063b.pdf Sections: 5.1.1\, 10.2.1\, and Appendix A for further information on password requirements. PHASE:Architecture and Design: Consider a second authentication factor beyond the password\, which prevents the password from being a single point of failure. See CWE308 for further information. PHASE:Implementation: Consider implementing a password complexity meter to inform users when a chosen password meets the required attributes."
"Authentication Verification Requirements : Verify that the user can choose to either temporarily view the entire masked password\, or temporarily view the last typed character of the password on platforms that do not have this as native functionality.","The product does not require that users should have strong passwords\, which makes it easier for attackers to compromise user accounts. Authentication mechanisms often rely on a memorized secret (also known as a password) to provide an assertion of identity for a user of a system. It is therefore important that this password be of sufficient complexity and impractical for an adversary to guess. The specific requirements around how complex a password needs to be depends on the type of system being protected. Selecting the correct password requirements and enforcing them through implementation are critical to the overall success of the authentication mechanism.","PHASE:Architecture and Design: A product''s design should require adherance to an appropriate password policy. Specific password requirements depend strongly on contextual factors\, but it is recommended to contain the following attributes: Enforcement of a minimum and maximum length Restrictions against password reuse Restrictions against using common passwords Restrictions against using contextual string in the password (e.g.\, user id\, app name) Depending on the threat model\, the password policy may include several additional attributes. Complex passwords requiring mixed character sets (alpha\, numeric\, special\, mixed case) Increasing the range of characters makes the password harder to crack and may be appropriate for systems relying on single factor authentication. Unfortunately\, a complex password may be difficult to memorize\, encouraging a user to select a short password or to incorrectly manage the password (write it down). Another disadvantage of this approach is that it often does not result in a significant increases in overal password complexity due to people''s predictable usage of various symbols. Large Minimum Length (encouraging passphrases instead of passwords) Increasing the number of characters makes the password harder to crack and may be appropriate for systems relying on single factor authentication. A disadvantage of this approach is that selecting a good passphrase is not easy and poor passwords can still be generated. Some prompting may be needed to encourage long unpredictable passwords. Randomly Chosen Secrets Generating a password for the user can help make sure that length and complexity requirements are met\, and can result in secure passwords being used. A disadvantage of this approach is that the resulting password or passpharse may be too difficult to memorize\, encouraging them to be written down. Password Expiration Requiring a periodic password change can reduce the time window that an adversary has to crack a password\, while also limiting the damage caused by password exposures at other locations. Password expiration may be a good mitigating technique when long complex passwords are not desired. See NIST 80063B https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.80063b.pdf Sections: 5.1.1\, 10.2.1\, and Appendix A for further information on password requirements. PHASE:Architecture and Design: Consider a second authentication factor beyond the password\, which prevents the password from being a single point of failure. See CWE308 for further information. PHASE:Implementation: Consider implementing a password complexity meter to inform users when a chosen password meets the required attributes."
"Authentication Verification Requirements : Verify that anti-automation controls are effective at mitigating breached credential testing\, brute force\, and account lockout attacks. Such controls include blocking the most common breached passwords\, soft lockouts\, rate limiting\, CAPTCHA\, ever increasing delays between attempts\, IP address restrictions\, or risk-based restrictions such as location\, first login on a device\, recent attempts to unlock the account\, or similar. Verify that no more than 100 failed attempts per hour is possible on a single account.","The software does not implement sufficient measures to prevent multiple failed authentication attempts within in a short time frame\, making it more susceptible to brute force attacks.","PHASE:Architecture and Design: Common protection mechanisms include: Disconnecting the user after a small number of failed attempts Implementing a timeout Locking out a targeted account Requiring a computational task on the user''s part. PHASE:Architecture and Design:STRATEGY:Libraries or Frameworks: Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. Consider using libraries with authentication capabilities such as OpenSSL or the ESAPI Authenticator. [REF45]"
"Authentication Verification Requirements : Verify that the use of weak authenticators (such as SMS and email) is limited to secondary verification and transaction approval and not as a replacement for more secure authentication methods. Verify that stronger methods are offered before weak methods\, users are aware of the risks\, or that proper measures are in place to limit the risks of account compromise.","The software implements an authentication technique\, but it skips a step that weakens the technique. Authentication techniques should follow the algorithms that define them exactly\, otherwise authentication can be bypassed or more easily subjected to brute force attacks.",""
"Authentication Verification Requirements : Verify that secure notifications are sent to users after updates to authentication details\, such as credential resets\, email or address changes\, logging in from unknown or risky locations. The use of push notifications - rather than SMS or email - is preferred\, but in the absence of push notifications\, SMS or email is acceptable as long as no sensitive information is disclosed in the notification.","When setting a new password for a user\, the product does not require knowledge of the original password\, or using another form of authentication. This could be used by an attacker to change passwords for another user\, thus gaining the privileges associated with that user.","PHASE:Architecture and Design: When prompting for a password change\, force the user to provide the original password in addition to the new password. PHASE:Architecture and Design: Do not use forgotten password functionality. But if you must\, ensure that you are only providing information to the actual user\, e.g. by using an email address or challenge question that the legitimate user already provided in the past; do not allow the current user to change this identity information until the correct password has been provided."
"Authentication Verification Requirements : Verify system generated initial passwords or activation codes SHOULD be securely randomly generated\, SHOULD be at least 6 characters long\, and MAY contain letters and numbers\, and expire after a short period of time. These initial secrets must not be permitted to become the long term password.","The software uses insufficiently random numbers or values in a security context that depends on unpredictable numbers. When software generates predictable values in a context requiring unpredictability\, it may be possible for an attacker to guess the next value that will be generated\, and use this guess to impersonate another user or access sensitive information.","PHASE:Architecture and Design: Use a wellvetted algorithm that is currently considered to be strong by experts in the field\, and select welltested implementations with adequate length seeds. In general\, if a pseudorandom number generator is not advertised as being cryptographically secure\, then it is probably a statistical PRNG and should not be used in securitysensitive contexts. Pseudorandom number generators can produce predictable numbers if the generator is known and the seed can be guessed. A 256bit seed is a good starting point for producing a random enough number. PHASE:Implementation: Consider a PRNG that reseeds itself as needed from high quality pseudorandom output sources\, such as hardware devices. PHASE:Testing: Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution\, since 100% accuracy and coverage are not feasible. PHASE:Architecture and Design Requirements:STRATEGY:Libraries or Frameworks: Use products or modules that conform to FIPS 1402 [REF267] to avoid obvious entropy problems. Consult FIPS 1402 Annex C (Approved Random Number Generators). PHASE:Testing: Use tools and techniques that require manual (human) analysis\, such as penetration testing\, threat modeling\, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules."
"Authentication Verification Requirements : Verify that a system generated initial activation or recovery secret is not sent in clear text to the user.","The software contains a mechanism for users to recover or change their passwords without knowing the original password\, but the mechanism is weak. It is common for an application to have a mechanism that provides a means for a user to gain access to their account in the event they forget their password. Very often the password recovery mechanism is weak\, which has the effect of making it more likely that it would be possible for a person other than the legitimate system user to gain access to that user''s account. Weak password recovery schemes completely undermine a strong password authentication scheme. This weakness may be that the security question is too easy to guess or find an answer to (e.g. because the question is too common\, or the answers can be found using social media). Or there might be an implementation weakness in the password recovery mechanism code that may for instance trick the system into emailing the new password to an email account other than that of the user. There might be no throttling done on the rate of password resets so that a legitimate user can be denied service by an attacker if an attacker tries to recover their password in a rapid succession. The system may send the original password to the user rather than generating a new temporary password. In summary\, password recovery functionality\, if not carefully designed and implemented can often become the system''s weakest link that can be misused in a way that would allow an attacker to gain unauthorized access to the system.","PHASE:Architecture and Design: Make sure that all input supplied by the user to the password recovery mechanism is thoroughly filtered and validated. PHASE:Architecture and Design: Do not use standard weak security questions and use several security questions. PHASE:Architecture and Design: Make sure that there is throttling on the number of incorrect answers to a security question. Disable the password recovery functionality after a certain (small) number of incorrect guesses. PHASE:Architecture and Design: Require that the user properly answers the security question prior to resetting their password and sending the new password to the email address of record. PHASE:Architecture and Design: Never allow the user to control what email address the new password will be sent to in the password recovery mechanism. PHASE:Architecture and Design: Assign a new temporary password rather than revealing the original password."
"Authentication Verification Requirements : Verify password hints or knowledge-based authentication (so-called "secret questions") are not present.","The software contains a mechanism for users to recover or change their passwords without knowing the original password\, but the mechanism is weak. It is common for an application to have a mechanism that provides a means for a user to gain access to their account in the event they forget their password. Very often the password recovery mechanism is weak\, which has the effect of making it more likely that it would be possible for a person other than the legitimate system user to gain access to that user''s account. Weak password recovery schemes completely undermine a strong password authentication scheme. This weakness may be that the security question is too easy to guess or find an answer to (e.g. because the question is too common\, or the answers can be found using social media). Or there might be an implementation weakness in the password recovery mechanism code that may for instance trick the system into emailing the new password to an email account other than that of the user. There might be no throttling done on the rate of password resets so that a legitimate user can be denied service by an attacker if an attacker tries to recover their password in a rapid succession. The system may send the original password to the user rather than generating a new temporary password. In summary\, password recovery functionality\, if not carefully designed and implemented can often become the system''s weakest link that can be misused in a way that would allow an attacker to gain unauthorized access to the system.","PHASE:Architecture and Design: Make sure that all input supplied by the user to the password recovery mechanism is thoroughly filtered and validated. PHASE:Architecture and Design: Do not use standard weak security questions and use several security questions. PHASE:Architecture and Design: Make sure that there is throttling on the number of incorrect answers to a security question. Disable the password recovery functionality after a certain (small) number of incorrect guesses. PHASE:Architecture and Design: Require that the user properly answers the security question prior to resetting their password and sending the new password to the email address of record. PHASE:Architecture and Design: Never allow the user to control what email address the new password will be sent to in the password recovery mechanism. PHASE:Architecture and Design: Assign a new temporary password rather than revealing the original password."
"Authentication Verification Requirements : Verify password credential recovery does not reveal the current password in any way.","The software contains a mechanism for users to recover or change their passwords without knowing the original password\, but the mechanism is weak. It is common for an application to have a mechanism that provides a means for a user to gain access to their account in the event they forget their password. Very often the password recovery mechanism is weak\, which has the effect of making it more likely that it would be possible for a person other than the legitimate system user to gain access to that user''s account. Weak password recovery schemes completely undermine a strong password authentication scheme. This weakness may be that the security question is too easy to guess or find an answer to (e.g. because the question is too common\, or the answers can be found using social media). Or there might be an implementation weakness in the password recovery mechanism code that may for instance trick the system into emailing the new password to an email account other than that of the user. There might be no throttling done on the rate of password resets so that a legitimate user can be denied service by an attacker if an attacker tries to recover their password in a rapid succession. The system may send the original password to the user rather than generating a new temporary password. In summary\, password recovery functionality\, if not carefully designed and implemented can often become the system''s weakest link that can be misused in a way that would allow an attacker to gain unauthorized access to the system.","PHASE:Architecture and Design: Make sure that all input supplied by the user to the password recovery mechanism is thoroughly filtered and validated. PHASE:Architecture and Design: Do not use standard weak security questions and use several security questions. PHASE:Architecture and Design: Make sure that there is throttling on the number of incorrect answers to a security question. Disable the password recovery functionality after a certain (small) number of incorrect guesses. PHASE:Architecture and Design: Require that the user properly answers the security question prior to resetting their password and sending the new password to the email address of record. PHASE:Architecture and Design: Never allow the user to control what email address the new password will be sent to in the password recovery mechanism. PHASE:Architecture and Design: Assign a new temporary password rather than revealing the original password."
"Authentication Verification Requirements : Verify shared or default accounts are not present (e.g. "root"\, "admin"\, or "sa").","The product\, upon installation\, sets incorrect permissions for an object that exposes it to an unintended actor.","PHASE:Architecture and Design Operation: Very carefully manage the setting\, management\, and handling of privileges. Explicitly manage trust zones in the software. PHASE:Architecture and Design:STRATEGY:Separation of Privilege: Compartmentalize the system to have safe areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges."
"Authentication Verification Requirements : Verify that if an authentication factor is changed or replaced\, that the user is notified of this event.","The software implements an authentication technique\, but it skips a step that weakens the technique. Authentication techniques should follow the algorithms that define them exactly\, otherwise authentication can be bypassed or more easily subjected to brute force attacks.",""
"Authentication Verification Requirements : Verify forgotten password\, and other recovery paths use a secure recovery mechanism\, such as TOTP or other soft token\, mobile push\, or another offline recovery mechanism.","The software contains a mechanism for users to recover or change their passwords without knowing the original password\, but the mechanism is weak. It is common for an application to have a mechanism that provides a means for a user to gain access to their account in the event they forget their password. Very often the password recovery mechanism is weak\, which has the effect of making it more likely that it would be possible for a person other than the legitimate system user to gain access to that user''s account. Weak password recovery schemes completely undermine a strong password authentication scheme. This weakness may be that the security question is too easy to guess or find an answer to (e.g. because the question is too common\, or the answers can be found using social media). Or there might be an implementation weakness in the password recovery mechanism code that may for instance trick the system into emailing the new password to an email account other than that of the user. There might be no throttling done on the rate of password resets so that a legitimate user can be denied service by an attacker if an attacker tries to recover their password in a rapid succession. The system may send the original password to the user rather than generating a new temporary password. In summary\, password recovery functionality\, if not carefully designed and implemented can often become the system''s weakest link that can be misused in a way that would allow an attacker to gain unauthorized access to the system.","PHASE:Architecture and Design: Make sure that all input supplied by the user to the password recovery mechanism is thoroughly filtered and validated. PHASE:Architecture and Design: Do not use standard weak security questions and use several security questions. PHASE:Architecture and Design: Make sure that there is throttling on the number of incorrect answers to a security question. Disable the password recovery functionality after a certain (small) number of incorrect guesses. PHASE:Architecture and Design: Require that the user properly answers the security question prior to resetting their password and sending the new password to the email address of record. PHASE:Architecture and Design: Never allow the user to control what email address the new password will be sent to in the password recovery mechanism. PHASE:Architecture and Design: Assign a new temporary password rather than revealing the original password."
"Authentication Verification Requirements : Verify that clear text out of band (NIST "restricted") authenticators\, such as SMS or PSTN\, are not offered by default\, and stronger alternatives such as push notifications are offered first.","When an actor claims to have a given identity\, the software does not prove or insufficiently proves that the claim is correct.","PHASE:Architecture and Design:STRATEGY:Libraries or Frameworks: Use an authentication framework or library such as the OWASP ESAPI Authentication feature."
"Authentication Verification Requirements : Verify that the out of band verifier expires out of band authentication requests\, codes\, or tokens after 10 minutes.","When an actor claims to have a given identity\, the software does not prove or insufficiently proves that the claim is correct.","PHASE:Architecture and Design:STRATEGY:Libraries or Frameworks: Use an authentication framework or library such as the OWASP ESAPI Authentication feature."
"Authentication Verification Requirements : Verify that the out of band verifier authentication requests\, codes\, or tokens are only usable once\, and only for the original authentication request.","When an actor claims to have a given identity\, the software does not prove or insufficiently proves that the claim is correct.","PHASE:Architecture and Design:STRATEGY:Libraries or Frameworks: Use an authentication framework or library such as the OWASP ESAPI Authentication feature."
"Authentication Verification Requirements : Verify that the out of band authenticator and verifier communicates over a secure independent channel.","Login pages do not use adequate measures to protect the user name and password while they are in transit from the client to the server.","PHASE:Operation System Configuration: Enforce SSL use for the login page or any page used to transmit user credentials or other sensitive information. Even if the entire site does not use SSL\, it MUST use SSL for login. Additionally\, to help prevent phishing attacks\, make sure that SSL serves the login page. SSL allows the user to verify the identity of the server to which they are connecting. If the SSL serves login page\, the user can be certain they are talking to the proper end system. A phishing attack would typically redirect a user to a site that does not have a valid trusted server certificate issued from an authorized supplier."
"Authentication Verification Requirements : Verify that time-based OTPs have a defined lifetime before expiring.","According to WASC\, Insufficient Session Expiration is when a web site permits an attacker to reuse old session credentials or session IDs for authorization.","PHASE:Implementation: Set sessions/credentials expiration date."
