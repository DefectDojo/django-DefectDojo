{
  "date": "Thursday, Jan 18, 2024",
  "projectName": "vulnerable-flask-app",
  "inNewCodePeriod": false,
  "allBugs": false,
  "fixMissingRule": false,
  "noSecurityHotspot": false,
  "noRulesInReport": false,
  "onlyDetectedRules": true,
  "vulnerabilityPhrase": "Vulnerability",
  "noCoverage": true,
  "vulnerabilityPluralPhrase": "Vulnerabilities",
  "sonarBaseURL": "https://sonar.192-168-38-31.nip.io",
  "sonarComponent": "vulnerable-flask-app",
  "rules": {
    "python:S4502": {
      "name": "Disabling CSRF protections is security-sensitive",
      "htmlDesc": "<p>A cross-site request forgery (CSRF) attack occurs when a trusted user of a web application can be forced, by an attacker, to perform sensitive\nactions that he didn’t intend, such as updating his profile or sending a message, more generally anything that can change the state of the\napplication.</p>\n<p>The attacker can trick the user/victim to click on a link, corresponding to the privileged action, or to visit a malicious web site that embeds a\nhidden web request and as web browsers automatically include cookies, the actions can be authenticated and sensitive.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The web application uses cookies to authenticate users. </li>\n  <li> There exist sensitive operations in the web application that can be performed when the user is authenticated. </li>\n  <li> The state / resources of the web application can be modified by doing HTTP POST or HTTP DELETE requests for example. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Protection against CSRF attacks is strongly recommended:\n    <ul>\n      <li> to be activated by default for all <a href=\"https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Safe_methods\">unsafe HTTP\n      methods</a>. </li>\n      <li> implemented, for example, with an unguessable CSRF token </li>\n    </ul>  </li>\n  <li> Of course all sensitive operations should not be performed with <a\n  href=\"https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Safe_methods\">safe HTTP</a> methods like <code>GET</code> which are designed to be\n  used only for information retrieval. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<p>For a <a href=\"https://docs.djangoproject.com/fr/3.0/ref/csrf/\">Django</a> application, the code is sensitive when,</p>\n<ul>\n  <li> <code>django.middleware.csrf.CsrfViewMiddleware</code> is not used in the <a\n  href=\"https://docs.djangoproject.com/en/3.0/topics/settings/\">Django settings</a>: </li>\n</ul>\n<pre>\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n] # Sensitive: django.middleware.csrf.CsrfViewMiddleware is missing\n</pre>\n<ul>\n  <li> the CSRF protection is disabled on a view: </li>\n</ul>\n<pre>\n@csrf_exempt # Sensitive\ndef example(request):\n    return HttpResponse(\"default\")\n</pre>\n<p>For a <a href=\"https://flask-wtf.readthedocs.io/en/latest/csrf.html\">Flask</a> application, the code is sensitive when,</p>\n<ul>\n  <li> the <code>WTF_CSRF_ENABLED</code> setting is set to <code>false</code>: </li>\n</ul>\n<pre>\napp = Flask(__name__)\napp.config['WTF_CSRF_ENABLED'] = False # Sensitive\n</pre>\n<ul>\n  <li> the application doesn’t use the <code>CSRFProtect</code> module: </li>\n</ul>\n<pre>\napp = Flask(__name__) # Sensitive: CSRFProtect is missing\n\n@app.route('/')\ndef hello_world():\n    return 'Hello, World!'\n</pre>\n<ul>\n  <li> the CSRF protection is disabled on a view: </li>\n</ul>\n<pre>\napp = Flask(__name__)\ncsrf = CSRFProtect()\ncsrf.init_app(app)\n\n@app.route('/example/', methods=['POST'])\n@csrf.exempt # Sensitive\ndef example():\n    return 'example '\n</pre>\n<ul>\n  <li> the CSRF protection is disabled on a form: </li>\n</ul>\n<pre>\nclass unprotectedForm(FlaskForm):\n    class Meta:\n        csrf = False # Sensitive\n\n    name = TextField('name')\n    submit = SubmitField('submit')\n</pre>\n<h2>Compliant Solution</h2>\n<p>For a <a href=\"https://docs.djangoproject.com/fr/3.0/ref/csrf/\">Django</a> application,</p>\n<ul>\n  <li> it is recommended to protect all the views with <code>django.middleware.csrf.CsrfViewMiddleware</code>: </li>\n</ul>\n<pre>\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware', # Compliant\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n</pre>\n<ul>\n  <li> and to not disable the CSRF protection on specific views: </li>\n</ul>\n<pre>\ndef example(request): # Compliant\n    return HttpResponse(\"default\")\n</pre>\n<p>For a <a href=\"https://flask-wtf.readthedocs.io/en/latest/csrf.html\">Flask</a> application,</p>\n<ul>\n  <li> the <code>CSRFProtect</code> module should be used (and not disabled further with <code>WTF_CSRF_ENABLED</code> set to <code>false</code>):\n  </li>\n</ul>\n<pre>\napp = Flask(__name__)\ncsrf = CSRFProtect()\ncsrf.init_app(app) # Compliant\n</pre>\n<ul>\n  <li> and it is recommended to not disable the CSRF protection on specific views or forms: </li>\n</ul>\n<pre>\n@app.route('/example/', methods=['POST']) # Compliant\ndef example():\n    return 'example '\n\nclass unprotectedForm(FlaskForm):\n    class Meta:\n        csrf = True # Compliant\n\n    name = TextField('name')\n    submit = SubmitField('submit')\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\">OWASP Top 10 2021 Category A1</a> - Broken Access Control </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/352\">MITRE, CWE-352</a> - Cross-Site Request Forgery (CSRF) </li>\n  <li> <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">OWASP Top 10 2017 Category A6</a> - Security\n  Misconfiguration </li>\n  <li> <a href=\"https://owasp.org/www-community/attacks/csrf\">OWASP: Cross-Site Request Forgery</a> </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat1\">SANS Top 25</a> - Insecure Interaction Between Components </li>\n</ul>",
      "severity": "CRITICAL"
    },
    "python:S4792": {
      "name": "Configuring loggers is security-sensitive",
      "htmlDesc": "<p>Configuring loggers is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0285\">CVE-2018-0285</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-1127\">CVE-2000-1127</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-15113\">CVE-2017-15113</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-5742\">CVE-2015-5742</a> </li>\n</ul>\n<p>Logs are useful before, during and after a security incident.</p>\n<ul>\n  <li> Attackers will most of the time start their nefarious work by probing the system for vulnerabilities. Monitoring this activity and stopping it\n  is the first step to prevent an attack from ever happening. </li>\n  <li> In case of a successful attack, logs should contain enough information to understand what damage an attacker may have inflicted. </li>\n</ul>\n<p>Logs are also a target for attackers because they might contain sensitive information. Configuring loggers has an impact on the type of information\nlogged and how they are logged.</p>\n<p>This rule flags for review code that initiates loggers configuration. The goal is to guide security code reviews.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> unauthorized users might have access to the logs, either because they are stored in an insecure location or because the application gives\n  access to them. </li>\n  <li> the logs contain sensitive information on a production server. This can happen when the logger is in debug mode. </li>\n  <li> the log can grow without limit. This can happen when additional information is written into logs every time a user performs an action and the\n  user can perform the action as many times as he/she wants. </li>\n  <li> the logs do not contain enough information to understand the damage an attacker might have inflicted. The loggers mode (info, warn, error)\n  might filter out important information. They might not print contextual information like the precise time of events or the server hostname. </li>\n  <li> the logs are only stored locally instead of being backuped or replicated. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Check that your production deployment doesn’t have its loggers in \"debug\" mode as it might write sensitive information in logs. </li>\n  <li> Production logs should be stored in a secure location which is only accessible to system administrators. </li>\n  <li> Configure the loggers to display all warnings, info and error messages. Write relevant information such as the precise time of events and the\n  hostname. </li>\n  <li> Choose log format which is easy to parse and process automatically. It is important to process logs rapidly in case of an attack so that the\n  impact is known and limited. </li>\n  <li> Check that the permissions of the log files are correct. If you index the logs in some other service, make sure that the transfer and the\n  service are secure too. </li>\n  <li> Add limits to the size of the logs and make sure that no user can fill the disk with logs. This can happen even when the user does not control\n  the logged information. An attacker could just repeat a logged action many times. </li>\n</ul>\n<p>Remember that configuring loggers properly doesn’t make them bullet-proof. Here is a list of recommendations explaining on how to use your\nlogs:</p>\n<ul>\n  <li> Don’t log any sensitive information. This obviously includes passwords and credit card numbers but also any personal information such as user\n  names, locations, etc…​ Usually any information which is protected by law is good candidate for removal. </li>\n  <li> Sanitize all user inputs before writing them in the logs. This includes checking its size, content, encoding, syntax, etc…​ As for any user\n  input, validate using whitelists whenever possible. Enabling users to write what they want in your logs can have many impacts. It could for example\n  use all your storage space or compromise your log indexing service. </li>\n  <li> Log enough information to monitor suspicious activities and evaluate the impact an attacker might have on your systems. Register events such as\n  failed logins, successful logins, server side input validation failures, access denials and any important transaction. </li>\n  <li> Monitor the logs for any suspicious activity. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<pre>\nimport logging\nfrom logging import Logger, Handler, Filter\nfrom logging.config import fileConfig, dictConfig\n\nlogging.basicConfig()  # Sensitive\n\nlogging.disable()  # Sensitive\n\n\ndef update_logging(logger_class):\n    logging.setLoggerClass(logger_class)  # Sensitive\n\n\ndef set_last_resort(last_resort):\n    logging.lastResort = last_resort  # Sensitive\n\n\nclass CustomLogger(Logger):  # Sensitive\n    pass\n\n\nclass CustomHandler(Handler):  # Sensitive\n    pass\n\n\nclass CustomFilter(Filter):  # Sensitive\n    pass\n\n\ndef update_config(path, config):\n    fileConfig(path)  # Sensitive\n    dictConfig(config)  # Sensitive\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/\">OWASP Top 10 2021 Category A9</a> - Security Logging and\n  Monitoring Failures </li>\n  <li> <a href=\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">OWASP Top 10 2017 Category A3</a> - Sensitive Data\n  Exposure </li>\n  <li> <a href=\"https://owasp.org/www-project-top-ten/2017/A10_2017-Insufficient_Logging%2526Monitoring\">OWASP Top 10 2017 Category A10</a> -\n  Insufficient Logging &amp; Monitoring </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/117\">MITRE, CWE-117</a> - Improper Output Neutralization for Logs </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/532\">MITRE, CWE-532</a> - Information Exposure Through Log Files </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n</ul>",
      "severity": "CRITICAL"
    }
  },
  "issues": [
    {
      "rule": "python:S4502",
      "severity": "CRITICAL",
      "status": "TO_REVIEW",
      "component": "vulnerable-flask-app.py",
      "line": 8,
      "description": "Disabling CSRF protections is security-sensitive",
      "message": "Make sure disabling CSRF protection is safe here.",
      "key": "AYvNd32RyD1npIoQXyT1"
    },
    {
      "rule": "python:S4792",
      "severity": "MINOR",
      "status": "TO_REVIEW",
      "component": "vulnerable-flask-app.py",
      "line": 24,
      "description": "Configuring loggers is security-sensitive",
      "message": "Make sure that this logger's configuration is safe.",
      "key": "AYvNd32RyD1npIoQXyT2"
    },
    {
      "rule": "python:S4792",
      "severity": "MINOR",
      "status": "TO_REVIEW",
      "component": "vulnerable-flask-app.py",
      "line": 49,
      "description": "Configuring loggers is security-sensitive",
      "message": "Make sure that this logger's configuration is safe.",
      "key": "AYvNd32RyD1npIoQXyT3"
    },
    {
      "rule": "python:S4792",
      "severity": "MINOR",
      "status": "TO_REVIEW",
      "component": "vulnerable-flask-app.py",
      "line": 81,
      "description": "Configuring loggers is security-sensitive",
      "message": "Make sure that this logger's configuration is safe.",
      "key": "AYvNd32RyD1npIoQXyT6"
    },
    {
      "rule": "python:S4792",
      "severity": "MINOR",
      "status": "TO_REVIEW",
      "component": "vulnerable-flask-app.py",
      "line": 108,
      "description": "Configuring loggers is security-sensitive",
      "message": "Make sure that this logger's configuration is safe.",
      "key": "AYvNd32SyD1npIoQXyT9"
    },
    {
      "rule": "python:S4792",
      "severity": "MINOR",
      "status": "TO_REVIEW",
      "component": "vulnerable-flask-app.py",
      "line": 185,
      "description": "Configuring loggers is security-sensitive",
      "message": "Make sure that this logger's configuration is safe.",
      "key": "AYvNd32SyD1npIoQXyUB"
    }
  ],
  "hotspotKeys": [
    "AYvNd32RyD1npIoQXyT1",
    "AYvNd32RyD1npIoQXyT2",
    "AYvNd32RyD1npIoQXyT3",
    "AYvNd32RyD1npIoQXyT6",
    "AYvNd32SyD1npIoQXyT9",
    "AYvNd32SyD1npIoQXyUB"
  ],
  "deltaAnalysis": "No",
  "qualityGateStatusPeriodDate": "2023-11-15",
  "qualityGateStatus": {
    "projectStatus": {
      "status": "OK",
      "conditions": [
        {
          "status": "OK",
          "metricKey": "new reliability rating",
          "comparator": "GT",
          "errorThreshold": "A",
          "actualValue": "A"
        },
        {
          "status": "OK",
          "metricKey": "new security rating",
          "comparator": "GT",
          "errorThreshold": "A",
          "actualValue": "A"
        },
        {
          "status": "OK",
          "metricKey": "new maintainability rating",
          "comparator": "GT",
          "errorThreshold": "A",
          "actualValue": "A"
        }
      ],
      "ignoredConditions": false,
      "period": {
        "mode": "PREVIOUS_VERSION",
        "date": "2023-11-15T07:40:39+0000"
      },
      "caycStatus": "compliant"
    }
  },
  "summary": {
    "blocker": 0,
    "critical": 1,
    "major": 0,
    "minor": 5
  }
}