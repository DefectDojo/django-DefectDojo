import datetime

from dateutil.tz import tzlocal

from dojo.models import Test
from dojo.tools.github_vulnerability.parser import GithubVulnerabilityParser
from unittests.dojo_test_case import DojoTestCase, get_unit_tests_scans_path


class TestGithubVulnerabilityParser(DojoTestCase):
    def test_parse_file_with_no_vuln_has_no_findings(self):
        """Sample with zero vulnerability"""
        with (get_unit_tests_scans_path("github_vulnerability") / "github-0-vuln.json").open(encoding="utf-8") as testfile:
            parser = GithubVulnerabilityParser()
            findings = parser.get_findings(testfile, Test())
            self.assertEqual(0, len(findings))

    def test_parse_file_with_one_vuln_has_one_findings(self):
        """Sample with one vulnerability"""
        with (get_unit_tests_scans_path("github_vulnerability") / "github-1-vuln.json").open(encoding="utf-8") as testfile:
            parser = GithubVulnerabilityParser()
            findings = parser.get_findings(testfile, Test())
            self.assertEqual(1, len(findings))
            for finding in findings:
                finding.clean()

            with self.subTest(i=0):
                finding = findings[0]
                self.assertEqual(finding.title, "Critical severity vulnerability that affects package")
                # No header links on simple vuln
                self.assertEqual(
                    finding.description,
                    "This is a sample description for sample description from Github API.",
                )
                self.assertEqual(finding.severity, "Critical")
                self.assertEqual(finding.component_name, "package")
                self.assertEqual(finding.unique_id_from_tool, "aabbccddeeff1122334401")

    def test_parse_file_with_one_vuln_and_dependabot_links(self):
        """Sample with dependabot alert and PR links"""
        with (get_unit_tests_scans_path("github_vulnerability") / "github-1-vuln-repo-dependabot-link.json").open(encoding="utf-8") as testfile:
            parser = GithubVulnerabilityParser()
            findings = parser.get_findings(testfile, Test())
            self.assertEqual(1, len(findings))
            for finding in findings:
                finding.clean()

            with self.subTest(i=0):
                finding = findings[0]
                self.assertEqual(finding.title, "Critical severity vulnerability that affects package")
                # Description now has Repo Alert and Fix PR headers
                lines = finding.description.split("\n")
                self.assertTrue(lines[0].startswith("Repo Alert:"))
                self.assertTrue(lines[1].startswith("Fix PR:"))
                # URL should be set to the alert link
                expected_alert_link = "https://github.com/OWASP/test-repository/security/dependabot/1"
                self.assertEqual(finding.url, expected_alert_link)
                # References include both links
                refs = finding.references.split("\r\n")
                self.assertIn(expected_alert_link, refs)
                expected_pr_link = "https://github.com/OWASP/test-repository/pull/1"
                self.assertIn(expected_pr_link, refs)

    def test_parse_file_with_multiple_vuln_has_multiple_findings(self):
        """Sample with five vulnerabilities"""
        with (get_unit_tests_scans_path("github_vulnerability") / "github-5-vuln.json").open(encoding="utf-8") as testfile:
            parser = GithubVulnerabilityParser()
            findings = parser.get_findings(testfile, Test())
            self.assertEqual(5, len(findings))

    def test_parse_file_search(self):
        """Search scan with GHSA and CVE identifiers"""
        with (get_unit_tests_scans_path("github_vulnerability") / "github_search.json").open(encoding="utf-8") as testfile:
            parser = GithubVulnerabilityParser()
            findings = parser.get_findings(testfile, Test())
            self.assertEqual(2, len(findings))
            for finding in findings:
                finding.clean()

            with self.subTest(i=0):
                finding = findings[0]
                self.assertEqual(finding.title, "Deserialization of Untrusted Data in Log4j")
                self.assertEqual(finding.severity, "Critical")
                self.assertEqual(len(finding.unsaved_vulnerability_ids), 2)
                # Identifiers order: GHSA then CVE
                self.assertEqual(finding.vuln_id_from_tool, "GHSA-2qrg-x229-3v8q")
                self.assertEqual(finding.cve, "CVE-2019-17571")

    def test_parse_file_search2(self):
        """Verifies both findings in search list"""
        with (get_unit_tests_scans_path("github_vulnerability") / "github_search2.json").open(encoding="utf-8") as testfile:
            parser = GithubVulnerabilityParser()
            findings = parser.get_findings(testfile, Test())
            self.assertEqual(2, len(findings))
            for finding in findings:
                finding.clean()
                self.assertEqual(finding.vuln_id_from_tool, "GHSA-2qrg-x229-3v8q")
                self.assertEqual(finding.cve, "CVE-2019-17571")

    def test_parse_file_search3(self):
        """CVSS details and file path from search3"""
        with (get_unit_tests_scans_path("github_vulnerability") / "github_search3.json").open(encoding="utf-8") as testfile:
            parser = GithubVulnerabilityParser()
            findings = parser.get_findings(testfile, Test())
            self.assertEqual(2, len(findings))
            for finding in findings:
                finding.clean()
            with self.subTest(i=0):
                finding = findings[0]
                self.assertEqual(finding.cvssv3, "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H")
                self.assertEqual(finding.file_path, "gogoph-crawler/pom.xml")
            with self.subTest(i=1):
                finding = findings[1]
                self.assertEqual(finding.cvssv3, "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H")
                self.assertEqual(finding.file_path, "gogoph/pom.xml")

    def test_parse_file_search4_null_cvss_vector(self):
        """Handles null CVSS vector gracefully"""
        with (get_unit_tests_scans_path("github_vulnerability") / "github_search4_null_cvss_vector.json").open(encoding="utf-8") as testfile:
            parser = GithubVulnerabilityParser()
            findings = parser.get_findings(testfile, Test())
            self.assertEqual(2, len(findings))
            for finding in findings:
                finding.clean()
            with self.subTest(i=0):
                finding = findings[0]
                self.assertIsNone(finding.cvssv3)
            with self.subTest(i=1):
                finding = findings[1]
                self.assertEqual(finding.cvssv3, "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H")

    def test_parse_cwe_and_date(self):
        with (get_unit_tests_scans_path("github_vulnerability") / "github_h2.json").open(encoding="utf-8") as testfile:
            parser = GithubVulnerabilityParser()
            findings = parser.get_findings(testfile, Test())
            self.assertEqual(1, len(findings))
            for finding in findings:
                finding.clean()

            with self.subTest(i=0):
                finding = findings[0]
                self.assertEqual(finding.cwe, 502)
                self.assertEqual(
                    datetime.datetime(2022, 5, 9, 9, 43, 40, tzinfo=tzlocal()),
                    finding.date
                )

    def test_parse_state(self):
        with (get_unit_tests_scans_path("github_vulnerability") / "github_shiro.json").open(encoding="utf-8") as testfile:
            parser = GithubVulnerabilityParser()
            findings = parser.get_findings(testfile, Test())
            self.assertEqual(1, len(findings))
            for finding in findings:
                finding.clean()

            with self.subTest(i=0):
                finding = findings[0]
                self.assertFalse(finding.active)
                self.assertTrue(finding.is_mitigated)

    def test_parser_version(self):
        with (get_unit_tests_scans_path("github_vulnerability") / "github-vuln-version.json").open(encoding="utf-8") as testfile:
            parser = GithubVulnerabilityParser()
            findings = parser.get_findings(testfile, Test())
            self.assertEqual(1, len(findings))
            for finding in findings:
                finding.clean()

            with self.subTest(i=0):
                finding = findings[0]
                self.assertEqual(
                    finding.component_version,
                    "5.3.29"
                )
