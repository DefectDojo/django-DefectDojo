dist: xenial
language: minimal

stages:
  - prechecks
  - build and cache
  - integration tests
  - promote and clean up cache
  - deploy

env:
  global: DOCKER_CACHE=${HOME}/docker-images

cache:
  directories: ${DOCKER_CACHE}

jobs:
  include:
    - &precheck
      stage: prechecks
      if: tag IS blank # Ignore stage for tag commits
      install: '.github/travis/precheck/install.sh'
      before_script: '.github/travis/precheck/before-script.sh'
      script: '.github/travis/precheck/script.sh'
      cache: # don't use any cache for precheck stage to execute faster

      name: "Pull request targets"
      before_install: export CHECK=pr_targets
    - <<: *precheck
      name: "Code base quality (changes only)"
      # Ignore stage for tag commits, only lint changes for pull requests
      if: (type = pull_request) AND (tag IS blank)
      before_install: export CHECK=code_base_quality
    - <<: *precheck
      name: "Code base quality (full)"
      # Ignore stage for tag commits, lint everything on writes to a branch
      if: (type != pull_request) AND (tag IS blank)
      before_install: export CHECK=code_base_quality
    - <<: *precheck
      name: "Unwanted changes"
      before_install: export CHECK=unwanted_changes
    - <<: *precheck
      name: "Static application security testing"
      before_install: export CHECK=sast


    - &build
      stage: build and cache
      # Ignore stage for tag commits, don't cache 'builder' for pull requests
      if: (type = pull_request) AND (tag IS blank)
      name: "Build and cache Docker images"
      services: docker
      install:
        - ls -lah ${DOCKER_CACHE}
        - '.github/travis/build/install.sh'
      before_script: '.github/travis/build/before-script.sh'
      script: '.github/travis/build/script.sh'
      before_cache:
        - docker images --all
        - >
          test ${TRAVIS_TEST_RESULT} -eq 0
          && .github/travis/cache-operations.sh save
          || .github/travis/cache-operations.sh clean
      env: # don't use environment variables in order to have a shared cache

    - <<: *build
      # Ignore stage for tag commits, cache 'builder' after writes to a branch
      if: (type != pull_request) AND (tag IS blank)
      name: "Build and cache Docker images (including 'builder')"
      before_cache:
        - docker images --all
        - >
          test ${TRAVIS_TEST_RESULT} -eq 0
          && .github/travis/cache-operations.sh save all
          || .github/travis/cache-operations.sh clean


    - &test
      stage: integration tests
      # Ignore stage for tag commits, always run otherwise
      if: tag IS blank
      services: docker
      addons:
        apt:
          packages: socat # required by Helm for port forwarding
      install:
        - ls -lah ${DOCKER_CACHE}
        - '.github/travis/cache-operations.sh load'
        - docker images --all
        - '.github/travis/test/install.sh'
      before_script: '.github/travis/test/before-script.sh'
      script: '.github/travis/test/script.sh'
      before_cache:
        - docker images --all
        - >
          test ${TRAVIS_TEST_RESULT} -eq 0
          || .github/travis/cache-operations.sh clean
      env: # don't use environment variables in order to have a shared cache

      name: "K8S, RabbitMQ & MySQL"
      before_install:
        - export TARGET=k8s
        - export BROKER=rabbitmq
        - export DATABASE=mysql
    - <<: *test
      name: "K8S, RabbitMQ & PostgreSQL"
      before_install:
        - export TARGET=k8s
        - export BROKER=rabbitmq
        - export DATABASE=postgresql
    - <<: *test
      name: "K8S, Redis & MySQL"
      before_install:
        - export TARGET=k8s
        - export BROKER=redis
        - export DATABASE=mysql
    - <<: *test
      name: "K8S, Redis & PostgreSQL"
      before_install:
        - export TARGET=k8s
        - export BROKER=redis
        - export DATABASE=postgresql
    - <<: *test
      name: "Docker, 'release' version"
      before_install:
        - export TARGET=docker
        - export VERSION=release
    - <<: *test
      name: "Docker, 'dev' version"
      before_install:
        - export TARGET=docker
        - export VERSION=dev


    - &promote
      stage: promote and clean up cache
      # Ignore stage for tag commits, only run after writes to a branch
      if: (type != pull_request) AND (tag IS blank)
      name: "Promote images to Docker Hub, and clean up build cache"
      install:
        - ls -lah ${DOCKER_CACHE}
        - '.github/travis/cache-operations.sh load all'
        - docker images --all
        - '.github/travis/promote/install.sh'
      before_script: '.github/travis/promote/before-script.sh'
      script: '.github/travis/promote/script.sh'
      before_cache: '.github/travis/cache-operations.sh clean'
      env: # don't use environment variables in order to have a shared cache


    - &deploy
      stage: deploy
      # Ignore stage for tag commits, only run after writes to 'master'
      if: (branch = master) AND (type != pull_request) AND (tag IS blank)
      install: '.github/travis/deploy/install.sh'
      before_script: '.github/travis/deploy/before-script.sh'
      script: '.github/travis/deploy/script.sh || export JOB_FAILED=true'
      cache: # no need for cache, images have been pushed to Docker Hub already
      env: # don't use environment variables in order to have a shared cache

      name: "Deploy to Heroku"
      before_install: export TARGET=heroku


  allow_failures:
    - name: "Static application security testing"
    - name: "Code base quality (full)"
  fast_finish: true
