# -*- coding: utf-8 -*-
# Generated by Django 1.11.11 on 2018-03-15 20:44
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import dojo.models
import multiselectfield.db.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Alerts',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default=b'', max_length=100)),
                ('description', models.CharField(max_length=2000, null=True)),
                ('url', models.URLField(max_length=2000, null=True)),
                ('source', models.CharField(default=b'Generic', max_length=100)),
                ('icon', models.CharField(default=b'icon-user-check', max_length=25)),
                ('created', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
            ],
            options={
                'ordering': ['-created'],
            },
        ),
        migrations.CreateModel(
            name='App_Analysis',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('confidence', models.IntegerField(blank=True, null=True, verbose_name=b'Confidence level')),
                ('version', models.CharField(blank=True, max_length=200, null=True, verbose_name=b'Version Number')),
                ('icon', models.CharField(blank=True, max_length=200, null=True)),
                ('website', models.URLField(blank=True, max_length=400, null=True)),
                ('website_found', models.URLField(blank=True, max_length=400, null=True)),
                ('created', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
            ],
        ),
        migrations.CreateModel(
            name='BurpRawRequestResponse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('burpRequestBase64', models.BinaryField()),
                ('burpResponseBase64', models.BinaryField()),
            ],
        ),
        migrations.CreateModel(
            name='Check_List',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_management', models.CharField(default=b'none', max_length=50)),
                ('encryption_crypto', models.CharField(default=b'none', max_length=50)),
                ('configuration_management', models.CharField(default=b'', max_length=50)),
                ('authentication', models.CharField(default=b'none', max_length=50)),
                ('authorization_and_access_control', models.CharField(default=b'none', max_length=50)),
                ('data_input_sanitization_validation', models.CharField(default=b'none', max_length=50)),
                ('sensitive_data', models.CharField(default=b'none', max_length=50)),
                ('other', models.CharField(default=b'none', max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254)),
                ('team', models.CharField(max_length=100)),
                ('is_admin', models.BooleanField(default=False)),
                ('is_globally_read_only', models.BooleanField(default=False)),
                ('updated', models.DateTimeField(editable=False)),
            ],
        ),
        migrations.CreateModel(
            name='Cred_Mapping',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_authn_provider', models.BooleanField(default=False, verbose_name=b'Authentication Provider')),
                ('url', models.URLField(blank=True, max_length=2000, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Cred_User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('username', models.CharField(max_length=200)),
                ('password', models.CharField(max_length=600)),
                ('role', models.CharField(max_length=200)),
                ('authentication', models.CharField(choices=[(b'Form', b'Form Authentication'), (b'SSO', b'SSO Redirect')], default=b'Form', max_length=15)),
                ('http_authentication', models.CharField(blank=True, choices=[(b'Basic', b'Basic'), (b'NTLM', b'NTLM')], max_length=15, null=True)),
                ('description', models.CharField(blank=True, max_length=2000, null=True)),
                ('url', models.URLField(max_length=2000)),
                ('login_regex', models.CharField(blank=True, max_length=200, null=True)),
                ('logout_regex', models.CharField(blank=True, max_length=200, null=True)),
                ('is_valid', models.BooleanField(default=True, verbose_name=b'Login is valid')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='CWE',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.CharField(max_length=1000)),
                ('description', models.CharField(max_length=2000)),
                ('number', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Development_Environment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Endpoint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('protocol', models.CharField(blank=True, help_text=b"The communication protocol such as 'http', 'ftp', etc.", max_length=10, null=True)),
                ('host', models.CharField(blank=True, help_text=b"The host name or IP address, you can also include the port number. For example'127.0.0.1', '127.0.0.1:8080', 'localhost', 'yourdomain.com'.", max_length=500, null=True)),
                ('fqdn', models.CharField(blank=True, max_length=500, null=True)),
                ('port', models.IntegerField(blank=True, help_text=b'The network port associated with the endpoint.', null=True)),
                ('path', models.CharField(blank=True, help_text=b"The location of the resource, it should start with a '/'. For example/endpoint/420/edit", max_length=500, null=True)),
                ('query', models.CharField(blank=True, help_text=b"The query string, the question mark should be omitted.For example 'group=4&team=8'", max_length=5000, null=True)),
                ('fragment', models.CharField(blank=True, help_text=b"The fragment identifier which follows the hash mark. The hash mark should be omitted. For example 'section-13', 'paragraph-2'.", max_length=500, null=True)),
            ],
            options={
                'ordering': ['product', 'protocol', 'host', 'path', 'query', 'fragment'],
            },
        ),
        migrations.CreateModel(
            name='Engagement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=300, null=True)),
                ('description', models.CharField(blank=True, max_length=2000, null=True)),
                ('version', models.CharField(blank=True, max_length=100, null=True)),
                ('first_contacted', models.DateField(blank=True, null=True)),
                ('target_start', models.DateField()),
                ('target_end', models.DateField()),
                ('reason', models.CharField(blank=True, max_length=2000, null=True)),
                ('updated', models.DateTimeField(blank=True, editable=False, null=True)),
                ('active', models.BooleanField(default=True, editable=False)),
                ('test_strategy', models.URLField(blank=True, null=True)),
                ('threat_model', models.BooleanField(default=True)),
                ('api_test', models.BooleanField(default=True)),
                ('pen_test', models.BooleanField(default=True)),
                ('check_list', models.BooleanField(default=True)),
                ('status', models.CharField(choices=[(b'In Progress', b'In Progress'), (b'On Hold', b'On Hold'), (b'Completed', b'Completed')], default=b'', max_length=2000, null=True)),
                ('progress', models.CharField(default=b'threat_model', editable=False, max_length=100)),
                ('tmodel_path', models.CharField(blank=True, default=b'none', editable=False, max_length=1000, null=True)),
                ('risk_path', models.CharField(blank=True, default=b'none', editable=False, max_length=1000, null=True)),
                ('done_testing', models.BooleanField(default=False, editable=False)),
            ],
            options={
                'ordering': ['-target_start'],
            },
        ),
        migrations.CreateModel(
            name='Engagement_Type',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Finding',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField(max_length=1000)),
                ('date', models.DateField(default=dojo.models.get_current_date)),
                ('cwe', models.IntegerField(blank=True, default=0, null=True)),
                ('url', models.TextField(blank=True, editable=False, null=True)),
                ('severity', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('mitigation', models.TextField()),
                ('impact', models.TextField()),
                ('references', models.TextField(blank=True, db_column=b'refs', null=True)),
                ('is_template', models.BooleanField(default=False)),
                ('active', models.BooleanField(default=True)),
                ('verified', models.BooleanField(default=True)),
                ('false_p', models.BooleanField(default=False, verbose_name=b'False Positive')),
                ('duplicate', models.BooleanField(default=False)),
                ('out_of_scope', models.BooleanField(default=False)),
                ('under_review', models.BooleanField(default=False)),
                ('under_defect_review', models.BooleanField(default=False)),
                ('thread_id', models.IntegerField(default=0, editable=False)),
                ('mitigated', models.DateTimeField(blank=True, editable=False, null=True)),
                ('numerical_severity', models.CharField(max_length=4)),
                ('last_reviewed', models.DateTimeField(editable=False, null=True)),
                ('line_number', models.CharField(blank=True, editable=False, max_length=200, null=True)),
                ('sourcefilepath', models.TextField(blank=True, editable=False, null=True)),
                ('sourcefile', models.TextField(blank=True, editable=False, null=True)),
                ('param', models.TextField(blank=True, editable=False, null=True)),
                ('payload', models.TextField(blank=True, editable=False, null=True)),
                ('hash_code', models.TextField(blank=True, editable=False, null=True)),
                ('line', models.IntegerField(blank=True, null=True, verbose_name=b'Line number')),
                ('file_path', models.CharField(blank=True, max_length=1000, null=True)),
                ('static_finding', models.BooleanField(default=False)),
                ('dynamic_finding', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ('numerical_severity', '-date', 'title'),
            },
        ),
        migrations.CreateModel(
            name='Finding_Template',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField(max_length=1000)),
                ('cwe', models.IntegerField(blank=True, default=None, null=True)),
                ('severity', models.CharField(blank=True, max_length=200, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('mitigation', models.TextField(blank=True, null=True)),
                ('impact', models.TextField(blank=True, null=True)),
                ('references', models.TextField(blank=True, db_column=b'refs', null=True)),
                ('numerical_severity', models.CharField(blank=True, editable=False, max_length=4, null=True)),
            ],
            options={
                'ordering': ['-cwe'],
            },
        ),
        migrations.CreateModel(
            name='FindingImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(null=True, upload_to=b'finding_images')),
            ],
        ),
        migrations.CreateModel(
            name='FindingImageAccessToken',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(max_length=255)),
                ('size', models.CharField(choices=[(b'small', b'Small'), (b'medium', b'Medium'), (b'large', b'Large'), (b'thumbnail', b'Thumbnail'), (b'original', b'Original')], default=b'medium', max_length=9)),
                ('image', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dojo.FindingImage')),
            ],
        ),
        migrations.CreateModel(
            name='IPScan',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.TextField(default=b'none', editable=False)),
                ('services', models.CharField(max_length=800, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='JIRA_Clone',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('jira_id', models.CharField(max_length=200)),
                ('jira_clone_id', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='JIRA_Conf',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField(max_length=2000, verbose_name=b'JIRA URL')),
                ('username', models.CharField(max_length=2000)),
                ('password', models.CharField(max_length=2000)),
                ('default_issue_type', models.CharField(choices=[(b'Task', b'Task'), (b'Story', b'Story'), (b'Epic', b'Epic'), (b'Spike', b'Spike'), (b'Bug', b'Bug')], default=b'Bug', max_length=9)),
                ('epic_name_id', models.IntegerField()),
                ('open_status_key', models.IntegerField()),
                ('close_status_key', models.IntegerField()),
                ('low_mapping_severity', models.CharField(max_length=200)),
                ('medium_mapping_severity', models.CharField(max_length=200)),
                ('high_mapping_severity', models.CharField(max_length=200)),
                ('critical_mapping_severity', models.CharField(max_length=200)),
                ('finding_text', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='JIRA_Details_Cache',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('jira_id', models.CharField(max_length=200)),
                ('jira_key', models.CharField(max_length=200)),
                ('jira_status', models.CharField(max_length=200)),
                ('jira_resolution', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='JIRA_Issue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('jira_id', models.CharField(max_length=200)),
                ('jira_key', models.CharField(max_length=200)),
                ('engagement', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dojo.Engagement')),
                ('finding', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dojo.Finding')),
            ],
        ),
        migrations.CreateModel(
            name='JIRA_PKey',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('project_key', models.CharField(blank=True, max_length=200)),
                ('component', models.CharField(blank=True, max_length=200)),
                ('push_all_issues', models.BooleanField(default=False)),
                ('enable_engagement_epic_mapping', models.BooleanField(default=False)),
                ('push_notes', models.BooleanField(default=False)),
                ('conf', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dojo.JIRA_Conf', verbose_name=b'JIRA Configuration')),
            ],
        ),
        migrations.CreateModel(
            name='Language_Type',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language', models.CharField(max_length=100)),
                ('color', models.CharField(max_length=7, null=True, verbose_name=b'HTML color')),
            ],
        ),
        migrations.CreateModel(
            name='Languages',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('files', models.IntegerField(blank=True, null=True, verbose_name=b'Number of files')),
                ('blank', models.IntegerField(blank=True, null=True, verbose_name=b'Number of blank lines')),
                ('comment', models.IntegerField(blank=True, null=True, verbose_name=b'Number of comment lines')),
                ('code', models.IntegerField(blank=True, null=True, verbose_name=b'Number of code lines')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('language', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dojo.Language_Type')),
            ],
        ),
        migrations.CreateModel(
            name='Notes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry', models.CharField(max_length=2400)),
                ('date', models.DateTimeField(default=dojo.models.get_current_datetime, editable=False)),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='Notifications',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('engagement_added', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[(b'slack', b'slack'), (b'hipchat', b'hipchat'), (b'mail', b'mail'), (b'alert', b'alert')], default=b'alert', max_length=24)),
                ('test_added', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[(b'slack', b'slack'), (b'hipchat', b'hipchat'), (b'mail', b'mail'), (b'alert', b'alert')], default=b'alert', max_length=24)),
                ('results_added', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[(b'slack', b'slack'), (b'hipchat', b'hipchat'), (b'mail', b'mail'), (b'alert', b'alert')], default=b'alert', max_length=24)),
                ('report_created', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[(b'slack', b'slack'), (b'hipchat', b'hipchat'), (b'mail', b'mail'), (b'alert', b'alert')], default=b'alert', max_length=24)),
                ('jira_update', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[(b'slack', b'slack'), (b'hipchat', b'hipchat'), (b'mail', b'mail'), (b'alert', b'alert')], default=b'alert', max_length=24)),
                ('upcoming_engagement', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[(b'slack', b'slack'), (b'hipchat', b'hipchat'), (b'mail', b'mail'), (b'alert', b'alert')], default=b'alert', max_length=24)),
                ('user_mentioned', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[(b'slack', b'slack'), (b'hipchat', b'hipchat'), (b'mail', b'mail'), (b'alert', b'alert')], default=b'alert', max_length=24)),
                ('other', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[(b'slack', b'slack'), (b'hipchat', b'hipchat'), (b'mail', b'mail'), (b'alert', b'alert')], default=b'alert', max_length=24)),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300)),
                ('description', models.CharField(max_length=4000)),
                ('prod_manager', models.CharField(default=0, max_length=200)),
                ('tech_contact', models.CharField(default=0, max_length=200)),
                ('manager', models.CharField(default=0, max_length=200)),
                ('created', models.DateTimeField(blank=True, editable=False, null=True)),
                ('updated', models.DateTimeField(blank=True, editable=False, null=True)),
                ('tid', models.IntegerField(default=0, editable=False)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Product_Line',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300)),
                ('description', models.CharField(max_length=2000)),
            ],
        ),
        migrations.CreateModel(
            name='Product_Type',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300)),
                ('critical_product', models.BooleanField(default=False)),
                ('key_product', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('type', models.CharField(default=b'Finding', max_length=100)),
                ('format', models.CharField(default=b'AsciiDoc', max_length=15)),
                ('task_id', models.CharField(max_length=50)),
                ('file', models.FileField(null=True, upload_to=b'reports/%Y/%m/%d', verbose_name=b'Report File')),
                ('status', models.CharField(default=b'requested', max_length=10)),
                ('options', models.TextField()),
                ('datetime', models.DateTimeField(auto_now_add=True)),
                ('done_datetime', models.DateTimeField(null=True)),
            ],
            options={
                'ordering': ['-datetime'],
            },
        ),
        migrations.CreateModel(
            name='Report_Type',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300)),
            ],
        ),
        migrations.CreateModel(
            name='Risk_Acceptance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('path', models.FileField(editable=False, upload_to=b'risk/%Y/%m/%d', verbose_name=b'Risk Acceptance File')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('accepted_findings', models.ManyToManyField(to='dojo.Finding')),
                ('notes', models.ManyToManyField(editable=False, to='dojo.Notes')),
            ],
        ),
        migrations.CreateModel(
            name='Scan',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(blank=True, default=dojo.models.get_current_datetime, editable=False)),
                ('protocol', models.CharField(default=b'TCP', max_length=10)),
                ('status', models.CharField(default=b'Pending', editable=False, max_length=10)),
                ('baseline', models.BooleanField(default=False, verbose_name=b'Current Baseline')),
            ],
        ),
        migrations.CreateModel(
            name='ScanSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('addresses', models.TextField(default=b'none')),
                ('date', models.DateTimeField(blank=True, default=dojo.models.get_current_datetime, editable=False)),
                ('frequency', models.CharField(blank=True, max_length=10000, null=True)),
                ('email', models.CharField(max_length=512)),
                ('protocol', models.CharField(default=b'TCP', max_length=10)),
                ('product', models.ForeignKey(default=1, editable=False, on_delete=django.db.models.deletion.CASCADE, to='dojo.Product')),
            ],
        ),
        migrations.CreateModel(
            name='Stub_Finding',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField(max_length=1000)),
                ('date', models.DateField(default=dojo.models.get_current_date)),
                ('severity', models.CharField(blank=True, max_length=200, null=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'ordering': ('-date', 'title'),
            },
        ),
        migrations.CreateModel(
            name='System_Settings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enable_deduplication', models.BooleanField(default=False, help_text=b'With this setting turned on, Dojo deduplicates findings by comparing endpoints, cwe fields, and titles. If two findings share a URL and have the same CWE or title, Dojo marks the less recent finding as a duplicate. When deduplication is enabled, a list of deduplicated findings is added to the engagement view.', verbose_name=b'Deduplicate findings')),
                ('delete_dupulicates', models.BooleanField(default=False)),
                ('max_dupes', models.IntegerField(blank=True, help_text=b'When enabled, if a single issue reaches the maximum number of duplicates, the oldest will be deleted.', null=True, verbose_name=b'Max Duplicates')),
                ('enable_jira', models.BooleanField(default=False, verbose_name=b'Enable JIRA integration')),
                ('jira_minimum_severity', models.CharField(blank=True, choices=[(b'Critical', b'Critical'), (b'High', b'High'), (b'Medium', b'Medium'), (b'Low', b'Low')], default=b'None', max_length=20, null=True)),
                ('jira_labels', models.CharField(blank=True, help_text=b'JIRA issue labels space seperated', max_length=200, null=True)),
                ('enable_slack_notifications', models.BooleanField(default=False, verbose_name=b'Enable Slack notifications')),
                ('slack_channel', models.CharField(blank=True, default=b'', max_length=100)),
                ('slack_token', models.CharField(blank=True, default=b'', help_text=b'Token required for interacting with Slack. Get one at https://api.slack.com/tokens', max_length=100)),
                ('slack_username', models.CharField(blank=True, default=b'', max_length=100)),
                ('enable_hipchat_notifications', models.BooleanField(default=False, verbose_name=b'Enable HipChat notifications')),
                ('hipchat_site', models.CharField(blank=True, default=b'', help_text=b'The full fqdn of your hipchat site, e.g. "yoursite.hipchat.com"', max_length=100)),
                ('hipchat_channel', models.CharField(blank=True, default=b'', max_length=100)),
                ('hipchat_token', models.CharField(blank=True, default=b'', help_text=b'Token required for interacting with HipChat. Get one at https://patriktest.hipchat.com/addons/', max_length=100)),
                ('enable_mail_notifications', models.BooleanField(default=False)),
                ('mail_notifications_from', models.CharField(blank=True, default=b'from@example.com', max_length=200)),
                ('mail_notifications_to', models.CharField(blank=True, default=b'', max_length=200)),
                ('s_finding_severity_naming', models.BooleanField(default=False, help_text=b'With this setting turned on, Dojo will display S0, S1, S2, etc in most places, whereas if turned off Critical, High, Medium, etc will be displayed.')),
                ('false_positive_history', models.BooleanField(default=False)),
                ('url_prefix', models.CharField(blank=True, default=b'', max_length=300)),
                ('team_name', models.CharField(blank=True, default=b'', max_length=100)),
                ('time_zone', models.CharField(choices=[(b'Africa/Abidjan', b'Africa/Abidjan'), (b'Africa/Accra', b'Africa/Accra'), (b'Africa/Addis_Ababa', b'Africa/Addis_Ababa'), (b'Africa/Algiers', b'Africa/Algiers'), (b'Africa/Asmara', b'Africa/Asmara'), (b'Africa/Asmera', b'Africa/Asmera'), (b'Africa/Bamako', b'Africa/Bamako'), (b'Africa/Bangui', b'Africa/Bangui'), (b'Africa/Banjul', b'Africa/Banjul'), (b'Africa/Bissau', b'Africa/Bissau'), (b'Africa/Blantyre', b'Africa/Blantyre'), (b'Africa/Brazzaville', b'Africa/Brazzaville'), (b'Africa/Bujumbura', b'Africa/Bujumbura'), (b'Africa/Cairo', b'Africa/Cairo'), (b'Africa/Casablanca', b'Africa/Casablanca'), (b'Africa/Ceuta', b'Africa/Ceuta'), (b'Africa/Conakry', b'Africa/Conakry'), (b'Africa/Dakar', b'Africa/Dakar'), (b'Africa/Dar_es_Salaam', b'Africa/Dar_es_Salaam'), (b'Africa/Djibouti', b'Africa/Djibouti'), (b'Africa/Douala', b'Africa/Douala'), (b'Africa/El_Aaiun', b'Africa/El_Aaiun'), (b'Africa/Freetown', b'Africa/Freetown'), (b'Africa/Gaborone', b'Africa/Gaborone'), (b'Africa/Harare', b'Africa/Harare'), (b'Africa/Johannesburg', b'Africa/Johannesburg'), (b'Africa/Juba', b'Africa/Juba'), (b'Africa/Kampala', b'Africa/Kampala'), (b'Africa/Khartoum', b'Africa/Khartoum'), (b'Africa/Kigali', b'Africa/Kigali'), (b'Africa/Kinshasa', b'Africa/Kinshasa'), (b'Africa/Lagos', b'Africa/Lagos'), (b'Africa/Libreville', b'Africa/Libreville'), (b'Africa/Lome', b'Africa/Lome'), (b'Africa/Luanda', b'Africa/Luanda'), (b'Africa/Lubumbashi', b'Africa/Lubumbashi'), (b'Africa/Lusaka', b'Africa/Lusaka'), (b'Africa/Malabo', b'Africa/Malabo'), (b'Africa/Maputo', b'Africa/Maputo'), (b'Africa/Maseru', b'Africa/Maseru'), (b'Africa/Mbabane', b'Africa/Mbabane'), (b'Africa/Mogadishu', b'Africa/Mogadishu'), (b'Africa/Monrovia', b'Africa/Monrovia'), (b'Africa/Nairobi', b'Africa/Nairobi'), (b'Africa/Ndjamena', b'Africa/Ndjamena'), (b'Africa/Niamey', b'Africa/Niamey'), (b'Africa/Nouakchott', b'Africa/Nouakchott'), (b'Africa/Ouagadougou', b'Africa/Ouagadougou'), (b'Africa/Porto-Novo', b'Africa/Porto-Novo'), (b'Africa/Sao_Tome', b'Africa/Sao_Tome'), (b'Africa/Timbuktu', b'Africa/Timbuktu'), (b'Africa/Tripoli', b'Africa/Tripoli'), (b'Africa/Tunis', b'Africa/Tunis'), (b'Africa/Windhoek', b'Africa/Windhoek'), (b'America/Adak', b'America/Adak'), (b'America/Anchorage', b'America/Anchorage'), (b'America/Anguilla', b'America/Anguilla'), (b'America/Antigua', b'America/Antigua'), (b'America/Araguaina', b'America/Araguaina'), (b'America/Argentina/Buenos_Aires', b'America/Argentina/Buenos_Aires'), (b'America/Argentina/Catamarca', b'America/Argentina/Catamarca'), (b'America/Argentina/ComodRivadavia', b'America/Argentina/ComodRivadavia'), (b'America/Argentina/Cordoba', b'America/Argentina/Cordoba'), (b'America/Argentina/Jujuy', b'America/Argentina/Jujuy'), (b'America/Argentina/La_Rioja', b'America/Argentina/La_Rioja'), (b'America/Argentina/Mendoza', b'America/Argentina/Mendoza'), (b'America/Argentina/Rio_Gallegos', b'America/Argentina/Rio_Gallegos'), (b'America/Argentina/Salta', b'America/Argentina/Salta'), (b'America/Argentina/San_Juan', b'America/Argentina/San_Juan'), (b'America/Argentina/San_Luis', b'America/Argentina/San_Luis'), (b'America/Argentina/Tucuman', b'America/Argentina/Tucuman'), (b'America/Argentina/Ushuaia', b'America/Argentina/Ushuaia'), (b'America/Aruba', b'America/Aruba'), (b'America/Asuncion', b'America/Asuncion'), (b'America/Atikokan', b'America/Atikokan'), (b'America/Atka', b'America/Atka'), (b'America/Bahia', b'America/Bahia'), (b'America/Bahia_Banderas', b'America/Bahia_Banderas'), (b'America/Barbados', b'America/Barbados'), (b'America/Belem', b'America/Belem'), (b'America/Belize', b'America/Belize'), (b'America/Blanc-Sablon', b'America/Blanc-Sablon'), (b'America/Boa_Vista', b'America/Boa_Vista'), (b'America/Bogota', b'America/Bogota'), (b'America/Boise', b'America/Boise'), (b'America/Buenos_Aires', b'America/Buenos_Aires'), (b'America/Cambridge_Bay', b'America/Cambridge_Bay'), (b'America/Campo_Grande', b'America/Campo_Grande'), (b'America/Cancun', b'America/Cancun'), (b'America/Caracas', b'America/Caracas'), (b'America/Catamarca', b'America/Catamarca'), (b'America/Cayenne', b'America/Cayenne'), (b'America/Cayman', b'America/Cayman'), (b'America/Chicago', b'America/Chicago'), (b'America/Chihuahua', b'America/Chihuahua'), (b'America/Coral_Harbour', b'America/Coral_Harbour'), (b'America/Cordoba', b'America/Cordoba'), (b'America/Costa_Rica', b'America/Costa_Rica'), (b'America/Creston', b'America/Creston'), (b'America/Cuiaba', b'America/Cuiaba'), (b'America/Curacao', b'America/Curacao'), (b'America/Danmarkshavn', b'America/Danmarkshavn'), (b'America/Dawson', b'America/Dawson'), (b'America/Dawson_Creek', b'America/Dawson_Creek'), (b'America/Denver', b'America/Denver'), (b'America/Detroit', b'America/Detroit'), (b'America/Dominica', b'America/Dominica'), (b'America/Edmonton', b'America/Edmonton'), (b'America/Eirunepe', b'America/Eirunepe'), (b'America/El_Salvador', b'America/El_Salvador'), (b'America/Ensenada', b'America/Ensenada'), (b'America/Fort_Nelson', b'America/Fort_Nelson'), (b'America/Fort_Wayne', b'America/Fort_Wayne'), (b'America/Fortaleza', b'America/Fortaleza'), (b'America/Glace_Bay', b'America/Glace_Bay'), (b'America/Godthab', b'America/Godthab'), (b'America/Goose_Bay', b'America/Goose_Bay'), (b'America/Grand_Turk', b'America/Grand_Turk'), (b'America/Grenada', b'America/Grenada'), (b'America/Guadeloupe', b'America/Guadeloupe'), (b'America/Guatemala', b'America/Guatemala'), (b'America/Guayaquil', b'America/Guayaquil'), (b'America/Guyana', b'America/Guyana'), (b'America/Halifax', b'America/Halifax'), (b'America/Havana', b'America/Havana'), (b'America/Hermosillo', b'America/Hermosillo'), (b'America/Indiana/Indianapolis', b'America/Indiana/Indianapolis'), (b'America/Indiana/Knox', b'America/Indiana/Knox'), (b'America/Indiana/Marengo', b'America/Indiana/Marengo'), (b'America/Indiana/Petersburg', b'America/Indiana/Petersburg'), (b'America/Indiana/Tell_City', b'America/Indiana/Tell_City'), (b'America/Indiana/Vevay', b'America/Indiana/Vevay'), (b'America/Indiana/Vincennes', b'America/Indiana/Vincennes'), (b'America/Indiana/Winamac', b'America/Indiana/Winamac'), (b'America/Indianapolis', b'America/Indianapolis'), (b'America/Inuvik', b'America/Inuvik'), (b'America/Iqaluit', b'America/Iqaluit'), (b'America/Jamaica', b'America/Jamaica'), (b'America/Jujuy', b'America/Jujuy'), (b'America/Juneau', b'America/Juneau'), (b'America/Kentucky/Louisville', b'America/Kentucky/Louisville'), (b'America/Kentucky/Monticello', b'America/Kentucky/Monticello'), (b'America/Knox_IN', b'America/Knox_IN'), (b'America/Kralendijk', b'America/Kralendijk'), (b'America/La_Paz', b'America/La_Paz'), (b'America/Lima', b'America/Lima'), (b'America/Los_Angeles', b'America/Los_Angeles'), (b'America/Louisville', b'America/Louisville'), (b'America/Lower_Princes', b'America/Lower_Princes'), (b'America/Maceio', b'America/Maceio'), (b'America/Managua', b'America/Managua'), (b'America/Manaus', b'America/Manaus'), (b'America/Marigot', b'America/Marigot'), (b'America/Martinique', b'America/Martinique'), (b'America/Matamoros', b'America/Matamoros'), (b'America/Mazatlan', b'America/Mazatlan'), (b'America/Mendoza', b'America/Mendoza'), (b'America/Menominee', b'America/Menominee'), (b'America/Merida', b'America/Merida'), (b'America/Metlakatla', b'America/Metlakatla'), (b'America/Mexico_City', b'America/Mexico_City'), (b'America/Miquelon', b'America/Miquelon'), (b'America/Moncton', b'America/Moncton'), (b'America/Monterrey', b'America/Monterrey'), (b'America/Montevideo', b'America/Montevideo'), (b'America/Montreal', b'America/Montreal'), (b'America/Montserrat', b'America/Montserrat'), (b'America/Nassau', b'America/Nassau'), (b'America/New_York', b'America/New_York'), (b'America/Nipigon', b'America/Nipigon'), (b'America/Nome', b'America/Nome'), (b'America/Noronha', b'America/Noronha'), (b'America/North_Dakota/Beulah', b'America/North_Dakota/Beulah'), (b'America/North_Dakota/Center', b'America/North_Dakota/Center'), (b'America/North_Dakota/New_Salem', b'America/North_Dakota/New_Salem'), (b'America/Ojinaga', b'America/Ojinaga'), (b'America/Panama', b'America/Panama'), (b'America/Pangnirtung', b'America/Pangnirtung'), (b'America/Paramaribo', b'America/Paramaribo'), (b'America/Phoenix', b'America/Phoenix'), (b'America/Port-au-Prince', b'America/Port-au-Prince'), (b'America/Port_of_Spain', b'America/Port_of_Spain'), (b'America/Porto_Acre', b'America/Porto_Acre'), (b'America/Porto_Velho', b'America/Porto_Velho'), (b'America/Puerto_Rico', b'America/Puerto_Rico'), (b'America/Punta_Arenas', b'America/Punta_Arenas'), (b'America/Rainy_River', b'America/Rainy_River'), (b'America/Rankin_Inlet', b'America/Rankin_Inlet'), (b'America/Recife', b'America/Recife'), (b'America/Regina', b'America/Regina'), (b'America/Resolute', b'America/Resolute'), (b'America/Rio_Branco', b'America/Rio_Branco'), (b'America/Rosario', b'America/Rosario'), (b'America/Santa_Isabel', b'America/Santa_Isabel'), (b'America/Santarem', b'America/Santarem'), (b'America/Santiago', b'America/Santiago'), (b'America/Santo_Domingo', b'America/Santo_Domingo'), (b'America/Sao_Paulo', b'America/Sao_Paulo'), (b'America/Scoresbysund', b'America/Scoresbysund'), (b'America/Shiprock', b'America/Shiprock'), (b'America/Sitka', b'America/Sitka'), (b'America/St_Barthelemy', b'America/St_Barthelemy'), (b'America/St_Johns', b'America/St_Johns'), (b'America/St_Kitts', b'America/St_Kitts'), (b'America/St_Lucia', b'America/St_Lucia'), (b'America/St_Thomas', b'America/St_Thomas'), (b'America/St_Vincent', b'America/St_Vincent'), (b'America/Swift_Current', b'America/Swift_Current'), (b'America/Tegucigalpa', b'America/Tegucigalpa'), (b'America/Thule', b'America/Thule'), (b'America/Thunder_Bay', b'America/Thunder_Bay'), (b'America/Tijuana', b'America/Tijuana'), (b'America/Toronto', b'America/Toronto'), (b'America/Tortola', b'America/Tortola'), (b'America/Vancouver', b'America/Vancouver'), (b'America/Virgin', b'America/Virgin'), (b'America/Whitehorse', b'America/Whitehorse'), (b'America/Winnipeg', b'America/Winnipeg'), (b'America/Yakutat', b'America/Yakutat'), (b'America/Yellowknife', b'America/Yellowknife'), (b'Antarctica/Casey', b'Antarctica/Casey'), (b'Antarctica/Davis', b'Antarctica/Davis'), (b'Antarctica/DumontDUrville', b'Antarctica/DumontDUrville'), (b'Antarctica/Macquarie', b'Antarctica/Macquarie'), (b'Antarctica/Mawson', b'Antarctica/Mawson'), (b'Antarctica/McMurdo', b'Antarctica/McMurdo'), (b'Antarctica/Palmer', b'Antarctica/Palmer'), (b'Antarctica/Rothera', b'Antarctica/Rothera'), (b'Antarctica/South_Pole', b'Antarctica/South_Pole'), (b'Antarctica/Syowa', b'Antarctica/Syowa'), (b'Antarctica/Troll', b'Antarctica/Troll'), (b'Antarctica/Vostok', b'Antarctica/Vostok'), (b'Arctic/Longyearbyen', b'Arctic/Longyearbyen'), (b'Asia/Aden', b'Asia/Aden'), (b'Asia/Almaty', b'Asia/Almaty'), (b'Asia/Amman', b'Asia/Amman'), (b'Asia/Anadyr', b'Asia/Anadyr'), (b'Asia/Aqtau', b'Asia/Aqtau'), (b'Asia/Aqtobe', b'Asia/Aqtobe'), (b'Asia/Ashgabat', b'Asia/Ashgabat'), (b'Asia/Ashkhabad', b'Asia/Ashkhabad'), (b'Asia/Atyrau', b'Asia/Atyrau'), (b'Asia/Baghdad', b'Asia/Baghdad'), (b'Asia/Bahrain', b'Asia/Bahrain'), (b'Asia/Baku', b'Asia/Baku'), (b'Asia/Bangkok', b'Asia/Bangkok'), (b'Asia/Barnaul', b'Asia/Barnaul'), (b'Asia/Beirut', b'Asia/Beirut'), (b'Asia/Bishkek', b'Asia/Bishkek'), (b'Asia/Brunei', b'Asia/Brunei'), (b'Asia/Calcutta', b'Asia/Calcutta'), (b'Asia/Chita', b'Asia/Chita'), (b'Asia/Choibalsan', b'Asia/Choibalsan'), (b'Asia/Chongqing', b'Asia/Chongqing'), (b'Asia/Chungking', b'Asia/Chungking'), (b'Asia/Colombo', b'Asia/Colombo'), (b'Asia/Dacca', b'Asia/Dacca'), (b'Asia/Damascus', b'Asia/Damascus'), (b'Asia/Dhaka', b'Asia/Dhaka'), (b'Asia/Dili', b'Asia/Dili'), (b'Asia/Dubai', b'Asia/Dubai'), (b'Asia/Dushanbe', b'Asia/Dushanbe'), (b'Asia/Famagusta', b'Asia/Famagusta'), (b'Asia/Gaza', b'Asia/Gaza'), (b'Asia/Harbin', b'Asia/Harbin'), (b'Asia/Hebron', b'Asia/Hebron'), (b'Asia/Ho_Chi_Minh', b'Asia/Ho_Chi_Minh'), (b'Asia/Hong_Kong', b'Asia/Hong_Kong'), (b'Asia/Hovd', b'Asia/Hovd'), (b'Asia/Irkutsk', b'Asia/Irkutsk'), (b'Asia/Istanbul', b'Asia/Istanbul'), (b'Asia/Jakarta', b'Asia/Jakarta'), (b'Asia/Jayapura', b'Asia/Jayapura'), (b'Asia/Jerusalem', b'Asia/Jerusalem'), (b'Asia/Kabul', b'Asia/Kabul'), (b'Asia/Kamchatka', b'Asia/Kamchatka'), (b'Asia/Karachi', b'Asia/Karachi'), (b'Asia/Kashgar', b'Asia/Kashgar'), (b'Asia/Kathmandu', b'Asia/Kathmandu'), (b'Asia/Katmandu', b'Asia/Katmandu'), (b'Asia/Khandyga', b'Asia/Khandyga'), (b'Asia/Kolkata', b'Asia/Kolkata'), (b'Asia/Krasnoyarsk', b'Asia/Krasnoyarsk'), (b'Asia/Kuala_Lumpur', b'Asia/Kuala_Lumpur'), (b'Asia/Kuching', b'Asia/Kuching'), (b'Asia/Kuwait', b'Asia/Kuwait'), (b'Asia/Macao', b'Asia/Macao'), (b'Asia/Macau', b'Asia/Macau'), (b'Asia/Magadan', b'Asia/Magadan'), (b'Asia/Makassar', b'Asia/Makassar'), (b'Asia/Manila', b'Asia/Manila'), (b'Asia/Muscat', b'Asia/Muscat'), (b'Asia/Nicosia', b'Asia/Nicosia'), (b'Asia/Novokuznetsk', b'Asia/Novokuznetsk'), (b'Asia/Novosibirsk', b'Asia/Novosibirsk'), (b'Asia/Omsk', b'Asia/Omsk'), (b'Asia/Oral', b'Asia/Oral'), (b'Asia/Phnom_Penh', b'Asia/Phnom_Penh'), (b'Asia/Pontianak', b'Asia/Pontianak'), (b'Asia/Pyongyang', b'Asia/Pyongyang'), (b'Asia/Qatar', b'Asia/Qatar'), (b'Asia/Qyzylorda', b'Asia/Qyzylorda'), (b'Asia/Rangoon', b'Asia/Rangoon'), (b'Asia/Riyadh', b'Asia/Riyadh'), (b'Asia/Saigon', b'Asia/Saigon'), (b'Asia/Sakhalin', b'Asia/Sakhalin'), (b'Asia/Samarkand', b'Asia/Samarkand'), (b'Asia/Seoul', b'Asia/Seoul'), (b'Asia/Shanghai', b'Asia/Shanghai'), (b'Asia/Singapore', b'Asia/Singapore'), (b'Asia/Srednekolymsk', b'Asia/Srednekolymsk'), (b'Asia/Taipei', b'Asia/Taipei'), (b'Asia/Tashkent', b'Asia/Tashkent'), (b'Asia/Tbilisi', b'Asia/Tbilisi'), (b'Asia/Tehran', b'Asia/Tehran'), (b'Asia/Tel_Aviv', b'Asia/Tel_Aviv'), (b'Asia/Thimbu', b'Asia/Thimbu'), (b'Asia/Thimphu', b'Asia/Thimphu'), (b'Asia/Tokyo', b'Asia/Tokyo'), (b'Asia/Tomsk', b'Asia/Tomsk'), (b'Asia/Ujung_Pandang', b'Asia/Ujung_Pandang'), (b'Asia/Ulaanbaatar', b'Asia/Ulaanbaatar'), (b'Asia/Ulan_Bator', b'Asia/Ulan_Bator'), (b'Asia/Urumqi', b'Asia/Urumqi'), (b'Asia/Ust-Nera', b'Asia/Ust-Nera'), (b'Asia/Vientiane', b'Asia/Vientiane'), (b'Asia/Vladivostok', b'Asia/Vladivostok'), (b'Asia/Yakutsk', b'Asia/Yakutsk'), (b'Asia/Yangon', b'Asia/Yangon'), (b'Asia/Yekaterinburg', b'Asia/Yekaterinburg'), (b'Asia/Yerevan', b'Asia/Yerevan'), (b'Atlantic/Azores', b'Atlantic/Azores'), (b'Atlantic/Bermuda', b'Atlantic/Bermuda'), (b'Atlantic/Canary', b'Atlantic/Canary'), (b'Atlantic/Cape_Verde', b'Atlantic/Cape_Verde'), (b'Atlantic/Faeroe', b'Atlantic/Faeroe'), (b'Atlantic/Faroe', b'Atlantic/Faroe'), (b'Atlantic/Jan_Mayen', b'Atlantic/Jan_Mayen'), (b'Atlantic/Madeira', b'Atlantic/Madeira'), (b'Atlantic/Reykjavik', b'Atlantic/Reykjavik'), (b'Atlantic/South_Georgia', b'Atlantic/South_Georgia'), (b'Atlantic/St_Helena', b'Atlantic/St_Helena'), (b'Atlantic/Stanley', b'Atlantic/Stanley'), (b'Australia/ACT', b'Australia/ACT'), (b'Australia/Adelaide', b'Australia/Adelaide'), (b'Australia/Brisbane', b'Australia/Brisbane'), (b'Australia/Broken_Hill', b'Australia/Broken_Hill'), (b'Australia/Canberra', b'Australia/Canberra'), (b'Australia/Currie', b'Australia/Currie'), (b'Australia/Darwin', b'Australia/Darwin'), (b'Australia/Eucla', b'Australia/Eucla'), (b'Australia/Hobart', b'Australia/Hobart'), (b'Australia/LHI', b'Australia/LHI'), (b'Australia/Lindeman', b'Australia/Lindeman'), (b'Australia/Lord_Howe', b'Australia/Lord_Howe'), (b'Australia/Melbourne', b'Australia/Melbourne'), (b'Australia/NSW', b'Australia/NSW'), (b'Australia/North', b'Australia/North'), (b'Australia/Perth', b'Australia/Perth'), (b'Australia/Queensland', b'Australia/Queensland'), (b'Australia/South', b'Australia/South'), (b'Australia/Sydney', b'Australia/Sydney'), (b'Australia/Tasmania', b'Australia/Tasmania'), (b'Australia/Victoria', b'Australia/Victoria'), (b'Australia/West', b'Australia/West'), (b'Australia/Yancowinna', b'Australia/Yancowinna'), (b'Brazil/Acre', b'Brazil/Acre'), (b'Brazil/DeNoronha', b'Brazil/DeNoronha'), (b'Brazil/East', b'Brazil/East'), (b'Brazil/West', b'Brazil/West'), (b'CET', b'CET'), (b'CST6CDT', b'CST6CDT'), (b'Canada/Atlantic', b'Canada/Atlantic'), (b'Canada/Central', b'Canada/Central'), (b'Canada/Eastern', b'Canada/Eastern'), (b'Canada/Mountain', b'Canada/Mountain'), (b'Canada/Newfoundland', b'Canada/Newfoundland'), (b'Canada/Pacific', b'Canada/Pacific'), (b'Canada/Saskatchewan', b'Canada/Saskatchewan'), (b'Canada/Yukon', b'Canada/Yukon'), (b'Chile/Continental', b'Chile/Continental'), (b'Chile/EasterIsland', b'Chile/EasterIsland'), (b'Cuba', b'Cuba'), (b'EET', b'EET'), (b'EST', b'EST'), (b'EST5EDT', b'EST5EDT'), (b'Egypt', b'Egypt'), (b'Eire', b'Eire'), (b'Etc/GMT', b'Etc/GMT'), (b'Etc/GMT+0', b'Etc/GMT+0'), (b'Etc/GMT+1', b'Etc/GMT+1'), (b'Etc/GMT+10', b'Etc/GMT+10'), (b'Etc/GMT+11', b'Etc/GMT+11'), (b'Etc/GMT+12', b'Etc/GMT+12'), (b'Etc/GMT+2', b'Etc/GMT+2'), (b'Etc/GMT+3', b'Etc/GMT+3'), (b'Etc/GMT+4', b'Etc/GMT+4'), (b'Etc/GMT+5', b'Etc/GMT+5'), (b'Etc/GMT+6', b'Etc/GMT+6'), (b'Etc/GMT+7', b'Etc/GMT+7'), (b'Etc/GMT+8', b'Etc/GMT+8'), (b'Etc/GMT+9', b'Etc/GMT+9'), (b'Etc/GMT-0', b'Etc/GMT-0'), (b'Etc/GMT-1', b'Etc/GMT-1'), (b'Etc/GMT-10', b'Etc/GMT-10'), (b'Etc/GMT-11', b'Etc/GMT-11'), (b'Etc/GMT-12', b'Etc/GMT-12'), (b'Etc/GMT-13', b'Etc/GMT-13'), (b'Etc/GMT-14', b'Etc/GMT-14'), (b'Etc/GMT-2', b'Etc/GMT-2'), (b'Etc/GMT-3', b'Etc/GMT-3'), (b'Etc/GMT-4', b'Etc/GMT-4'), (b'Etc/GMT-5', b'Etc/GMT-5'), (b'Etc/GMT-6', b'Etc/GMT-6'), (b'Etc/GMT-7', b'Etc/GMT-7'), (b'Etc/GMT-8', b'Etc/GMT-8'), (b'Etc/GMT-9', b'Etc/GMT-9'), (b'Etc/GMT0', b'Etc/GMT0'), (b'Etc/Greenwich', b'Etc/Greenwich'), (b'Etc/UCT', b'Etc/UCT'), (b'Etc/UTC', b'Etc/UTC'), (b'Etc/Universal', b'Etc/Universal'), (b'Etc/Zulu', b'Etc/Zulu'), (b'Europe/Amsterdam', b'Europe/Amsterdam'), (b'Europe/Andorra', b'Europe/Andorra'), (b'Europe/Astrakhan', b'Europe/Astrakhan'), (b'Europe/Athens', b'Europe/Athens'), (b'Europe/Belfast', b'Europe/Belfast'), (b'Europe/Belgrade', b'Europe/Belgrade'), (b'Europe/Berlin', b'Europe/Berlin'), (b'Europe/Bratislava', b'Europe/Bratislava'), (b'Europe/Brussels', b'Europe/Brussels'), (b'Europe/Bucharest', b'Europe/Bucharest'), (b'Europe/Budapest', b'Europe/Budapest'), (b'Europe/Busingen', b'Europe/Busingen'), (b'Europe/Chisinau', b'Europe/Chisinau'), (b'Europe/Copenhagen', b'Europe/Copenhagen'), (b'Europe/Dublin', b'Europe/Dublin'), (b'Europe/Gibraltar', b'Europe/Gibraltar'), (b'Europe/Guernsey', b'Europe/Guernsey'), (b'Europe/Helsinki', b'Europe/Helsinki'), (b'Europe/Isle_of_Man', b'Europe/Isle_of_Man'), (b'Europe/Istanbul', b'Europe/Istanbul'), (b'Europe/Jersey', b'Europe/Jersey'), (b'Europe/Kaliningrad', b'Europe/Kaliningrad'), (b'Europe/Kiev', b'Europe/Kiev'), (b'Europe/Kirov', b'Europe/Kirov'), (b'Europe/Lisbon', b'Europe/Lisbon'), (b'Europe/Ljubljana', b'Europe/Ljubljana'), (b'Europe/London', b'Europe/London'), (b'Europe/Luxembourg', b'Europe/Luxembourg'), (b'Europe/Madrid', b'Europe/Madrid'), (b'Europe/Malta', b'Europe/Malta'), (b'Europe/Mariehamn', b'Europe/Mariehamn'), (b'Europe/Minsk', b'Europe/Minsk'), (b'Europe/Monaco', b'Europe/Monaco'), (b'Europe/Moscow', b'Europe/Moscow'), (b'Europe/Nicosia', b'Europe/Nicosia'), (b'Europe/Oslo', b'Europe/Oslo'), (b'Europe/Paris', b'Europe/Paris'), (b'Europe/Podgorica', b'Europe/Podgorica'), (b'Europe/Prague', b'Europe/Prague'), (b'Europe/Riga', b'Europe/Riga'), (b'Europe/Rome', b'Europe/Rome'), (b'Europe/Samara', b'Europe/Samara'), (b'Europe/San_Marino', b'Europe/San_Marino'), (b'Europe/Sarajevo', b'Europe/Sarajevo'), (b'Europe/Saratov', b'Europe/Saratov'), (b'Europe/Simferopol', b'Europe/Simferopol'), (b'Europe/Skopje', b'Europe/Skopje'), (b'Europe/Sofia', b'Europe/Sofia'), (b'Europe/Stockholm', b'Europe/Stockholm'), (b'Europe/Tallinn', b'Europe/Tallinn'), (b'Europe/Tirane', b'Europe/Tirane'), (b'Europe/Tiraspol', b'Europe/Tiraspol'), (b'Europe/Ulyanovsk', b'Europe/Ulyanovsk'), (b'Europe/Uzhgorod', b'Europe/Uzhgorod'), (b'Europe/Vaduz', b'Europe/Vaduz'), (b'Europe/Vatican', b'Europe/Vatican'), (b'Europe/Vienna', b'Europe/Vienna'), (b'Europe/Vilnius', b'Europe/Vilnius'), (b'Europe/Volgograd', b'Europe/Volgograd'), (b'Europe/Warsaw', b'Europe/Warsaw'), (b'Europe/Zagreb', b'Europe/Zagreb'), (b'Europe/Zaporozhye', b'Europe/Zaporozhye'), (b'Europe/Zurich', b'Europe/Zurich'), (b'GB', b'GB'), (b'GB-Eire', b'GB-Eire'), (b'GMT', b'GMT'), (b'GMT+0', b'GMT+0'), (b'GMT-0', b'GMT-0'), (b'GMT0', b'GMT0'), (b'Greenwich', b'Greenwich'), (b'HST', b'HST'), (b'Hongkong', b'Hongkong'), (b'Iceland', b'Iceland'), (b'Indian/Antananarivo', b'Indian/Antananarivo'), (b'Indian/Chagos', b'Indian/Chagos'), (b'Indian/Christmas', b'Indian/Christmas'), (b'Indian/Cocos', b'Indian/Cocos'), (b'Indian/Comoro', b'Indian/Comoro'), (b'Indian/Kerguelen', b'Indian/Kerguelen'), (b'Indian/Mahe', b'Indian/Mahe'), (b'Indian/Maldives', b'Indian/Maldives'), (b'Indian/Mauritius', b'Indian/Mauritius'), (b'Indian/Mayotte', b'Indian/Mayotte'), (b'Indian/Reunion', b'Indian/Reunion'), (b'Iran', b'Iran'), (b'Israel', b'Israel'), (b'Jamaica', b'Jamaica'), (b'Japan', b'Japan'), (b'Kwajalein', b'Kwajalein'), (b'Libya', b'Libya'), (b'MET', b'MET'), (b'MST', b'MST'), (b'MST7MDT', b'MST7MDT'), (b'Mexico/BajaNorte', b'Mexico/BajaNorte'), (b'Mexico/BajaSur', b'Mexico/BajaSur'), (b'Mexico/General', b'Mexico/General'), (b'NZ', b'NZ'), (b'NZ-CHAT', b'NZ-CHAT'), (b'Navajo', b'Navajo'), (b'PRC', b'PRC'), (b'PST8PDT', b'PST8PDT'), (b'Pacific/Apia', b'Pacific/Apia'), (b'Pacific/Auckland', b'Pacific/Auckland'), (b'Pacific/Bougainville', b'Pacific/Bougainville'), (b'Pacific/Chatham', b'Pacific/Chatham'), (b'Pacific/Chuuk', b'Pacific/Chuuk'), (b'Pacific/Easter', b'Pacific/Easter'), (b'Pacific/Efate', b'Pacific/Efate'), (b'Pacific/Enderbury', b'Pacific/Enderbury'), (b'Pacific/Fakaofo', b'Pacific/Fakaofo'), (b'Pacific/Fiji', b'Pacific/Fiji'), (b'Pacific/Funafuti', b'Pacific/Funafuti'), (b'Pacific/Galapagos', b'Pacific/Galapagos'), (b'Pacific/Gambier', b'Pacific/Gambier'), (b'Pacific/Guadalcanal', b'Pacific/Guadalcanal'), (b'Pacific/Guam', b'Pacific/Guam'), (b'Pacific/Honolulu', b'Pacific/Honolulu'), (b'Pacific/Johnston', b'Pacific/Johnston'), (b'Pacific/Kiritimati', b'Pacific/Kiritimati'), (b'Pacific/Kosrae', b'Pacific/Kosrae'), (b'Pacific/Kwajalein', b'Pacific/Kwajalein'), (b'Pacific/Majuro', b'Pacific/Majuro'), (b'Pacific/Marquesas', b'Pacific/Marquesas'), (b'Pacific/Midway', b'Pacific/Midway'), (b'Pacific/Nauru', b'Pacific/Nauru'), (b'Pacific/Niue', b'Pacific/Niue'), (b'Pacific/Norfolk', b'Pacific/Norfolk'), (b'Pacific/Noumea', b'Pacific/Noumea'), (b'Pacific/Pago_Pago', b'Pacific/Pago_Pago'), (b'Pacific/Palau', b'Pacific/Palau'), (b'Pacific/Pitcairn', b'Pacific/Pitcairn'), (b'Pacific/Pohnpei', b'Pacific/Pohnpei'), (b'Pacific/Ponape', b'Pacific/Ponape'), (b'Pacific/Port_Moresby', b'Pacific/Port_Moresby'), (b'Pacific/Rarotonga', b'Pacific/Rarotonga'), (b'Pacific/Saipan', b'Pacific/Saipan'), (b'Pacific/Samoa', b'Pacific/Samoa'), (b'Pacific/Tahiti', b'Pacific/Tahiti'), (b'Pacific/Tarawa', b'Pacific/Tarawa'), (b'Pacific/Tongatapu', b'Pacific/Tongatapu'), (b'Pacific/Truk', b'Pacific/Truk'), (b'Pacific/Wake', b'Pacific/Wake'), (b'Pacific/Wallis', b'Pacific/Wallis'), (b'Pacific/Yap', b'Pacific/Yap'), (b'Poland', b'Poland'), (b'Portugal', b'Portugal'), (b'ROC', b'ROC'), (b'ROK', b'ROK'), (b'Singapore', b'Singapore'), (b'Turkey', b'Turkey'), (b'UCT', b'UCT'), (b'US/Alaska', b'US/Alaska'), (b'US/Aleutian', b'US/Aleutian'), (b'US/Arizona', b'US/Arizona'), (b'US/Central', b'US/Central'), (b'US/East-Indiana', b'US/East-Indiana'), (b'US/Eastern', b'US/Eastern'), (b'US/Hawaii', b'US/Hawaii'), (b'US/Indiana-Starke', b'US/Indiana-Starke'), (b'US/Michigan', b'US/Michigan'), (b'US/Mountain', b'US/Mountain'), (b'US/Pacific', b'US/Pacific'), (b'US/Pacific-New', b'US/Pacific-New'), (b'US/Samoa', b'US/Samoa'), (b'UTC', b'UTC'), (b'Universal', b'Universal'), (b'W-SU', b'W-SU'), (b'WET', b'WET'), (b'Zulu', b'Zulu')], default=b'UTC', max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Test',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('target_start', models.DateTimeField()),
                ('target_end', models.DateTimeField()),
                ('estimated_time', models.TimeField(blank=True, editable=False, null=True)),
                ('actual_time', models.TimeField(blank=True, editable=False, null=True)),
                ('percent_complete', models.IntegerField(blank=True, null=True)),
                ('engagement', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='dojo.Engagement')),
                ('environment', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='dojo.Development_Environment')),
            ],
        ),
        migrations.CreateModel(
            name='Test_Type',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('static_tool', models.BooleanField(default=False)),
                ('dynamic_tool', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Tool_Configuration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.CharField(blank=True, max_length=2000, null=True)),
                ('url', models.CharField(max_length=2000, null=True)),
                ('authentication_type', models.CharField(blank=True, choices=[(b'API', b'API Key'), (b'Password', b'Username/Password'), (b'SSH', b'SSH')], max_length=15, null=True)),
                ('username', models.CharField(blank=True, max_length=200, null=True)),
                ('password', models.CharField(blank=True, max_length=600, null=True)),
                ('auth_title', models.CharField(blank=True, max_length=200, null=True, verbose_name=b'Title for SSH/API Key')),
                ('ssh', models.CharField(blank=True, max_length=6000, null=True)),
                ('api_key', models.CharField(blank=True, max_length=600, null=True, verbose_name=b'API Key')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Tool_Product_History',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_scan', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('succesfull', models.BooleanField(default=True, verbose_name=b'Succesfully')),
                ('configuration_details', models.CharField(blank=True, max_length=2000, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Tool_Product_Settings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.CharField(blank=True, max_length=2000, null=True)),
                ('url', models.CharField(blank=True, max_length=2000, null=True)),
                ('tool_project_id', models.CharField(blank=True, max_length=200, null=True)),
                ('notes', models.ManyToManyField(blank=True, editable=False, to='dojo.Notes')),
                ('product', models.ForeignKey(default=1, editable=False, on_delete=django.db.models.deletion.CASCADE, to='dojo.Product')),
                ('tool_configuration', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tool_configuration', to='dojo.Tool_Configuration')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Tool_Type',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.CharField(max_length=2000, null=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='UserContactInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=150, null=True)),
                ('phone_number', models.CharField(blank=True, help_text=b"Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", max_length=15, validators=[django.core.validators.RegexValidator(message=b"Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex=b'^\\+?1?\\d{9,15}$')])),
                ('cell_number', models.CharField(blank=True, help_text=b"Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", max_length=15, validators=[django.core.validators.RegexValidator(message=b"Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex=b'^\\+?1?\\d{9,15}$')])),
                ('twitter_username', models.CharField(blank=True, max_length=150, null=True)),
                ('github_username', models.CharField(blank=True, max_length=150, null=True)),
                ('slack_username', models.CharField(blank=True, max_length=150, null=True)),
                ('hipchat_username', models.CharField(blank=True, max_length=150, null=True)),
                ('block_execution', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='VA',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.TextField(default=b'none', editable=False)),
                ('status', models.BooleanField(default=False, editable=False)),
                ('start', models.CharField(max_length=100)),
                ('result', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to='dojo.Test')),
            ],
        ),
        migrations.CreateModel(
            name='Dojo_User',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
            },
            bases=('auth.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name='va',
            name='user',
            field=models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='usercontactinfo',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='tool_product_history',
            name='product',
            field=models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='dojo.Tool_Product_Settings'),
        ),
        migrations.AddField(
            model_name='tool_configuration',
            name='tool_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tool_type', to='dojo.Tool_Type'),
        ),
        migrations.AddField(
            model_name='test',
            name='lead',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='test',
            name='notes',
            field=models.ManyToManyField(blank=True, editable=False, to='dojo.Notes'),
        ),
        migrations.AddField(
            model_name='test',
            name='test_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dojo.Test_Type'),
        ),
        migrations.AddField(
            model_name='stub_finding',
            name='reporter',
            field=models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='stub_finding',
            name='test',
            field=models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='dojo.Test'),
        ),
        migrations.AddField(
            model_name='scansettings',
            name='user',
            field=models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='scan',
            name='scan_settings',
            field=models.ForeignKey(default=1, editable=False, on_delete=django.db.models.deletion.CASCADE, to='dojo.ScanSettings'),
        ),
        migrations.AddField(
            model_name='risk_acceptance',
            name='reporter',
            field=models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='report',
            name='requester',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='product',
            name='authorized_users',
            field=models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='product',
            name='prod_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='prod_type', to='dojo.Product_Type'),
        ),
        migrations.AddField(
            model_name='product',
            name='product_manager',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='product_manager', to='dojo.Dojo_User'),
        ),
        migrations.AddField(
            model_name='product',
            name='team_manager',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='team_manager', to='dojo.Dojo_User'),
        ),
        migrations.AddField(
            model_name='product',
            name='technical_contact',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='technical_contact', to='dojo.Dojo_User'),
        ),
        migrations.AddField(
            model_name='notifications',
            name='user',
            field=models.ForeignKey(default=None, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='notes',
            name='author',
            field=models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='languages',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dojo.Product'),
        ),
        migrations.AddField(
            model_name='languages',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='jira_pkey',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dojo.Product'),
        ),
        migrations.AddField(
            model_name='ipscan',
            name='scan',
            field=models.ForeignKey(default=1, editable=False, on_delete=django.db.models.deletion.CASCADE, to='dojo.Scan'),
        ),
        migrations.AddField(
            model_name='findingimageaccesstoken',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='finding',
            name='defect_review_requested_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='defect_review_requested_by', to='dojo.Dojo_User'),
        ),
        migrations.AddField(
            model_name='finding',
            name='duplicate_finding',
            field=models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='original_finding', to='dojo.Finding'),
        ),
        migrations.AddField(
            model_name='finding',
            name='duplicate_list',
            field=models.ManyToManyField(blank=True, editable=False, related_name='_finding_duplicate_list_+', to='dojo.Finding'),
        ),
        migrations.AddField(
            model_name='finding',
            name='endpoints',
            field=models.ManyToManyField(blank=True, to='dojo.Endpoint'),
        ),
        migrations.AddField(
            model_name='finding',
            name='found_by',
            field=models.ManyToManyField(editable=False, to='dojo.Test_Type'),
        ),
        migrations.AddField(
            model_name='finding',
            name='images',
            field=models.ManyToManyField(blank=True, to='dojo.FindingImage'),
        ),
        migrations.AddField(
            model_name='finding',
            name='last_reviewed_by',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='last_reviewed_by', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='finding',
            name='mitigated_by',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='mitigated_by', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='finding',
            name='notes',
            field=models.ManyToManyField(blank=True, editable=False, to='dojo.Notes'),
        ),
        migrations.AddField(
            model_name='finding',
            name='reporter',
            field=models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='reporter', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='finding',
            name='review_requested_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='review_requested_by', to='dojo.Dojo_User'),
        ),
        migrations.AddField(
            model_name='finding',
            name='reviewers',
            field=models.ManyToManyField(blank=True, to='dojo.Dojo_User'),
        ),
        migrations.AddField(
            model_name='finding',
            name='test',
            field=models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='dojo.Test'),
        ),
        migrations.AddField(
            model_name='engagement',
            name='eng_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dojo.Engagement_Type'),
        ),
        migrations.AddField(
            model_name='engagement',
            name='lead',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='engagement',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dojo.Product'),
        ),
        migrations.AddField(
            model_name='engagement',
            name='report_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dojo.Report_Type'),
        ),
        migrations.AddField(
            model_name='engagement',
            name='requester',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dojo.Contact'),
        ),
        migrations.AddField(
            model_name='engagement',
            name='risk_acceptance',
            field=models.ManyToManyField(blank=True, default=None, editable=False, to='dojo.Risk_Acceptance'),
        ),
        migrations.AddField(
            model_name='endpoint',
            name='product',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dojo.Product'),
        ),
        migrations.AddField(
            model_name='cred_user',
            name='environment',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dojo.Development_Environment'),
        ),
        migrations.AddField(
            model_name='cred_user',
            name='notes',
            field=models.ManyToManyField(blank=True, editable=False, to='dojo.Notes'),
        ),
        migrations.AddField(
            model_name='cred_mapping',
            name='cred_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cred_user', to='dojo.Cred_User', verbose_name=b'Credential'),
        ),
        migrations.AddField(
            model_name='cred_mapping',
            name='engagement',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='engagement', to='dojo.Engagement'),
        ),
        migrations.AddField(
            model_name='cred_mapping',
            name='finding',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='finding', to='dojo.Finding'),
        ),
        migrations.AddField(
            model_name='cred_mapping',
            name='product',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='product', to='dojo.Product'),
        ),
        migrations.AddField(
            model_name='cred_mapping',
            name='test',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='test', to='dojo.Test'),
        ),
        migrations.AddField(
            model_name='check_list',
            name='auth_issues',
            field=models.ManyToManyField(blank=True, related_name='auth_issues', to='dojo.Finding'),
        ),
        migrations.AddField(
            model_name='check_list',
            name='author_issues',
            field=models.ManyToManyField(blank=True, related_name='author_issues', to='dojo.Finding'),
        ),
        migrations.AddField(
            model_name='check_list',
            name='config_issues',
            field=models.ManyToManyField(blank=True, related_name='config_issues', to='dojo.Finding'),
        ),
        migrations.AddField(
            model_name='check_list',
            name='crypto_issues',
            field=models.ManyToManyField(blank=True, related_name='crypto_issues', to='dojo.Finding'),
        ),
        migrations.AddField(
            model_name='check_list',
            name='data_issues',
            field=models.ManyToManyField(blank=True, related_name='data_issues', to='dojo.Finding'),
        ),
        migrations.AddField(
            model_name='check_list',
            name='engagement',
            field=models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='eng_for_check', to='dojo.Engagement'),
        ),
        migrations.AddField(
            model_name='check_list',
            name='other_issues',
            field=models.ManyToManyField(blank=True, related_name='other_issues', to='dojo.Finding'),
        ),
        migrations.AddField(
            model_name='check_list',
            name='sensitive_issues',
            field=models.ManyToManyField(blank=True, related_name='sensitive_issues', to='dojo.Finding'),
        ),
        migrations.AddField(
            model_name='check_list',
            name='session_issues',
            field=models.ManyToManyField(blank=True, related_name='session_issues', to='dojo.Finding'),
        ),
        migrations.AddField(
            model_name='burprawrequestresponse',
            name='finding',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dojo.Finding'),
        ),
        migrations.AddField(
            model_name='app_analysis',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dojo.Product'),
        ),
        migrations.AddField(
            model_name='app_analysis',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='alerts',
            name='user_id',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
    ]
