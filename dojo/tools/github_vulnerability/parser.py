import json

from dojo.models import Finding


class GithubVulnerabilityParser(object):

    def get_scan_types(self):
        return ["Github Vulnerability Scan"]

    def get_label_for_scan_types(self, scan_type):
        return scan_type  # no custom label for now

    def get_description_for_scan_types(self, scan_type):
        return "Import vulnerabilities from Github API."

    def get_findings(self, filename, test):

        if filename is None:
            return

        tree = filename.read()
        try:
            data = json.loads(str(tree, "utf-8"))
        except:
            data = json.loads(tree)

        # When doing dictionary, we can detect duplications
        dupes = dict()

        try:
            vulnerability = data['data']['search']['nodes']
        except (KeyError, StopIteration):
            return

        # Early exit if empty
        if vulnerability is None:
            return

        # Trying to add all possible details
        for items in vulnerability:

            # Skip the findings if None returned
            if items is None:
                continue

            for alerts in items['vulnerabilityAlerts']['nodes']:
                title = ""
                sev = ""
                findingdetail = ""
                mitigation = ""
                impact = ""
                references = ""
                static_finding = True
                summary = ""
                idkey = ""

                idkey += alerts['id']
                title += alerts['securityVulnerability']['package']['name']
                findingdetail += alerts['securityVulnerability']['advisory']['description']
                summary += alerts['securityVulnerability']['advisory']['summary']
                mitigation += alerts['securityVulnerability']['advisory']['references'][0]['url']
                sev = transpose_severity(alerts['securityVulnerability']['severity'])
                references = str(alerts['securityVulnerability']['advisory']['identifiers'])

                dupe_key = idkey

                if dupe_key in dupes:
                    find = dupes[dupe_key]
                else:
                    dupes[dupe_key] = True

                    find = Finding(
                        title=title,
                        test=test,
                        active=False,
                        verified=False,
                        description=findingdetail,
                        severity=sev,
                        numerical_severity=Finding.get_numerical_severity(sev),
                        mitigation=mitigation,
                        impact=summary,
                        references=references,
                        file_path=filename,
                        url="N/A",
                        static_finding=True,
                    )

                    dupes[dupe_key] = find
                    findingdetail = ""

        return list(dupes.values())


def transpose_severity(severity):
    if (severity == "MODERATE"):
        return "Medium"
    else:
        return severity.title()
