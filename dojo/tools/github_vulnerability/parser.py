import json
import dateutil
from cvss import parser as cvss_parser
from dojo.models import Finding

class GithubVulnerabilityParser:
    def get_scan_types(self):
        return ["Github Vulnerability Scan"]

    def get_label_for_scan_types(self, scan_type):
        return scan_type

    def get_description_for_scan_types(self, scan_type):
        return "Import vulnerabilities from Github API (GraphQL Query)"

    def get_findings(self, filename, test):
        data = json.load(filename)
        # SCA: GraphQL vulnerabilityAlerts flow
        if "data" in data:
            alerts = self._search_vulnerability_alerts(data["data"])
            if not alerts:
                raise ValueError("Invalid report, no 'vulnerabilityAlerts' node found")
            repo = data["data"].get("repository", {})
            repo_url = repo.get("url") or (
                f"https://github.com/{repo.get('nameWithOwner')}"
                if repo.get("nameWithOwner") else None
            )

            dupes = {}
            for alert in alerts.get("nodes", []):
                summary = alert["securityVulnerability"]["advisory"]["summary"]
                desc = alert["securityVulnerability"]["advisory"]["description"]
                if alert.get("number") and repo_url:
                    link = f"{repo_url}/security/dependabot/{alert['number']}"
                    desc = f"[{link}]({link})\n" + desc

                finding = Finding(
                    title=summary,
                    test=test,
                    description=desc,
                    severity=self._convert_security(
                        alert["securityVulnerability"].get("severity", "MODERATE")
                    ),
                    static_finding=True,
                    dynamic_finding=False,
                    unique_id_from_tool=alert.get("id"),
                )

                # optional fields
                if alert.get("vulnerableManifestPath"):
                    finding.file_path = alert["vulnerableManifestPath"]
                if alert.get("vulnerableRequirements", '').startswith("= "):
                    finding.component_version = alert["vulnerableRequirements"][2:]
                if alert.get("createdAt"):
                    finding.date = dateutil.parser.parse(alert["createdAt"])
                if alert.get("state") in ("FIXED", "DISMISSED"):
                    finding.active = False
                    finding.is_mitigated = True
                pkg = alert["securityVulnerability"].get("package") or {}
                finding.component_name = pkg.get("name")

                # references
                refs = alert["securityVulnerability"]["advisory"].get("references", [])
                if refs:
                    finding.references = '\r\n'.join(r.get("url") for r in refs if r.get("url"))

                # identifiers
                ids = [i.get("value") for i in alert["securityVulnerability"]["advisory"].get("identifiers", []) if i.get("value")]
                if ids:
                    finding.unsaved_vulnerability_ids = ids

                # cvss
                cvss_info = alert["securityVulnerability"]["advisory"].get("cvss", {})
                if cvss_info.get("score") is not None:
                    finding.cvssv3_score = cvss_info.get("score")
                vec = cvss_info.get("vectorString")
                if vec:
                    objs = cvss_parser.parse_cvss_from_text(vec)
                    if objs:
                        finding.cvssv3 = objs[0].clean_vector()

                # cwe
                cwes = alert["securityVulnerability"]["advisory"].get("cwes", {}).get("nodes", [])
                if cwes:
                    cwe_id = cwes[0].get("cweId", "")[4:]
                    if cwe_id.isdigit():
                        finding.cwe = int(cwe_id)

                # dedupe
                dupe_key = finding.unique_id_from_tool
                if dupe_key in dupes:
                    dupes[dupe_key].nb_occurences += 1
                else:
                    dupes[dupe_key] = finding

            return list(dupes.values())

        # not SCA data -> no findings
        return []

    def _search_vulnerability_alerts(self, data):
        if isinstance(data, dict):
            if "vulnerabilityAlerts" in data:
                return data["vulnerabilityAlerts"]
            for v in data.values():
                res = self._search_vulnerability_alerts(v)
                if res:
                    return res
        elif isinstance(data, list):
            for item in data:
                res = self._search_vulnerability_alerts(item)
                if res:
                    return res
        return None

    def _convert_security(self, val):
        return "Medium" if val.lower() == "moderate" else val.title()