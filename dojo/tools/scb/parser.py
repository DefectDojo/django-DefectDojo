import hashlib
import json
from urllib.parse import urlparse
from dojo.models import Endpoint, Finding


class SCBParser(object):
    """
    importing Findings generated by https://github.com/secureCodeBox/secureCodeBox
    """

    def get_scan_types(self):
        return ["SCB Scan"]

    def get_label_for_scan_types(self, scan_type):
        return "SCB Scan"

    def get_description_for_scan_types(self, scan_type):
        return "SCB report file can be imported in JSON format."

    def get_findings(self, file, test):
        if file is None:
            return []
        dupes = dict()
        try:
            data = file.read()
            tree = json.loads(str(data, 'utf-8'))
        except:
            try:
                tree = json.loads(data)
            except BaseException as exc:
                raise ValueError("file is not valid json") from exc
        for idx, content in enumerate(tree):
            finding = Finding(
                static_finding=True, dynamic_finding=False, active=False, verified=False)
            node = tree[idx]
            self.set_finding_base_info(finding, node, test)
            dupe_key = hashlib.md5(
                str(xstr(finding.description) + xstr(finding.title)).encode('utf-8')).hexdigest()
            if not dupe_key in dupes:
                self.set_finding_endpoint(finding, node)
                dupes[dupe_key] = finding
        return list(dupes.values())

    def set_finding_endpoint(self, finding, node):
        finding.unsaved_endpoints = list()
        endpoint = Endpoint()
        url = node['location']
        parsedUrl = urlparse(url)
        endpoint.protocol = parsedUrl.scheme
        endpoint.query = parsedUrl.query
        endpoint.fragment = parsedUrl.fragment
        endpoint.path = parsedUrl.path
        try:
            (endpoint.host, port) = parsedUrl.netloc.split(':')
            endpoint.port = int(port)
        except:
            endpoint.host = parsedUrl.netloc
            endpoint.port = None
        if 'attributes' in node:
            attributes = node['attributes']
            # override if present in attributes
            endpoint.host = attributes.get('hostname', endpoint.host)
            # override if present in attributes
            endpoint.port = attributes.get('port', endpoint.port)
            # override if present in attributes
            endpoint.protocol = attributes.get('protocol', endpoint.protocol)
        finding.unsaved_endpoints.append(endpoint)

    def set_finding_base_info(self, finding, node, test):
        finding.title = node.get('name')
        finding.description = node.get('description')
        finding.severity = self.get_severity(node.get('severity'))
        finding.numerical_severity = Finding.get_numerical_severity(
            finding.severity)
        finding.test = test

    def get_severity(self, severity):
        if severity == "LOW":
            return "Low"
        elif severity == "MEDIUM":
            return "Medium"
        elif severity == "HIGH":
            return "High"
        else:
            return "Info"


def xstr(s):
    if s is None:
        return ''
    return str(s)
