# Generated by Django 5.1.11 on 2025-08-29 19:28

import django.core.validators
import django.db.models.deletion
import dojo.base_models.validators
import dojo.location.types.url.validators
import tagulous.models.fields
import tagulous.models.models
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('dojo', '0242_file_upload_cleanup'),
    ]

    operations = [
        migrations.AddField(
            model_name='finding',
            name='updated',
            field=models.DateTimeField(auto_now=True, help_text='Time that the object was most recently saved to the database', null=True, verbose_name='Updated'),
        ),
        migrations.AlterField(
            model_name='engagement',
            name='created',
            field=models.DateTimeField(auto_now_add=True, help_text='Time that the object was initially created, and saved to the database', null=True, verbose_name='Created'),
        ),
        migrations.AlterField(
            model_name='engagement',
            name='status',
            field=models.CharField(choices=[('Not Started', 'Not Started'), ('Blocked', 'Blocked'), ('Cancelled', 'Cancelled'), ('Completed', 'Completed'), ('In Progress', 'In Progress'), ('On Hold', 'On Hold'), ('Waiting for Resource', 'Waiting for Resource')], default='Not Started', max_length=2000, null=True),
        ),
        migrations.AlterField(
            model_name='engagement',
            name='updated',
            field=models.DateTimeField(auto_now=True, help_text='Time that the object was most recently saved to the database', null=True, verbose_name='Updated'),
        ),
        migrations.AlterField(
            model_name='finding',
            name='created',
            field=models.DateTimeField(auto_now_add=True, help_text='Time that the object was initially created, and saved to the database', null=True, verbose_name='Created'),
        ),
        migrations.AlterField(
            model_name='product',
            name='created',
            field=models.DateTimeField(auto_now_add=True, help_text='Time that the object was initially created, and saved to the database', null=True, verbose_name='Created'),
        ),
        migrations.AlterField(
            model_name='product',
            name='updated',
            field=models.DateTimeField(auto_now=True, help_text='Time that the object was most recently saved to the database', null=True, verbose_name='Updated'),
        ),
        migrations.AlterField(
            model_name='product_type',
            name='created',
            field=models.DateTimeField(auto_now_add=True, help_text='Time that the object was initially created, and saved to the database', null=True, verbose_name='Created'),
        ),
        migrations.AlterField(
            model_name='product_type',
            name='updated',
            field=models.DateTimeField(auto_now=True, help_text='Time that the object was most recently saved to the database', null=True, verbose_name='Updated'),
        ),
        migrations.CreateModel(
            name='Tagulous_Location_tags',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('slug', models.SlugField()),
                ('count', models.IntegerField(default=0, help_text='Internal counter of how many times this tag is in use')),
                ('protected', models.BooleanField(default=False, help_text='Will not be deleted when the count reaches 0')),
            ],
            options={
                'ordering': ('name',),
                'abstract': False,
                'unique_together': {('slug',)},
            },
            bases=(tagulous.models.models.BaseTagModel, models.Model),
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Time that the object was initially created, and saved to the database', null=True, verbose_name='Created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Time that the object was most recently saved to the database', null=True, verbose_name='Updated')),
                ('location_type', models.CharField(editable=False, help_text='The type of location that is stored', max_length=12, validators=[dojo.base_models.validators.validate_not_empty], verbose_name='Location type')),
                ('location_value', models.CharField(editable=False, help_text='The string representation of a given location. This field is automatically managed', max_length=2048, validators=[dojo.base_models.validators.validate_not_empty], verbose_name='Location Value')),
                ('tags', tagulous.models.fields.TagField(_set_tag_meta=True, blank=True, force_lowercase=True, help_text='A tag that can be used to differentiate a Location', related_name='location_tags', to='dojo.tagulous_location_tags', verbose_name='Tags')),
            ],
            options={
                'verbose_name': 'Locations - Location',
                'verbose_name_plural': 'Locations - Locations',
            },
        ),
        migrations.CreateModel(
            name='URL',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('protocol', models.CharField(blank=True, default='tcp', help_text='The protocol of the URL (e.g., http, https, ftp, etc.)', max_length=10, validators=[dojo.location.types.url.validators.validate_protocol])),
                ('user_info', models.CharField(blank=True, help_text='Connection details for a given user', max_length=512, validators=[dojo.location.types.url.validators.validate_user_info])),
                ('host', models.CharField(help_text='The host of the URL, which can be a domain name or an IP address', max_length=256, validators=[dojo.base_models.validators.validate_not_empty])),
                ('port', models.PositiveIntegerField(blank=True, help_text='The port number of the URL (optional)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(65535)])),
                ('path', models.CharField(blank=True, default='/', help_text='The path of the URL (optional),', max_length=2048)),
                ('query', models.CharField(blank=True, help_text='The query string of the URL (optional)', max_length=2048, validators=[dojo.location.types.url.validators.validate_query])),
                ('fragment', models.CharField(blank=True, help_text='The fragment identifier of the URL (optional)', max_length=2048, validators=[dojo.location.types.url.validators.validate_fragment])),
                ('host_validation_failure', models.BooleanField(default=False, help_text='Dictates whether the endpoint was found to have host validation issues during creation')),
                ('location', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s', to='dojo.location')),
            ],
            options={
                'verbose_name': 'Locations - URL',
                'verbose_name_plural': 'Locations - URLs',
            },
        ),
        migrations.CreateModel(
            name='LocationFindingReference',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Time that the object was initially created, and saved to the database', null=True, verbose_name='Created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Time that the object was most recently saved to the database', null=True, verbose_name='Updated')),
                ('audit_time', models.DateTimeField(blank=True, editable=False, null=True)),
                ('status', models.CharField(choices=[('Active', 'Active'), ('Mitigated', 'Mitigated'), ('FalsePositive', 'False Positive'), ('RiskExcepted', 'Risk Excepted'), ('OutOfScope', 'Out Of Scope')], default='Active', help_text='The status of the the given Location', max_length=16, validators=[dojo.base_models.validators.validate_not_empty], verbose_name='Status')),
                ('auditor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, to='dojo.dojo_user')),
                ('finding', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='findings', to='dojo.finding')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='finding_locations', to='dojo.location')),
            ],
            options={
                'verbose_name': 'Locations - FindingReference',
                'verbose_name_plural': 'Locations - FindingReferences',
                'indexes': [models.Index(fields=['location'], name='dojo_locati_locatio_b2391a_idx'), models.Index(fields=['finding'], name='dojo_locati_finding_37bd65_idx')],
                'constraints': [models.UniqueConstraint(fields=('location', 'finding'), name='unique_location_and_finding')],
            },
        ),
        migrations.CreateModel(
            name='LocationProductReference',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Time that the object was initially created, and saved to the database', null=True, verbose_name='Created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Time that the object was most recently saved to the database', null=True, verbose_name='Updated')),
                ('status', models.CharField(choices=[('Active', 'Active'), ('Mitigated', 'Mitigated')], default='Mitigated', help_text='The status of the the given Location', max_length=16, validators=[dojo.base_models.validators.validate_not_empty], verbose_name='Status')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_locations', to='dojo.location')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='products', to='dojo.product')),
            ],
            options={
                'verbose_name': 'Locations - ProductReference',
                'verbose_name_plural': 'Locations - ProductReferences',
                'indexes': [models.Index(fields=['location'], name='dojo_locati_locatio_98e7c1_idx'), models.Index(fields=['product'], name='dojo_locati_product_9210d6_idx')],
                'constraints': [models.UniqueConstraint(fields=('location', 'product'), name='unique_location_and_product')],
            },
        ),
        migrations.AddIndex(
            model_name='location',
            index=models.Index(fields=['location_type'], name='dojo_locati_locatio_72369b_idx'),
        ),
        migrations.AddIndex(
            model_name='location',
            index=models.Index(fields=['location_value'], name='dojo_locati_locatio_e7d251_idx'),
        ),
        migrations.AddIndex(
            model_name='url',
            index=models.Index(fields=['host'], name='dojo_url_host_b469c8_idx'),
        ),
    ]
