# Generated by Django 4.1.13 on 2024-01-17 03:07

from django.db import migrations, models
from django.utils import timezone
from datetime import datetime, timedelta
from django.conf import settings
from dateutil.relativedelta import relativedelta
import logging

logger = logging.getLogger(__name__)


def get_work_days(start, end):
    """
    Duplicate of utility function 'get_work_days' at the time of migration creation.
    """
    if start.weekday() > 4:
        start = start + timedelta(days=7 - start.weekday())

    if end.weekday() > 4:
        end = end - timedelta(days=end.weekday() - 4)

    if start > end:
        return 0

    diff_days = (end - start).days + 1
    weeks = int(diff_days / 7)

    remainder = end.weekday() - start.weekday() + 1

    if remainder != 0 and end.weekday() < start.weekday():
        remainder = 5 + remainder

    return weeks * 5 + remainder


def calculate_sla_expiration_dates(apps, schema_editor):
    System_Settings = apps.get_model('dojo', 'System_Settings')

    ss, _ = System_Settings.objects.get_or_create()
    if ss.enable_finding_sla:
        logger.info('Calculating SLA expiration dates for all findings')

        SLA_Configuration = apps.get_model('dojo', 'SLA_Configuration')
        Product = apps.get_model('dojo', 'Product')
        Finding = apps.get_model('dojo', 'Finding')

        findings = Finding.objects.order_by('id').only('id', 'sla_start_date', 'date', 'severity', 'test', 'mitigated')

        page_size = 1000
        total_count = Finding.objects.filter(id__gt=0).count()
        logger.debug('Found %d findings to be updated', total_count)

        i = 0
        batch = []
        last_id = 0
        total_pages = (total_count // page_size) + 2
        for p in range(1, total_pages):
            page = findings.filter(id__gt=last_id)[:page_size]
            for find in page:
                i += 1
                last_id = find.id

                start_date = find.sla_start_date if find.sla_start_date else find.date

                sla_config = SLA_Configuration.objects.filter(id=find.test.engagement.product.sla_configuration_id).first()
                sla_period = getattr(sla_config, find.severity.lower(), None)

                days = None
                if settings.SLA_BUSINESS_DAYS:
                    if find.mitigated:
                        days = get_work_days(find.date, find.mitigated.date())
                    else:
                        days = get_work_days(find.date, timezone.now().date())
                else:
                    if isinstance(start_date, datetime):
                        start_date = start_date.date()

                    if find.mitigated:
                        days = (find.mitigated.date() - start_date).days
                    else:
                        days = (timezone.now().date() - start_date).days

                days = days if days > 0 else 0

                days_remaining = None
                if sla_period:
                    days_remaining = sla_period - days

                if days_remaining:
                    if find.mitigated:
                        find.sla_expiration_date = find.mitigated.date() + relativedelta(days=days_remaining)
                    else:
                        find.sla_expiration_date = timezone.now().date() + relativedelta(days=days_remaining)

                batch.append(find)

                if (i > 0 and i % page_size == 0):
                    Finding.objects.bulk_update(batch, ['sla_expiration_date'])
                    batch = []
                    logger.info('%s out of %s findings processed...', i, total_count)

        Finding.objects.bulk_update(batch, ['sla_expiration_date'])
        batch = []
        logger.info('%s out of %s findings processed...', i, total_count)


class Migration(migrations.Migration):

    dependencies = [
        ('dojo', '0199_whitesource_to_mend'),
    ]

    operations = [
        migrations.AddField(
            model_name='finding',
            name='sla_expiration_date',
            field=models.DateField(blank=True, help_text="(readonly)The date SLA expires for this finding. Empty by default, causing a fallback to 'date'.", null=True, verbose_name='SLA Expiration Date'),
        ),
        migrations.RunPython(calculate_sla_expiration_dates, migrations.RunPython.noop),
        migrations.AddField(
            model_name='product',
            name='async_updating',
            field=models.BooleanField(default=False, help_text='Findings under this SLA configuration are asynchronously being updated'),
        ),
        migrations.AddField(
            model_name='sla_configuration',
            name='async_updating',
            field=models.BooleanField(default=False, help_text='Findings under this SLA configuration are asynchronously being updated'),
        ),
    ]
