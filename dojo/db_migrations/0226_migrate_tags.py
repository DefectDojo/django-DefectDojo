# Generated by Django 5.0.8 on 2024-09-12 18:22

import logging
from django.db import migrations
from django.db.models import Q

logger = logging.getLogger(__name__)

model_names = [
    "Product",
    "Endpoint",
    "Engagement",
    "Test",
    "Finding",
    "Finding_Template",
    "App_Analysis",
    "Objects_Product",
]


def clean_tag_value(tag: str) -> str:
    """
    Clean each tag value by:
    - Converting all commas to hyphens
    - Converting all spaces to underscores
    - Removing all single/double quotes
    """
    return (
        tag.replace(",", "-")
        .replace(" ", "_")
        .replace('"', "")
        .replace("'", "")
    )


def clean_all_tag_fields(apps, schema_editor):
    updated_count = {}
    # Iterate over each model in the app
    for model_name in model_names:
        TaggedModel = apps.get_model("dojo", model_name)
        for field_name in ["tags", "inherited_tags"]:
            # Make sure we have a field to work with here
            try:
                _field = TaggedModel._meta.get_field(field_name)
            except Exception:
                continue
            # Only query objects with tags that are in violation and need to be changed
            dirty_tag_q = (
                Q(**{f"{field_name}__name__icontains": ","})
                | Q(**{f"{field_name}__name__icontains": " "})
                | Q(**{f"{field_name}__name__icontains": '"'})
                | Q(**{f"{field_name}__name__icontains": "'"})
            )
            count = 0
            # Iterate over each instance that meets the criteria
            for instance in (
                TaggedModel.objects.filter(dirty_tag_q).distinct().iterator()
            ):
                # Make sure have a tag field first. If not, move on
                if (
                    tag_manager := getattr(instance, field_name, None)
                ) is None or not hasattr(tag_manager, "all"):
                    continue
                # Ensure we actually have some tags to work with here
                if not (raw_tags := list(tag_manager.all().only("name"))):
                    continue
                # Clean the tags, and if we still have something, set it through the manager
                if cleaned := [clean_tag_value(tag.name) for tag in raw_tags]:
                    tag_manager.set(cleaned, clear=True)
                    count += 1
            # Record any changes made to a given model
            if count:
                updated_count[f"{TaggedModel.__name__}.{field_name}"] = count
    # Log summary
    logger.info("=== Tag Cleanup Summary ===")
    for key, value in updated_count.items():
        logger.info(f"{key}: {value} instances updated")


def cannot_turn_back_time(apps, schema_editor):
    """
    We cannot possibly return to the original state without knowing
    the original value at the time the migration is revoked. Instead
    we will do nothing.
    """
    pass


class Migration(migrations.Migration):
    dependencies = [
        ("dojo", "0225_alter_product_revenue"),
    ]

    operations = [
        migrations.RunPython(clean_all_tag_fields, cannot_turn_back_time),
    ]
