# Generated by Django 4.1.13 on 2024-01-10 22:17

from django.db import migrations, models
from django.utils import timezone
from datetime import datetime, timedelta
from django.conf import settings
from dateutil.relativedelta import relativedelta


def get_work_days(start, end):
    """
    Duplicate of utility function 'get_work_days' at the time of migration creation.
    """
    if start.weekday() > 4:
        start = start + timedelta(days=7 - start.weekday())

    if end.weekday() > 4:
        end = end - timedelta(days=end.weekday() - 4)

    if start > end:
        return 0

    diff_days = (end - start).days + 1
    weeks = int(diff_days / 7)

    remainder = end.weekday() - start.weekday() + 1

    if remainder != 0 and end.weekday() < start.weekday():
        remainder = 5 + remainder

    return weeks * 5 + remainder


def calculate_sla_expiration_dates(apps, schema_editor):
    System_Settings = apps.get_model('dojo', 'System_Settings')
    SLA_Configuration = apps.get_model('dojo', 'SLA_Configuration')
    Product = apps.get_model('dojo', 'Product')
    Finding = apps.get_model('dojo', 'Finding')

    if System_Settings.objects.get().enable_finding_sla:
        for p in Product.objects.all():
            sla_config = SLA_Configuration.objects.filter(id=p.sla_configuration_id).first()
            for f in Finding.objects.filter(test__engagement__product__id=p.id):
                start_date = f.sla_start_date if f.sla_start_date else f.date
                sla_period = getattr(sla_config, f.severity.lower(), None)

                days = None
                if settings.SLA_BUSINESS_DAYS:
                    if f.mitigated:
                        days = get_work_days(f.date, f.mitigated.date())
                    else:
                        days = get_work_days(f.date, timezone.now().date())
                else:
                    if isinstance(start_date, datetime):
                        start_date = start_date.date()

                    if f.mitigated:
                        days = (f.mitigated.date() - start_date).days
                    else:
                        days = (timezone.now().date() - start_date).days

                days = days if days > 0 else 0

                days_remaining = None
                if sla_period:
                    days_remaining = sla_period - days

                if days_remaining:
                    if f.mitigated:
                        f.sla_expiration_date = f.mitigated.date() + relativedelta(days=days_remaining)
                    else:
                        f.sla_expiration_date = timezone.now().date() + relativedelta(days=days_remaining)

                f.save()


class Migration(migrations.Migration):

    dependencies = [
        ('dojo', '0196_notifications_sla_breach_combined'),
    ]

    operations = [
        migrations.AddField(
            model_name='finding',
            name='sla_expiration_date',
            field=models.DateField(blank=True, help_text="(readonly)The date SLA expires for this finding. Empty by default, causing a fallback to 'date'.", null=True, verbose_name='SLA Expiration Date'),
        ),
        migrations.RunPython(calculate_sla_expiration_dates),
    ]
