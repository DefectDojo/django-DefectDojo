{
  "errors": [],
  "njsscan_version": "0.2.8",
  "nodejs": {
    "express_xss": {
      "files": [
        {
          "file_path": "/app/jwt_hardcoded.js",
          "match_lines": [
            83,
            88
          ],
          "match_position": [
            13,
            55
          ],
          "match_string": "            let user = new User({\n                name: req.body.name,\n                password: req.body.password\n            });\n            var token = jwt.sign(user, \"hardcoded-secret\", { expiresIn: 60 * 60 * 10 });\n            res.send({ success: true, token: token });"
        }
      ],
      "metadata": {
        "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
        "description": "Untrusted User Input in Response will result in Reflected Cross Site Scripting Vulnerability.",
        "owasp": "A1: Injection",
        "severity": "ERROR"
      }
    },
    "hardcoded_jwt_secret": {
      "files": [
        {
          "file_path": "/app/jwt_hardcoded.js",
          "match_lines": [
            2,
            15
          ],
          "match_position": [
            1,
            44
          ],
          "match_string": "const jsonwt = require('jsonwebtoken')\nconst jose = require('jose')\nconst { JWK, JWT } = jose\nconst config = require('./config')\n\nconst payload = { foo: 'bar' }\nconst secret = 'shhhhh'\n\nconst secret2 = config.secret\nconst secret3 = process.env.SECRET || 'fallback-secret'\n\n//jsonwebtoken\n//true\nconst token1 = jsonwt.sign(payload, secret)"
        },
        {
          "file_path": "/app/jwt_hardcoded.js",
          "match_lines": [
            99,
            116
          ],
          "match_position": [
            9,
            10
          ],
          "match_string": "        const router = require('express').Router(),\n            jwt = require('jsonwebtoken');\n        if (config) {\n            router.route('/register').post((req, res) => {\n                USER.findOne({}).exec((error, user) => {\n                    if (error)\n                        return res.status(400).send({ error: error });\n                    user.save((error, user) => {\n                        if (error) {\n                            return res.status(400).send({ error: error });\n                        } else {\n                            const token = jwt.sign({ id: user._id }, 'hardcoded-secret');\n                            return res.status(201).json({ token: token });\n                        }\n                    });\n                });\n            });\n        }"
        }
      ],
      "metadata": {
        "cwe": "CWE-798: Use of Hard-coded Credentials",
        "description": "Hardcoded JWT secret was found. Store it properly in an environment variable.",
        "owasp": "A3: Sensitive Data Exposure",
        "severity": "ERROR"
      }
    },
    "jwt_exposed_credentials": {
      "files": [
        {
          "file_path": "/app/jwt_exposed_credentials.js",
          "match_lines": [
            4,
            6
          ],
          "match_position": [
            5,
            77
          ],
          "match_string": "    const jose = require('jose')\n    const { JWK, JWT } = jose\n    const token1 = JWT.sign({ password: 123 }, 'secret', { some: 'params' })"
        },
        {
          "file_path": "/app/jwt_exposed_credentials.js",
          "match_lines": [
            111,
            113
          ],
          "match_position": [
            5,
            136
          ],
          "match_string": "    const jose = require('jose')\n    const { JWK, JWT } = jose\n    const token1 = JWT.sign(Object.assign({ user: { password: 123 } }, { bar: 123 }, { one: 1, two: 2 }), 'secret', { some: 'params' })"
        }
      ],
      "metadata": {
        "cwe": "CWE-522: Insufficiently Protected Credentials",
        "description": "Password is exposed through JWT token payload. This is not encrypted and  the password could be compromised. Do not store passwords in JWT tokens.",
        "owasp": "A2: Broken Authentication",
        "severity": "ERROR"
      }
    },
    "jwt_exposed_data": {
      "files": [
        {
          "file_path": "/app/jwt_exposed_data.js",
          "match_lines": [
            6,
            6
          ],
          "match_position": [
            19,
            41
          ],
          "match_string": "    const token = JWT.sign(user, secret)"
        },
        {
          "file_path": "/app/jwt_hardcoded.js",
          "match_lines": [
            42,
            42
          ],
          "match_position": [
            25,
            66
          ],
          "match_string": "            out.token = $jwt.sign(out, cert, { expiresIn: '1d' });"
        }
      ],
      "metadata": {
        "cwe": "CWE-522: Insufficiently Protected Credentials",
        "description": "The object is passed strictly to jose.JWT.sign(...). Make sure  that sensitive information is not exposed through JWT token payload.",
        "owasp": "A3:2017-Sensitive Data Exposure",
        "severity": "WARNING"
      }
    },
    "jwt_express_hardcoded": {
      "files": [
        {
          "file_path": "/app/jwt_express_hardcoded.js",
          "match_lines": [
            4,
            4
          ],
          "match_position": [
            23,
            60
          ],
          "match_string": "app.get('/protected', jwt({ secret: 'shhhhhhared-secret' }), function (req, res) {"
        },
        {
          "file_path": "/app/jwt_express_hardcoded.js",
          "match_lines": [
            21,
            26
          ],
          "match_position": [
            1,
            4
          ],
          "match_string": "const opts = Object.assign({ issuer: 'http://issuer' }, { secret })\n\napp.get('/protected3', jwt(opts), function (req, res) {\n    if (!req.user.admin) return res.sendStatus(401);\n    res.sendStatus(200);\n});"
        }
      ],
      "metadata": {
        "cwe": "CWE-522: Insufficiently Protected Credentials",
        "description": "Hardcoded JWT secret or private key was found. Store it properly in  an environment variable.",
        "owasp": "A2: Broken Authentication",
        "severity": "ERROR"
      }
    },
    "jwt_not_revoked": {
      "files": [
        {
          "file_path": "/app/jwt_express_hardcoded.js",
          "match_lines": [
            13,
            13
          ],
          "match_position": [
            24,
            56
          ],
          "match_string": "app.get('/protected2', jwt({ secret: hardcodedSecret }), function (req, res) {"
        }
      ],
      "metadata": {
        "cwe": "CWE-522: Insufficiently Protected Credentials",
        "description": "No token revoking configured for `express-jwt`. A leaked token could still be used and unable to be revoked. Consider using function as the `isRevoked` option.",
        "owasp": "A2: Broken Authentication",
        "severity": "WARNING"
      }
    },
    "node_jwt_none_algorithm": {
      "files": [
        {
          "file_path": "/app/jwt_none_algorithm.js",
          "match_lines": [
            2,
            4
          ],
          "match_position": [
            1,
            49
          ],
          "match_string": "const jose = require(\"jose\");\nconst { JWK, JWT } = jose;\nconst token = JWT.verify('token-here', JWK.None);"
        },
        {
          "file_path": "/app/jwt_none_algorithm.js",
          "match_lines": [
            8,
            12
          ],
          "match_position": [
            5,
            8
          ],
          "match_string": "    let jwt = require(\"jsonwebtoken\");\n    let secret = 'some-secret';\n    jwt.verify('token-here', secret, { algorithms: ['RS256', 'none'] }, function (err, payload) {\n        console.log(payload);\n    });"
        }
      ],
      "metadata": {
        "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
        "description": "Algorithm is set to none for JWT token. This can nullify the integrity of JWT signature.",
        "owasp": "A9: Using Components with Known Vulnerabilities",
        "severity": "ERROR"
      }
    },
    "node_secret": {
      "files": [
        {
          "file_path": "/app/jwt_none_algorithm.js",
          "match_lines": [
            9,
            9
          ],
          "match_position": [
            9,
            31
          ],
          "match_string": "    let secret = 'some-secret';"
        },
        {
          "file_path": "/app/jwt_hardcoded.js",
          "match_lines": [
            8,
            8
          ],
          "match_position": [
            7,
            24
          ],
          "match_string": "const secret = 'shhhhh'"
        }
      ],
      "metadata": {
        "cwe": "CWE-798: Use of Hard-coded Credentials",
        "description": "A hardcoded secret is identified. Store it properly in an environment variable.",
        "owasp": "A3: Sensitive Data Exposure",
        "severity": "ERROR"
      }
    }
  },
  "templates": {}
}
