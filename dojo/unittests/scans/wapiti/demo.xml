<?xml version="1.0" ?>
<report type="security">
   <report_infos>
      <info name="generatorName">wapiti</info>
      <info name="generatorVersion">Wapiti 3.0.4</info>
      <info name="scope">folder</info>
      <info name="dateOfScan">Sun, 28 Mar 2021 07:50:09 +0000</info>
      <info name="target">https://demo.defectdojo.org/dashboard</info>
   </report_infos>
   <vulnerabilities>
      <vulnerability name="Backup file">
         <description><![CDATA[It may be possible to find backup files of scripts on the webserver that the web-admin put here to save a previous version or backup files that are automatically generated by the software editor used (like for example Emacs). These copies may reveal interesting information like source code or credentials.]]></description>
         <solution><![CDATA[The webadmin must manually delete the backup files or remove it from the web root. He should also reconfigure its editor to deactivate automatic backups.]]></solution>
         <references>
            <reference>
               <title>OWASP: Review Old Backup and Unreferenced Files for Sensitive Information</title>
               <url>https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/04-Review_Old_Backup_and_Unreferenced_Files_for_Sensitive_Information.html</url>
            </reference>
            <reference>
               <title>CWE-530: Exposure of Backup File to an Unauthorized Control Sphere</title>
               <url>https://cwe.mitre.org/data/definitions/530.html</url>
            </reference>
         </references>
         <entries/>
      </vulnerability>
      <vulnerability name="Blind SQL Injection">
         <description><![CDATA[Blind SQL injection is a technique that exploits a vulnerability occurring in the database of an application. This kind of vulnerability is harder to detect than basic SQL injections because no error message will be displayed on the webpage.]]></description>
         <solution><![CDATA[To protect against SQL injection, user input must not directly be embedded in SQL statements. Instead, user input must be escaped or filtered or parameterized statements must be used.]]></solution>
         <references>
            <reference>
               <title>OWASP: Blind SQL Injection</title>
               <url>https://owasp.org/www-community/attacks/Blind_SQL_Injection</url>
            </reference>
            <reference>
               <title>Wikipedia: SQL injection</title>
               <url>https://en.wikipedia.org/wiki/SQL_injection</url>
            </reference>
            <reference>
               <title>CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</title>
               <url>https://cwe.mitre.org/data/definitions/89.html</url>
            </reference>
         </references>
         <entries/>
      </vulnerability>
      <vulnerability name="Weak credentials">
         <description><![CDATA[The web application is using either default credentials or weak passwords that can be found in well-known passwords lists.]]></description>
         <solution><![CDATA[Do not ship or deploy with any default credentials, particularly for admin users. Implement weak-password checks, such as testing new or changed passwords against a list of the top 10000 worst passwords.]]></solution>
         <references>
            <reference>
               <title>CWE-798: Use of Hard-coded Credentials</title>
               <url>https://cwe.mitre.org/data/definitions/798.html</url>
            </reference>
            <reference>
               <title>CWE-521: Weak Password Requirements</title>
               <url>https://cwe.mitre.org/data/definitions/521.html</url>
            </reference>
         </references>
         <entries/>
      </vulnerability>
      <vulnerability name="CRLF Injection">
         <description><![CDATA[The term CRLF refers to Carriage Return (ASCII 13, \r) Line Feed (ASCII 10, \n). A CRLF Injection attack occurs when a user manages to submit a CRLF into an application. This is most commonly done by modifying an HTTP parameter or URL.]]></description>
         <solution><![CDATA[Check the submitted parameters and do not allow CRLF to be injected when it is not expected.]]></solution>
         <references>
            <reference>
               <title>OWASP: CRLF Injection</title>
               <url>https://owasp.org/www-community/vulnerabilities/CRLF_Injection</url>
            </reference>
            <reference>
               <title>Acunetix: What Are CRLF Injection Attacks</title>
               <url>https://www.acunetix.com/websitesecurity/crlf-injection/</url>
            </reference>
            <reference>
               <title>CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')</title>
               <url>https://cwe.mitre.org/data/definitions/93.html</url>
            </reference>
         </references>
         <entries/>
      </vulnerability>
      <vulnerability name="Content Security Policy Configuration">
         <description><![CDATA[Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks.]]></description>
         <solution><![CDATA[Configuring Content Security Policy involves adding the Content-Security-Policy HTTP header to a web page and giving it values to control what resources the user agent is allowed to load for that page.]]></solution>
         <references>
            <reference>
               <title>Mozilla: Content Security Policy (CSP)</title>
               <url>https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP</url>
            </reference>
            <reference>
               <title>OWASP: Content Security Policy Cheat Sheet</title>
               <url>https://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html</url>
            </reference>
            <reference>
               <title>OWASP: How to do Content Security Policy (PDF)</title>
               <url>https://owasp.org/www-pdf-archive/2019-02-22_-_How_do_I_Content_Security_Policy_-_Print.pdf</url>
            </reference>
         </references>
         <entries>
            <entry>
               <method>GET</method>
               <path>/dashboard</path>
               <level>1</level>
               <parameter></parameter>
               <info>CSP is not set</info>
               <http_request><![CDATA[GET /dashboard HTTP/1.1
Host: demo.defectdojo.org]]></http_request>
               <curl_command><![CDATA[curl "https://demo.defectdojo.org/dashboard"]]></curl_command>
            </entry>
            <entry>
               <method>GET</method>
               <path>/dashboard</path>
               <level>1</level>
               <parameter></parameter>
               <info>CSP is not set</info>
               <http_request><![CDATA[GET /dashboard HTTP/1.1
Host: demo.defectdojo.org]]></http_request>
               <curl_command><![CDATA[curl "https://demo.defectdojo.org/dashboard"]]></curl_command>
            </entry>
         </entries>
      </vulnerability>
      <vulnerability name="Cross Site Request Forgery">
         <description><![CDATA[Cross-Site Request Forgery (CSRF) is an attack that forces an end user to execute unwanted actions on a web application in which they're currently authenticated.]]></description>
         <solution><![CDATA[Check if your framework has built-in CSRF protection and use it. If framework does not have built-in CSRF protection add CSRF tokens to all state changing requests (requests that cause actions on the site) and validate them on backend.]]></solution>
         <references>
            <reference>
               <title>OWASP: Testing for Cross Site Request Forgery</title>
               <url>https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery.html</url>
            </reference>
            <reference>
               <title>OWASP: Cross-Site Request Forgery Prevention Cheat Sheet</title>
               <url>https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html</url>
            </reference>
            <reference>
               <title>CWE-352: Cross-Site Request Forgery (CSRF)</title>
               <url>https://cwe.mitre.org/data/definitions/352.html</url>
            </reference>
         </references>
         <entries/>
      </vulnerability>
      <vulnerability name="Potentially dangerous file">
         <description><![CDATA[A file with potential vulnerabilities has been found on the website.]]></description>
         <solution><![CDATA[Make sure the script is up-to-date and restrict access to it if possible.]]></solution>
         <references>
            <reference>
               <title>Mitre: Search details of a CVE</title>
               <url>https://cve.mitre.org/cve/search_cve_list.html</url>
            </reference>
         </references>
         <entries/>
      </vulnerability>
      <vulnerability name="Command execution">
         <description><![CDATA[This attack consists in executing system commands on the server. The attacker tries to inject this commands in the request parameters.]]></description>
         <solution><![CDATA[Prefer working without user input when using file system calls.]]></solution>
         <references>
            <reference>
               <title>OWASP: Command Injection</title>
               <url>https://owasp.org/www-community/attacks/Command_Injection</url>
            </reference>
            <reference>
               <title>CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')</title>
               <url>https://cwe.mitre.org/data/definitions/78.html</url>
            </reference>
         </references>
         <entries/>
      </vulnerability>
      <vulnerability name="Path Traversal">
         <description><![CDATA[This attack is known as Path or Directory Traversal. Its aim is the access to files and directories that are stored outside the web root folder. The attacker tries to explore the directories stored in the web server. The attacker uses some techniques, for instance, the manipulation of variables that reference files with 'dot-dot-slash (../)' sequences and its variations to move up to root directory to navigate through the file system.]]></description>
         <solution><![CDATA[Prefer working without user input when using file system calls. Use indexes rather than actual portions of file names when templating or using language files (eg: value 5 from the user submission = Czechoslovakian, rather than expecting the user to return 'Czechoslovakian'). Ensure the user cannot supply all parts of the path - surround it with your path code. Validate the user's input by only accepting known good - do not sanitize the data. Use chrooted jails and code access policies to restrict where the files can be obtained or saved to.]]></solution>
         <references>
            <reference>
               <title>OWASP: Path Traversal</title>
               <url>https://owasp.org/www-community/attacks/Path_Traversal</url>
            </reference>
            <reference>
               <title>Acunetix: What is a Directory Traversal attack?</title>
               <url>https://www.acunetix.com/websitesecurity/directory-traversal/</url>
            </reference>
            <reference>
               <title>CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</title>
               <url>https://cwe.mitre.org/data/definitions/22.html</url>
            </reference>
         </references>
         <entries/>
      </vulnerability>
      <vulnerability name="Htaccess Bypass">
         <description><![CDATA[Htaccess files are used to restrict access to some files or HTTP method. In some case it may be possible to bypass this restriction and access the files.]]></description>
         <solution><![CDATA[Make sure every HTTP method is forbidden if the credentials are bad.]]></solution>
         <references>
            <reference>
               <title>A common Apache .htaccess misconfiguration</title>
               <url>http://blog.teusink.net/2009/07/common-apache-htaccess-misconfiguration.html</url>
            </reference>
            <reference>
               <title>CWE-538: Insertion of Sensitive Information into Externally-Accessible File or Directory</title>
               <url>https://cwe.mitre.org/data/definitions/538.html</url>
            </reference>
         </references>
         <entries/>
      </vulnerability>
      <vulnerability name="HTTP Secure Headers">
         <description><![CDATA[HTTP security headers tell the browser how to behave when handling the website's content.]]></description>
         <solution><![CDATA[Use the recommendations for hardening your HTTP Security Headers.]]></solution>
         <references>
            <reference>
               <title>Netsparker: HTTP Security Headers: An Easy Way to Harden Your Web Applications</title>
               <url>https://www.netsparker.com/blog/web-security/http-security-headers/</url>
            </reference>
            <reference>
               <title>KeyCDN: Hardening Your HTTP Security Headers</title>
               <url>https://www.keycdn.com/blog/http-security-headers</url>
            </reference>
            <reference>
               <title>OWASP: HTTP SECURITY HEADERS (Protection For Browsers) (PDF)</title>
               <url>https://owasp.org/www-chapter-ghana/assets/slides/HTTP_Header_Security.pdf</url>
            </reference>
         </references>
         <entries>
            <entry>
               <method>GET</method>
               <path>/dashboard</path>
               <level>1</level>
               <parameter></parameter>
               <info>Strict-Transport-Security is not set</info>
               <http_request><![CDATA[GET /dashboard HTTP/1.1
Host: demo.defectdojo.org]]></http_request>
               <curl_command><![CDATA[curl "https://demo.defectdojo.org/dashboard"]]></curl_command>
            </entry>
            <entry>
               <method>GET</method>
               <path>/dashboard</path>
               <level>1</level>
               <parameter></parameter>
               <info>Strict-Transport-Security is not set</info>
               <http_request><![CDATA[GET /dashboard HTTP/1.1
Host: demo.defectdojo.org]]></http_request>
               <curl_command><![CDATA[curl "https://demo.defectdojo.org/dashboard"]]></curl_command>
            </entry>
         </entries>
      </vulnerability>
      <vulnerability name="HttpOnly Flag cookie">
         <description><![CDATA[HttpOnly is an additional flag included in a Set-Cookie HTTP response header. Using the HttpOnly flag when generating a cookie helps mitigate the risk of client side script accessing the protected cookie (if the browser supports it).]]></description>
         <solution><![CDATA[While creation of the cookie, make sure to set the HttpOnly Flag to True.]]></solution>
         <references>
            <reference>
               <title>OWASP: Testing for Cookies Attributes</title>
               <url>https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes.html</url>
            </reference>
            <reference>
               <title>OWASP: HttpOnly</title>
               <url>https://owasp.org/www-community/HttpOnly</url>
            </reference>
         </references>
         <entries/>
      </vulnerability>
      <vulnerability name="Open Redirect">
         <description><![CDATA[Unvalidated redirects and forwards are possible when a web application accepts untrusted input that could cause the web application to redirect the request to a URL contained within untrusted input. By modifying untrusted URL input to a malicious site, an attacker may successfully launch a phishing scam and steal user credentials.]]></description>
         <solution><![CDATA[Force all redirects to first go through a page notifying users that they are going off of your site, and have them click a link to confirm.]]></solution>
         <references>
            <reference>
               <title>Unvalidated Redirects and Forwards Cheat Sheet</title>
               <url>https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html</url>
            </reference>
            <reference>
               <title>Acunetix: What Are Open Redirects?</title>
               <url>https://www.acunetix.com/blog/web-security-zone/what-are-open-redirects/</url>
            </reference>
            <reference>
               <title>CWE-601: URL Redirection to Untrusted Site ('Open Redirect')</title>
               <url>https://cwe.mitre.org/data/definitions/601.html</url>
            </reference>
         </references>
         <entries/>
      </vulnerability>
      <vulnerability name="Secure Flag cookie">
         <description><![CDATA[The secure flag is an option that can be set by the application server when sending a new cookie to the user within an HTTP Response. The purpose of the secure flag is to prevent cookies from being observed by unauthorized parties due to the transmission of a the cookie in clear text.]]></description>
         <solution><![CDATA[When generating the cookie, make sure to set the Secure Flag to True.]]></solution>
         <references>
            <reference>
               <title>OWASP: Testing for Cookies Attributes</title>
               <url>https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes.html</url>
            </reference>
            <reference>
               <title>OWASP: Secure Cookie Attribute</title>
               <url>https://owasp.org/www-community/controls/SecureCookieAttribute</url>
            </reference>
         </references>
         <entries>
            <entry>
               <method>GET</method>
               <path>/dashboard</path>
               <level>1</level>
               <parameter></parameter>
               <info>Secure flag is not set in the cookie : csrftoken</info>
               <http_request><![CDATA[GET /dashboard HTTP/1.1
Host: demo.defectdojo.org]]></http_request>
               <curl_command><![CDATA[curl "https://demo.defectdojo.org/dashboard"]]></curl_command>
            </entry>
            <entry>
               <method>GET</method>
               <path>/dashboard</path>
               <level>1</level>
               <parameter></parameter>
               <info>Secure flag is not set in the cookie : csrftoken</info>
               <http_request><![CDATA[GET /dashboard HTTP/1.1
Host: demo.defectdojo.org]]></http_request>
               <curl_command><![CDATA[curl "https://demo.defectdojo.org/dashboard"]]></curl_command>
            </entry>
            <entry>
               <method>GET</method>
               <path>/dashboard</path>
               <level>1</level>
               <parameter></parameter>
               <info>Secure flag is not set in the cookie : csrftoken</info>
               <http_request><![CDATA[GET /dashboard HTTP/1.1
Host: demo.defectdojo.org]]></http_request>
               <curl_command><![CDATA[curl "https://demo.defectdojo.org/dashboard"]]></curl_command>
            </entry>
            <entry>
               <method>GET</method>
               <path>/dashboard</path>
               <level>1</level>
               <parameter></parameter>
               <info>Secure flag is not set in the cookie : csrftoken</info>
               <http_request><![CDATA[GET /dashboard HTTP/1.1
Host: demo.defectdojo.org]]></http_request>
               <curl_command><![CDATA[curl "https://demo.defectdojo.org/dashboard"]]></curl_command>
            </entry>
         </entries>
      </vulnerability>
      <vulnerability name="SQL Injection">
         <description><![CDATA[SQL injection vulnerabilities allow an attacker to alter the queries executed on the backend database. An attacker may then be able to extract or modify information stored in the database or even escalate his privileges on the system.]]></description>
         <solution><![CDATA[To protect against SQL injection, user input must not directly be embedded in SQL statements. Instead, user input must be escaped or filtered or parameterized statements must be used.]]></solution>
         <references>
            <reference>
               <title>OWASP: SQL Injection</title>
               <url>https://owasp.org/www-community/attacks/SQL_Injection</url>
            </reference>
            <reference>
               <title>Wikipedia: SQL injection</title>
               <url>https://en.wikipedia.org/wiki/SQL_injection</url>
            </reference>
            <reference>
               <title>CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</title>
               <url>https://cwe.mitre.org/data/definitions/89.html</url>
            </reference>
         </references>
         <entries/>
      </vulnerability>
      <vulnerability name="Server Side Request Forgery">
         <description><![CDATA[The target application may have functionality for importing data from a URL, publishing data to a URL or otherwise reading data from a URL that can be tampered with.]]></description>
         <solution><![CDATA[Every URI received by the web application should be checked, especially scheme and hostname. A whitelist should be used.]]></solution>
         <references>
            <reference>
               <title>OWASP: Server Side Request Forgery</title>
               <url>https://owasp.org/www-community/attacks/Server_Side_Request_Forgery</url>
            </reference>
            <reference>
               <title>Acunetix: What is Server Side Request Forgery (SSRF)?</title>
               <url>https://www.acunetix.com/blog/articles/server-side-request-forgery-vulnerability/</url>
            </reference>
            <reference>
               <title>What is the Server Side Request Forgery Vulnerability &amp; How to Prevent It?</title>
               <url>https://www.netsparker.com/blog/web-security/server-side-request-forgery-vulnerability-ssrf/</url>
            </reference>
            <reference>
               <title>CWE-918: Server-Side Request Forgery (SSRF)</title>
               <url>https://cwe.mitre.org/data/definitions/918.html</url>
            </reference>
         </references>
         <entries/>
      </vulnerability>
      <vulnerability name="Cross Site Scripting">
         <description><![CDATA[Cross-site scripting (XSS) is a type of computer security vulnerability typically found in web applications which allow code injection by malicious web users into the web pages viewed by other users. Examples of such code include HTML code and client-side scripts.]]></description>
         <solution><![CDATA[The best way to protect a web application from XSS attacks is ensure that the application performs validation of all headers, cookies, query strings, form fields, and hidden fields. Encoding user supplied output in the server side can also defeat XSS vulnerabilities by preventing inserted scripts from being transmitted to users in an executable form. Applications can gain significant protection from javascript based attacks by converting the following characters in all generated output to the appropriate HTML entity encoding:<, >, &, ', (, ), #, %, ; , +, -]]></solution>
         <references>
            <reference>
               <title>OWASP: Cross Site Scripting (XSS)</title>
               <url>https://owasp.org/www-community/attacks/xss/</url>
            </reference>
            <reference>
               <title>Wikipedia: Cross-site scripting</title>
               <url>https://en.wikipedia.org/wiki/Cross-site_scripting</url>
            </reference>
            <reference>
               <title>CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</title>
               <url>https://cwe.mitre.org/data/definitions/79.html</url>
            </reference>
         </references>
         <entries/>
      </vulnerability>
      <vulnerability name="XML External Entity">
         <description><![CDATA[An XML External Entity attack is a type of attack against an application that parses XML input. This attack occurs when XML input containing a reference to an external entity is processed by a weakly configured XML parser. This attack may lead to the disclosure of confidential data, denial of service, server side request forgery, port scanning from the perspective of the machine where the parser is located, and other system impacts.]]></description>
         <solution><![CDATA[The safest way to prevent XXE is always to disable DTDs (External Entities) completely.]]></solution>
         <references>
            <reference>
               <title>OWASP: XML External Entity (XXE) Processing</title>
               <url>https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing</url>
            </reference>
            <reference>
               <title>PortSwigger: What is XML external entity injection?</title>
               <url>https://portswigger.net/web-security/xxe</url>
            </reference>
            <reference>
               <title>CWE-611: Improper Restriction of XML External Entity Reference</title>
               <url>https://cwe.mitre.org/data/definitions/611.html</url>
            </reference>
            <reference>
               <title>OWASP: XML External Entity Prevention Cheat Sheet</title>
               <url>https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html</url>
            </reference>
         </references>
         <entries/>
      </vulnerability>
   </vulnerabilities>
   <anomalies>
      <anomaly name="Internal Server Error">
         <description><![CDATA[An error occurred on the server's side, preventing it to process the request. It may be the sign of a vulnerability.]]></description>
         <solution><![CDATA[More information about the error should be found in the server logs.]]></solution>
         <references>
            <reference>
               <title>Wikipedia: List of 5xx HTTP status codes</title>
               <url>https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#5xx_Server_Error</url>
            </reference>
            <reference>
               <title>OWASP: Improper Error Handling</title>
               <url>https://owasp.org/www-community/Improper_Error_Handling</url>
            </reference>
         </references>
         <entries/>
      </anomaly>
      <anomaly name="Resource consumption">
         <description><![CDATA[It took an abnormal time to the server to respond to a query. An attacker might leverage this kind of weakness to overload the server.]]></description>
         <solution><![CDATA[The involved script is maybe using the server resources (CPU, memory, network, file access...) in a non-efficient way.]]></solution>
         <references>
            <reference>
               <title>CWE-405: Asymmetric Resource Consumption (Amplification)</title>
               <url>https://cwe.mitre.org/data/definitions/405.html</url>
            </reference>
            <reference>
               <title>CWE-400: Uncontrolled Resource Consumption</title>
               <url>https://cwe.mitre.org/data/definitions/400.html</url>
            </reference>
         </references>
         <entries/>
      </anomaly>
   </anomalies>
   <additionals>
      <additional name="Fingerprint web technology">
         <description><![CDATA[The use of a web technology can be deducted due to the presence of its specific fingerprints.]]></description>
         <solution><![CDATA[This is only for informational purposes.]]></solution>
         <references>
            <reference>
               <title>OWASP: Fingerprint Web Server</title>
               <url>https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server.html</url>
            </reference>
            <reference>
               <title>OWASP: Fingerprint Web Application Framework</title>
               <url>https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/01-Information_Gathering/08-Fingerprint_Web_Application_Framework.html</url>
            </reference>
         </references>
         <entries/>
      </additional>
   </additionals>
</report>
