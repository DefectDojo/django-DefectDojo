Vulnerability,Language,Description,Recommendations,Links,File,Line,Severity Level,Status,Trace,Vulnerability Comment,Jira Task Identifier,Jira Task Name,Jira Parent Task,Jira Issue Type,Jira Task Priority,Jira Task Assignee
Hardcoded password,PHP,"Hardcoded password can lead to the application data being compromised. Eliminating the security risks related to the password specified in the source code is extremely difficult. These passwords are at least accessible to every developer of the application. Moreover, after the application is installed, removing from the password from its code is possible by updating only. Constant strings are easily extracted from the compiled application by decompilers. Therefore, an attacker does not necessarily need to have an access to the source code to know the parameters of the special account. If these parameters become known to an attacker, system administrators will be forced either to neglect the safety or to restrict the access to the application.","Do not store passwords in plaintext. Instead, store the values of cryptographically secure hash function obtained from the password. Use specialized hash functions designed for this purpose (bcrypt, PBKDF2, scrypt). Use salt obtained from cryptographically secure pseudorandom number generator to resist rainbow table attacks. If the password specified in the source code is used for the initial authorization, provide the special authentication mode for this purpose, such that the user is required to provide his/her own unique password. Store authentication information in an encrypted form in a separate configuration file or database. Provide sufficient protection for the encryption key. If encryption is not possible, restrict an access to the repository as much as possible.","https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password,https://cwe.mitre.org/data/definitions/259.html,https://owasp.org/www-pdf-archive/OWASP_Top_10_-_2013.pdf,https://owasp.org/www-pdf-archive/OWASP_Top_10_-_2013.pdf,https://stackoverflow.com/questions/12937641/handling-passwords-used-for-auth-in-source-code,https://security.stackexchange.com/questions/211/how-to-securely-hash-passwords,https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A2-Broken_Authentication,https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure,https://cwe.mitre.org/data/definitions/798.html,https://cwe.mitre.org/data/definitions/1028.html,https://cwe.mitre.org/data/definitions/1032.html",misc/shared.php,151-152,Critical,Not processed,-,,-,-,-,-,-,-
Internal information leak,PHP,"System configuration leak is possible. This can help an attacker to create a plan of attack. The debug information and error messages depending on the system settings can be written to the log, outputted to the console, or sent to the user. In some cases, an attacker can make a conclusion about the system vulnerabilities from the error message. For example, a database error can indicate insecurity against attacks such as SQL injection. Information about the version of the operating system, application server and system configuration can also be of value to the attacker. In this case, we are talking about an internal leak: system information is stored in the local file or event log or is displayed on the screen.",Exclude detailed information about the system and its configuration from error messages.,"https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure,https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A6-Security_Misconfiguration,https://owasp.org/www-pdf-archive/OWASP_Top_10_-_2013.pdf,https://cwe.mitre.org/data/definitions/497.html,https://cwe.mitre.org/data/definitions/1031.html,https://cwe.mitre.org/data/definitions/1032.html,https://cwe.mitre.org/data/definitions/200.html,https://cwe.mitre.org/data/definitions/209.html,https://cwe.mitre.org/data/definitions/532.html",index.php,5,Medium,Not processed,-,,-,-,-,-,-,-
Trust boundary violation,PHP,Data from trusted and untrusted sources are stored in the same data structure. The developer may mistakenly consider that the data in the entire data structure come from a trusted source. Trusted and untrusted must be separated in the program. In the secure program untrusted data can cross the trust boundary becoming trusted only by passing validation. Using the same data structures to store both trusted and untrusted data blurs the trust boundary and leads to vulnerabilities.,"Clearly define trust boundaries. Store trusted and untrusted data in different data structures. Make sure that the data can cross the trust boundary only via validators. Minimize the number of ways in which data can cross the trust boundary. Trust boundary violation sometimes happens when the application works with the data coming from the user, with the validation being impossible to conduct until the data is received completely. In this case, collect all the data coming from the user in one (untrusted) data structure and then validate it and move to the trusted structure.","https://cwe.mitre.org/data/definitions/501.html,https://www.upguard.com/blog/top-20-owasp-vulnerabilities-and-how-to-fix-them,https://www.php.net/manual/en/reserved.variables.session.php,https://cwe.mitre.org/data/definitions/359.html",index.php,51,Medium,Not processed,[index.php:51]-[index.php:51],,-,-,-,-,-,-