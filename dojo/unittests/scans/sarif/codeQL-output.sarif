{
  "$schema" : "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version" : "2.1.0",
  "runs" : [ {
    "tool" : {
      "driver" : {
        "name" : "CodeQL",
        "organization" : "GitHub",
        "semanticVersion" : "2.5.4",
        "rules" : [ {
          "id" : "py/conflicting-attributes",
          "name" : "py/conflicting-attributes",
          "shortDescription" : {
            "text" : "Conflicting attributes in base classes"
          },
          "fullDescription" : {
            "text" : "When a class subclasses multiple base classes and more than one base class defines the same attribute, attribute overriding may result in unexpected behavior by instances of this class."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "reliability", "maintainability", "modularity" ],
            "description" : "When a class subclasses multiple base classes and more than one base class defines the same attribute, attribute overriding may result in unexpected behavior by instances of this class.",
            "id" : "py/conflicting-attributes",
            "kind" : "problem",
            "name" : "Conflicting attributes in base classes",
            "precision" : "high",
            "problem.severity" : "warning",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/missing-equals",
          "name" : "py/missing-equals",
          "shortDescription" : {
            "text" : "`__eq__` not overridden when adding attributes"
          },
          "fullDescription" : {
            "text" : "When adding new attributes to instances of a class, equality for that class needs to be defined."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "reliability", "correctness" ],
            "description" : "When adding new attributes to instances of a class, equality for that class needs to be defined.",
            "id" : "py/missing-equals",
            "kind" : "problem",
            "name" : "`__eq__` not overridden when adding attributes",
            "precision" : "high",
            "problem.severity" : "warning",
            "sub-severity" : "high"
          }
        }, {
          "id" : "py/equals-hash-mismatch",
          "name" : "py/equals-hash-mismatch",
          "shortDescription" : {
            "text" : "Inconsistent equality and hashing"
          },
          "fullDescription" : {
            "text" : "Defining equality for a class without also defining hashability (or vice-versa) violates the object model."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "reliability", "correctness", "external/cwe/cwe-581" ],
            "description" : "Defining equality for a class without also defining hashability (or vice-versa) violates the object model.",
            "id" : "py/equals-hash-mismatch",
            "kind" : "problem",
            "name" : "Inconsistent equality and hashing",
            "precision" : "very-high",
            "problem.severity" : "warning",
            "sub-severity" : "high"
          }
        }, {
          "id" : "py/inconsistent-equality",
          "name" : "py/inconsistent-equality",
          "shortDescription" : {
            "text" : "Inconsistent equality and inequality"
          },
          "fullDescription" : {
            "text" : "Defining only an equality method or an inequality method for a class violates the object model."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "reliability", "correctness" ],
            "description" : "Defining only an equality method or an inequality method for a class violates the object model.",
            "id" : "py/inconsistent-equality",
            "kind" : "problem",
            "name" : "Inconsistent equality and inequality",
            "precision" : "very-high",
            "problem.severity" : "warning",
            "sub-severity" : "high"
          }
        }, {
          "id" : "py/incomplete-ordering",
          "name" : "py/incomplete-ordering",
          "shortDescription" : {
            "text" : "Incomplete ordering"
          },
          "fullDescription" : {
            "text" : "Class defines one or more ordering method but does not define all 4 ordering comparison methods"
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "reliability", "correctness" ],
            "description" : "Class defines one or more ordering method but does not define all 4 ordering comparison methods",
            "id" : "py/incomplete-ordering",
            "kind" : "problem",
            "name" : "Incomplete ordering",
            "precision" : "very-high",
            "problem.severity" : "warning",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/inconsistent-mro",
          "name" : "py/inconsistent-mro",
          "shortDescription" : {
            "text" : "Inconsistent method resolution order"
          },
          "fullDescription" : {
            "text" : "Class definition will raise a type error at runtime due to inconsistent method resolution order(MRO)"
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "correctness" ],
            "description" : "Class definition will raise a type error at runtime due to inconsistent method resolution order(MRO)",
            "id" : "py/inconsistent-mro",
            "kind" : "problem",
            "name" : "Inconsistent method resolution order",
            "precision" : "very-high",
            "problem.severity" : "error",
            "sub-severity" : "high"
          }
        }, {
          "id" : "py/init-calls-subclass",
          "name" : "py/init-calls-subclass",
          "shortDescription" : {
            "text" : "`__init__` method calls overridden method"
          },
          "fullDescription" : {
            "text" : "Calling a method from `__init__` that is overridden by a subclass may result in a partially initialized instance being observed."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "reliability", "correctness" ],
            "description" : "Calling a method from `__init__` that is overridden by a subclass may result in a partially\n              initialized instance being observed.",
            "id" : "py/init-calls-subclass",
            "kind" : "problem",
            "name" : "`__init__` method calls overridden method",
            "precision" : "high",
            "problem.severity" : "warning",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/missing-call-to-delete",
          "name" : "py/missing-call-to-delete",
          "shortDescription" : {
            "text" : "Missing call to `__del__` during object destruction"
          },
          "fullDescription" : {
            "text" : "An omitted call to a super-class `__del__` method may lead to class instances not being cleaned up properly."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "efficiency", "correctness" ],
            "description" : "An omitted call to a super-class `__del__` method may lead to class instances not being cleaned up properly.",
            "id" : "py/missing-call-to-delete",
            "kind" : "problem",
            "name" : "Missing call to `__del__` during object destruction",
            "precision" : "high",
            "problem.severity" : "error",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/missing-call-to-init",
          "name" : "py/missing-call-to-init",
          "shortDescription" : {
            "text" : "Missing call to `__init__` during object initialization"
          },
          "fullDescription" : {
            "text" : "An omitted call to a super-class `__init__` method may lead to objects of this class not being fully initialized."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "correctness" ],
            "description" : "An omitted call to a super-class `__init__` method may lead to objects of this class not being fully initialized.",
            "id" : "py/missing-call-to-init",
            "kind" : "problem",
            "name" : "Missing call to `__init__` during object initialization",
            "precision" : "high",
            "problem.severity" : "error",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/mutable-descriptor",
          "name" : "py/mutable-descriptor",
          "shortDescription" : {
            "text" : "Mutation of descriptor in `__get__` or `__set__` method."
          },
          "fullDescription" : {
            "text" : "Descriptor objects can be shared across many instances. Mutating them can cause strange side effects or race conditions."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "correctness" ],
            "description" : "Descriptor objects can be shared across many instances. Mutating them can cause strange side effects or race conditions.",
            "id" : "py/mutable-descriptor",
            "kind" : "problem",
            "name" : "Mutation of descriptor in `__get__` or `__set__` method.",
            "precision" : "very-high",
            "problem.severity" : "error",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/property-in-old-style-class",
          "name" : "py/property-in-old-style-class",
          "shortDescription" : {
            "text" : "Property in old-style class"
          },
          "fullDescription" : {
            "text" : "Using property descriptors in old-style classes does not work from Python 2.1 onward."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "portability", "correctness" ],
            "description" : "Using property descriptors in old-style classes does not work from Python 2.1 onward.",
            "id" : "py/property-in-old-style-class",
            "kind" : "problem",
            "name" : "Property in old-style class",
            "precision" : "very-high",
            "problem.severity" : "error",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/slots-in-old-style-class",
          "name" : "py/slots-in-old-style-class",
          "shortDescription" : {
            "text" : "`__slots__` in old-style class"
          },
          "fullDescription" : {
            "text" : "Overriding the class dictionary by declaring `__slots__` is not supported by old-style classes."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "portability", "correctness" ],
            "description" : "Overriding the class dictionary by declaring `__slots__` is not supported by old-style\n              classes.",
            "id" : "py/slots-in-old-style-class",
            "kind" : "problem",
            "name" : "`__slots__` in old-style class",
            "precision" : "very-high",
            "problem.severity" : "error",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/attribute-shadows-method",
          "name" : "py/attribute-shadows-method",
          "shortDescription" : {
            "text" : "Superclass attribute shadows subclass method"
          },
          "fullDescription" : {
            "text" : "Defining an attribute in a superclass method with a name that matches a subclass method, hides the method in the subclass."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "maintainability", "correctness" ],
            "description" : "Defining an attribute in a superclass method with a name that matches a subclass\n              method, hides the method in the subclass.",
            "id" : "py/attribute-shadows-method",
            "kind" : "problem",
            "name" : "Superclass attribute shadows subclass method",
            "precision" : "high",
            "problem.severity" : "error",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/multiple-calls-to-delete",
          "name" : "py/multiple-calls-to-delete",
          "shortDescription" : {
            "text" : "Multiple calls to `__del__` during object destruction"
          },
          "fullDescription" : {
            "text" : "A duplicated call to a super-class `__del__` method may lead to class instances not be cleaned up properly."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "efficiency", "correctness" ],
            "description" : "A duplicated call to a super-class `__del__` method may lead to class instances not be cleaned up properly.",
            "id" : "py/multiple-calls-to-delete",
            "kind" : "problem",
            "name" : "Multiple calls to `__del__` during object destruction",
            "precision" : "very-high",
            "problem.severity" : "warning",
            "sub-severity" : "high"
          }
        }, {
          "id" : "py/multiple-calls-to-init",
          "name" : "py/multiple-calls-to-init",
          "shortDescription" : {
            "text" : "Multiple calls to `__init__` during object initialization"
          },
          "fullDescription" : {
            "text" : "A duplicated call to a super-class `__init__` method may lead to objects of this class not being properly initialized."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "reliability", "correctness" ],
            "description" : "A duplicated call to a super-class `__init__` method may lead to objects of this class not being properly initialized.",
            "id" : "py/multiple-calls-to-init",
            "kind" : "problem",
            "name" : "Multiple calls to `__init__` during object initialization",
            "precision" : "very-high",
            "problem.severity" : "warning",
            "sub-severity" : "high"
          }
        }, {
          "id" : "py/super-in-old-style",
          "name" : "py/super-in-old-style",
          "shortDescription" : {
            "text" : "'super' in old style class"
          },
          "fullDescription" : {
            "text" : "Using super() to access inherited methods is not supported by old-style classes."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "portability", "correctness" ],
            "description" : "Using super() to access inherited methods is not supported by old-style classes.",
            "id" : "py/super-in-old-style",
            "kind" : "problem",
            "name" : "'super' in old style class",
            "precision" : "very-high",
            "problem.severity" : "error",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/call/wrong-named-class-argument",
          "name" : "py/call/wrong-named-class-argument",
          "shortDescription" : {
            "text" : "Wrong name for an argument in a class instantiation"
          },
          "fullDescription" : {
            "text" : "Using a named argument whose name does not correspond to a parameter of the __init__ method of the class being instantiated, will result in a TypeError at runtime."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "correctness", "external/cwe/cwe-628" ],
            "description" : "Using a named argument whose name does not correspond to a\n              parameter of the __init__ method of the class being\n              instantiated, will result in a TypeError at runtime.",
            "id" : "py/call/wrong-named-class-argument",
            "kind" : "problem",
            "name" : "Wrong name for an argument in a class instantiation",
            "precision" : "very-high",
            "problem.severity" : "error",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/call/wrong-number-class-arguments",
          "name" : "py/call/wrong-number-class-arguments",
          "shortDescription" : {
            "text" : "Wrong number of arguments in a class instantiation"
          },
          "fullDescription" : {
            "text" : "Using too many or too few arguments in a call to the `__init__` method of a class will result in a TypeError at runtime."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "correctness", "external/cwe/cwe-685" ],
            "description" : "Using too many or too few arguments in a call to the `__init__`\n              method of a class will result in a TypeError at runtime.",
            "id" : "py/call/wrong-number-class-arguments",
            "kind" : "problem",
            "name" : "Wrong number of arguments in a class instantiation",
            "precision" : "very-high",
            "problem.severity" : "error",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/catch-base-exception",
          "name" : "py/catch-base-exception",
          "shortDescription" : {
            "text" : "Except block handles 'BaseException'"
          },
          "fullDescription" : {
            "text" : "Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "note"
          },
          "properties" : {
            "tags" : [ "reliability", "readability", "convention", "external/cwe/cwe-396" ],
            "description" : "Handling 'BaseException' means that system exits and keyboard interrupts may be mis-handled.",
            "id" : "py/catch-base-exception",
            "kind" : "problem",
            "name" : "Except block handles 'BaseException'",
            "precision" : "very-high",
            "problem.severity" : "recommendation",
            "sub-severity" : "high"
          }
        }, {
          "id" : "py/empty-except",
          "name" : "py/empty-except",
          "shortDescription" : {
            "text" : "Empty except"
          },
          "fullDescription" : {
            "text" : "Except doesn't do anything and has no comment"
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "note"
          },
          "properties" : {
            "tags" : [ "reliability", "maintainability", "external/cwe/cwe-390" ],
            "description" : "Except doesn't do anything and has no comment",
            "id" : "py/empty-except",
            "kind" : "problem",
            "name" : "Empty except",
            "precision" : "high",
            "problem.severity" : "recommendation",
            "sub-severity" : "high"
          }
        }, {
          "id" : "py/useless-except",
          "name" : "py/useless-except",
          "shortDescription" : {
            "text" : "Non-exception in 'except' clause"
          },
          "fullDescription" : {
            "text" : "An exception handler specifying a non-exception type will never handle any exception."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "correctness", "types" ],
            "description" : "An exception handler specifying a non-exception type will never handle any exception.",
            "id" : "py/useless-except",
            "kind" : "problem",
            "name" : "Non-exception in 'except' clause",
            "precision" : "very-high",
            "problem.severity" : "error",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/illegal-raise",
          "name" : "py/illegal-raise",
          "shortDescription" : {
            "text" : "Illegal raise"
          },
          "fullDescription" : {
            "text" : "Raising a non-exception object or type will result in a TypeError being raised instead."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "correctness", "types" ],
            "description" : "Raising a non-exception object or type will result in a TypeError being raised instead.",
            "id" : "py/illegal-raise",
            "kind" : "problem",
            "name" : "Illegal raise",
            "precision" : "very-high",
            "problem.severity" : "error",
            "sub-severity" : "high"
          }
        }, {
          "id" : "py/unreachable-except",
          "name" : "py/unreachable-except",
          "shortDescription" : {
            "text" : "Unreachable 'except' block"
          },
          "fullDescription" : {
            "text" : "Handling general exceptions before specific exceptions means that the specific handlers are never executed."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "maintainability", "external/cwe/cwe-561" ],
            "description" : "Handling general exceptions before specific exceptions means that the specific\n              handlers are never executed.",
            "id" : "py/unreachable-except",
            "kind" : "problem",
            "name" : "Unreachable 'except' block",
            "precision" : "very-high",
            "problem.severity" : "error",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/raise-not-implemented",
          "name" : "py/raise-not-implemented",
          "shortDescription" : {
            "text" : "NotImplemented is not an Exception"
          },
          "fullDescription" : {
            "text" : "Using 'NotImplemented' as an exception will result in a type error."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "reliability", "maintainability" ],
            "description" : "Using 'NotImplemented' as an exception will result in a type error.",
            "id" : "py/raise-not-implemented",
            "kind" : "problem",
            "name" : "NotImplemented is not an Exception",
            "precision" : "very-high",
            "problem.severity" : "warning",
            "sub-severity" : "high"
          }
        }, {
          "id" : "py/raises-tuple",
          "name" : "py/raises-tuple",
          "shortDescription" : {
            "text" : "Raising a tuple"
          },
          "fullDescription" : {
            "text" : "Raising a tuple will result in all but the first element being discarded"
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "maintainability" ],
            "description" : "Raising a tuple will result in all but the first element being discarded",
            "id" : "py/raises-tuple",
            "kind" : "problem",
            "name" : "Raising a tuple",
            "precision" : "very-high",
            "problem.severity" : "warning",
            "sub-severity" : "high"
          }
        }, {
          "id" : "py/unguarded-next-in-generator",
          "name" : "py/unguarded-next-in-generator",
          "shortDescription" : {
            "text" : "Unguarded next in generator"
          },
          "fullDescription" : {
            "text" : "Calling next() in a generator may cause unintended early termination of an iteration."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "maintainability", "portability" ],
            "description" : "Calling next() in a generator may cause unintended early termination of an iteration.",
            "id" : "py/unguarded-next-in-generator",
            "kind" : "problem",
            "name" : "Unguarded next in generator",
            "precision" : "very-high",
            "problem.severity" : "warning",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/super-not-enclosing-class",
          "name" : "py/super-not-enclosing-class",
          "shortDescription" : {
            "text" : "First argument to super() is not enclosing class"
          },
          "fullDescription" : {
            "text" : "Calling super with something other than the enclosing class may cause incorrect object initialization."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "maintainability", "convention", "external/cwe/cwe-687" ],
            "description" : "Calling super with something other than the enclosing class may cause incorrect object initialization.",
            "id" : "py/super-not-enclosing-class",
            "kind" : "problem",
            "name" : "First argument to super() is not enclosing class",
            "precision" : "high",
            "problem.severity" : "error",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/comparison-of-constants",
          "name" : "py/comparison-of-constants",
          "shortDescription" : {
            "text" : "Comparison of constants"
          },
          "fullDescription" : {
            "text" : "Comparison of constants is always constant, but is harder to read than a simple constant."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "maintainability", "useless-code", "external/cwe/cwe-570", "external/cwe/cwe-571" ],
            "description" : "Comparison of constants is always constant, but is harder to read than a simple constant.",
            "id" : "py/comparison-of-constants",
            "kind" : "problem",
            "name" : "Comparison of constants",
            "precision" : "very-high",
            "problem.severity" : "warning",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/comparison-of-identical-expressions",
          "name" : "py/comparison-of-identical-expressions",
          "shortDescription" : {
            "text" : "Comparison of identical values"
          },
          "fullDescription" : {
            "text" : "Comparison of identical values, the intent of which is unclear."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "reliability", "correctness", "readability", "convention", "external/cwe/cwe-570", "external/cwe/cwe-571" ],
            "description" : "Comparison of identical values, the intent of which is unclear.",
            "id" : "py/comparison-of-identical-expressions",
            "kind" : "problem",
            "name" : "Comparison of identical values",
            "precision" : "very-high",
            "problem.severity" : "warning",
            "sub-severity" : "high"
          }
        }, {
          "id" : "py/comparison-missing-self",
          "name" : "py/comparison-missing-self",
          "shortDescription" : {
            "text" : "Maybe missing 'self' in comparison"
          },
          "fullDescription" : {
            "text" : "Comparison of identical values, the intent of which is unclear."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "reliability", "maintainability", "external/cwe/cwe-570", "external/cwe/cwe-571" ],
            "description" : "Comparison of identical values, the intent of which is unclear.",
            "id" : "py/comparison-missing-self",
            "kind" : "problem",
            "name" : "Maybe missing 'self' in comparison",
            "precision" : "very-high",
            "problem.severity" : "warning",
            "sub-severity" : "high"
          }
        }, {
          "id" : "py/redundant-comparison",
          "name" : "py/redundant-comparison",
          "shortDescription" : {
            "text" : "Redundant comparison"
          },
          "fullDescription" : {
            "text" : "The result of a comparison is implied by a previous comparison."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "useless-code", "external/cwe/cwe-561", "external/cwe/cwe-570", "external/cwe/cwe-571" ],
            "description" : "The result of a comparison is implied by a previous comparison.",
            "id" : "py/redundant-comparison",
            "kind" : "problem",
            "name" : "Redundant comparison",
            "precision" : "high",
            "problem.severity" : "warning",
            "sub-severity" : "high"
          }
        }, {
          "id" : "py/member-test-non-container",
          "name" : "py/member-test-non-container",
          "shortDescription" : {
            "text" : "Membership test with a non-container"
          },
          "fullDescription" : {
            "text" : "A membership test, such as 'item in sequence', with a non-container on the right hand side will raise a 'TypeError'."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "correctness" ],
            "description" : "A membership test, such as 'item in sequence', with a non-container on the right hand side will raise a 'TypeError'.",
            "id" : "py/member-test-non-container",
            "kind" : "problem",
            "name" : "Membership test with a non-container",
            "precision" : "high",
            "problem.severity" : "error",
            "sub-severity" : "high"
          }
        }, {
          "id" : "py/duplicate-key-dict-literal",
          "name" : "py/duplicate-key-dict-literal",
          "shortDescription" : {
            "text" : "Duplicate key in dict literal"
          },
          "fullDescription" : {
            "text" : "Duplicate key in dict literal. All but the last will be lost."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "reliability", "useless-code", "external/cwe/cwe-561" ],
            "description" : "Duplicate key in dict literal. All but the last will be lost.",
            "id" : "py/duplicate-key-dict-literal",
            "kind" : "problem",
            "name" : "Duplicate key in dict literal",
            "precision" : "very-high",
            "problem.severity" : "warning",
            "sub-severity" : "high"
          }
        }, {
          "id" : "py/test-equals-none",
          "name" : "py/test-equals-none",
          "shortDescription" : {
            "text" : "Testing equality to None"
          },
          "fullDescription" : {
            "text" : "Testing whether an object is 'None' using the == operator is inefficient and potentially incorrect."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "note"
          },
          "properties" : {
            "tags" : [ "efficiency", "maintainability" ],
            "description" : "Testing whether an object is 'None' using the == operator is inefficient and potentially incorrect.",
            "id" : "py/test-equals-none",
            "kind" : "problem",
            "name" : "Testing equality to None",
            "precision" : "very-high",
            "problem.severity" : "recommendation",
            "sub-severity" : "high"
          }
        }, {
          "id" : "py/percent-format/not-mapping",
          "name" : "py/percent-format/not-mapping",
          "shortDescription" : {
            "text" : "Formatted object is not a mapping"
          },
          "fullDescription" : {
            "text" : "The formatted object must be a mapping when the format includes a named specifier; otherwise a TypeError will be raised.\""
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "correctness" ],
            "description" : "The formatted object must be a mapping when the format includes a named specifier; otherwise a TypeError will be raised.\"",
            "id" : "py/percent-format/not-mapping",
            "kind" : "problem",
            "name" : "Formatted object is not a mapping",
            "precision" : "high",
            "problem.severity" : "error",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/explicit-call-to-delete",
          "name" : "py/explicit-call-to-delete",
          "shortDescription" : {
            "text" : "`__del__` is called explicitly"
          },
          "fullDescription" : {
            "text" : "The `__del__` special method is called by the virtual machine when an object is being finalized. It should not be called explicitly."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "reliability", "correctness" ],
            "description" : "The `__del__` special method is called by the virtual machine when an object is being finalized. It should not be called explicitly.",
            "id" : "py/explicit-call-to-delete",
            "kind" : "problem",
            "name" : "`__del__` is called explicitly",
            "precision" : "very-high",
            "problem.severity" : "warning",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/str-format/mixed-fields",
          "name" : "py/str-format/mixed-fields",
          "shortDescription" : {
            "text" : "Formatting string mixes implicitly and explicitly numbered fields"
          },
          "fullDescription" : {
            "text" : "Using implicit and explicit numbering in string formatting operations, such as '\"{}: {1}\".format(a,b)', will raise a ValueError."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "correctness" ],
            "description" : "Using implicit and explicit numbering in string formatting operations, such as '\"{}: {1}\".format(a,b)', will raise a ValueError.",
            "id" : "py/str-format/mixed-fields",
            "kind" : "problem",
            "name" : "Formatting string mixes implicitly and explicitly numbered fields",
            "precision" : "high",
            "problem.severity" : "error",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/str-format/surplus-argument",
          "name" : "py/str-format/surplus-argument",
          "shortDescription" : {
            "text" : "Unused argument in a formatting call"
          },
          "fullDescription" : {
            "text" : "Including surplus arguments in a formatting call makes code more difficult to read and may indicate an error."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "maintainability", "useless-code" ],
            "description" : "Including surplus arguments in a formatting call makes code more difficult to read and may indicate an error.",
            "id" : "py/str-format/surplus-argument",
            "kind" : "problem",
            "name" : "Unused argument in a formatting call",
            "precision" : "high",
            "problem.severity" : "warning",
            "sub-severity" : "high"
          }
        }, {
          "id" : "py/str-format/surplus-named-argument",
          "name" : "py/str-format/surplus-named-argument",
          "shortDescription" : {
            "text" : "Unused named argument in formatting call"
          },
          "fullDescription" : {
            "text" : "Including surplus keyword arguments in a formatting call makes code more difficult to read and may indicate an error."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "maintainability", "useless-code" ],
            "description" : "Including surplus keyword arguments in a formatting call makes code more difficult to read and may indicate an error.",
            "id" : "py/str-format/surplus-named-argument",
            "kind" : "problem",
            "name" : "Unused named argument in formatting call",
            "precision" : "very-high",
            "problem.severity" : "warning",
            "sub-severity" : "high"
          }
        }, {
          "id" : "py/str-format/missing-named-argument",
          "name" : "py/str-format/missing-named-argument",
          "shortDescription" : {
            "text" : "Missing named arguments in formatting call"
          },
          "fullDescription" : {
            "text" : "A string formatting operation, such as '\"{name}\".format(key=b)', where the names of format items in the format string differs from the names of the values to be formatted will raise a KeyError."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "correctness" ],
            "description" : "A string formatting operation, such as '\"{name}\".format(key=b)',\n              where the names of format items in the format string differs from the names of the values to be formatted will raise a KeyError.",
            "id" : "py/str-format/missing-named-argument",
            "kind" : "problem",
            "name" : "Missing named arguments in formatting call",
            "precision" : "high",
            "problem.severity" : "error",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/str-format/missing-argument",
          "name" : "py/str-format/missing-argument",
          "shortDescription" : {
            "text" : "Too few arguments in formatting call"
          },
          "fullDescription" : {
            "text" : "A string formatting operation, such as '\"{0}: {1}, {2}\".format(a,b)', where the number of values to be formatted is too few for the format string will raise an IndexError."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "correctness" ],
            "description" : "A string formatting operation, such as '\"{0}: {1}, {2}\".format(a,b)',\n              where the number of values to be formatted is too few for the format string will raise an IndexError.",
            "id" : "py/str-format/missing-argument",
            "kind" : "problem",
            "name" : "Too few arguments in formatting call",
            "precision" : "high",
            "problem.severity" : "error",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/hash-unhashable-value",
          "name" : "py/hash-unhashable-value",
          "shortDescription" : {
            "text" : "Unhashable object hashed"
          },
          "fullDescription" : {
            "text" : "Hashing an object which is not hashable will result in a TypeError at runtime."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "correctness" ],
            "description" : "Hashing an object which is not hashable will result in a TypeError at runtime.",
            "id" : "py/hash-unhashable-value",
            "kind" : "problem",
            "name" : "Unhashable object hashed",
            "precision" : "very-high",
            "problem.severity" : "error",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/comparison-using-is",
          "name" : "py/comparison-using-is",
          "shortDescription" : {
            "text" : "Comparison using is when operands support `__eq__`"
          },
          "fullDescription" : {
            "text" : "Comparison using 'is' when equivalence is not the same as identity"
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "reliability", "correctness" ],
            "description" : "Comparison using 'is' when equivalence is not the same as identity",
            "id" : "py/comparison-using-is",
            "kind" : "problem",
            "name" : "Comparison using is when operands support `__eq__`",
            "precision" : "high",
            "problem.severity" : "warning",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/call-to-non-callable",
          "name" : "py/call-to-non-callable",
          "shortDescription" : {
            "text" : "Non-callable called"
          },
          "fullDescription" : {
            "text" : "A call to an object which is not a callable will raise a TypeError at runtime."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "correctness", "types" ],
            "description" : "A call to an object which is not a callable will raise a TypeError at runtime.",
            "id" : "py/call-to-non-callable",
            "kind" : "problem",
            "name" : "Non-callable called",
            "precision" : "high",
            "problem.severity" : "error",
            "sub-severity" : "high"
          }
        }, {
          "id" : "py/regex/backspace-escape",
          "name" : "py/regex/backspace-escape",
          "shortDescription" : {
            "text" : "Backspace escape in regular expression"
          },
          "fullDescription" : {
            "text" : "Using '\\b' to escape the backspace character in a regular expression is confusing since it could be mistaken for a word boundary assertion."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "note"
          },
          "properties" : {
            "tags" : [ "maintainability" ],
            "description" : "Using '\\b' to escape the backspace character in a regular expression is confusing\n              since it could be mistaken for a word boundary assertion.",
            "id" : "py/regex/backspace-escape",
            "kind" : "problem",
            "name" : "Backspace escape in regular expression",
            "precision" : "very-high",
            "problem.severity" : "recommendation",
            "sub-severity" : "high"
          }
        }, {
          "id" : "py/regex/duplicate-in-character-class",
          "name" : "py/regex/duplicate-in-character-class",
          "shortDescription" : {
            "text" : "Duplication in regular expression character class"
          },
          "fullDescription" : {
            "text" : "Duplicate characters in a class have no effect and may indicate an error in the regular expression."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "reliability", "readability" ],
            "description" : "Duplicate characters in a class have no effect and may indicate an error in the regular expression.",
            "id" : "py/regex/duplicate-in-character-class",
            "kind" : "problem",
            "name" : "Duplication in regular expression character class",
            "precision" : "very-high",
            "problem.severity" : "warning",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/regex/incomplete-special-group",
          "name" : "py/regex/incomplete-special-group",
          "shortDescription" : {
            "text" : "Missing part of special group in regular expression"
          },
          "fullDescription" : {
            "text" : "Incomplete special groups are parsed as normal groups and are unlikely to match the intended strings."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "reliability", "correctness" ],
            "description" : "Incomplete special groups are parsed as normal groups and are unlikely to match the intended strings.",
            "id" : "py/regex/incomplete-special-group",
            "kind" : "problem",
            "name" : "Missing part of special group in regular expression",
            "precision" : "high",
            "problem.severity" : "warning",
            "sub-severity" : "high"
          }
        }, {
          "id" : "py/regex/unmatchable-caret",
          "name" : "py/regex/unmatchable-caret",
          "shortDescription" : {
            "text" : "Unmatchable caret in regular expression"
          },
          "fullDescription" : {
            "text" : "Regular expressions containing a caret '^' in the middle cannot be matched, whatever the input."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "correctness" ],
            "description" : "Regular expressions containing a caret '^' in the middle cannot be matched, whatever the input.",
            "id" : "py/regex/unmatchable-caret",
            "kind" : "problem",
            "name" : "Unmatchable caret in regular expression",
            "precision" : "high",
            "problem.severity" : "error",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/regex/unmatchable-dollar",
          "name" : "py/regex/unmatchable-dollar",
          "shortDescription" : {
            "text" : "Unmatchable dollar in regular expression"
          },
          "fullDescription" : {
            "text" : "Regular expressions containing a dollar '$' in the middle cannot be matched, whatever the input."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "correctness" ],
            "description" : "Regular expressions containing a dollar '$' in the middle cannot be matched, whatever the input.",
            "id" : "py/regex/unmatchable-dollar",
            "kind" : "problem",
            "name" : "Unmatchable dollar in regular expression",
            "precision" : "high",
            "problem.severity" : "error",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/truncated-division",
          "name" : "py/truncated-division",
          "shortDescription" : {
            "text" : "Result of integer division may be truncated"
          },
          "fullDescription" : {
            "text" : "The arguments to a division statement may be integers, which may cause the result to be truncated in Python 2."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "maintainability", "correctness" ],
            "description" : "The arguments to a division statement may be integers, which\n              may cause the result to be truncated in Python 2.",
            "id" : "py/truncated-division",
            "kind" : "problem",
            "name" : "Result of integer division may be truncated",
            "precision" : "very-high",
            "problem.severity" : "warning",
            "sub-severity" : "high"
          }
        }, {
          "id" : "py/implicit-string-concatenation-in-list",
          "name" : "py/implicit-string-concatenation-in-list",
          "shortDescription" : {
            "text" : "Implicit string concatenation in a list"
          },
          "fullDescription" : {
            "text" : "Omitting a comma between strings causes implicit concatenation which is confusing in a list."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "reliability", "maintainability", "convention", "external/cwe/cwe-665" ],
            "description" : "Omitting a comma between strings causes implicit concatenation which is confusing in a list.",
            "id" : "py/implicit-string-concatenation-in-list",
            "kind" : "problem",
            "name" : "Implicit string concatenation in a list",
            "precision" : "high",
            "problem.severity" : "warning",
            "sub-severity" : "high"
          }
        }, {
          "id" : "py/unnecessary-lambda",
          "name" : "py/unnecessary-lambda",
          "shortDescription" : {
            "text" : "Unnecessary lambda"
          },
          "fullDescription" : {
            "text" : "A lambda is used that calls through to a function without modifying any parameters"
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "note"
          },
          "properties" : {
            "tags" : [ "maintainability", "useless-code" ],
            "description" : "A lambda is used that calls through to a function without modifying any parameters",
            "id" : "py/unnecessary-lambda",
            "kind" : "problem",
            "name" : "Unnecessary lambda",
            "precision" : "high",
            "problem.severity" : "recommendation",
            "sub-severity" : "high"
          }
        }, {
          "id" : "py/percent-format/unsupported-character",
          "name" : "py/percent-format/unsupported-character",
          "shortDescription" : {
            "text" : "Unsupported format character"
          },
          "fullDescription" : {
            "text" : "An unsupported format character in a format string"
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "correctness" ],
            "description" : "An unsupported format character in a format string",
            "id" : "py/percent-format/unsupported-character",
            "kind" : "problem",
            "name" : "Unsupported format character",
            "precision" : "high",
            "problem.severity" : "error",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/use-of-apply",
          "name" : "py/use-of-apply",
          "shortDescription" : {
            "text" : "'apply' function used"
          },
          "fullDescription" : {
            "text" : "The builtin function 'apply' is obsolete and should not be used."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "maintainability" ],
            "description" : "The builtin function 'apply' is obsolete and should not be used.",
            "id" : "py/use-of-apply",
            "kind" : "problem",
            "name" : "'apply' function used",
            "precision" : "very-high",
            "problem.severity" : "warning",
            "sub-severity" : "high"
          }
        }, {
          "id" : "py/use-of-input",
          "name" : "py/use-of-input",
          "shortDescription" : {
            "text" : "'input' function used in Python 2"
          },
          "fullDescription" : {
            "text" : "The built-in function 'input' is used which, in Python 2, can allow arbitrary code to be run."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "correctness" ],
            "description" : "The built-in function 'input' is used which, in Python 2, can allow arbitrary code to be run.",
            "id" : "py/use-of-input",
            "kind" : "problem",
            "name" : "'input' function used in Python 2",
            "precision" : "high",
            "problem.severity" : "error",
            "sub-severity" : "high"
          }
        }, {
          "id" : "py/call/wrong-named-argument",
          "name" : "py/call/wrong-named-argument",
          "shortDescription" : {
            "text" : "Wrong name for an argument in a call"
          },
          "fullDescription" : {
            "text" : "Using a named argument whose name does not correspond to a parameter of the called function or method, will result in a TypeError at runtime."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "correctness", "external/cwe/cwe-628" ],
            "description" : "Using a named argument whose name does not correspond to a\n              parameter of the called function or method, will result in a\n              TypeError at runtime.",
            "id" : "py/call/wrong-named-argument",
            "kind" : "problem",
            "name" : "Wrong name for an argument in a call",
            "precision" : "very-high",
            "problem.severity" : "error",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/percent-format/wrong-arguments",
          "name" : "py/percent-format/wrong-arguments",
          "shortDescription" : {
            "text" : "Wrong number of arguments for format"
          },
          "fullDescription" : {
            "text" : "A string formatting operation, such as '\"%s: %s, %s\" % (a,b)', where the number of conversion specifiers in the format string differs from the number of values to be formatted will raise a TypeError."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "correctness", "external/cwe/cwe-685" ],
            "description" : "A string formatting operation, such as '\"%s: %s, %s\" % (a,b)', where the number of conversion specifiers in the\n              format string differs from the number of values to be formatted will raise a TypeError.",
            "id" : "py/percent-format/wrong-arguments",
            "kind" : "problem",
            "name" : "Wrong number of arguments for format",
            "precision" : "very-high",
            "problem.severity" : "error",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/call/wrong-arguments",
          "name" : "py/call/wrong-arguments",
          "shortDescription" : {
            "text" : "Wrong number of arguments in a call"
          },
          "fullDescription" : {
            "text" : "Using too many or too few arguments in a call to a function will result in a TypeError at runtime."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "correctness", "external/cwe/cwe-685" ],
            "description" : "Using too many or too few arguments in a call to a function will result in a TypeError at runtime.",
            "id" : "py/call/wrong-arguments",
            "kind" : "problem",
            "name" : "Wrong number of arguments in a call",
            "precision" : "very-high",
            "problem.severity" : "error",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/mixed-returns",
          "name" : "py/mixed-returns",
          "shortDescription" : {
            "text" : "Explicit returns mixed with implicit (fall through) returns"
          },
          "fullDescription" : {
            "text" : "Mixing implicit and explicit returns indicates a likely error as implicit returns always return 'None'."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "note"
          },
          "properties" : {
            "tags" : [ "reliability", "maintainability" ],
            "description" : "Mixing implicit and explicit returns indicates a likely error as implicit returns always return 'None'.",
            "id" : "py/mixed-returns",
            "kind" : "problem",
            "name" : "Explicit returns mixed with implicit (fall through) returns",
            "precision" : "high",
            "problem.severity" : "recommendation",
            "sub-severity" : "high"
          }
        }, {
          "id" : "py/deprecated-slice-method",
          "name" : "py/deprecated-slice-method",
          "shortDescription" : {
            "text" : "Deprecated slice method"
          },
          "fullDescription" : {
            "text" : "Defining special methods for slicing has been deprecated since Python 2.0."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "maintainability" ],
            "description" : "Defining special methods for slicing has been deprecated since Python 2.0.",
            "id" : "py/deprecated-slice-method",
            "kind" : "problem",
            "name" : "Deprecated slice method",
            "precision" : "very-high",
            "problem.severity" : "warning",
            "sub-severity" : "high"
          }
        }, {
          "id" : "py/explicit-return-in-init",
          "name" : "py/explicit-return-in-init",
          "shortDescription" : {
            "text" : "`__init__` method returns a value"
          },
          "fullDescription" : {
            "text" : "Explicitly returning a value from an `__init__` method will raise a TypeError."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "correctness" ],
            "description" : "Explicitly returning a value from an `__init__` method will raise a TypeError.",
            "id" : "py/explicit-return-in-init",
            "kind" : "problem",
            "name" : "`__init__` method returns a value",
            "precision" : "very-high",
            "problem.severity" : "error",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/inheritance/incorrect-overriding-signature",
          "name" : "py/inheritance/incorrect-overriding-signature",
          "shortDescription" : {
            "text" : "Mismatch between signature and use of an overriding method"
          },
          "fullDescription" : {
            "text" : "Method has a different signature from the overridden method and, if it were called, would be likely to cause an error."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "maintainability" ],
            "description" : "Method has a different signature from the overridden method and, if it were called, would be likely to cause an error.",
            "id" : "py/inheritance/incorrect-overriding-signature",
            "kind" : "problem",
            "name" : "Mismatch between signature and use of an overriding method",
            "precision" : "high",
            "problem.severity" : "error",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/inheritance/incorrect-overridden-signature",
          "name" : "py/inheritance/incorrect-overridden-signature",
          "shortDescription" : {
            "text" : "Mismatch between signature and use of an overridden method"
          },
          "fullDescription" : {
            "text" : "Method has a signature that differs from both the signature of its overriding methods and the arguments with which it is called, and if it were called, would be likely to cause an error."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "note"
          },
          "properties" : {
            "tags" : [ "maintainability" ],
            "description" : "Method has a signature that differs from both the signature of its overriding methods and\n              the arguments with which it is called, and if it were called, would be likely to cause an error.",
            "id" : "py/inheritance/incorrect-overridden-signature",
            "kind" : "problem",
            "name" : "Mismatch between signature and use of an overridden method",
            "precision" : "high",
            "problem.severity" : "recommendation",
            "sub-severity" : "high"
          }
        }, {
          "id" : "py/unexpected-raise-in-special-method",
          "name" : "py/unexpected-raise-in-special-method",
          "shortDescription" : {
            "text" : "Non-standard exception raised in special method"
          },
          "fullDescription" : {
            "text" : "Raising a non-standard exception in a special method alters the expected interface of that method."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "note"
          },
          "properties" : {
            "tags" : [ "reliability", "maintainability", "convention" ],
            "description" : "Raising a non-standard exception in a special method alters the expected interface of that method.",
            "id" : "py/unexpected-raise-in-special-method",
            "kind" : "problem",
            "name" : "Non-standard exception raised in special method",
            "precision" : "very-high",
            "problem.severity" : "recommendation",
            "sub-severity" : "high"
          }
        }, {
          "id" : "py/init-method-is-generator",
          "name" : "py/init-method-is-generator",
          "shortDescription" : {
            "text" : "`__init__` method is a generator"
          },
          "fullDescription" : {
            "text" : "`__init__` method is a generator."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "correctness" ],
            "description" : "`__init__` method is a generator.",
            "id" : "py/init-method-is-generator",
            "kind" : "problem",
            "name" : "`__init__` method is a generator",
            "precision" : "very-high",
            "problem.severity" : "error",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/iter-returns-non-iterator",
          "name" : "py/iter-returns-non-iterator",
          "shortDescription" : {
            "text" : "`__iter__` method returns a non-iterator"
          },
          "fullDescription" : {
            "text" : "The `__iter__` method returns a non-iterator which, if used in a 'for' loop, would raise a 'TypeError'."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "correctness" ],
            "description" : "The `__iter__` method returns a non-iterator which, if used in a 'for' loop, would raise a 'TypeError'.",
            "id" : "py/iter-returns-non-iterator",
            "kind" : "problem",
            "name" : "`__iter__` method returns a non-iterator",
            "precision" : "high",
            "problem.severity" : "error",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/iter-returns-non-self",
          "name" : "py/iter-returns-non-self",
          "shortDescription" : {
            "text" : "Iterator does not return self from `__iter__` method"
          },
          "fullDescription" : {
            "text" : "Iterator does not return self from `__iter__` method, violating the iterator protocol."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "correctness" ],
            "description" : "Iterator does not return self from `__iter__` method, violating the iterator protocol.",
            "id" : "py/iter-returns-non-self",
            "kind" : "problem",
            "name" : "Iterator does not return self from `__iter__` method",
            "precision" : "high",
            "problem.severity" : "error",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/modification-of-default-value",
          "name" : "py/modification-of-default-value",
          "shortDescription" : {
            "text" : "Modification of parameter with default"
          },
          "fullDescription" : {
            "text" : "Modifying the default value of a parameter can lead to unexpected results."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "maintainability" ],
            "description" : "Modifying the default value of a parameter can lead to unexpected\n              results.",
            "id" : "py/modification-of-default-value",
            "kind" : "path-problem",
            "name" : "Modification of parameter with default",
            "precision" : "high",
            "problem.severity" : "error",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/not-named-cls",
          "name" : "py/not-named-cls",
          "shortDescription" : {
            "text" : "First parameter of a class method is not named 'cls'"
          },
          "fullDescription" : {
            "text" : "Using an alternative name for the first parameter of a class method makes code more difficult to read; PEP8 states that the first parameter to class methods should be 'cls'."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "note"
          },
          "properties" : {
            "tags" : [ "maintainability", "readability", "convention" ],
            "description" : "Using an alternative name for the first parameter of a class method makes code more\n              difficult to read; PEP8 states that the first parameter to class methods should be 'cls'.",
            "id" : "py/not-named-cls",
            "kind" : "problem",
            "name" : "First parameter of a class method is not named 'cls'",
            "precision" : "high",
            "problem.severity" : "recommendation",
            "sub-severity" : "high"
          }
        }, {
          "id" : "py/not-named-self",
          "name" : "py/not-named-self",
          "shortDescription" : {
            "text" : "First parameter of a method is not named 'self'"
          },
          "fullDescription" : {
            "text" : "Using an alternative name for the first parameter of an instance method makes code more difficult to read; PEP8 states that the first parameter to instance methods should be 'self'."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "note"
          },
          "properties" : {
            "tags" : [ "maintainability", "readability", "convention" ],
            "description" : "Using an alternative name for the first parameter of an instance method makes\n              code more difficult to read; PEP8 states that the first parameter to instance\n              methods should be 'self'.",
            "id" : "py/not-named-self",
            "kind" : "problem",
            "name" : "First parameter of a method is not named 'self'",
            "precision" : "very-high",
            "problem.severity" : "recommendation",
            "sub-severity" : "high"
          }
        }, {
          "id" : "py/overly-complex-delete",
          "name" : "py/overly-complex-delete",
          "shortDescription" : {
            "text" : "Overly complex `__del__` method"
          },
          "fullDescription" : {
            "text" : "`__del__` methods may be called at arbitrary times, perhaps never called at all, and should be simple."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "note"
          },
          "properties" : {
            "tags" : [ "efficiency", "maintainability", "complexity", "statistical", "non-attributable" ],
            "description" : "`__del__` methods may be called at arbitrary times, perhaps never called at all, and should be simple.",
            "id" : "py/overly-complex-delete",
            "kind" : "problem",
            "name" : "Overly complex `__del__` method",
            "precision" : "high",
            "problem.severity" : "recommendation",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/mixed-tuple-returns",
          "name" : "py/mixed-tuple-returns",
          "shortDescription" : {
            "text" : "Returning tuples with varying lengths"
          },
          "fullDescription" : {
            "text" : "A function that potentially returns tuples of different lengths may indicate a problem."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "note"
          },
          "properties" : {
            "tags" : [ "reliability", "maintainability" ],
            "description" : "A function that potentially returns tuples of different lengths may indicate a problem.",
            "id" : "py/mixed-tuple-returns",
            "kind" : "problem",
            "name" : "Returning tuples with varying lengths",
            "precision" : "high",
            "problem.severity" : "recommendation",
            "sub-severity" : "high"
          }
        }, {
          "id" : "py/inheritance/signature-mismatch",
          "name" : "py/inheritance/signature-mismatch",
          "shortDescription" : {
            "text" : "Signature mismatch in overriding method"
          },
          "fullDescription" : {
            "text" : "Overriding a method without ensuring that both methods accept the same number and type of parameters has the potential to cause an error when there is a mismatch."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "reliability", "correctness" ],
            "description" : "Overriding a method without ensuring that both methods accept the same\n              number and type of parameters has the potential to cause an error when there is a mismatch.",
            "id" : "py/inheritance/signature-mismatch",
            "kind" : "problem",
            "name" : "Signature mismatch in overriding method",
            "precision" : "very-high",
            "problem.severity" : "warning",
            "sub-severity" : "high"
          }
        }, {
          "id" : "py/special-method-wrong-signature",
          "name" : "py/special-method-wrong-signature",
          "shortDescription" : {
            "text" : "Special method has incorrect signature"
          },
          "fullDescription" : {
            "text" : "Special method has incorrect signature"
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "correctness" ],
            "description" : "Special method has incorrect signature",
            "id" : "py/special-method-wrong-signature",
            "kind" : "problem",
            "name" : "Special method has incorrect signature",
            "precision" : "high",
            "problem.severity" : "error",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/procedure-return-value-used",
          "name" : "py/procedure-return-value-used",
          "shortDescription" : {
            "text" : "Use of the return value of a procedure"
          },
          "fullDescription" : {
            "text" : "The return value of a procedure (a function that does not return a value) is used. This is confusing to the reader as the value (None) has no meaning."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "maintainability" ],
            "description" : "The return value of a procedure (a function that does not return a value) is used. This is confusing to the reader as the value (None) has no meaning.",
            "id" : "py/procedure-return-value-used",
            "kind" : "problem",
            "name" : "Use of the return value of a procedure",
            "precision" : "high",
            "problem.severity" : "warning",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/cyclic-import",
          "name" : "py/cyclic-import",
          "shortDescription" : {
            "text" : "Cyclic import"
          },
          "fullDescription" : {
            "text" : "Module forms part of an import cycle, thereby indirectly importing itself."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "note"
          },
          "properties" : {
            "tags" : [ "reliability", "maintainability", "modularity" ],
            "description" : "Module forms part of an import cycle, thereby indirectly importing itself.",
            "id" : "py/cyclic-import",
            "kind" : "problem",
            "name" : "Cyclic import",
            "precision" : "high",
            "problem.severity" : "recommendation",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/import-deprecated-module",
          "name" : "py/import-deprecated-module",
          "shortDescription" : {
            "text" : "Import of deprecated module"
          },
          "fullDescription" : {
            "text" : "Import of a deprecated module"
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "maintainability", "external/cwe/cwe-477" ],
            "description" : "Import of a deprecated module",
            "id" : "py/import-deprecated-module",
            "kind" : "problem",
            "name" : "Import of deprecated module",
            "precision" : "very-high",
            "problem.severity" : "warning",
            "sub-severity" : "high"
          }
        }, {
          "id" : "py/encoding-error",
          "name" : "py/encoding-error",
          "shortDescription" : {
            "text" : "Encoding error"
          },
          "fullDescription" : {
            "text" : "Encoding errors cause failures at runtime and prevent analysis of the code."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "correctness" ],
            "description" : "Encoding errors cause failures at runtime and prevent analysis of the code.",
            "id" : "py/encoding-error",
            "kind" : "problem",
            "name" : "Encoding error",
            "precision" : "high",
            "problem.severity" : "error",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/import-and-import-from",
          "name" : "py/import-and-import-from",
          "shortDescription" : {
            "text" : "Module is imported with 'import' and 'import from'"
          },
          "fullDescription" : {
            "text" : "A module is imported with the \"import\" and \"import from\" statements"
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "note"
          },
          "properties" : {
            "tags" : [ "maintainability" ],
            "description" : "A module is imported with the \"import\" and \"import from\" statements",
            "id" : "py/import-and-import-from",
            "kind" : "problem",
            "name" : "Module is imported with 'import' and 'import from'",
            "precision" : "very-high",
            "problem.severity" : "recommendation",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/import-own-module",
          "name" : "py/import-own-module",
          "shortDescription" : {
            "text" : "Module imports itself"
          },
          "fullDescription" : {
            "text" : "A module imports itself"
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "note"
          },
          "properties" : {
            "tags" : [ "maintainability", "useless-code" ],
            "description" : "A module imports itself",
            "id" : "py/import-own-module",
            "kind" : "problem",
            "name" : "Module imports itself",
            "precision" : "very-high",
            "problem.severity" : "recommendation",
            "sub-severity" : "high"
          }
        }, {
          "id" : "py/unsafe-cyclic-import",
          "name" : "py/unsafe-cyclic-import",
          "shortDescription" : {
            "text" : "Module-level cyclic import"
          },
          "fullDescription" : {
            "text" : "Module uses member of cyclically imported module, which can lead to failure at import time."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "correctness", "types" ],
            "comprehension" : "0.5",
            "description" : "Module uses member of cyclically imported module, which can lead to failure at import time.",
            "id" : "py/unsafe-cyclic-import",
            "kind" : "problem",
            "name" : "Module-level cyclic import",
            "precision" : "high",
            "problem.severity" : "error",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/repeated-import",
          "name" : "py/repeated-import",
          "shortDescription" : {
            "text" : "Module is imported more than once"
          },
          "fullDescription" : {
            "text" : "Importing a module a second time has no effect and impairs readability"
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "note"
          },
          "properties" : {
            "tags" : [ "maintainability", "useless-code" ],
            "description" : "Importing a module a second time has no effect and impairs readability",
            "id" : "py/repeated-import",
            "kind" : "problem",
            "name" : "Module is imported more than once",
            "precision" : "very-high",
            "problem.severity" : "recommendation",
            "sub-severity" : "high"
          }
        }, {
          "id" : "py/syntax-error",
          "name" : "py/syntax-error",
          "shortDescription" : {
            "text" : "Syntax error"
          },
          "fullDescription" : {
            "text" : "Syntax errors cause failures at runtime and prevent analysis of the code."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "correctness" ],
            "description" : "Syntax errors cause failures at runtime and prevent analysis of the code.",
            "id" : "py/syntax-error",
            "kind" : "problem",
            "name" : "Syntax error",
            "precision" : "high",
            "problem.severity" : "error",
            "sub-severity" : "high"
          }
        }, {
          "id" : "py/polluting-import",
          "name" : "py/polluting-import",
          "shortDescription" : {
            "text" : "'import *' may pollute namespace"
          },
          "fullDescription" : {
            "text" : "Importing a module using 'import *' may unintentionally pollute the global namespace if the module does not define `__all__`"
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "note"
          },
          "properties" : {
            "tags" : [ "maintainability", "modularity" ],
            "description" : "Importing a module using 'import *' may unintentionally pollute the global\n              namespace if the module does not define `__all__`",
            "id" : "py/polluting-import",
            "kind" : "problem",
            "name" : "'import *' may pollute namespace",
            "precision" : "very-high",
            "problem.severity" : "recommendation",
            "sub-severity" : "high"
          }
        }, {
          "id" : "py/unused-import",
          "name" : "py/unused-import",
          "shortDescription" : {
            "text" : "Unused import"
          },
          "fullDescription" : {
            "text" : "Import is not required as it is not used"
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "note"
          },
          "properties" : {
            "tags" : [ "maintainability", "useless-code" ],
            "description" : "Import is not required as it is not used",
            "id" : "py/unused-import",
            "kind" : "problem",
            "name" : "Unused import",
            "precision" : "very-high",
            "problem.severity" : "recommendation",
            "sub-severity" : "high"
          }
        }, {
          "id" : "py/commented-out-code",
          "name" : "py/commented-out-code",
          "shortDescription" : {
            "text" : "Commented-out code"
          },
          "fullDescription" : {
            "text" : "Commented-out code makes the remaining code more difficult to read."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "note"
          },
          "properties" : {
            "tags" : [ "maintainability", "readability", "documentation" ],
            "description" : "Commented-out code makes the remaining code more difficult to read.",
            "id" : "py/commented-out-code",
            "kind" : "problem",
            "name" : "Commented-out code",
            "precision" : "high",
            "problem.severity" : "recommendation",
            "sub-severity" : "high"
          }
        }, {
          "id" : "py/old-style-octal-literal",
          "name" : "py/old-style-octal-literal",
          "shortDescription" : {
            "text" : "Confusing octal literal"
          },
          "fullDescription" : {
            "text" : "Octal literal with a leading 0 is easily misread as a decimal value"
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "note"
          },
          "properties" : {
            "tags" : [ "readability" ],
            "description" : "Octal literal with a leading 0 is easily misread as a decimal value",
            "id" : "py/old-style-octal-literal",
            "kind" : "problem",
            "name" : "Confusing octal literal",
            "precision" : "high",
            "problem.severity" : "recommendation",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/bind-socket-all-network-interfaces",
          "name" : "py/bind-socket-all-network-interfaces",
          "shortDescription" : {
            "text" : "Binding a socket to all network interfaces"
          },
          "fullDescription" : {
            "text" : "Binding a socket to all interfaces opens it up to traffic from any IPv4 address and is therefore associated with security risks."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security" ],
            "description" : "Binding a socket to all interfaces opens it up to traffic from any IPv4 address\n and is therefore associated with security risks.",
            "id" : "py/bind-socket-all-network-interfaces",
            "kind" : "problem",
            "name" : "Binding a socket to all network interfaces",
            "precision" : "high",
            "problem.severity" : "error",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/incomplete-hostname-regexp",
          "name" : "py/incomplete-hostname-regexp",
          "shortDescription" : {
            "text" : "Incomplete regular expression for hostnames"
          },
          "fullDescription" : {
            "text" : "Matching a URL or hostname against a regular expression that contains an unescaped dot as part of the hostname might match more hostnames than expected."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "correctness", "security", "external/cwe/cwe-20" ],
            "description" : "Matching a URL or hostname against a regular expression that contains an unescaped dot as part of the hostname might match more hostnames than expected.",
            "id" : "py/incomplete-hostname-regexp",
            "kind" : "problem",
            "name" : "Incomplete regular expression for hostnames",
            "precision" : "high",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "py/incomplete-url-substring-sanitization",
          "name" : "py/incomplete-url-substring-sanitization",
          "shortDescription" : {
            "text" : "Incomplete URL substring sanitization"
          },
          "fullDescription" : {
            "text" : "Security checks on the substrings of an unparsed URL are often vulnerable to bypassing."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "correctness", "security", "external/cwe/cwe-20" ],
            "description" : "Security checks on the substrings of an unparsed URL are often vulnerable to bypassing.",
            "id" : "py/incomplete-url-substring-sanitization",
            "kind" : "problem",
            "name" : "Incomplete URL substring sanitization",
            "precision" : "high",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "py/path-injection",
          "name" : "py/path-injection",
          "shortDescription" : {
            "text" : "Uncontrolled data used in path expression"
          },
          "fullDescription" : {
            "text" : "Accessing paths influenced by users can allow an attacker to access unexpected resources."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "correctness", "security", "external/owasp/owasp-a1", "external/cwe/cwe-022", "external/cwe/cwe-023", "external/cwe/cwe-036", "external/cwe/cwe-073", "external/cwe/cwe-099" ],
            "description" : "Accessing paths influenced by users can allow an attacker to access unexpected resources.",
            "id" : "py/path-injection",
            "kind" : "path-problem",
            "name" : "Uncontrolled data used in path expression",
            "precision" : "high",
            "problem.severity" : "error",
            "sub-severity" : "high"
          }
        }, {
          "id" : "py/command-line-injection",
          "name" : "py/command-line-injection",
          "shortDescription" : {
            "text" : "Uncontrolled command line"
          },
          "fullDescription" : {
            "text" : "Using externally controlled strings in a command line may allow a malicious user to change the meaning of the command."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "correctness", "security", "external/owasp/owasp-a1", "external/cwe/cwe-078", "external/cwe/cwe-088" ],
            "description" : "Using externally controlled strings in a command line may allow a malicious\n              user to change the meaning of the command.",
            "id" : "py/command-line-injection",
            "kind" : "path-problem",
            "name" : "Uncontrolled command line",
            "precision" : "high",
            "problem.severity" : "error",
            "sub-severity" : "high"
          }
        }, {
          "id" : "py/reflective-xss",
          "name" : "py/reflective-xss",
          "shortDescription" : {
            "text" : "Reflected server-side cross-site scripting"
          },
          "fullDescription" : {
            "text" : "Writing user input directly to a web page allows for a cross-site scripting vulnerability."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-079", "external/cwe/cwe-116" ],
            "description" : "Writing user input directly to a web page\n              allows for a cross-site scripting vulnerability.",
            "id" : "py/reflective-xss",
            "kind" : "path-problem",
            "name" : "Reflected server-side cross-site scripting",
            "precision" : "high",
            "problem.severity" : "error",
            "sub-severity" : "high"
          }
        }, {
          "id" : "py/sql-injection",
          "name" : "py/sql-injection",
          "shortDescription" : {
            "text" : "SQL query built from user-controlled sources"
          },
          "fullDescription" : {
            "text" : "Building a SQL query from user-controlled sources is vulnerable to insertion of malicious SQL code by the user."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-089", "external/owasp/owasp-a1" ],
            "description" : "Building a SQL query from user-controlled sources is vulnerable to insertion of\n              malicious SQL code by the user.",
            "id" : "py/sql-injection",
            "kind" : "path-problem",
            "name" : "SQL query built from user-controlled sources",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/code-injection",
          "name" : "py/code-injection",
          "shortDescription" : {
            "text" : "Code injection"
          },
          "fullDescription" : {
            "text" : "Interpreting unsanitized user input as code allows a malicious user to perform arbitrary code execution."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/owasp/owasp-a1", "external/cwe/cwe-094", "external/cwe/cwe-095", "external/cwe/cwe-116" ],
            "description" : "Interpreting unsanitized user input as code allows a malicious user to perform arbitrary\n              code execution.",
            "id" : "py/code-injection",
            "kind" : "path-problem",
            "name" : "Code injection",
            "precision" : "high",
            "problem.severity" : "error",
            "sub-severity" : "high"
          }
        }, {
          "id" : "py/stack-trace-exposure",
          "name" : "py/stack-trace-exposure",
          "shortDescription" : {
            "text" : "Information exposure through an exception"
          },
          "fullDescription" : {
            "text" : "Leaking information about an exception, such as messages and stack traces, to an external user can expose implementation details that are useful to an attacker for developing a subsequent exploit."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-209", "external/cwe/cwe-497" ],
            "description" : "Leaking information about an exception, such as messages and stack traces, to an\n              external user can expose implementation details that are useful to an attacker for\n              developing a subsequent exploit.",
            "id" : "py/stack-trace-exposure",
            "kind" : "path-problem",
            "name" : "Information exposure through an exception",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/flask-debug",
          "name" : "py/flask-debug",
          "shortDescription" : {
            "text" : "Flask app is run in debug mode"
          },
          "fullDescription" : {
            "text" : "Running a Flask app in debug mode may allow an attacker to run arbitrary code through the Werkzeug debugger."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-215", "external/cwe/cwe-489" ],
            "description" : "Running a Flask app in debug mode may allow an attacker to run arbitrary code through the Werkzeug debugger.",
            "id" : "py/flask-debug",
            "kind" : "problem",
            "name" : "Flask app is run in debug mode",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/paramiko-missing-host-key-validation",
          "name" : "py/paramiko-missing-host-key-validation",
          "shortDescription" : {
            "text" : "Accepting unknown SSH host keys when using Paramiko"
          },
          "fullDescription" : {
            "text" : "Accepting unknown host keys can allow man-in-the-middle attacks."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-295" ],
            "description" : "Accepting unknown host keys can allow man-in-the-middle attacks.",
            "id" : "py/paramiko-missing-host-key-validation",
            "kind" : "problem",
            "name" : "Accepting unknown SSH host keys when using Paramiko",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/clear-text-logging-sensitive-data",
          "name" : "py/clear-text-logging-sensitive-data",
          "shortDescription" : {
            "text" : "Clear-text logging of sensitive information"
          },
          "fullDescription" : {
            "text" : "Logging sensitive information without encryption or hashing can expose it to an attacker."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-312", "external/cwe/cwe-315", "external/cwe/cwe-359" ],
            "description" : "Logging sensitive information without encryption or hashing can\n              expose it to an attacker.",
            "id" : "py/clear-text-logging-sensitive-data",
            "kind" : "path-problem",
            "name" : "Clear-text logging of sensitive information",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/clear-text-storage-sensitive-data",
          "name" : "py/clear-text-storage-sensitive-data",
          "shortDescription" : {
            "text" : "Clear-text storage of sensitive information"
          },
          "fullDescription" : {
            "text" : "Sensitive information stored without encryption or hashing can expose it to an attacker."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-312", "external/cwe/cwe-315", "external/cwe/cwe-359" ],
            "description" : "Sensitive information stored without encryption or hashing can expose it to an\n              attacker.",
            "id" : "py/clear-text-storage-sensitive-data",
            "kind" : "path-problem",
            "name" : "Clear-text storage of sensitive information",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/weak-crypto-key",
          "name" : "py/weak-crypto-key",
          "shortDescription" : {
            "text" : "Use of weak cryptographic key"
          },
          "fullDescription" : {
            "text" : "Use of a cryptographic key that is too small may allow the encryption to be broken."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-326" ],
            "description" : "Use of a cryptographic key that is too small may allow the encryption to be broken.",
            "id" : "py/weak-crypto-key",
            "kind" : "problem",
            "name" : "Use of weak cryptographic key",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/weak-cryptographic-algorithm",
          "name" : "py/weak-cryptographic-algorithm",
          "shortDescription" : {
            "text" : "Use of a broken or weak cryptographic algorithm"
          },
          "fullDescription" : {
            "text" : "Using broken or weak cryptographic algorithms can compromise security."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-327" ],
            "description" : "Using broken or weak cryptographic algorithms can compromise security.",
            "id" : "py/weak-cryptographic-algorithm",
            "kind" : "problem",
            "name" : "Use of a broken or weak cryptographic algorithm",
            "precision" : "high",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "py/insecure-default-protocol",
          "name" : "py/insecure-default-protocol",
          "shortDescription" : {
            "text" : "Default version of SSL/TLS may be insecure"
          },
          "fullDescription" : {
            "text" : "Leaving the SSL/TLS version unspecified may result in an insecure default protocol being used."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-327" ],
            "description" : "Leaving the SSL/TLS version unspecified may result in an insecure\n              default protocol being used.",
            "id" : "py/insecure-default-protocol",
            "kind" : "problem",
            "name" : "Default version of SSL/TLS may be insecure",
            "precision" : "high",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "py/insecure-protocol",
          "name" : "py/insecure-protocol",
          "shortDescription" : {
            "text" : "Use of insecure SSL/TLS version"
          },
          "fullDescription" : {
            "text" : "Using an insecure SSL/TLS version may leave the connection vulnerable to attacks."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-327" ],
            "description" : "Using an insecure SSL/TLS version may leave the connection vulnerable to attacks.",
            "id" : "py/insecure-protocol",
            "kind" : "problem",
            "name" : "Use of insecure SSL/TLS version",
            "precision" : "high",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "py/weak-sensitive-data-hashing",
          "name" : "py/weak-sensitive-data-hashing",
          "shortDescription" : {
            "text" : "Use of a broken or weak cryptographic hashing algorithm on sensitive data"
          },
          "fullDescription" : {
            "text" : "Using broken or weak cryptographic hashing algorithms can compromise security."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-327", "external/cwe/cwe-916" ],
            "description" : "Using broken or weak cryptographic hashing algorithms can compromise security.",
            "id" : "py/weak-sensitive-data-hashing",
            "kind" : "path-problem",
            "name" : "Use of a broken or weak cryptographic hashing algorithm on sensitive data",
            "precision" : "high",
            "problem.severity" : "warning"
          }
        }, {
          "id" : "py/insecure-temporary-file",
          "name" : "py/insecure-temporary-file",
          "shortDescription" : {
            "text" : "Insecure temporary file"
          },
          "fullDescription" : {
            "text" : "Creating a temporary file using this method may be insecure."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "external/cwe/cwe-377", "security" ],
            "description" : "Creating a temporary file using this method may be insecure.",
            "id" : "py/insecure-temporary-file",
            "kind" : "problem",
            "name" : "Insecure temporary file",
            "precision" : "high",
            "problem.severity" : "error",
            "sub-severity" : "high"
          }
        }, {
          "id" : "py/unsafe-deserialization",
          "name" : "py/unsafe-deserialization",
          "shortDescription" : {
            "text" : "Deserializing untrusted input"
          },
          "fullDescription" : {
            "text" : "Deserializing user-controlled data may allow attackers to execute arbitrary code."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "external/cwe/cwe-502", "security", "serialization" ],
            "description" : "Deserializing user-controlled data may allow attackers to execute arbitrary code.",
            "id" : "py/unsafe-deserialization",
            "kind" : "path-problem",
            "name" : "Deserializing untrusted input",
            "precision" : "high",
            "problem.severity" : "error",
            "sub-severity" : "high"
          }
        }, {
          "id" : "py/url-redirection",
          "name" : "py/url-redirection",
          "shortDescription" : {
            "text" : "URL redirection from remote source"
          },
          "fullDescription" : {
            "text" : "URL redirection based on unvalidated user input may cause redirection to malicious web sites."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-601" ],
            "description" : "URL redirection based on unvalidated user input\n              may cause redirection to malicious web sites.",
            "id" : "py/url-redirection",
            "kind" : "path-problem",
            "name" : "URL redirection from remote source",
            "precision" : "high",
            "problem.severity" : "error",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/asserts-tuple",
          "name" : "py/asserts-tuple",
          "shortDescription" : {
            "text" : "Asserting a tuple"
          },
          "fullDescription" : {
            "text" : "Using an assert statement to test a tuple provides no validity checking."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "maintainability", "external/cwe/cwe-670" ],
            "description" : "Using an assert statement to test a tuple provides no validity checking.",
            "id" : "py/asserts-tuple",
            "kind" : "problem",
            "name" : "Asserting a tuple",
            "precision" : "very-high",
            "problem.severity" : "error",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/constant-conditional-expression",
          "name" : "py/constant-conditional-expression",
          "shortDescription" : {
            "text" : "Constant in conditional expression or statement"
          },
          "fullDescription" : {
            "text" : "The conditional is always true or always false"
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "maintainability", "useless-code", "external/cwe/cwe-561", "external/cwe/cwe-570", "external/cwe/cwe-571" ],
            "description" : "The conditional is always true or always false",
            "id" : "py/constant-conditional-expression",
            "kind" : "problem",
            "name" : "Constant in conditional expression or statement",
            "precision" : "very-high",
            "problem.severity" : "warning",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/iteration-string-and-sequence",
          "name" : "py/iteration-string-and-sequence",
          "shortDescription" : {
            "text" : "Iterable can be either a string or a sequence"
          },
          "fullDescription" : {
            "text" : "Iteration over either a string or a sequence in the same loop can cause errors that are hard to find."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "maintainability", "non-local" ],
            "description" : "Iteration over either a string or a sequence in the same loop can cause errors that are hard to find.",
            "id" : "py/iteration-string-and-sequence",
            "kind" : "problem",
            "name" : "Iterable can be either a string or a sequence",
            "precision" : "high",
            "problem.severity" : "error",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/mismatched-multiple-assignment",
          "name" : "py/mismatched-multiple-assignment",
          "shortDescription" : {
            "text" : "Mismatch in multiple assignment"
          },
          "fullDescription" : {
            "text" : "Assigning multiple variables without ensuring that you define a value for each variable causes an exception at runtime."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "correctness", "types" ],
            "description" : "Assigning multiple variables without ensuring that you define a\n              value for each variable causes an exception at runtime.",
            "id" : "py/mismatched-multiple-assignment",
            "kind" : "problem",
            "name" : "Mismatch in multiple assignment",
            "precision" : "very-high",
            "problem.severity" : "error",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/modification-of-locals",
          "name" : "py/modification-of-locals",
          "shortDescription" : {
            "text" : "Modification of dictionary returned by locals()"
          },
          "fullDescription" : {
            "text" : "Modifications of the dictionary returned by locals() are not propagated to the local variables of a function."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "reliability", "correctness" ],
            "description" : "Modifications of the dictionary returned by locals() are not propagated to the local variables of a function.",
            "id" : "py/modification-of-locals",
            "kind" : "problem",
            "name" : "Modification of dictionary returned by locals()",
            "precision" : "very-high",
            "problem.severity" : "warning",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/nested-loops-with-same-variable",
          "name" : "py/nested-loops-with-same-variable",
          "shortDescription" : {
            "text" : "Nested loops with same variable"
          },
          "fullDescription" : {
            "text" : "Nested loops in which the target variable is the same for each loop make the behavior of the loops difficult to understand."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "note"
          },
          "properties" : {
            "tags" : [ "maintainability", "correctness" ],
            "description" : "Nested loops in which the target variable is the same for each loop make\n              the behavior of the loops difficult to understand.",
            "id" : "py/nested-loops-with-same-variable",
            "kind" : "problem",
            "name" : "Nested loops with same variable",
            "precision" : "very-high",
            "problem.severity" : "recommendation",
            "sub-severity" : "high"
          }
        }, {
          "id" : "py/nested-loops-with-same-variable-reused",
          "name" : "py/nested-loops-with-same-variable-reused",
          "shortDescription" : {
            "text" : "Nested loops with same variable reused after inner loop body"
          },
          "fullDescription" : {
            "text" : "Redefining a variable in an inner loop and then using the variable in an outer loop causes unexpected behavior."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "maintainability", "correctness" ],
            "description" : "Redefining a variable in an inner loop and then using\n              the variable in an outer loop causes unexpected behavior.",
            "id" : "py/nested-loops-with-same-variable-reused",
            "kind" : "problem",
            "name" : "Nested loops with same variable reused after inner loop body",
            "precision" : "very-high",
            "problem.severity" : "error",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/non-iterable-in-for-loop",
          "name" : "py/non-iterable-in-for-loop",
          "shortDescription" : {
            "text" : "Non-iterable used in for loop"
          },
          "fullDescription" : {
            "text" : "Using a non-iterable as the object in a 'for' loop causes a TypeError."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "correctness", "types" ],
            "description" : "Using a non-iterable as the object in a 'for' loop causes a TypeError.",
            "id" : "py/non-iterable-in-for-loop",
            "kind" : "problem",
            "name" : "Non-iterable used in for loop",
            "precision" : "high",
            "problem.severity" : "error",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/redundant-assignment",
          "name" : "py/redundant-assignment",
          "shortDescription" : {
            "text" : "Redundant assignment"
          },
          "fullDescription" : {
            "text" : "Assigning a variable to itself is useless and very likely indicates an error in the code."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "useless-code", "external/cwe/cwe-563" ],
            "description" : "Assigning a variable to itself is useless and very likely indicates an error in the code.",
            "id" : "py/redundant-assignment",
            "kind" : "problem",
            "name" : "Redundant assignment",
            "precision" : "very-high",
            "problem.severity" : "error",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/should-use-with",
          "name" : "py/should-use-with",
          "shortDescription" : {
            "text" : "Should use a 'with' statement"
          },
          "fullDescription" : {
            "text" : "Using a 'try-finally' block to ensure only that a resource is closed makes code more difficult to read."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "note"
          },
          "properties" : {
            "tags" : [ "maintainability", "readability", "convention" ],
            "description" : "Using a 'try-finally' block to ensure only that a resource is closed makes code more\n              difficult to read.",
            "id" : "py/should-use-with",
            "kind" : "problem",
            "name" : "Should use a 'with' statement",
            "precision" : "very-high",
            "problem.severity" : "recommendation",
            "sub-severity" : "high"
          }
        }, {
          "id" : "py/side-effect-in-assert",
          "name" : "py/side-effect-in-assert",
          "shortDescription" : {
            "text" : "An assert statement has a side-effect"
          },
          "fullDescription" : {
            "text" : "Side-effects in assert statements result in differences between normal and optimized behavior."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "maintainability" ],
            "description" : "Side-effects in assert statements result in differences between normal\n              and optimized behavior.",
            "id" : "py/side-effect-in-assert",
            "kind" : "problem",
            "name" : "An assert statement has a side-effect",
            "precision" : "high",
            "problem.severity" : "error",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/ineffectual-statement",
          "name" : "py/ineffectual-statement",
          "shortDescription" : {
            "text" : "Statement has no effect"
          },
          "fullDescription" : {
            "text" : "A statement has no effect"
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "note"
          },
          "properties" : {
            "tags" : [ "maintainability", "useless-code", "external/cwe/cwe-561" ],
            "description" : "A statement has no effect",
            "id" : "py/ineffectual-statement",
            "kind" : "problem",
            "name" : "Statement has no effect",
            "precision" : "high",
            "problem.severity" : "recommendation",
            "sub-severity" : "high"
          }
        }, {
          "id" : "py/print-during-import",
          "name" : "py/print-during-import",
          "shortDescription" : {
            "text" : "Use of a print statement at module level"
          },
          "fullDescription" : {
            "text" : "Using a print statement at module scope (except when guarded by `if __name__ == '__main__'`) will cause surprising output when the module is imported."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "note"
          },
          "properties" : {
            "tags" : [ "reliability", "maintainability", "convention" ],
            "description" : "Using a print statement at module scope (except when guarded by `if __name__ == '__main__'`) will cause surprising output when the module is imported.",
            "id" : "py/print-during-import",
            "kind" : "problem",
            "name" : "Use of a print statement at module level",
            "precision" : "high",
            "problem.severity" : "recommendation",
            "sub-severity" : "high"
          }
        }, {
          "id" : "py/unnecessary-delete",
          "name" : "py/unnecessary-delete",
          "shortDescription" : {
            "text" : "Unnecessary delete statement in function"
          },
          "fullDescription" : {
            "text" : "Using a 'delete' statement to delete a local variable is unnecessary, because the variable is deleted automatically when the function exits."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "maintainability", "useless-code" ],
            "description" : "Using a 'delete' statement to delete a local variable is\n              unnecessary, because the variable is deleted automatically when\n              the function exits.",
            "id" : "py/unnecessary-delete",
            "kind" : "problem",
            "name" : "Unnecessary delete statement in function",
            "precision" : "high",
            "problem.severity" : "warning",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/redundant-else",
          "name" : "py/redundant-else",
          "shortDescription" : {
            "text" : "Unnecessary 'else' clause in loop"
          },
          "fullDescription" : {
            "text" : "An 'else' clause in a 'for' or 'while' statement that does not contain a 'break' is redundant."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "maintainability", "useless-code" ],
            "description" : "An 'else' clause in a 'for' or 'while' statement that does not contain a 'break' is redundant.",
            "id" : "py/redundant-else",
            "kind" : "problem",
            "name" : "Unnecessary 'else' clause in loop",
            "precision" : "very-high",
            "problem.severity" : "warning",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/unnecessary-pass",
          "name" : "py/unnecessary-pass",
          "shortDescription" : {
            "text" : "Unnecessary pass"
          },
          "fullDescription" : {
            "text" : "Unnecessary 'pass' statement"
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "maintainability", "useless-code" ],
            "description" : "Unnecessary 'pass' statement",
            "id" : "py/unnecessary-pass",
            "kind" : "problem",
            "name" : "Unnecessary pass",
            "precision" : "very-high",
            "problem.severity" : "warning",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/unreachable-statement",
          "name" : "py/unreachable-statement",
          "shortDescription" : {
            "text" : "Unreachable code"
          },
          "fullDescription" : {
            "text" : "Code is unreachable"
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "maintainability", "useless-code", "external/cwe/cwe-561" ],
            "description" : "Code is unreachable",
            "id" : "py/unreachable-statement",
            "kind" : "problem",
            "name" : "Unreachable code",
            "precision" : "very-high",
            "problem.severity" : "warning",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/unused-exception-object",
          "name" : "py/unused-exception-object",
          "shortDescription" : {
            "text" : "Unused exception object"
          },
          "fullDescription" : {
            "text" : "An exception object is created, but is not used."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "maintainability" ],
            "description" : "An exception object is created, but is not used.",
            "id" : "py/unused-exception-object",
            "kind" : "problem",
            "name" : "Unused exception object",
            "precision" : "very-high",
            "problem.severity" : "error",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/use-of-exit-or-quit",
          "name" : "py/use-of-exit-or-quit",
          "shortDescription" : {
            "text" : "Use of exit() or quit()"
          },
          "fullDescription" : {
            "text" : "exit() or quit() may fail if the interpreter is run with the -S option."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "maintainability" ],
            "description" : "exit() or quit() may fail if the interpreter is run with the -S option.",
            "id" : "py/use-of-exit-or-quit",
            "kind" : "problem",
            "name" : "Use of exit() or quit()",
            "precision" : "very-high",
            "problem.severity" : "warning",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/imprecise-assert",
          "name" : "py/imprecise-assert",
          "shortDescription" : {
            "text" : "Imprecise assert"
          },
          "fullDescription" : {
            "text" : "Using 'assertTrue' or 'assertFalse' rather than a more specific assertion can give uninformative failure messages."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "note"
          },
          "properties" : {
            "tags" : [ "maintainability", "testability" ],
            "description" : "Using 'assertTrue' or 'assertFalse' rather than a more specific assertion can give uninformative failure messages.",
            "id" : "py/imprecise-assert",
            "kind" : "problem",
            "name" : "Imprecise assert",
            "precision" : "very-high",
            "problem.severity" : "recommendation",
            "sub-severity" : "high"
          }
        }, {
          "id" : "py/redundant-global-declaration",
          "name" : "py/redundant-global-declaration",
          "shortDescription" : {
            "text" : "Use of 'global' at module level"
          },
          "fullDescription" : {
            "text" : "Use of the 'global' statement at module level"
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "maintainability", "useless-code" ],
            "description" : "Use of the 'global' statement at module level",
            "id" : "py/redundant-global-declaration",
            "kind" : "problem",
            "name" : "Use of 'global' at module level",
            "precision" : "very-high",
            "problem.severity" : "warning",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/leaking-list-comprehension",
          "name" : "py/leaking-list-comprehension",
          "shortDescription" : {
            "text" : "List comprehension variable used in enclosing scope"
          },
          "fullDescription" : {
            "text" : "Using the iteration variable of a list comprehension in the enclosing scope will result in different behavior between Python 2 and 3 and is confusing."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "portability", "correctness" ],
            "description" : "Using the iteration variable of a list comprehension in the enclosing scope will result in different behavior between Python 2 and 3 and is confusing.",
            "id" : "py/leaking-list-comprehension",
            "kind" : "problem",
            "name" : "List comprehension variable used in enclosing scope",
            "precision" : "very-high",
            "problem.severity" : "warning",
            "sub-severity" : "high"
          }
        }, {
          "id" : "py/loop-variable-capture",
          "name" : "py/loop-variable-capture",
          "shortDescription" : {
            "text" : "Loop variable capture"
          },
          "fullDescription" : {
            "text" : "Capture of a loop variable is not the same as capturing the value of a loop variable, and may be erroneous."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "correctness" ],
            "description" : "Capture of a loop variable is not the same as capturing the value of a loop variable, and may be erroneous.",
            "id" : "py/loop-variable-capture",
            "kind" : "problem",
            "name" : "Loop variable capture",
            "precision" : "high",
            "problem.severity" : "error",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/multiple-definition",
          "name" : "py/multiple-definition",
          "shortDescription" : {
            "text" : "Variable defined multiple times"
          },
          "fullDescription" : {
            "text" : "Assignment to a variable occurs multiple times without any intermediate use of that variable"
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "maintainability", "useless-code", "external/cwe/cwe-563" ],
            "description" : "Assignment to a variable occurs multiple times without any intermediate use of that variable",
            "id" : "py/multiple-definition",
            "kind" : "problem",
            "name" : "Variable defined multiple times",
            "precision" : "very-high",
            "problem.severity" : "warning",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/unused-loop-variable",
          "name" : "py/unused-loop-variable",
          "shortDescription" : {
            "text" : "Suspicious unused loop iteration variable"
          },
          "fullDescription" : {
            "text" : "A loop iteration variable is unused, which suggests an error."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "maintainability", "correctness" ],
            "description" : "A loop iteration variable is unused, which suggests an error.",
            "id" : "py/unused-loop-variable",
            "kind" : "problem",
            "name" : "Suspicious unused loop iteration variable",
            "precision" : "high",
            "problem.severity" : "error",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/undefined-export",
          "name" : "py/undefined-export",
          "shortDescription" : {
            "text" : "Explicit export is not defined"
          },
          "fullDescription" : {
            "text" : "Including an undefined attribute in `__all__` causes an exception when the module is imported using '*'"
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "maintainability" ],
            "description" : "Including an undefined attribute in `__all__` causes an exception when\n              the module is imported using '*'",
            "id" : "py/undefined-export",
            "kind" : "problem",
            "name" : "Explicit export is not defined",
            "precision" : "high",
            "problem.severity" : "error",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/unused-local-variable",
          "name" : "py/unused-local-variable",
          "shortDescription" : {
            "text" : "Unused local variable"
          },
          "fullDescription" : {
            "text" : "Local variable is defined but not used"
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "note"
          },
          "properties" : {
            "tags" : [ "maintainability", "useless-code", "external/cwe/cwe-563" ],
            "description" : "Local variable is defined but not used",
            "id" : "py/unused-local-variable",
            "kind" : "problem",
            "name" : "Unused local variable",
            "precision" : "very-high",
            "problem.severity" : "recommendation",
            "sub-severity" : "high"
          }
        }, {
          "id" : "py/unused-global-variable",
          "name" : "py/unused-global-variable",
          "shortDescription" : {
            "text" : "Unused global variable"
          },
          "fullDescription" : {
            "text" : "Global variable is defined but not used"
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "note"
          },
          "properties" : {
            "tags" : [ "efficiency", "useless-code", "external/cwe/cwe-563" ],
            "description" : "Global variable is defined but not used",
            "id" : "py/unused-global-variable",
            "kind" : "problem",
            "name" : "Unused global variable",
            "precision" : "high",
            "problem.severity" : "recommendation",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/overwritten-inherited-attribute",
          "name" : "py/overwritten-inherited-attribute",
          "shortDescription" : {
            "text" : "Overwriting attribute in super-class or sub-class"
          },
          "fullDescription" : {
            "text" : "Assignment to self attribute overwrites attribute previously defined in subclass or superclass `__init__` method."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "reliability", "maintainability", "modularity" ],
            "description" : "Assignment to self attribute overwrites attribute previously defined in subclass or superclass `__init__` method.",
            "id" : "py/overwritten-inherited-attribute",
            "kind" : "problem",
            "name" : "Overwriting attribute in super-class or sub-class",
            "precision" : "medium",
            "problem.severity" : "warning",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/import-of-mutable-attribute",
          "name" : "py/import-of-mutable-attribute",
          "shortDescription" : {
            "text" : "Importing value of mutable attribute"
          },
          "fullDescription" : {
            "text" : "Importing the value of a mutable attribute directly means that changes in global state will not be observed locally."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "reliability", "maintainability", "modularity" ],
            "description" : "Importing the value of a mutable attribute directly means that changes in global state will not be observed locally.",
            "id" : "py/import-of-mutable-attribute",
            "kind" : "problem",
            "name" : "Importing value of mutable attribute",
            "precision" : "medium",
            "problem.severity" : "warning",
            "sub-severity" : "high"
          }
        }, {
          "id" : "py/pythagorean",
          "name" : "py/pythagorean",
          "shortDescription" : {
            "text" : "Pythagorean calculation with sub-optimal numerics"
          },
          "fullDescription" : {
            "text" : "Calculating the length of the hypotenuse using the standard formula may lead to overflow."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "accuracy" ],
            "description" : "Calculating the length of the hypotenuse using the standard formula may lead to overflow.",
            "id" : "py/pythagorean",
            "kind" : "problem",
            "name" : "Pythagorean calculation with sub-optimal numerics",
            "precision" : "medium",
            "problem.severity" : "warning",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/file-not-closed",
          "name" : "py/file-not-closed",
          "shortDescription" : {
            "text" : "File is not always closed"
          },
          "fullDescription" : {
            "text" : "Opening a file without ensuring that it is always closed may cause resource leaks."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "efficiency", "correctness", "resources", "external/cwe/cwe-772" ],
            "description" : "Opening a file without ensuring that it is always closed may cause resource leaks.",
            "id" : "py/file-not-closed",
            "kind" : "problem",
            "name" : "File is not always closed",
            "precision" : "medium",
            "problem.severity" : "warning",
            "sub-severity" : "high"
          }
        }, {
          "id" : "py/tarslip",
          "name" : "py/tarslip",
          "shortDescription" : {
            "text" : "Arbitrary file write during tarfile extraction"
          },
          "fullDescription" : {
            "text" : "Extracting files from a malicious tar archive without validating that the destination file path is within the destination directory can cause files outside the destination directory to be overwritten."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-022" ],
            "description" : "Extracting files from a malicious tar archive without validating that the\n              destination file path is within the destination directory can cause files outside\n              the destination directory to be overwritten.",
            "id" : "py/tarslip",
            "kind" : "path-problem",
            "name" : "Arbitrary file write during tarfile extraction",
            "precision" : "medium",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/jinja2/autoescape-false",
          "name" : "py/jinja2/autoescape-false",
          "shortDescription" : {
            "text" : "Jinja2 templating with autoescape=False"
          },
          "fullDescription" : {
            "text" : "Using jinja2 templates with 'autoescape=False' can cause a cross-site scripting vulnerability."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-079" ],
            "description" : "Using jinja2 templates with 'autoescape=False' can\n              cause a cross-site scripting vulnerability.",
            "id" : "py/jinja2/autoescape-false",
            "kind" : "problem",
            "name" : "Jinja2 templating with autoescape=False",
            "precision" : "medium",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/request-without-cert-validation",
          "name" : "py/request-without-cert-validation",
          "shortDescription" : {
            "text" : "Request without certificate validation"
          },
          "fullDescription" : {
            "text" : "Making a request without certificate validation can allow man-in-the-middle attacks."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-295" ],
            "description" : "Making a request without certificate validation can allow man-in-the-middle attacks.",
            "id" : "py/request-without-cert-validation",
            "kind" : "problem",
            "name" : "Request without certificate validation",
            "precision" : "medium",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/overly-permissive-file",
          "name" : "py/overly-permissive-file",
          "shortDescription" : {
            "text" : "Overly permissive file permissions"
          },
          "fullDescription" : {
            "text" : "Allowing files to be readable or writable by users other than the owner may allow sensitive information to be accessed."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "external/cwe/cwe-732", "security" ],
            "description" : "Allowing files to be readable or writable by users other than the owner may allow sensitive information to be accessed.",
            "id" : "py/overly-permissive-file",
            "kind" : "problem",
            "name" : "Overly permissive file permissions",
            "precision" : "medium",
            "problem.severity" : "warning",
            "sub-severity" : "high"
          }
        }, {
          "id" : "py/hardcoded-credentials",
          "name" : "py/hardcoded-credentials",
          "shortDescription" : {
            "text" : "Hard-coded credentials"
          },
          "fullDescription" : {
            "text" : "Credentials are hard coded in the source code of the application."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "security", "external/cwe/cwe-259", "external/cwe/cwe-321", "external/cwe/cwe-798" ],
            "description" : "Credentials are hard coded in the source code of the application.",
            "id" : "py/hardcoded-credentials",
            "kind" : "path-problem",
            "name" : "Hard-coded credentials",
            "precision" : "medium",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/exit-from-finally",
          "name" : "py/exit-from-finally",
          "shortDescription" : {
            "text" : "'break' or 'return' statement in finally"
          },
          "fullDescription" : {
            "text" : "Using a Break or Return statement in a finally block causes the Try-finally block to exit, discarding the exception."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "warning"
          },
          "properties" : {
            "tags" : [ "reliability", "maintainability", "external/cwe/cwe-584" ],
            "description" : "Using a Break or Return statement in a finally block causes the\n              Try-finally block to exit, discarding the exception.",
            "id" : "py/exit-from-finally",
            "kind" : "problem",
            "name" : "'break' or 'return' statement in finally",
            "precision" : "medium",
            "problem.severity" : "warning",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/return-or-yield-outside-function",
          "name" : "py/return-or-yield-outside-function",
          "shortDescription" : {
            "text" : "Use of 'return' or 'yield' outside a function"
          },
          "fullDescription" : {
            "text" : "Using 'return' or 'yield' outside a function causes a 'SyntaxError' at runtime."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "correctness" ],
            "description" : "Using 'return' or 'yield' outside a function causes a 'SyntaxError' at runtime.",
            "id" : "py/return-or-yield-outside-function",
            "kind" : "problem",
            "name" : "Use of 'return' or 'yield' outside a function",
            "precision" : "medium",
            "problem.severity" : "error",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/undefined-placeholder-variable",
          "name" : "py/undefined-placeholder-variable",
          "shortDescription" : {
            "text" : "Use of an undefined placeholder variable"
          },
          "fullDescription" : {
            "text" : "Using a variable before it is initialized causes an exception."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "correctness" ],
            "description" : "Using a variable before it is initialized causes an exception.",
            "id" : "py/undefined-placeholder-variable",
            "kind" : "problem",
            "name" : "Use of an undefined placeholder variable",
            "precision" : "medium",
            "problem.severity" : "error",
            "sub-severity" : "low"
          }
        }, {
          "id" : "py/uninitialized-local-variable",
          "name" : "py/uninitialized-local-variable",
          "shortDescription" : {
            "text" : "Potentially uninitialized local variable"
          },
          "fullDescription" : {
            "text" : "Using a local variable before it is initialized causes an UnboundLocalError."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "reliability", "correctness" ],
            "description" : "Using a local variable before it is initialized causes an UnboundLocalError.",
            "id" : "py/uninitialized-local-variable",
            "kind" : "problem",
            "name" : "Potentially uninitialized local variable",
            "precision" : "medium",
            "problem.severity" : "error",
            "sub-severity" : "low"
          }
        } ]
      },
      "extensions" : [ {
        "name" : "codeql-suite-helpers",
        "semanticVersion" : "0.0.0",
        "locations" : [ {
          "uri" : "file:///C:/codeql/codeql-repo/misc/suite-helpers/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/codeql/codeql-repo/misc/suite-helpers/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "codeql-javascript-upgrades",
        "locations" : [ {
          "uri" : "file:///C:/codeql/codeql-repo/javascript/upgrades/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/codeql/codeql-repo/javascript/upgrades/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "codeql-cpp-tests",
        "semanticVersion" : "0.0.0",
        "locations" : [ {
          "uri" : "file:///C:/codeql/codeql-repo/cpp/ql/test/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/codeql/codeql-repo/cpp/ql/test/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "codeql-java",
        "semanticVersion" : "0.0.0",
        "locations" : [ {
          "uri" : "file:///C:/codeql/codeql-repo/java/ql/src/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/codeql/codeql-repo/java/ql/src/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "legacy-libraries-csharp",
        "semanticVersion" : "0.0.0",
        "locations" : [ {
          "uri" : "file:///C:/codeql/codeql-repo/misc/legacy-support/csharp/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/codeql/codeql-repo/misc/legacy-support/csharp/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "codeql-python-upgrades",
        "locations" : [ {
          "uri" : "file:///C:/codeql/codeql-repo/python/upgrades/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/codeql/codeql-repo/python/upgrades/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "legacy-libraries-python",
        "semanticVersion" : "0.0.0",
        "locations" : [ {
          "uri" : "file:///C:/codeql/codeql-repo/misc/legacy-support/python/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/codeql/codeql-repo/misc/legacy-support/python/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "legacy-upgrades",
        "semanticVersion" : "0.0.0",
        "locations" : [ {
          "uri" : "file:///C:/codeql/codeql/legacy-upgrades/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/codeql/codeql/legacy-upgrades/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "codeql-python-examples",
        "semanticVersion" : "0.0.0",
        "locations" : [ {
          "uri" : "file:///C:/codeql/codeql-repo/python/ql/examples/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/codeql/codeql-repo/python/ql/examples/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "codeql-python",
        "semanticVersion" : "0.0.0",
        "locations" : [ {
          "uri" : "file:///C:/codeql/codeql-repo/python/ql/src/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/codeql/codeql-repo/python/ql/src/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "codeql-csharp",
        "semanticVersion" : "0.0.0",
        "locations" : [ {
          "uri" : "file:///C:/codeql/codeql-repo/csharp/ql/src/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/codeql/codeql-repo/csharp/ql/src/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "legacy-libraries-java",
        "semanticVersion" : "0.0.0",
        "locations" : [ {
          "uri" : "file:///C:/codeql/codeql-repo/misc/legacy-support/java/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/codeql/codeql-repo/misc/legacy-support/java/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "codeql-cpp-upgrades",
        "locations" : [ {
          "uri" : "file:///C:/codeql/codeql-repo/cpp/upgrades/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/codeql/codeql-repo/cpp/upgrades/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "codeql-java-upgrades",
        "locations" : [ {
          "uri" : "file:///C:/codeql/codeql-repo/java/upgrades/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/codeql/codeql-repo/java/upgrades/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "codeql-javascript-tests",
        "semanticVersion" : "0.0.0",
        "locations" : [ {
          "uri" : "file:///C:/codeql/codeql-repo/javascript/ql/test/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/codeql/codeql-repo/javascript/ql/test/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "codeql-csharp-examples",
        "semanticVersion" : "0.0.0",
        "locations" : [ {
          "uri" : "file:///C:/codeql/codeql-repo/csharp/ql/examples/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/codeql/codeql-repo/csharp/ql/examples/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "codeql-cpp-examples",
        "semanticVersion" : "0.0.0",
        "locations" : [ {
          "uri" : "file:///C:/codeql/codeql-repo/cpp/ql/examples/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/codeql/codeql-repo/cpp/ql/examples/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "codeql-csharp-upgrades",
        "locations" : [ {
          "uri" : "file:///C:/codeql/codeql-repo/csharp/upgrades/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/codeql/codeql-repo/csharp/upgrades/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "codeql-java-tests",
        "semanticVersion" : "0.0.0",
        "locations" : [ {
          "uri" : "file:///C:/codeql/codeql-repo/java/ql/test/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/codeql/codeql-repo/java/ql/test/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "codeql-java-examples",
        "semanticVersion" : "0.0.0",
        "locations" : [ {
          "uri" : "file:///C:/codeql/codeql-repo/java/ql/examples/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/codeql/codeql-repo/java/ql/examples/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "codeql-javascript-examples",
        "semanticVersion" : "0.0.0",
        "locations" : [ {
          "uri" : "file:///C:/codeql/codeql-repo/javascript/ql/examples/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/codeql/codeql-repo/javascript/ql/examples/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "codeql-cpp",
        "semanticVersion" : "0.0.0",
        "locations" : [ {
          "uri" : "file:///C:/codeql/codeql-repo/cpp/ql/src/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/codeql/codeql-repo/cpp/ql/src/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "codeql-csharp-tests",
        "semanticVersion" : "0.0.0",
        "locations" : [ {
          "uri" : "file:///C:/codeql/codeql-repo/csharp/ql/test/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/codeql/codeql-repo/csharp/ql/test/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "legacy-libraries-javascript",
        "semanticVersion" : "0.0.0",
        "locations" : [ {
          "uri" : "file:///C:/codeql/codeql-repo/misc/legacy-support/javascript/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/codeql/codeql-repo/misc/legacy-support/javascript/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "codeql-python-tests",
        "semanticVersion" : "0.0.0",
        "locations" : [ {
          "uri" : "file:///C:/codeql/codeql-repo/python/ql/test/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/codeql/codeql-repo/python/ql/test/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "codeql-javascript",
        "semanticVersion" : "0.0.0",
        "locations" : [ {
          "uri" : "file:///C:/codeql/codeql-repo/javascript/ql/src/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/codeql/codeql-repo/javascript/ql/src/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      }, {
        "name" : "legacy-libraries-cpp",
        "semanticVersion" : "0.0.0",
        "locations" : [ {
          "uri" : "file:///C:/codeql/codeql-repo/misc/legacy-support/cpp/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///C:/codeql/codeql-repo/misc/legacy-support/cpp/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      } ]
    },
    "artifacts" : [ {
      "location" : {
        "uri" : "good/db_init.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 0
      }
    }, {
      "location" : {
        "uri" : "bad/db_init.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 1
      }
    }, {
      "location" : {
        "uri" : "bad/libsession.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 2
      }
    }, {
      "location" : {
        "uri" : "good/libsession.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 3
      }
    }, {
      "location" : {
        "uri" : "utils/scrypt-crack.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 4
      }
    }, {
      "location" : {
        "uri" : "good/mod_user.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 5
      }
    }, {
      "location" : {
        "uri" : "bad/mod_user.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 6
      }
    }, {
      "location" : {
        "uri" : "bad/api_list.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 7
      }
    }, {
      "location" : {
        "uri" : "bad/api_post.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 8
      }
    }, {
      "location" : {
        "uri" : "bad/libuser.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 9
      }
    }, {
      "location" : {
        "uri" : "utils/aes-decrypt.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 10
      }
    }, {
      "location" : {
        "uri" : "utils/aes-encrypt.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 11
      }
    }, {
      "location" : {
        "uri" : "utils/ca-csr-create.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 12
      }
    }, {
      "location" : {
        "uri" : "utils/ca-csr-load.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 13
      }
    }, {
      "location" : {
        "uri" : "utils/crack-cvv.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 14
      }
    }, {
      "location" : {
        "uri" : "good/libapi.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 15
      }
    }, {
      "location" : {
        "uri" : "bad/libmfa.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 16
      }
    }, {
      "location" : {
        "uri" : "good/libmfa.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 17
      }
    }, {
      "location" : {
        "uri" : "good/libposts.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 18
      }
    }, {
      "location" : {
        "uri" : "bad/libposts.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 19
      }
    }, {
      "location" : {
        "uri" : "good/libuser.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 20
      }
    }, {
      "location" : {
        "uri" : "bad/mod_api.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 21
      }
    }, {
      "location" : {
        "uri" : "good/mod_api.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 22
      }
    }, {
      "location" : {
        "uri" : "bad/mod_hello.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 23
      }
    }, {
      "location" : {
        "uri" : "good/mod_hello.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 24
      }
    }, {
      "location" : {
        "uri" : "good/mod_mfa.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 25
      }
    }, {
      "location" : {
        "uri" : "bad/mod_posts.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 26
      }
    }, {
      "location" : {
        "uri" : "good/mod_posts.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 27
      }
    }, {
      "location" : {
        "uri" : "good/mod_welcome1.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 28
      }
    }, {
      "location" : {
        "uri" : "utils/scrypt-generate.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 29
      }
    }, {
      "location" : {
        "uri" : "utils/scrypt-verify.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 30
      }
    }, {
      "location" : {
        "uri" : "bad/libapi.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 31
      }
    }, {
      "location" : {
        "uri" : "good/vulpy-ssl.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 32
      }
    }, {
      "location" : {
        "uri" : "bad/vulpy-ssl.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 33
      }
    }, {
      "location" : {
        "uri" : "bad/vulpy.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 34
      }
    }, {
      "location" : {
        "uri" : "good/vulpy.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 35
      }
    }, {
      "location" : {
        "uri" : "bad/mod_mfa.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 36
      }
    } ],
    "results" : [ {
      "ruleId" : "py/empty-except",
      "ruleIndex" : 19,
      "message" : {
        "text" : "'except' clause does nothing but pass and there is no explanatory comment."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "good/db_init.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 39,
            "startColumn" : 5,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 37,
            "endLine" : 41,
            "snippet" : {
              "text" : "    try:\n        os.remove('db_users.sqlite')\n    except FileNotFoundError:\n        pass\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9cbc869fbfffeb60:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/empty-except",
      "ruleIndex" : 19,
      "message" : {
        "text" : "'except' clause does nothing but pass and there is no explanatory comment."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "good/db_init.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 44,
            "startColumn" : 5,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 42,
            "endLine" : 46,
            "snippet" : {
              "text" : "    try:\n        os.remove('db_posts.sqlite')\n    except FileNotFoundError:\n        pass\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "999f5c7e0b05368d:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/empty-except",
      "ruleIndex" : 19,
      "message" : {
        "text" : "'except' clause does nothing but pass and there is no explanatory comment."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "bad/db_init.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 40,
            "startColumn" : 5,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 38,
            "endLine" : 42,
            "snippet" : {
              "text" : "    try:\n        os.remove('db_users.sqlite')\n    except FileNotFoundError:\n        pass\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9cbc869fbfffeb60:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/empty-except",
      "ruleIndex" : 19,
      "message" : {
        "text" : "'except' clause does nothing but pass and there is no explanatory comment."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "bad/db_init.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 45,
            "startColumn" : 5,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 43,
            "endLine" : 47,
            "snippet" : {
              "text" : "    try:\n        os.remove('db_posts.sqlite')\n    except FileNotFoundError:\n        pass\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "999f5c7e0b05368d:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/empty-except",
      "ruleIndex" : 19,
      "message" : {
        "text" : "'except' clause does nothing but pass and there is no explanatory comment."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "bad/libsession.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 21,
            "startColumn" : 5,
            "endColumn" : 22
          },
          "contextRegion" : {
            "startLine" : 19,
            "endLine" : 23,
            "snippet" : {
              "text" : "            if decoded:\n                session = json.loads(base64.b64decode(cookie))\n    except Exception:\n        pass\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "74d45ccceba4240f:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/empty-except",
      "ruleIndex" : 19,
      "message" : {
        "text" : "'except' clause does nothing but pass and there is no explanatory comment."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "good/libsession.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 22,
            "startColumn" : 5,
            "endColumn" : 22
          },
          "contextRegion" : {
            "startLine" : 20,
            "endLine" : 24,
            "snippet" : {
              "text" : "        geo = reader.country(request.remote_addr)\n        country = geo.country.iso_code\n    except Exception:\n        pass\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d4457365d93c6620:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/empty-except",
      "ruleIndex" : 19,
      "message" : {
        "text" : "'except' clause does nothing but pass and there is no explanatory comment."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "utils/scrypt-crack.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 43,
            "startColumn" : 9,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 41,
            "endLine" : 45,
            "snippet" : {
              "text" : "            print('Cracked! Password:', number)\n            break\n        except InvalidKey:\n            pass\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "73d72fb9eca75097:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/call/wrong-named-argument",
      "ruleIndex" : 55,
      "message" : {
        "text" : "Keyword argument 'request' is not a supported parameter name of [function create](1)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "good/mod_user.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 33,
            "startColumn" : 20,
            "endColumn" : 92
          },
          "contextRegion" : {
            "startLine" : 31,
            "endLine" : 35,
            "snippet" : {
              "text" : "\n        response = make_response(redirect('/'))\n        response = libsession.create(request=request, response=response, username=username)\n        return response\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "15e245a0c9ecd61e:1",
        "primaryLocationStartColumnFingerprint" : "11"
      },
      "relatedLocations" : [ {
        "id" : 1,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "bad/libsession.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 5,
            "endColumn" : 32
          },
          "contextRegion" : {
            "startLine" : 3,
            "endLine" : 7,
            "snippet" : {
              "text" : "\n\ndef create(response, username):\n    session = base64.b64encode(json.dumps({'username': username}).encode())\n    response.set_cookie('vulpy_session', session)\n"
            }
          }
        },
        "message" : {
          "text" : "function create"
        }
      } ]
    }, {
      "ruleId" : "py/call/wrong-arguments",
      "ruleIndex" : 57,
      "message" : {
        "text" : "Call to [function create](1) with too few arguments; should be no fewer than 3."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "bad/mod_user.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 32,
            "startColumn" : 20,
            "endColumn" : 75
          },
          "contextRegion" : {
            "startLine" : 30,
            "endLine" : 34,
            "snippet" : {
              "text" : "\n        response = make_response(redirect('/'))\n        response = libsession.create(response=response, username=username)\n        return response\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8f57764f2c7d98c5:1",
        "primaryLocationStartColumnFingerprint" : "11"
      },
      "relatedLocations" : [ {
        "id" : 1,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "good/libsession.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 28,
            "endColumn" : 41
          },
          "contextRegion" : {
            "startLine" : 26,
            "endLine" : 30,
            "snippet" : {
              "text" : "\n\ndef create(request, response, username):\n\n    country = getcountry(request)\n"
            }
          }
        },
        "message" : {
          "text" : "function create"
        }
      } ]
    }, {
      "ruleId" : "py/mixed-returns",
      "ruleIndex" : 58,
      "message" : {
        "text" : "Mixing implicit and explicit returns may indicate an error as implicit returns always return None."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "bad/api_list.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 8,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 6,
            "endLine" : 10,
            "snippet" : {
              "text" : "@click.command()\n@click.argument('username')\ndef cmd_api_client(username):\n\n    r = requests.get('http://127.0.1.1:5000/api/post/{}'.format(username))\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "74accf6a450cf312:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/mixed-returns",
      "ruleIndex" : 58,
      "message" : {
        "text" : "Mixing implicit and explicit returns may indicate an error as implicit returns always return None."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "bad/api_post.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 10,
            "endColumn" : 29
          },
          "contextRegion" : {
            "startLine" : 8,
            "endLine" : 12,
            "snippet" : {
              "text" : "@click.command()\n@click.argument('message')\ndef cmd_api_client(message):\n    if not api_key_file.exists():\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "10b773189db7d16:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/mixed-returns",
      "ruleIndex" : 58,
      "message" : {
        "text" : "Mixing implicit and explicit returns may indicate an error as implicit returns always return None."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "utils/scrypt-crack.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 17,
            "endColumn" : 29
          },
          "contextRegion" : {
            "startLine" : 15,
            "endLine" : 19,
            "snippet" : {
              "text" : "@click.argument('key')\n@click.argument('salt')\ndef crack_scrypt(key, salt):\n\n    try:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ec890e6bfc4bfff5:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/import-own-module",
      "ruleIndex" : 79,
      "message" : {
        "text" : "The module 'libuser' imports itself."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "bad/libuser.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 9
          },
          "region" : {
            "startLine" : 2,
            "endColumn" : 15
          },
          "contextRegion" : {
            "startLine" : 1,
            "endLine" : 4,
            "snippet" : {
              "text" : "import sqlite3\nimport libuser\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "667cfaa6fb788897:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/unused-import",
      "ruleIndex" : 84,
      "message" : {
        "text" : "Import of 'sys' is not used."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "utils/aes-decrypt.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 10
          },
          "region" : {
            "startLine" : 3,
            "endColumn" : 11
          },
          "contextRegion" : {
            "startLine" : 1,
            "endLine" : 5,
            "snippet" : {
              "text" : "#!/usr/bin/env python3\n\nimport sys\n\nfrom binascii import unhexlify\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4d26343580d9ed44:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/unused-import",
      "ruleIndex" : 84,
      "message" : {
        "text" : "Import of 'sys' is not used."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "utils/aes-encrypt.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 4,
            "endColumn" : 11
          },
          "contextRegion" : {
            "startLine" : 2,
            "endLine" : 6,
            "snippet" : {
              "text" : "\nimport os\nimport sys\n\nfrom binascii import hexlify\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b084c34c99716d18:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/unused-import",
      "ruleIndex" : 84,
      "message" : {
        "text" : "Import of 'Path' is not used."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "bad/api_list.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 1,
            "endLine" : 3,
            "snippet" : {
              "text" : "from pathlib import Path\n\nimport click\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "3c8d9f72ae39b6e2:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/unused-import",
      "ruleIndex" : 84,
      "message" : {
        "text" : "Import of 'datetime' is not used."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "utils/ca-csr-create.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 12
          },
          "region" : {
            "startLine" : 3,
            "endColumn" : 16
          },
          "contextRegion" : {
            "startLine" : 1,
            "endLine" : 5,
            "snippet" : {
              "text" : "#!/usr/bin/env python3\n\nimport datetime\n\nfrom cryptography.hazmat.backends import default_backend\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a44d5a9d2634ab6f:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/unused-import",
      "ruleIndex" : 84,
      "message" : {
        "text" : "Import of 'rsa' is not used."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "utils/ca-csr-create.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 12
          },
          "region" : {
            "startLine" : 6,
            "endColumn" : 58
          },
          "contextRegion" : {
            "startLine" : 4,
            "endLine" : 8,
            "snippet" : {
              "text" : "\nfrom cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives.asymmetric import rsa\nfrom cryptography.hazmat.primitives import serialization\nfrom cryptography import x509\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "99c306167b81a4f0:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/unused-import",
      "ruleIndex" : 84,
      "message" : {
        "text" : "Import of 'rsa' is not used."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "utils/ca-csr-load.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 13
          },
          "region" : {
            "startLine" : 6,
            "endColumn" : 58
          },
          "contextRegion" : {
            "startLine" : 4,
            "endLine" : 8,
            "snippet" : {
              "text" : "\nfrom cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives.asymmetric import rsa\nfrom cryptography.hazmat.primitives import serialization\nfrom cryptography import x509\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "99c306167b81a4f0:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/unused-import",
      "ruleIndex" : 84,
      "message" : {
        "text" : "Import of 'NameOID' is not used."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "utils/ca-csr-load.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 13
          },
          "region" : {
            "startLine" : 9,
            "endColumn" : 42
          },
          "contextRegion" : {
            "startLine" : 7,
            "endLine" : 11,
            "snippet" : {
              "text" : "from cryptography.hazmat.primitives import serialization\nfrom cryptography import x509\nfrom cryptography.x509.oid import NameOID\nfrom cryptography.hazmat.primitives import hashes\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "284a9c9e889e5261:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/unused-import",
      "ruleIndex" : 84,
      "message" : {
        "text" : "Import of 'sys' is not used."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "utils/crack-cvv.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 14
          },
          "region" : {
            "startLine" : 3,
            "endColumn" : 11
          },
          "contextRegion" : {
            "startLine" : 1,
            "endLine" : 5,
            "snippet" : {
              "text" : "#!/usr/bin/env python3\n\nimport sys\nimport hashlib\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2ed7480e1143bb47:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/unused-import",
      "ruleIndex" : 84,
      "message" : {
        "text" : "Import of 'random' is not used."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "good/libapi.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 15
          },
          "region" : {
            "startLine" : 2,
            "endColumn" : 14
          },
          "contextRegion" : {
            "startLine" : 1,
            "endLine" : 4,
            "snippet" : {
              "text" : "import libuser\nimport random\nimport hashlib\nimport re\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "fd745f4958f4258:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/unused-import",
      "ruleIndex" : 84,
      "message" : {
        "text" : "Import of 'hashlib' is not used."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "good/libapi.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 15
          },
          "region" : {
            "startLine" : 3,
            "endColumn" : 15
          },
          "contextRegion" : {
            "startLine" : 1,
            "endLine" : 5,
            "snippet" : {
              "text" : "import libuser\nimport random\nimport hashlib\nimport re\nimport jwt\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "31038c8b6d9316cd:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/unused-import",
      "ruleIndex" : 84,
      "message" : {
        "text" : "Import of 're' is not used."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "good/libapi.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 15
          },
          "region" : {
            "startLine" : 4,
            "endColumn" : 10
          },
          "contextRegion" : {
            "startLine" : 2,
            "endLine" : 6,
            "snippet" : {
              "text" : "import random\nimport hashlib\nimport re\nimport jwt\nfrom time import time\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7b0ef3b13486cb3:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/unused-import",
      "ruleIndex" : 84,
      "message" : {
        "text" : "Import of 'Path' is not used."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "good/libapi.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 15
          },
          "region" : {
            "startLine" : 8,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 6,
            "endLine" : 10,
            "snippet" : {
              "text" : "from time import time\n\nfrom pathlib import Path\n\nsecret = 'MYSUPERSECRETKEY'\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "328a3ee63011c366:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/unused-import",
      "ruleIndex" : 84,
      "message" : {
        "text" : "Import of 'sleep' is not used."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "bad/libmfa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 16
          },
          "region" : {
            "startLine" : 3,
            "endColumn" : 23
          },
          "contextRegion" : {
            "startLine" : 1,
            "endLine" : 5,
            "snippet" : {
              "text" : "import pyotp\nimport sqlite3\nfrom time import sleep\n\ndef mfa_is_enabled(username):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "cbc68f53ab23d445:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/unused-import",
      "ruleIndex" : 84,
      "message" : {
        "text" : "Import of 'sleep' is not used."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "good/libmfa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 3,
            "endColumn" : 23
          },
          "contextRegion" : {
            "startLine" : 1,
            "endLine" : 5,
            "snippet" : {
              "text" : "import pyotp\nimport sqlite3\nfrom time import sleep\n\ndef mfa_is_enabled(username):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "cbc68f53ab23d445:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/unused-import",
      "ruleIndex" : 84,
      "message" : {
        "text" : "Import of 'sys' is not used."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "good/libposts.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 18
          },
          "region" : {
            "startLine" : 3,
            "endColumn" : 11
          },
          "contextRegion" : {
            "startLine" : 1,
            "endLine" : 5,
            "snippet" : {
              "text" : "#!/usr/bin/env python3\n\nimport sys\nimport sqlite3\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f107b904160913e6:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/unused-import",
      "ruleIndex" : 84,
      "message" : {
        "text" : "Import of 'sys' is not used."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "bad/libposts.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 19
          },
          "region" : {
            "startLine" : 3,
            "endColumn" : 11
          },
          "contextRegion" : {
            "startLine" : 1,
            "endLine" : 5,
            "snippet" : {
              "text" : "#!/usr/bin/env python3\n\nimport sys\nimport sqlite3\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f107b904160913e6:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/unused-import",
      "ruleIndex" : 84,
      "message" : {
        "text" : "Import of 'json' is not used."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "good/libsession.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 1,
            "endColumn" : 12
          },
          "contextRegion" : {
            "startLine" : 1,
            "endLine" : 3,
            "snippet" : {
              "text" : "import json\nimport base64\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f780b036eb145a8:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/unused-import",
      "ruleIndex" : 84,
      "message" : {
        "text" : "Import of 'base64' is not used."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "good/libsession.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 2,
            "endColumn" : 14
          },
          "contextRegion" : {
            "startLine" : 1,
            "endLine" : 4,
            "snippet" : {
              "text" : "import json\nimport base64\n\nimport geoip2.database\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f5d1e787c7a6c344:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/unused-import",
      "ruleIndex" : 84,
      "message" : {
        "text" : "Import of 'libuser' is not used."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "bad/libuser.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 9
          },
          "region" : {
            "startLine" : 2,
            "endColumn" : 15
          },
          "contextRegion" : {
            "startLine" : 1,
            "endLine" : 4,
            "snippet" : {
              "text" : "import sqlite3\nimport libuser\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "667cfaa6fb788897:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/unused-import",
      "ruleIndex" : 84,
      "message" : {
        "text" : "Import of 'hashlib' is not used."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "good/libuser.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 20
          },
          "region" : {
            "startLine" : 2,
            "endColumn" : 15
          },
          "contextRegion" : {
            "startLine" : 1,
            "endLine" : 4,
            "snippet" : {
              "text" : "\nimport hashlib\nimport os\nimport sqlite3\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1331fff9ca89afc9:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/unused-import",
      "ruleIndex" : 84,
      "message" : {
        "text" : "Import of 'render_template' is not used.\nImport of 'redirect' is not used.\nImport of 'g' is not used.\nImport of 'session' is not used.\nImport of 'make_response' is not used.\nImport of 'flash' is not used."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "bad/mod_api.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 21
          },
          "region" : {
            "startLine" : 1,
            "endColumn" : 107
          },
          "contextRegion" : {
            "startLine" : 1,
            "endLine" : 3,
            "snippet" : {
              "text" : "from flask import Blueprint, render_template, redirect, request, g, session, make_response, flash, jsonify\nimport libuser\nimport libsession\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d2865a349c940675:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/unused-import",
      "ruleIndex" : 84,
      "message" : {
        "text" : "Import of 'libuser' is not used."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "bad/mod_api.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 21
          },
          "region" : {
            "startLine" : 2,
            "endColumn" : 15
          },
          "contextRegion" : {
            "startLine" : 1,
            "endLine" : 4,
            "snippet" : {
              "text" : "from flask import Blueprint, render_template, redirect, request, g, session, make_response, flash, jsonify\nimport libuser\nimport libsession\nimport libposts\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "28d90e6e4fde271c:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/unused-import",
      "ruleIndex" : 84,
      "message" : {
        "text" : "Import of 'libsession' is not used."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "bad/mod_api.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 21
          },
          "region" : {
            "startLine" : 3,
            "endColumn" : 18
          },
          "contextRegion" : {
            "startLine" : 1,
            "endLine" : 5,
            "snippet" : {
              "text" : "from flask import Blueprint, render_template, redirect, request, g, session, make_response, flash, jsonify\nimport libuser\nimport libsession\nimport libposts\nimport libapi\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "25d0c1846505f5c:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/unused-import",
      "ruleIndex" : 84,
      "message" : {
        "text" : "Import of 'render_template' is not used.\nImport of 'redirect' is not used.\nImport of 'g' is not used.\nImport of 'session' is not used.\nImport of 'make_response' is not used.\nImport of 'flash' is not used."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "good/mod_api.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 22
          },
          "region" : {
            "startLine" : 1,
            "endColumn" : 107
          },
          "contextRegion" : {
            "startLine" : 1,
            "endLine" : 3,
            "snippet" : {
              "text" : "from flask import Blueprint, render_template, redirect, request, g, session, make_response, flash, jsonify\nimport libuser\nimport libsession\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d2865a349c940675:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/unused-import",
      "ruleIndex" : 84,
      "message" : {
        "text" : "Import of 'libuser' is not used."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "good/mod_api.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 22
          },
          "region" : {
            "startLine" : 2,
            "endColumn" : 15
          },
          "contextRegion" : {
            "startLine" : 1,
            "endLine" : 4,
            "snippet" : {
              "text" : "from flask import Blueprint, render_template, redirect, request, g, session, make_response, flash, jsonify\nimport libuser\nimport libsession\nimport libposts\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "28d90e6e4fde271c:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/unused-import",
      "ruleIndex" : 84,
      "message" : {
        "text" : "Import of 'libsession' is not used."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "good/mod_api.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 22
          },
          "region" : {
            "startLine" : 3,
            "endColumn" : 18
          },
          "contextRegion" : {
            "startLine" : 1,
            "endLine" : 5,
            "snippet" : {
              "text" : "from flask import Blueprint, render_template, redirect, request, g, session, make_response, flash, jsonify\nimport libuser\nimport libsession\nimport libposts\nimport libapi\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "25d0c1846505f5c:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/unused-import",
      "ruleIndex" : 84,
      "message" : {
        "text" : "Import of 'render_template' is not used.\nImport of 'redirect' is not used."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "bad/mod_hello.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 23
          },
          "region" : {
            "startLine" : 1,
            "endColumn" : 55
          },
          "contextRegion" : {
            "startLine" : 1,
            "endLine" : 3,
            "snippet" : {
              "text" : "from flask import Blueprint, render_template, redirect\n\nmod_hello = Blueprint('mod_hello', __name__, template_folder='templates')\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "51b7976662ffb851:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/unused-import",
      "ruleIndex" : 84,
      "message" : {
        "text" : "Import of 'render_template' is not used.\nImport of 'redirect' is not used."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "good/mod_hello.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 24
          },
          "region" : {
            "startLine" : 1,
            "endColumn" : 55
          },
          "contextRegion" : {
            "startLine" : 1,
            "endLine" : 3,
            "snippet" : {
              "text" : "from flask import Blueprint, render_template, redirect\n\nmod_hello = Blueprint('mod_hello', __name__, template_folder='templates')\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "51b7976662ffb851:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/unused-import",
      "ruleIndex" : 84,
      "message" : {
        "text" : "Import of 'sqlite3' is not used."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "good/mod_mfa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 25
          },
          "region" : {
            "startLine" : 1,
            "endColumn" : 15
          },
          "contextRegion" : {
            "startLine" : 1,
            "endLine" : 3,
            "snippet" : {
              "text" : "import sqlite3\nfrom flask import Blueprint, render_template, redirect, request, g, session, make_response, flash\nimport libuser\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d724d053ed8e054e:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/unused-import",
      "ruleIndex" : 84,
      "message" : {
        "text" : "Import of 'session' is not used.\nImport of 'make_response' is not used."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "good/mod_mfa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 25
          },
          "region" : {
            "startLine" : 2,
            "endColumn" : 98
          },
          "contextRegion" : {
            "startLine" : 1,
            "endLine" : 4,
            "snippet" : {
              "text" : "import sqlite3\nfrom flask import Blueprint, render_template, redirect, request, g, session, make_response, flash\nimport libuser\nimport libsession\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ad868df4f12204b9:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/unused-import",
      "ruleIndex" : 84,
      "message" : {
        "text" : "Import of 'libuser' is not used."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "good/mod_mfa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 25
          },
          "region" : {
            "startLine" : 3,
            "endColumn" : 15
          },
          "contextRegion" : {
            "startLine" : 1,
            "endLine" : 5,
            "snippet" : {
              "text" : "import sqlite3\nfrom flask import Blueprint, render_template, redirect, request, g, session, make_response, flash\nimport libuser\nimport libsession\nimport libmfa\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1cb4bfedb8a9bc08:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/unused-import",
      "ruleIndex" : 84,
      "message" : {
        "text" : "Import of 'libsession' is not used."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "good/mod_mfa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 25
          },
          "region" : {
            "startLine" : 4,
            "endColumn" : 18
          },
          "contextRegion" : {
            "startLine" : 2,
            "endLine" : 6,
            "snippet" : {
              "text" : "from flask import Blueprint, render_template, redirect, request, g, session, make_response, flash\nimport libuser\nimport libsession\nimport libmfa\nimport pyotp\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e9290602ba805ac0:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/unused-import",
      "ruleIndex" : 84,
      "message" : {
        "text" : "Import of 'sqlite3' is not used."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "bad/mod_posts.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 26
          },
          "region" : {
            "startLine" : 1,
            "endColumn" : 15
          },
          "contextRegion" : {
            "startLine" : 1,
            "endLine" : 3,
            "snippet" : {
              "text" : "import sqlite3\nfrom flask import Blueprint, render_template, redirect, request, g\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9814c6b31e1d93a0:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/unused-import",
      "ruleIndex" : 84,
      "message" : {
        "text" : "Import of 'sqlite3' is not used."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "good/mod_posts.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 27
          },
          "region" : {
            "startLine" : 1,
            "endColumn" : 15
          },
          "contextRegion" : {
            "startLine" : 1,
            "endLine" : 3,
            "snippet" : {
              "text" : "import sqlite3\nfrom flask import Blueprint, render_template, redirect, request, g\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9814c6b31e1d93a0:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/unused-import",
      "ruleIndex" : 84,
      "message" : {
        "text" : "Import of 'sqlite3' is not used."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "good/mod_user.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 1,
            "endColumn" : 15
          },
          "contextRegion" : {
            "startLine" : 1,
            "endLine" : 3,
            "snippet" : {
              "text" : "import sqlite3\nfrom flask import Blueprint, render_template, redirect, request, g, session, make_response, flash\nimport libuser\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d724d053ed8e054e:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/unused-import",
      "ruleIndex" : 84,
      "message" : {
        "text" : "Import of 'sqlite3' is not used."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "good/mod_welcome1.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 28
          },
          "region" : {
            "startLine" : 1,
            "endColumn" : 15
          },
          "contextRegion" : {
            "startLine" : 1,
            "endLine" : 3,
            "snippet" : {
              "text" : "import sqlite3\nfrom flask import Blueprint, render_template, redirect, request, g, session\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "58910bf0de76fbd5:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/unused-import",
      "ruleIndex" : 84,
      "message" : {
        "text" : "Import of 'g' is not used."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "good/mod_welcome1.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 28
          },
          "region" : {
            "startLine" : 2,
            "endColumn" : 76
          },
          "contextRegion" : {
            "startLine" : 1,
            "endLine" : 4,
            "snippet" : {
              "text" : "import sqlite3\nfrom flask import Blueprint, render_template, redirect, request, g, session\n\nfrom lib.posts1 import get_posts, post\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "85bf47b589887598:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/unused-import",
      "ruleIndex" : 84,
      "message" : {
        "text" : "Import of 'os' is not used."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "utils/scrypt-crack.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 4,
            "endColumn" : 10
          },
          "contextRegion" : {
            "startLine" : 2,
            "endLine" : 6,
            "snippet" : {
              "text" : "\nimport sys\nimport os\nimport binascii\nfrom binascii import unhexlify\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "43c32b8960a0aa75:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/unused-import",
      "ruleIndex" : 84,
      "message" : {
        "text" : "Import of 'sys' is not used."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "utils/scrypt-generate.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 29
          },
          "region" : {
            "startLine" : 3,
            "endColumn" : 11
          },
          "contextRegion" : {
            "startLine" : 1,
            "endLine" : 5,
            "snippet" : {
              "text" : "#!/usr/bin/env python3\n\nimport sys\nimport os\nfrom binascii import hexlify\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5d94ffbd853a97e:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/unused-import",
      "ruleIndex" : 84,
      "message" : {
        "text" : "Import of 'os' is not used."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "utils/scrypt-verify.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 30
          },
          "region" : {
            "startLine" : 4,
            "endColumn" : 10
          },
          "contextRegion" : {
            "startLine" : 2,
            "endLine" : 6,
            "snippet" : {
              "text" : "\nimport sys\nimport os\nimport binascii\nfrom binascii import unhexlify\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5983e2072be94d68:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/commented-out-code",
      "ruleIndex" : 85,
      "message" : {
        "text" : "These comments appear to contain commented-out code."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "bad/libmfa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 16
          },
          "region" : {
            "startLine" : 81,
            "startColumn" : 5,
            "endLine" : 83,
            "endColumn" : 11
          },
          "contextRegion" : {
            "startLine" : 79,
            "endLine" : 85,
            "snippet" : {
              "text" : "    conn.commit()\n\n    #if user:\n    #    return user['mfa_secret'] #True\n    #else:\n    return False\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a4318a06ab13c9c5:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/commented-out-code",
      "ruleIndex" : 85,
      "message" : {
        "text" : "These comments appear to contain commented-out code."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "good/libmfa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 81,
            "startColumn" : 5,
            "endLine" : 83,
            "endColumn" : 11
          },
          "contextRegion" : {
            "startLine" : 79,
            "endLine" : 85,
            "snippet" : {
              "text" : "    conn.commit()\n\n    #if user:\n    #    return user['mfa_secret'] #True\n    #else:\n    return False\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a4318a06ab13c9c5:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/commented-out-code",
      "ruleIndex" : 85,
      "message" : {
        "text" : "These comments appear to contain commented-out code."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "bad/mod_user.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 58,
            "startColumn" : 9,
            "endLine" : 59,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 56,
            "endLine" : 61,
            "snippet" : {
              "text" : "        #session['username'] = libuser.login(username, password)\n\n        #if session['username']:\n        #    return redirect('/')\n\n    return render_template('user.create.html')\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ad07b677c66421df:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/path-injection",
      "ruleIndex" : 90,
      "message" : {
        "text" : "This path depends on [a user-provided value](1).\nThis path depends on [a user-provided value](2)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "bad/libapi.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 31
          },
          "region" : {
            "startLine" : 22,
            "startColumn" : 5,
            "endColumn" : 18
          },
          "contextRegion" : {
            "startLine" : 20,
            "endLine" : 24,
            "snippet" : {
              "text" : "    keyfile = '/tmp/vulpy.apikey.{}.{}'.format(username, key)\n\n    Path(keyfile).touch()\n\n    return key\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6e479c79e8d1316:1",
        "primaryLocationStartColumnFingerprint" : "0"
      },
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_api.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 21
                },
                "region" : {
                  "startLine" : 32,
                  "startColumn" : 12,
                  "endColumn" : 19
                },
                "contextRegion" : {
                  "startLine" : 30,
                  "endLine" : 34,
                  "snippet" : {
                    "text" : "@mod_api.route('/key', methods=['POST'])\ndef do_key_create():\n    data = request.get_json()\n\n    try:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_api.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 21
                },
                "region" : {
                  "startLine" : 32,
                  "startColumn" : 12,
                  "endColumn" : 28
                },
                "contextRegion" : {
                  "startLine" : 30,
                  "endLine" : 34,
                  "snippet" : {
                    "text" : "@mod_api.route('/key', methods=['POST'])\ndef do_key_create():\n    data = request.get_json()\n\n    try:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_api.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 21
                },
                "region" : {
                  "startLine" : 39,
                  "startColumn" : 25,
                  "endColumn" : 41
                },
                "contextRegion" : {
                  "startLine" : 37,
                  "endLine" : 41,
                  "snippet" : {
                    "text" : "        return jsonify({'error': 'invalid schema', 'schema': key_schema}), 400\n\n    key = libapi.keygen(data['username'], data['password'])\n\n    if key:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Subscript"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libapi.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 31
                },
                "region" : {
                  "startLine" : 8,
                  "startColumn" : 12,
                  "endColumn" : 20
                },
                "contextRegion" : {
                  "startLine" : 6,
                  "endLine" : 10,
                  "snippet" : {
                    "text" : "\n\ndef keygen(username, password=None):\n\n    if password:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for username"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libapi.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 31
                },
                "region" : {
                  "startLine" : 22,
                  "startColumn" : 5,
                  "endColumn" : 18
                },
                "contextRegion" : {
                  "startLine" : 20,
                  "endLine" : 24,
                  "snippet" : {
                    "text" : "    keyfile = '/tmp/vulpy.apikey.{}.{}'.format(username, key)\n\n    Path(keyfile).touch()\n\n    return key\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Path()"
              }
            }
          } ]
        } ]
      }, {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_api.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 22
                },
                "region" : {
                  "startLine" : 34,
                  "startColumn" : 12,
                  "endColumn" : 19
                },
                "contextRegion" : {
                  "startLine" : 32,
                  "endLine" : 36,
                  "snippet" : {
                    "text" : "@mod_api.route('/key', methods=['POST'])\ndef do_key_create():\n    data = request.get_json()\n\n    try:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_api.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 22
                },
                "region" : {
                  "startLine" : 34,
                  "startColumn" : 12,
                  "endColumn" : 28
                },
                "contextRegion" : {
                  "startLine" : 32,
                  "endLine" : 36,
                  "snippet" : {
                    "text" : "@mod_api.route('/key', methods=['POST'])\ndef do_key_create():\n    data = request.get_json()\n\n    try:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_api.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 22
                },
                "region" : {
                  "startLine" : 41,
                  "startColumn" : 25,
                  "endColumn" : 41
                },
                "contextRegion" : {
                  "startLine" : 39,
                  "endLine" : 43,
                  "snippet" : {
                    "text" : "        return jsonify({'error': 'invalid schema', 'schema': key_schema}, 400)\n\n    key = libapi.keygen(data['username'], data['password'])\n\n    if key:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Subscript"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libapi.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 31
                },
                "region" : {
                  "startLine" : 8,
                  "startColumn" : 12,
                  "endColumn" : 20
                },
                "contextRegion" : {
                  "startLine" : 6,
                  "endLine" : 10,
                  "snippet" : {
                    "text" : "\n\ndef keygen(username, password=None):\n\n    if password:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for username"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libapi.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 31
                },
                "region" : {
                  "startLine" : 22,
                  "startColumn" : 5,
                  "endColumn" : 18
                },
                "contextRegion" : {
                  "startLine" : 20,
                  "endLine" : 24,
                  "snippet" : {
                    "text" : "    keyfile = '/tmp/vulpy.apikey.{}.{}'.format(username, key)\n\n    Path(keyfile).touch()\n\n    return key\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Path()"
              }
            }
          } ]
        } ]
      } ],
      "relatedLocations" : [ {
        "id" : 1,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "bad/mod_api.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 21
          },
          "region" : {
            "startLine" : 32,
            "startColumn" : 12,
            "endColumn" : 19
          },
          "contextRegion" : {
            "startLine" : 30,
            "endLine" : 34,
            "snippet" : {
              "text" : "@mod_api.route('/key', methods=['POST'])\ndef do_key_create():\n    data = request.get_json()\n\n    try:\n"
            }
          }
        },
        "message" : {
          "text" : "a user-provided value"
        }
      }, {
        "id" : 2,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "good/mod_api.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 22
          },
          "region" : {
            "startLine" : 34,
            "startColumn" : 12,
            "endColumn" : 19
          },
          "contextRegion" : {
            "startLine" : 32,
            "endLine" : 36,
            "snippet" : {
              "text" : "@mod_api.route('/key', methods=['POST'])\ndef do_key_create():\n    data = request.get_json()\n\n    try:\n"
            }
          }
        },
        "message" : {
          "text" : "a user-provided value"
        }
      } ]
    }, {
      "ruleId" : "py/reflective-xss",
      "ruleIndex" : 92,
      "message" : {
        "text" : "Cross-site scripting vulnerability due to [a user-provided value](1).\nCross-site scripting vulnerability due to [a user-provided value](2).\nCross-site scripting vulnerability due to [a user-provided value](3).\nCross-site scripting vulnerability due to [a user-provided value](4).\nCross-site scripting vulnerability due to [a user-provided value](5).\nCross-site scripting vulnerability due to [a user-provided value](1)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "bad/mod_user.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 33,
            "startColumn" : 16,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 31,
            "endLine" : 35,
            "snippet" : {
              "text" : "        response = make_response(redirect('/'))\n        response = libsession.create(response=response, username=username)\n        return response\n\n    return render_template('user.login.mfa.html')\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "68a9962897fd336c:1",
        "primaryLocationStartColumnFingerprint" : "7"
      },
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libsession.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 2
                },
                "region" : {
                  "startLine" : 5,
                  "startColumn" : 12,
                  "endColumn" : 20
                },
                "contextRegion" : {
                  "startLine" : 3,
                  "endLine" : 7,
                  "snippet" : {
                    "text" : "\n\ndef create(response, username):\n    session = base64.b64encode(json.dumps({'username': username}).encode())\n    response.set_cookie('vulpy_session', session)\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for response"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libsession.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 2
                },
                "region" : {
                  "startLine" : 8,
                  "startColumn" : 12,
                  "endColumn" : 20
                },
                "contextRegion" : {
                  "startLine" : 6,
                  "endLine" : 10,
                  "snippet" : {
                    "text" : "    session = base64.b64encode(json.dumps({'username': username}).encode())\n    response.set_cookie('vulpy_session', session)\n    return response\n\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for response"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 32,
                  "startColumn" : 20,
                  "endColumn" : 75
                },
                "contextRegion" : {
                  "startLine" : 30,
                  "endLine" : 34,
                  "snippet" : {
                    "text" : "\n        response = make_response(redirect('/'))\n        response = libsession.create(response=response, username=username)\n        return response\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute()"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 33,
                  "startColumn" : 16,
                  "endColumn" : 24
                },
                "contextRegion" : {
                  "startLine" : 31,
                  "endLine" : 35,
                  "snippet" : {
                    "text" : "        response = make_response(redirect('/'))\n        response = libsession.create(response=response, username=username)\n        return response\n\n    return render_template('user.login.mfa.html')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for response"
              }
            }
          } ]
        } ]
      }, {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libsession.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 2
                },
                "region" : {
                  "startLine" : 7,
                  "startColumn" : 5,
                  "endColumn" : 13
                },
                "contextRegion" : {
                  "startLine" : 5,
                  "endLine" : 9,
                  "snippet" : {
                    "text" : "def create(response, username):\n    session = base64.b64encode(json.dumps({'username': username}).encode())\n    response.set_cookie('vulpy_session', session)\n    return response\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for response"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libsession.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 2
                },
                "region" : {
                  "startLine" : 8,
                  "startColumn" : 12,
                  "endColumn" : 20
                },
                "contextRegion" : {
                  "startLine" : 6,
                  "endLine" : 10,
                  "snippet" : {
                    "text" : "    session = base64.b64encode(json.dumps({'username': username}).encode())\n    response.set_cookie('vulpy_session', session)\n    return response\n\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for response"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 32,
                  "startColumn" : 20,
                  "endColumn" : 75
                },
                "contextRegion" : {
                  "startLine" : 30,
                  "endLine" : 34,
                  "snippet" : {
                    "text" : "\n        response = make_response(redirect('/'))\n        response = libsession.create(response=response, username=username)\n        return response\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute()"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 33,
                  "startColumn" : 16,
                  "endColumn" : 24
                },
                "contextRegion" : {
                  "startLine" : 31,
                  "endLine" : 35,
                  "snippet" : {
                    "text" : "        response = make_response(redirect('/'))\n        response = libsession.create(response=response, username=username)\n        return response\n\n    return render_template('user.login.mfa.html')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for response"
              }
            }
          } ]
        } ]
      }, {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libsession.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 2
                },
                "region" : {
                  "startLine" : 8,
                  "startColumn" : 12,
                  "endColumn" : 20
                },
                "contextRegion" : {
                  "startLine" : 6,
                  "endLine" : 10,
                  "snippet" : {
                    "text" : "    session = base64.b64encode(json.dumps({'username': username}).encode())\n    response.set_cookie('vulpy_session', session)\n    return response\n\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for response"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 32,
                  "startColumn" : 20,
                  "endColumn" : 75
                },
                "contextRegion" : {
                  "startLine" : 30,
                  "endLine" : 34,
                  "snippet" : {
                    "text" : "\n        response = make_response(redirect('/'))\n        response = libsession.create(response=response, username=username)\n        return response\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute()"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 33,
                  "startColumn" : 16,
                  "endColumn" : 24
                },
                "contextRegion" : {
                  "startLine" : 31,
                  "endLine" : 35,
                  "snippet" : {
                    "text" : "        response = make_response(redirect('/'))\n        response = libsession.create(response=response, username=username)\n        return response\n\n    return render_template('user.login.mfa.html')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for response"
              }
            }
          } ]
        } ]
      }, {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 14,
                  "startColumn" : 8,
                  "endColumn" : 15
                },
                "contextRegion" : {
                  "startLine" : 12,
                  "endLine" : 16,
                  "snippet" : {
                    "text" : "    session.pop('username', None)\n\n    if request.method == 'POST':\n\n        username = request.form.get('username')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 16,
                  "startColumn" : 20,
                  "endColumn" : 32
                },
                "contextRegion" : {
                  "startLine" : 14,
                  "endLine" : 18,
                  "snippet" : {
                    "text" : "    if request.method == 'POST':\n\n        username = request.form.get('username')\n        password = request.form.get('password')\n        otp = request.form.get('otp')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 20,
                  "startColumn" : 34,
                  "endColumn" : 42
                },
                "contextRegion" : {
                  "startLine" : 18,
                  "endLine" : 22,
                  "snippet" : {
                    "text" : "        otp = request.form.get('otp')\n\n        username = libuser.login(username, password)\n\n        if not username:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for username"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 20,
                  "startColumn" : 20,
                  "endColumn" : 53
                },
                "contextRegion" : {
                  "startLine" : 18,
                  "endLine" : 22,
                  "snippet" : {
                    "text" : "        otp = request.form.get('otp')\n\n        username = libuser.login(username, password)\n\n        if not username:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute()"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 32,
                  "startColumn" : 66,
                  "endColumn" : 74
                },
                "contextRegion" : {
                  "startLine" : 30,
                  "endLine" : 34,
                  "snippet" : {
                    "text" : "\n        response = make_response(redirect('/'))\n        response = libsession.create(response=response, username=username)\n        return response\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for username"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 32,
                  "startColumn" : 20,
                  "endColumn" : 75
                },
                "contextRegion" : {
                  "startLine" : 30,
                  "endLine" : 34,
                  "snippet" : {
                    "text" : "\n        response = make_response(redirect('/'))\n        response = libsession.create(response=response, username=username)\n        return response\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute()"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 33,
                  "startColumn" : 16,
                  "endColumn" : 24
                },
                "contextRegion" : {
                  "startLine" : 31,
                  "endLine" : 35,
                  "snippet" : {
                    "text" : "        response = make_response(redirect('/'))\n        response = libsession.create(response=response, username=username)\n        return response\n\n    return render_template('user.login.mfa.html')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for response"
              }
            }
          } ]
        } ]
      }, {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 14,
                  "startColumn" : 8,
                  "endColumn" : 15
                },
                "contextRegion" : {
                  "startLine" : 12,
                  "endLine" : 16,
                  "snippet" : {
                    "text" : "    session.pop('username', None)\n\n    if request.method == 'POST':\n\n        username = request.form.get('username')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 16,
                  "startColumn" : 20,
                  "endColumn" : 27
                },
                "contextRegion" : {
                  "startLine" : 14,
                  "endLine" : 18,
                  "snippet" : {
                    "text" : "    if request.method == 'POST':\n\n        username = request.form.get('username')\n        password = request.form.get('password')\n        otp = request.form.get('otp')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 16,
                  "startColumn" : 20,
                  "endColumn" : 32
                },
                "contextRegion" : {
                  "startLine" : 14,
                  "endLine" : 18,
                  "snippet" : {
                    "text" : "    if request.method == 'POST':\n\n        username = request.form.get('username')\n        password = request.form.get('password')\n        otp = request.form.get('otp')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 20,
                  "startColumn" : 34,
                  "endColumn" : 42
                },
                "contextRegion" : {
                  "startLine" : 18,
                  "endLine" : 22,
                  "snippet" : {
                    "text" : "        otp = request.form.get('otp')\n\n        username = libuser.login(username, password)\n\n        if not username:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for username"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 20,
                  "startColumn" : 20,
                  "endColumn" : 53
                },
                "contextRegion" : {
                  "startLine" : 18,
                  "endLine" : 22,
                  "snippet" : {
                    "text" : "        otp = request.form.get('otp')\n\n        username = libuser.login(username, password)\n\n        if not username:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute()"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 32,
                  "startColumn" : 66,
                  "endColumn" : 74
                },
                "contextRegion" : {
                  "startLine" : 30,
                  "endLine" : 34,
                  "snippet" : {
                    "text" : "\n        response = make_response(redirect('/'))\n        response = libsession.create(response=response, username=username)\n        return response\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for username"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 32,
                  "startColumn" : 20,
                  "endColumn" : 75
                },
                "contextRegion" : {
                  "startLine" : 30,
                  "endLine" : 34,
                  "snippet" : {
                    "text" : "\n        response = make_response(redirect('/'))\n        response = libsession.create(response=response, username=username)\n        return response\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute()"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 33,
                  "startColumn" : 16,
                  "endColumn" : 24
                },
                "contextRegion" : {
                  "startLine" : 31,
                  "endLine" : 35,
                  "snippet" : {
                    "text" : "        response = make_response(redirect('/'))\n        response = libsession.create(response=response, username=username)\n        return response\n\n    return render_template('user.login.mfa.html')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for response"
              }
            }
          } ]
        } ]
      }, {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 16,
                  "startColumn" : 20,
                  "endColumn" : 27
                },
                "contextRegion" : {
                  "startLine" : 14,
                  "endLine" : 18,
                  "snippet" : {
                    "text" : "    if request.method == 'POST':\n\n        username = request.form.get('username')\n        password = request.form.get('password')\n        otp = request.form.get('otp')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 16,
                  "startColumn" : 20,
                  "endColumn" : 32
                },
                "contextRegion" : {
                  "startLine" : 14,
                  "endLine" : 18,
                  "snippet" : {
                    "text" : "    if request.method == 'POST':\n\n        username = request.form.get('username')\n        password = request.form.get('password')\n        otp = request.form.get('otp')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 20,
                  "startColumn" : 34,
                  "endColumn" : 42
                },
                "contextRegion" : {
                  "startLine" : 18,
                  "endLine" : 22,
                  "snippet" : {
                    "text" : "        otp = request.form.get('otp')\n\n        username = libuser.login(username, password)\n\n        if not username:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for username"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 20,
                  "startColumn" : 20,
                  "endColumn" : 53
                },
                "contextRegion" : {
                  "startLine" : 18,
                  "endLine" : 22,
                  "snippet" : {
                    "text" : "        otp = request.form.get('otp')\n\n        username = libuser.login(username, password)\n\n        if not username:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute()"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 32,
                  "startColumn" : 66,
                  "endColumn" : 74
                },
                "contextRegion" : {
                  "startLine" : 30,
                  "endLine" : 34,
                  "snippet" : {
                    "text" : "\n        response = make_response(redirect('/'))\n        response = libsession.create(response=response, username=username)\n        return response\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for username"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 32,
                  "startColumn" : 20,
                  "endColumn" : 75
                },
                "contextRegion" : {
                  "startLine" : 30,
                  "endLine" : 34,
                  "snippet" : {
                    "text" : "\n        response = make_response(redirect('/'))\n        response = libsession.create(response=response, username=username)\n        return response\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute()"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 33,
                  "startColumn" : 16,
                  "endColumn" : 24
                },
                "contextRegion" : {
                  "startLine" : 31,
                  "endLine" : 35,
                  "snippet" : {
                    "text" : "        response = make_response(redirect('/'))\n        response = libsession.create(response=response, username=username)\n        return response\n\n    return render_template('user.login.mfa.html')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for response"
              }
            }
          } ]
        } ]
      }, {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libsession.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 2
                },
                "region" : {
                  "startLine" : 5,
                  "startColumn" : 12,
                  "endColumn" : 20
                },
                "contextRegion" : {
                  "startLine" : 3,
                  "endLine" : 7,
                  "snippet" : {
                    "text" : "\n\ndef create(response, username):\n    session = base64.b64encode(json.dumps({'username': username}).encode())\n    response.set_cookie('vulpy_session', session)\n"
                  }
                }
              },
              "message" : {
                "text" : "SSA variable response"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libsession.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 2
                },
                "region" : {
                  "startLine" : 8,
                  "startColumn" : 12,
                  "endColumn" : 20
                },
                "contextRegion" : {
                  "startLine" : 6,
                  "endLine" : 10,
                  "snippet" : {
                    "text" : "    session = base64.b64encode(json.dumps({'username': username}).encode())\n    response.set_cookie('vulpy_session', session)\n    return response\n\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for response"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 32,
                  "startColumn" : 20,
                  "endColumn" : 75
                },
                "contextRegion" : {
                  "startLine" : 30,
                  "endLine" : 34,
                  "snippet" : {
                    "text" : "\n        response = make_response(redirect('/'))\n        response = libsession.create(response=response, username=username)\n        return response\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute()"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 33,
                  "startColumn" : 16,
                  "endColumn" : 24
                },
                "contextRegion" : {
                  "startLine" : 31,
                  "endLine" : 35,
                  "snippet" : {
                    "text" : "        response = make_response(redirect('/'))\n        response = libsession.create(response=response, username=username)\n        return response\n\n    return render_template('user.login.mfa.html')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for response"
              }
            }
          } ]
        } ]
      } ],
      "relatedLocations" : [ {
        "id" : 1,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "bad/libsession.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 5,
            "startColumn" : 12,
            "endColumn" : 20
          },
          "contextRegion" : {
            "startLine" : 3,
            "endLine" : 7,
            "snippet" : {
              "text" : "\n\ndef create(response, username):\n    session = base64.b64encode(json.dumps({'username': username}).encode())\n    response.set_cookie('vulpy_session', session)\n"
            }
          }
        },
        "message" : {
          "text" : "a user-provided value"
        }
      }, {
        "id" : 2,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "bad/libsession.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 7,
            "startColumn" : 5,
            "endColumn" : 13
          },
          "contextRegion" : {
            "startLine" : 5,
            "endLine" : 9,
            "snippet" : {
              "text" : "def create(response, username):\n    session = base64.b64encode(json.dumps({'username': username}).encode())\n    response.set_cookie('vulpy_session', session)\n    return response\n\n"
            }
          }
        },
        "message" : {
          "text" : "a user-provided value"
        }
      }, {
        "id" : 3,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "bad/libsession.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 8,
            "startColumn" : 12,
            "endColumn" : 20
          },
          "contextRegion" : {
            "startLine" : 6,
            "endLine" : 10,
            "snippet" : {
              "text" : "    session = base64.b64encode(json.dumps({'username': username}).encode())\n    response.set_cookie('vulpy_session', session)\n    return response\n\n\n"
            }
          }
        },
        "message" : {
          "text" : "a user-provided value"
        }
      }, {
        "id" : 4,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "bad/mod_user.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 14,
            "startColumn" : 8,
            "endColumn" : 15
          },
          "contextRegion" : {
            "startLine" : 12,
            "endLine" : 16,
            "snippet" : {
              "text" : "    session.pop('username', None)\n\n    if request.method == 'POST':\n\n        username = request.form.get('username')\n"
            }
          }
        },
        "message" : {
          "text" : "a user-provided value"
        }
      }, {
        "id" : 5,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "bad/mod_user.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 16,
            "startColumn" : 20,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 14,
            "endLine" : 18,
            "snippet" : {
              "text" : "    if request.method == 'POST':\n\n        username = request.form.get('username')\n        password = request.form.get('password')\n        otp = request.form.get('otp')\n"
            }
          }
        },
        "message" : {
          "text" : "a user-provided value"
        }
      } ]
    }, {
      "ruleId" : "py/reflective-xss",
      "ruleIndex" : 92,
      "message" : {
        "text" : "Cross-site scripting vulnerability due to [a user-provided value](1).\nCross-site scripting vulnerability due to [a user-provided value](2).\nCross-site scripting vulnerability due to [a user-provided value](3).\nCross-site scripting vulnerability due to [a user-provided value](4).\nCross-site scripting vulnerability due to [a user-provided value](5).\nCross-site scripting vulnerability due to [a user-provided value](6).\nCross-site scripting vulnerability due to [a user-provided value](7).\nCross-site scripting vulnerability due to [a user-provided value](8).\nCross-site scripting vulnerability due to [a user-provided value](1)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "good/mod_user.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 34,
            "startColumn" : 16,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 32,
            "endLine" : 36,
            "snippet" : {
              "text" : "        response = make_response(redirect('/'))\n        response = libsession.create(request=request, response=response, username=username)\n        return response\n\n    return render_template('user.login.mfa.html')\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "68a9962897fd336c:1",
        "primaryLocationStartColumnFingerprint" : "7"
      },
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libsession.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 2
                },
                "region" : {
                  "startLine" : 5,
                  "startColumn" : 12,
                  "endColumn" : 20
                },
                "contextRegion" : {
                  "startLine" : 3,
                  "endLine" : 7,
                  "snippet" : {
                    "text" : "\n\ndef create(response, username):\n    session = base64.b64encode(json.dumps({'username': username}).encode())\n    response.set_cookie('vulpy_session', session)\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for response"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libsession.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 2
                },
                "region" : {
                  "startLine" : 8,
                  "startColumn" : 12,
                  "endColumn" : 20
                },
                "contextRegion" : {
                  "startLine" : 6,
                  "endLine" : 10,
                  "snippet" : {
                    "text" : "    session = base64.b64encode(json.dumps({'username': username}).encode())\n    response.set_cookie('vulpy_session', session)\n    return response\n\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for response"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 33,
                  "startColumn" : 20,
                  "endColumn" : 92
                },
                "contextRegion" : {
                  "startLine" : 31,
                  "endLine" : 35,
                  "snippet" : {
                    "text" : "\n        response = make_response(redirect('/'))\n        response = libsession.create(request=request, response=response, username=username)\n        return response\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute()"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 34,
                  "startColumn" : 16,
                  "endColumn" : 24
                },
                "contextRegion" : {
                  "startLine" : 32,
                  "endLine" : 36,
                  "snippet" : {
                    "text" : "        response = make_response(redirect('/'))\n        response = libsession.create(request=request, response=response, username=username)\n        return response\n\n    return render_template('user.login.mfa.html')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for response"
              }
            }
          } ]
        } ]
      }, {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libsession.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 2
                },
                "region" : {
                  "startLine" : 7,
                  "startColumn" : 5,
                  "endColumn" : 13
                },
                "contextRegion" : {
                  "startLine" : 5,
                  "endLine" : 9,
                  "snippet" : {
                    "text" : "def create(response, username):\n    session = base64.b64encode(json.dumps({'username': username}).encode())\n    response.set_cookie('vulpy_session', session)\n    return response\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for response"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libsession.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 2
                },
                "region" : {
                  "startLine" : 8,
                  "startColumn" : 12,
                  "endColumn" : 20
                },
                "contextRegion" : {
                  "startLine" : 6,
                  "endLine" : 10,
                  "snippet" : {
                    "text" : "    session = base64.b64encode(json.dumps({'username': username}).encode())\n    response.set_cookie('vulpy_session', session)\n    return response\n\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for response"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 33,
                  "startColumn" : 20,
                  "endColumn" : 92
                },
                "contextRegion" : {
                  "startLine" : 31,
                  "endLine" : 35,
                  "snippet" : {
                    "text" : "\n        response = make_response(redirect('/'))\n        response = libsession.create(request=request, response=response, username=username)\n        return response\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute()"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 34,
                  "startColumn" : 16,
                  "endColumn" : 24
                },
                "contextRegion" : {
                  "startLine" : 32,
                  "endLine" : 36,
                  "snippet" : {
                    "text" : "        response = make_response(redirect('/'))\n        response = libsession.create(request=request, response=response, username=username)\n        return response\n\n    return render_template('user.login.mfa.html')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for response"
              }
            }
          } ]
        } ]
      }, {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libsession.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 2
                },
                "region" : {
                  "startLine" : 8,
                  "startColumn" : 12,
                  "endColumn" : 20
                },
                "contextRegion" : {
                  "startLine" : 6,
                  "endLine" : 10,
                  "snippet" : {
                    "text" : "    session = base64.b64encode(json.dumps({'username': username}).encode())\n    response.set_cookie('vulpy_session', session)\n    return response\n\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for response"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 33,
                  "startColumn" : 20,
                  "endColumn" : 92
                },
                "contextRegion" : {
                  "startLine" : 31,
                  "endLine" : 35,
                  "snippet" : {
                    "text" : "\n        response = make_response(redirect('/'))\n        response = libsession.create(request=request, response=response, username=username)\n        return response\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute()"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 34,
                  "startColumn" : 16,
                  "endColumn" : 24
                },
                "contextRegion" : {
                  "startLine" : 32,
                  "endLine" : 36,
                  "snippet" : {
                    "text" : "        response = make_response(redirect('/'))\n        response = libsession.create(request=request, response=response, username=username)\n        return response\n\n    return render_template('user.login.mfa.html')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for response"
              }
            }
          } ]
        } ]
      }, {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 15,
                  "startColumn" : 8,
                  "endColumn" : 15
                },
                "contextRegion" : {
                  "startLine" : 13,
                  "endLine" : 17,
                  "snippet" : {
                    "text" : "    session.pop('username', None)\n\n    if request.method == 'POST':\n\n        username = request.form.get('username')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 33,
                  "startColumn" : 46,
                  "endColumn" : 53
                },
                "contextRegion" : {
                  "startLine" : 31,
                  "endLine" : 35,
                  "snippet" : {
                    "text" : "\n        response = make_response(redirect('/'))\n        response = libsession.create(request=request, response=response, username=username)\n        return response\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 33,
                  "startColumn" : 20,
                  "endColumn" : 92
                },
                "contextRegion" : {
                  "startLine" : 31,
                  "endLine" : 35,
                  "snippet" : {
                    "text" : "\n        response = make_response(redirect('/'))\n        response = libsession.create(request=request, response=response, username=username)\n        return response\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute()"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 34,
                  "startColumn" : 16,
                  "endColumn" : 24
                },
                "contextRegion" : {
                  "startLine" : 32,
                  "endLine" : 36,
                  "snippet" : {
                    "text" : "        response = make_response(redirect('/'))\n        response = libsession.create(request=request, response=response, username=username)\n        return response\n\n    return render_template('user.login.mfa.html')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for response"
              }
            }
          } ]
        } ]
      }, {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 15,
                  "startColumn" : 8,
                  "endColumn" : 15
                },
                "contextRegion" : {
                  "startLine" : 13,
                  "endLine" : 17,
                  "snippet" : {
                    "text" : "    session.pop('username', None)\n\n    if request.method == 'POST':\n\n        username = request.form.get('username')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 17,
                  "startColumn" : 20,
                  "endColumn" : 32
                },
                "contextRegion" : {
                  "startLine" : 15,
                  "endLine" : 19,
                  "snippet" : {
                    "text" : "    if request.method == 'POST':\n\n        username = request.form.get('username')\n        password = request.form.get('password')\n        otp = request.form.get('otp')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 21,
                  "startColumn" : 34,
                  "endColumn" : 42
                },
                "contextRegion" : {
                  "startLine" : 19,
                  "endLine" : 23,
                  "snippet" : {
                    "text" : "        otp = request.form.get('otp')\n\n        username = libuser.login(username, password)\n\n        if not username:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for username"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 21,
                  "startColumn" : 20,
                  "endColumn" : 53
                },
                "contextRegion" : {
                  "startLine" : 19,
                  "endLine" : 23,
                  "snippet" : {
                    "text" : "        otp = request.form.get('otp')\n\n        username = libuser.login(username, password)\n\n        if not username:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute()"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 33,
                  "startColumn" : 83,
                  "endColumn" : 91
                },
                "contextRegion" : {
                  "startLine" : 31,
                  "endLine" : 35,
                  "snippet" : {
                    "text" : "\n        response = make_response(redirect('/'))\n        response = libsession.create(request=request, response=response, username=username)\n        return response\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for username"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 33,
                  "startColumn" : 20,
                  "endColumn" : 92
                },
                "contextRegion" : {
                  "startLine" : 31,
                  "endLine" : 35,
                  "snippet" : {
                    "text" : "\n        response = make_response(redirect('/'))\n        response = libsession.create(request=request, response=response, username=username)\n        return response\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute()"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 34,
                  "startColumn" : 16,
                  "endColumn" : 24
                },
                "contextRegion" : {
                  "startLine" : 32,
                  "endLine" : 36,
                  "snippet" : {
                    "text" : "        response = make_response(redirect('/'))\n        response = libsession.create(request=request, response=response, username=username)\n        return response\n\n    return render_template('user.login.mfa.html')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for response"
              }
            }
          } ]
        } ]
      }, {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 15,
                  "startColumn" : 8,
                  "endColumn" : 15
                },
                "contextRegion" : {
                  "startLine" : 13,
                  "endLine" : 17,
                  "snippet" : {
                    "text" : "    session.pop('username', None)\n\n    if request.method == 'POST':\n\n        username = request.form.get('username')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 17,
                  "startColumn" : 20,
                  "endColumn" : 27
                },
                "contextRegion" : {
                  "startLine" : 15,
                  "endLine" : 19,
                  "snippet" : {
                    "text" : "    if request.method == 'POST':\n\n        username = request.form.get('username')\n        password = request.form.get('password')\n        otp = request.form.get('otp')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 33,
                  "startColumn" : 46,
                  "endColumn" : 53
                },
                "contextRegion" : {
                  "startLine" : 31,
                  "endLine" : 35,
                  "snippet" : {
                    "text" : "\n        response = make_response(redirect('/'))\n        response = libsession.create(request=request, response=response, username=username)\n        return response\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 33,
                  "startColumn" : 20,
                  "endColumn" : 92
                },
                "contextRegion" : {
                  "startLine" : 31,
                  "endLine" : 35,
                  "snippet" : {
                    "text" : "\n        response = make_response(redirect('/'))\n        response = libsession.create(request=request, response=response, username=username)\n        return response\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute()"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 34,
                  "startColumn" : 16,
                  "endColumn" : 24
                },
                "contextRegion" : {
                  "startLine" : 32,
                  "endLine" : 36,
                  "snippet" : {
                    "text" : "        response = make_response(redirect('/'))\n        response = libsession.create(request=request, response=response, username=username)\n        return response\n\n    return render_template('user.login.mfa.html')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for response"
              }
            }
          } ]
        } ]
      }, {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 15,
                  "startColumn" : 8,
                  "endColumn" : 15
                },
                "contextRegion" : {
                  "startLine" : 13,
                  "endLine" : 17,
                  "snippet" : {
                    "text" : "    session.pop('username', None)\n\n    if request.method == 'POST':\n\n        username = request.form.get('username')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 17,
                  "startColumn" : 20,
                  "endColumn" : 27
                },
                "contextRegion" : {
                  "startLine" : 15,
                  "endLine" : 19,
                  "snippet" : {
                    "text" : "    if request.method == 'POST':\n\n        username = request.form.get('username')\n        password = request.form.get('password')\n        otp = request.form.get('otp')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 17,
                  "startColumn" : 20,
                  "endColumn" : 32
                },
                "contextRegion" : {
                  "startLine" : 15,
                  "endLine" : 19,
                  "snippet" : {
                    "text" : "    if request.method == 'POST':\n\n        username = request.form.get('username')\n        password = request.form.get('password')\n        otp = request.form.get('otp')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 21,
                  "startColumn" : 34,
                  "endColumn" : 42
                },
                "contextRegion" : {
                  "startLine" : 19,
                  "endLine" : 23,
                  "snippet" : {
                    "text" : "        otp = request.form.get('otp')\n\n        username = libuser.login(username, password)\n\n        if not username:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for username"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 21,
                  "startColumn" : 20,
                  "endColumn" : 53
                },
                "contextRegion" : {
                  "startLine" : 19,
                  "endLine" : 23,
                  "snippet" : {
                    "text" : "        otp = request.form.get('otp')\n\n        username = libuser.login(username, password)\n\n        if not username:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute()"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 33,
                  "startColumn" : 83,
                  "endColumn" : 91
                },
                "contextRegion" : {
                  "startLine" : 31,
                  "endLine" : 35,
                  "snippet" : {
                    "text" : "\n        response = make_response(redirect('/'))\n        response = libsession.create(request=request, response=response, username=username)\n        return response\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for username"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 33,
                  "startColumn" : 20,
                  "endColumn" : 92
                },
                "contextRegion" : {
                  "startLine" : 31,
                  "endLine" : 35,
                  "snippet" : {
                    "text" : "\n        response = make_response(redirect('/'))\n        response = libsession.create(request=request, response=response, username=username)\n        return response\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute()"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 34,
                  "startColumn" : 16,
                  "endColumn" : 24
                },
                "contextRegion" : {
                  "startLine" : 32,
                  "endLine" : 36,
                  "snippet" : {
                    "text" : "        response = make_response(redirect('/'))\n        response = libsession.create(request=request, response=response, username=username)\n        return response\n\n    return render_template('user.login.mfa.html')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for response"
              }
            }
          } ]
        } ]
      }, {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 17,
                  "startColumn" : 20,
                  "endColumn" : 27
                },
                "contextRegion" : {
                  "startLine" : 15,
                  "endLine" : 19,
                  "snippet" : {
                    "text" : "    if request.method == 'POST':\n\n        username = request.form.get('username')\n        password = request.form.get('password')\n        otp = request.form.get('otp')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 33,
                  "startColumn" : 46,
                  "endColumn" : 53
                },
                "contextRegion" : {
                  "startLine" : 31,
                  "endLine" : 35,
                  "snippet" : {
                    "text" : "\n        response = make_response(redirect('/'))\n        response = libsession.create(request=request, response=response, username=username)\n        return response\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 33,
                  "startColumn" : 20,
                  "endColumn" : 92
                },
                "contextRegion" : {
                  "startLine" : 31,
                  "endLine" : 35,
                  "snippet" : {
                    "text" : "\n        response = make_response(redirect('/'))\n        response = libsession.create(request=request, response=response, username=username)\n        return response\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute()"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 34,
                  "startColumn" : 16,
                  "endColumn" : 24
                },
                "contextRegion" : {
                  "startLine" : 32,
                  "endLine" : 36,
                  "snippet" : {
                    "text" : "        response = make_response(redirect('/'))\n        response = libsession.create(request=request, response=response, username=username)\n        return response\n\n    return render_template('user.login.mfa.html')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for response"
              }
            }
          } ]
        } ]
      }, {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 17,
                  "startColumn" : 20,
                  "endColumn" : 27
                },
                "contextRegion" : {
                  "startLine" : 15,
                  "endLine" : 19,
                  "snippet" : {
                    "text" : "    if request.method == 'POST':\n\n        username = request.form.get('username')\n        password = request.form.get('password')\n        otp = request.form.get('otp')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 17,
                  "startColumn" : 20,
                  "endColumn" : 32
                },
                "contextRegion" : {
                  "startLine" : 15,
                  "endLine" : 19,
                  "snippet" : {
                    "text" : "    if request.method == 'POST':\n\n        username = request.form.get('username')\n        password = request.form.get('password')\n        otp = request.form.get('otp')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 21,
                  "startColumn" : 34,
                  "endColumn" : 42
                },
                "contextRegion" : {
                  "startLine" : 19,
                  "endLine" : 23,
                  "snippet" : {
                    "text" : "        otp = request.form.get('otp')\n\n        username = libuser.login(username, password)\n\n        if not username:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for username"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 21,
                  "startColumn" : 20,
                  "endColumn" : 53
                },
                "contextRegion" : {
                  "startLine" : 19,
                  "endLine" : 23,
                  "snippet" : {
                    "text" : "        otp = request.form.get('otp')\n\n        username = libuser.login(username, password)\n\n        if not username:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute()"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 33,
                  "startColumn" : 83,
                  "endColumn" : 91
                },
                "contextRegion" : {
                  "startLine" : 31,
                  "endLine" : 35,
                  "snippet" : {
                    "text" : "\n        response = make_response(redirect('/'))\n        response = libsession.create(request=request, response=response, username=username)\n        return response\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for username"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 33,
                  "startColumn" : 20,
                  "endColumn" : 92
                },
                "contextRegion" : {
                  "startLine" : 31,
                  "endLine" : 35,
                  "snippet" : {
                    "text" : "\n        response = make_response(redirect('/'))\n        response = libsession.create(request=request, response=response, username=username)\n        return response\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute()"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 34,
                  "startColumn" : 16,
                  "endColumn" : 24
                },
                "contextRegion" : {
                  "startLine" : 32,
                  "endLine" : 36,
                  "snippet" : {
                    "text" : "        response = make_response(redirect('/'))\n        response = libsession.create(request=request, response=response, username=username)\n        return response\n\n    return render_template('user.login.mfa.html')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for response"
              }
            }
          } ]
        } ]
      }, {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 18,
                  "startColumn" : 20,
                  "endColumn" : 27
                },
                "contextRegion" : {
                  "startLine" : 16,
                  "endLine" : 20,
                  "snippet" : {
                    "text" : "\n        username = request.form.get('username')\n        password = request.form.get('password')\n        otp = request.form.get('otp')\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 33,
                  "startColumn" : 46,
                  "endColumn" : 53
                },
                "contextRegion" : {
                  "startLine" : 31,
                  "endLine" : 35,
                  "snippet" : {
                    "text" : "\n        response = make_response(redirect('/'))\n        response = libsession.create(request=request, response=response, username=username)\n        return response\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 33,
                  "startColumn" : 20,
                  "endColumn" : 92
                },
                "contextRegion" : {
                  "startLine" : 31,
                  "endLine" : 35,
                  "snippet" : {
                    "text" : "\n        response = make_response(redirect('/'))\n        response = libsession.create(request=request, response=response, username=username)\n        return response\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute()"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 34,
                  "startColumn" : 16,
                  "endColumn" : 24
                },
                "contextRegion" : {
                  "startLine" : 32,
                  "endLine" : 36,
                  "snippet" : {
                    "text" : "        response = make_response(redirect('/'))\n        response = libsession.create(request=request, response=response, username=username)\n        return response\n\n    return render_template('user.login.mfa.html')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for response"
              }
            }
          } ]
        } ]
      }, {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 19,
                  "startColumn" : 15,
                  "endColumn" : 22
                },
                "contextRegion" : {
                  "startLine" : 17,
                  "endLine" : 21,
                  "snippet" : {
                    "text" : "        username = request.form.get('username')\n        password = request.form.get('password')\n        otp = request.form.get('otp')\n\n        username = libuser.login(username, password)\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 33,
                  "startColumn" : 46,
                  "endColumn" : 53
                },
                "contextRegion" : {
                  "startLine" : 31,
                  "endLine" : 35,
                  "snippet" : {
                    "text" : "\n        response = make_response(redirect('/'))\n        response = libsession.create(request=request, response=response, username=username)\n        return response\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 33,
                  "startColumn" : 20,
                  "endColumn" : 92
                },
                "contextRegion" : {
                  "startLine" : 31,
                  "endLine" : 35,
                  "snippet" : {
                    "text" : "\n        response = make_response(redirect('/'))\n        response = libsession.create(request=request, response=response, username=username)\n        return response\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute()"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 34,
                  "startColumn" : 16,
                  "endColumn" : 24
                },
                "contextRegion" : {
                  "startLine" : 32,
                  "endLine" : 36,
                  "snippet" : {
                    "text" : "        response = make_response(redirect('/'))\n        response = libsession.create(request=request, response=response, username=username)\n        return response\n\n    return render_template('user.login.mfa.html')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for response"
              }
            }
          } ]
        } ]
      }, {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 33,
                  "startColumn" : 46,
                  "endColumn" : 53
                },
                "contextRegion" : {
                  "startLine" : 31,
                  "endLine" : 35,
                  "snippet" : {
                    "text" : "\n        response = make_response(redirect('/'))\n        response = libsession.create(request=request, response=response, username=username)\n        return response\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 33,
                  "startColumn" : 20,
                  "endColumn" : 92
                },
                "contextRegion" : {
                  "startLine" : 31,
                  "endLine" : 35,
                  "snippet" : {
                    "text" : "\n        response = make_response(redirect('/'))\n        response = libsession.create(request=request, response=response, username=username)\n        return response\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute()"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 34,
                  "startColumn" : 16,
                  "endColumn" : 24
                },
                "contextRegion" : {
                  "startLine" : 32,
                  "endLine" : 36,
                  "snippet" : {
                    "text" : "        response = make_response(redirect('/'))\n        response = libsession.create(request=request, response=response, username=username)\n        return response\n\n    return render_template('user.login.mfa.html')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for response"
              }
            }
          } ]
        } ]
      }, {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libsession.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 2
                },
                "region" : {
                  "startLine" : 5,
                  "startColumn" : 12,
                  "endColumn" : 20
                },
                "contextRegion" : {
                  "startLine" : 3,
                  "endLine" : 7,
                  "snippet" : {
                    "text" : "\n\ndef create(response, username):\n    session = base64.b64encode(json.dumps({'username': username}).encode())\n    response.set_cookie('vulpy_session', session)\n"
                  }
                }
              },
              "message" : {
                "text" : "SSA variable response"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libsession.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 2
                },
                "region" : {
                  "startLine" : 8,
                  "startColumn" : 12,
                  "endColumn" : 20
                },
                "contextRegion" : {
                  "startLine" : 6,
                  "endLine" : 10,
                  "snippet" : {
                    "text" : "    session = base64.b64encode(json.dumps({'username': username}).encode())\n    response.set_cookie('vulpy_session', session)\n    return response\n\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for response"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 33,
                  "startColumn" : 20,
                  "endColumn" : 92
                },
                "contextRegion" : {
                  "startLine" : 31,
                  "endLine" : 35,
                  "snippet" : {
                    "text" : "\n        response = make_response(redirect('/'))\n        response = libsession.create(request=request, response=response, username=username)\n        return response\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute()"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 34,
                  "startColumn" : 16,
                  "endColumn" : 24
                },
                "contextRegion" : {
                  "startLine" : 32,
                  "endLine" : 36,
                  "snippet" : {
                    "text" : "        response = make_response(redirect('/'))\n        response = libsession.create(request=request, response=response, username=username)\n        return response\n\n    return render_template('user.login.mfa.html')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for response"
              }
            }
          } ]
        } ]
      } ],
      "relatedLocations" : [ {
        "id" : 1,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "bad/libsession.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 5,
            "startColumn" : 12,
            "endColumn" : 20
          },
          "contextRegion" : {
            "startLine" : 3,
            "endLine" : 7,
            "snippet" : {
              "text" : "\n\ndef create(response, username):\n    session = base64.b64encode(json.dumps({'username': username}).encode())\n    response.set_cookie('vulpy_session', session)\n"
            }
          }
        },
        "message" : {
          "text" : "a user-provided value"
        }
      }, {
        "id" : 2,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "bad/libsession.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 7,
            "startColumn" : 5,
            "endColumn" : 13
          },
          "contextRegion" : {
            "startLine" : 5,
            "endLine" : 9,
            "snippet" : {
              "text" : "def create(response, username):\n    session = base64.b64encode(json.dumps({'username': username}).encode())\n    response.set_cookie('vulpy_session', session)\n    return response\n\n"
            }
          }
        },
        "message" : {
          "text" : "a user-provided value"
        }
      }, {
        "id" : 3,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "bad/libsession.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 8,
            "startColumn" : 12,
            "endColumn" : 20
          },
          "contextRegion" : {
            "startLine" : 6,
            "endLine" : 10,
            "snippet" : {
              "text" : "    session = base64.b64encode(json.dumps({'username': username}).encode())\n    response.set_cookie('vulpy_session', session)\n    return response\n\n\n"
            }
          }
        },
        "message" : {
          "text" : "a user-provided value"
        }
      }, {
        "id" : 4,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "good/mod_user.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 15,
            "startColumn" : 8,
            "endColumn" : 15
          },
          "contextRegion" : {
            "startLine" : 13,
            "endLine" : 17,
            "snippet" : {
              "text" : "    session.pop('username', None)\n\n    if request.method == 'POST':\n\n        username = request.form.get('username')\n"
            }
          }
        },
        "message" : {
          "text" : "a user-provided value"
        }
      }, {
        "id" : 5,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "good/mod_user.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 17,
            "startColumn" : 20,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 15,
            "endLine" : 19,
            "snippet" : {
              "text" : "    if request.method == 'POST':\n\n        username = request.form.get('username')\n        password = request.form.get('password')\n        otp = request.form.get('otp')\n"
            }
          }
        },
        "message" : {
          "text" : "a user-provided value"
        }
      }, {
        "id" : 6,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "good/mod_user.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 18,
            "startColumn" : 20,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 16,
            "endLine" : 20,
            "snippet" : {
              "text" : "\n        username = request.form.get('username')\n        password = request.form.get('password')\n        otp = request.form.get('otp')\n\n"
            }
          }
        },
        "message" : {
          "text" : "a user-provided value"
        }
      }, {
        "id" : 7,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "good/mod_user.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 19,
            "startColumn" : 15,
            "endColumn" : 22
          },
          "contextRegion" : {
            "startLine" : 17,
            "endLine" : 21,
            "snippet" : {
              "text" : "        username = request.form.get('username')\n        password = request.form.get('password')\n        otp = request.form.get('otp')\n\n        username = libuser.login(username, password)\n"
            }
          }
        },
        "message" : {
          "text" : "a user-provided value"
        }
      }, {
        "id" : 8,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "good/mod_user.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 33,
            "startColumn" : 46,
            "endColumn" : 53
          },
          "contextRegion" : {
            "startLine" : 31,
            "endLine" : 35,
            "snippet" : {
              "text" : "\n        response = make_response(redirect('/'))\n        response = libsession.create(request=request, response=response, username=username)\n        return response\n\n"
            }
          }
        },
        "message" : {
          "text" : "a user-provided value"
        }
      } ]
    }, {
      "ruleId" : "py/sql-injection",
      "ruleIndex" : 93,
      "message" : {
        "text" : "This SQL query depends on [a user-provided value](1).\nThis SQL query depends on [a user-provided value](2).\nThis SQL query depends on [a user-provided value](3).\nThis SQL query depends on [a user-provided value](4).\nThis SQL query depends on [a user-provided value](5).\nThis SQL query depends on [a user-provided value](6).\nThis SQL query depends on [a user-provided value](7).\nThis SQL query depends on [a user-provided value](8).\nThis SQL query depends on [a user-provided value](9).\nThis SQL query depends on [a user-provided value](10).\nThis SQL query depends on [a user-provided value](11).\nThis SQL query depends on [a user-provided value](12)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "bad/libuser.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 9
          },
          "region" : {
            "startLine" : 12,
            "startColumn" : 22,
            "endColumn" : 112
          },
          "contextRegion" : {
            "startLine" : 10,
            "endLine" : 14,
            "snippet" : {
              "text" : "    c = conn.cursor()\n\n    user = c.execute(\"SELECT * FROM users WHERE username = '{}' and password = '{}'\".format(username, password)).fetchone()\n\n    if user:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "87f19d40ee7aefaf:1",
        "primaryLocationStartColumnFingerprint" : "17"
      },
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_api.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 21
                },
                "region" : {
                  "startLine" : 32,
                  "startColumn" : 12,
                  "endColumn" : 19
                },
                "contextRegion" : {
                  "startLine" : 30,
                  "endLine" : 34,
                  "snippet" : {
                    "text" : "@mod_api.route('/key', methods=['POST'])\ndef do_key_create():\n    data = request.get_json()\n\n    try:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_api.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 21
                },
                "region" : {
                  "startLine" : 32,
                  "startColumn" : 12,
                  "endColumn" : 28
                },
                "contextRegion" : {
                  "startLine" : 30,
                  "endLine" : 34,
                  "snippet" : {
                    "text" : "@mod_api.route('/key', methods=['POST'])\ndef do_key_create():\n    data = request.get_json()\n\n    try:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_api.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 21
                },
                "region" : {
                  "startLine" : 39,
                  "startColumn" : 25,
                  "endColumn" : 41
                },
                "contextRegion" : {
                  "startLine" : 37,
                  "endLine" : 41,
                  "snippet" : {
                    "text" : "        return jsonify({'error': 'invalid schema', 'schema': key_schema}), 400\n\n    key = libapi.keygen(data['username'], data['password'])\n\n    if key:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Subscript"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libapi.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 31
                },
                "region" : {
                  "startLine" : 8,
                  "startColumn" : 12,
                  "endColumn" : 20
                },
                "contextRegion" : {
                  "startLine" : 6,
                  "endLine" : 10,
                  "snippet" : {
                    "text" : "\n\ndef keygen(username, password=None):\n\n    if password:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for username"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libapi.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 31
                },
                "region" : {
                  "startLine" : 11,
                  "startColumn" : 30,
                  "endColumn" : 38
                },
                "contextRegion" : {
                  "startLine" : 9,
                  "endLine" : 13,
                  "snippet" : {
                    "text" : "\n    if password:\n        if not libuser.login(username, password):\n            return None\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for username"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 5,
                  "startColumn" : 11,
                  "endColumn" : 19
                },
                "contextRegion" : {
                  "startLine" : 3,
                  "endLine" : 7,
                  "snippet" : {
                    "text" : "\n\ndef login(username, password):\n\n    conn = sqlite3.connect('db_users.sqlite')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for username"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 12,
                  "startColumn" : 22,
                  "endColumn" : 112
                },
                "contextRegion" : {
                  "startLine" : 10,
                  "endLine" : 14,
                  "snippet" : {
                    "text" : "    c = conn.cursor()\n\n    user = c.execute(\"SELECT * FROM users WHERE username = '{}' and password = '{}'\".format(username, password)).fetchone()\n\n    if user:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute()"
              }
            }
          } ]
        } ]
      }, {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_api.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 21
                },
                "region" : {
                  "startLine" : 32,
                  "startColumn" : 12,
                  "endColumn" : 19
                },
                "contextRegion" : {
                  "startLine" : 30,
                  "endLine" : 34,
                  "snippet" : {
                    "text" : "@mod_api.route('/key', methods=['POST'])\ndef do_key_create():\n    data = request.get_json()\n\n    try:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_api.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 21
                },
                "region" : {
                  "startLine" : 32,
                  "startColumn" : 12,
                  "endColumn" : 28
                },
                "contextRegion" : {
                  "startLine" : 30,
                  "endLine" : 34,
                  "snippet" : {
                    "text" : "@mod_api.route('/key', methods=['POST'])\ndef do_key_create():\n    data = request.get_json()\n\n    try:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_api.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 21
                },
                "region" : {
                  "startLine" : 39,
                  "startColumn" : 43,
                  "endColumn" : 59
                },
                "contextRegion" : {
                  "startLine" : 37,
                  "endLine" : 41,
                  "snippet" : {
                    "text" : "        return jsonify({'error': 'invalid schema', 'schema': key_schema}), 400\n\n    key = libapi.keygen(data['username'], data['password'])\n\n    if key:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Subscript"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libapi.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 31
                },
                "region" : {
                  "startLine" : 8,
                  "startColumn" : 22,
                  "endColumn" : 30
                },
                "contextRegion" : {
                  "startLine" : 6,
                  "endLine" : 10,
                  "snippet" : {
                    "text" : "\n\ndef keygen(username, password=None):\n\n    if password:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for password"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libapi.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 31
                },
                "region" : {
                  "startLine" : 11,
                  "startColumn" : 40,
                  "endColumn" : 48
                },
                "contextRegion" : {
                  "startLine" : 9,
                  "endLine" : 13,
                  "snippet" : {
                    "text" : "\n    if password:\n        if not libuser.login(username, password):\n            return None\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for password"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 5,
                  "startColumn" : 21,
                  "endColumn" : 29
                },
                "contextRegion" : {
                  "startLine" : 3,
                  "endLine" : 7,
                  "snippet" : {
                    "text" : "\n\ndef login(username, password):\n\n    conn = sqlite3.connect('db_users.sqlite')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for password"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 12,
                  "startColumn" : 22,
                  "endColumn" : 112
                },
                "contextRegion" : {
                  "startLine" : 10,
                  "endLine" : 14,
                  "snippet" : {
                    "text" : "    c = conn.cursor()\n\n    user = c.execute(\"SELECT * FROM users WHERE username = '{}' and password = '{}'\".format(username, password)).fetchone()\n\n    if user:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute()"
              }
            }
          } ]
        } ]
      }, {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_api.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 21
                },
                "region" : {
                  "startLine" : 32,
                  "startColumn" : 12,
                  "endColumn" : 19
                },
                "contextRegion" : {
                  "startLine" : 30,
                  "endLine" : 34,
                  "snippet" : {
                    "text" : "@mod_api.route('/key', methods=['POST'])\ndef do_key_create():\n    data = request.get_json()\n\n    try:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_api.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 21
                },
                "region" : {
                  "startLine" : 32,
                  "startColumn" : 12,
                  "endColumn" : 28
                },
                "contextRegion" : {
                  "startLine" : 30,
                  "endLine" : 34,
                  "snippet" : {
                    "text" : "@mod_api.route('/key', methods=['POST'])\ndef do_key_create():\n    data = request.get_json()\n\n    try:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_api.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 21
                },
                "region" : {
                  "startLine" : 39,
                  "startColumn" : 25,
                  "endColumn" : 41
                },
                "contextRegion" : {
                  "startLine" : 37,
                  "endLine" : 41,
                  "snippet" : {
                    "text" : "        return jsonify({'error': 'invalid schema', 'schema': key_schema}), 400\n\n    key = libapi.keygen(data['username'], data['password'])\n\n    if key:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Subscript"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/libapi.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 15
                },
                "region" : {
                  "startLine" : 13,
                  "startColumn" : 12,
                  "endColumn" : 20
                },
                "contextRegion" : {
                  "startLine" : 11,
                  "endLine" : 15,
                  "snippet" : {
                    "text" : "not_after = 60 # 1 minute\n\ndef keygen(username, password=None, login=True):\n\n    if login:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for username"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/libapi.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 15
                },
                "region" : {
                  "startLine" : 16,
                  "startColumn" : 30,
                  "endColumn" : 38
                },
                "contextRegion" : {
                  "startLine" : 14,
                  "endLine" : 18,
                  "snippet" : {
                    "text" : "\n    if login:\n        if not libuser.login(username, password):\n            return None\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for username"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 5,
                  "startColumn" : 11,
                  "endColumn" : 19
                },
                "contextRegion" : {
                  "startLine" : 3,
                  "endLine" : 7,
                  "snippet" : {
                    "text" : "\n\ndef login(username, password):\n\n    conn = sqlite3.connect('db_users.sqlite')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for username"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 12,
                  "startColumn" : 22,
                  "endColumn" : 112
                },
                "contextRegion" : {
                  "startLine" : 10,
                  "endLine" : 14,
                  "snippet" : {
                    "text" : "    c = conn.cursor()\n\n    user = c.execute(\"SELECT * FROM users WHERE username = '{}' and password = '{}'\".format(username, password)).fetchone()\n\n    if user:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute()"
              }
            }
          } ]
        } ]
      }, {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_api.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 21
                },
                "region" : {
                  "startLine" : 32,
                  "startColumn" : 12,
                  "endColumn" : 19
                },
                "contextRegion" : {
                  "startLine" : 30,
                  "endLine" : 34,
                  "snippet" : {
                    "text" : "@mod_api.route('/key', methods=['POST'])\ndef do_key_create():\n    data = request.get_json()\n\n    try:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_api.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 21
                },
                "region" : {
                  "startLine" : 32,
                  "startColumn" : 12,
                  "endColumn" : 28
                },
                "contextRegion" : {
                  "startLine" : 30,
                  "endLine" : 34,
                  "snippet" : {
                    "text" : "@mod_api.route('/key', methods=['POST'])\ndef do_key_create():\n    data = request.get_json()\n\n    try:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_api.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 21
                },
                "region" : {
                  "startLine" : 39,
                  "startColumn" : 43,
                  "endColumn" : 59
                },
                "contextRegion" : {
                  "startLine" : 37,
                  "endLine" : 41,
                  "snippet" : {
                    "text" : "        return jsonify({'error': 'invalid schema', 'schema': key_schema}), 400\n\n    key = libapi.keygen(data['username'], data['password'])\n\n    if key:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Subscript"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/libapi.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 15
                },
                "region" : {
                  "startLine" : 13,
                  "startColumn" : 22,
                  "endColumn" : 30
                },
                "contextRegion" : {
                  "startLine" : 11,
                  "endLine" : 15,
                  "snippet" : {
                    "text" : "not_after = 60 # 1 minute\n\ndef keygen(username, password=None, login=True):\n\n    if login:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for password"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/libapi.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 15
                },
                "region" : {
                  "startLine" : 16,
                  "startColumn" : 40,
                  "endColumn" : 48
                },
                "contextRegion" : {
                  "startLine" : 14,
                  "endLine" : 18,
                  "snippet" : {
                    "text" : "\n    if login:\n        if not libuser.login(username, password):\n            return None\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for password"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 5,
                  "startColumn" : 21,
                  "endColumn" : 29
                },
                "contextRegion" : {
                  "startLine" : 3,
                  "endLine" : 7,
                  "snippet" : {
                    "text" : "\n\ndef login(username, password):\n\n    conn = sqlite3.connect('db_users.sqlite')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for password"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 12,
                  "startColumn" : 22,
                  "endColumn" : 112
                },
                "contextRegion" : {
                  "startLine" : 10,
                  "endLine" : 14,
                  "snippet" : {
                    "text" : "    c = conn.cursor()\n\n    user = c.execute(\"SELECT * FROM users WHERE username = '{}' and password = '{}'\".format(username, password)).fetchone()\n\n    if user:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute()"
              }
            }
          } ]
        } ]
      }, {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_api.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 22
                },
                "region" : {
                  "startLine" : 34,
                  "startColumn" : 12,
                  "endColumn" : 19
                },
                "contextRegion" : {
                  "startLine" : 32,
                  "endLine" : 36,
                  "snippet" : {
                    "text" : "@mod_api.route('/key', methods=['POST'])\ndef do_key_create():\n    data = request.get_json()\n\n    try:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_api.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 22
                },
                "region" : {
                  "startLine" : 34,
                  "startColumn" : 12,
                  "endColumn" : 28
                },
                "contextRegion" : {
                  "startLine" : 32,
                  "endLine" : 36,
                  "snippet" : {
                    "text" : "@mod_api.route('/key', methods=['POST'])\ndef do_key_create():\n    data = request.get_json()\n\n    try:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_api.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 22
                },
                "region" : {
                  "startLine" : 41,
                  "startColumn" : 25,
                  "endColumn" : 41
                },
                "contextRegion" : {
                  "startLine" : 39,
                  "endLine" : 43,
                  "snippet" : {
                    "text" : "        return jsonify({'error': 'invalid schema', 'schema': key_schema}, 400)\n\n    key = libapi.keygen(data['username'], data['password'])\n\n    if key:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Subscript"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libapi.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 31
                },
                "region" : {
                  "startLine" : 8,
                  "startColumn" : 12,
                  "endColumn" : 20
                },
                "contextRegion" : {
                  "startLine" : 6,
                  "endLine" : 10,
                  "snippet" : {
                    "text" : "\n\ndef keygen(username, password=None):\n\n    if password:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for username"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libapi.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 31
                },
                "region" : {
                  "startLine" : 11,
                  "startColumn" : 30,
                  "endColumn" : 38
                },
                "contextRegion" : {
                  "startLine" : 9,
                  "endLine" : 13,
                  "snippet" : {
                    "text" : "\n    if password:\n        if not libuser.login(username, password):\n            return None\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for username"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 5,
                  "startColumn" : 11,
                  "endColumn" : 19
                },
                "contextRegion" : {
                  "startLine" : 3,
                  "endLine" : 7,
                  "snippet" : {
                    "text" : "\n\ndef login(username, password):\n\n    conn = sqlite3.connect('db_users.sqlite')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for username"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 12,
                  "startColumn" : 22,
                  "endColumn" : 112
                },
                "contextRegion" : {
                  "startLine" : 10,
                  "endLine" : 14,
                  "snippet" : {
                    "text" : "    c = conn.cursor()\n\n    user = c.execute(\"SELECT * FROM users WHERE username = '{}' and password = '{}'\".format(username, password)).fetchone()\n\n    if user:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute()"
              }
            }
          } ]
        } ]
      }, {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_api.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 22
                },
                "region" : {
                  "startLine" : 34,
                  "startColumn" : 12,
                  "endColumn" : 19
                },
                "contextRegion" : {
                  "startLine" : 32,
                  "endLine" : 36,
                  "snippet" : {
                    "text" : "@mod_api.route('/key', methods=['POST'])\ndef do_key_create():\n    data = request.get_json()\n\n    try:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_api.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 22
                },
                "region" : {
                  "startLine" : 34,
                  "startColumn" : 12,
                  "endColumn" : 28
                },
                "contextRegion" : {
                  "startLine" : 32,
                  "endLine" : 36,
                  "snippet" : {
                    "text" : "@mod_api.route('/key', methods=['POST'])\ndef do_key_create():\n    data = request.get_json()\n\n    try:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_api.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 22
                },
                "region" : {
                  "startLine" : 41,
                  "startColumn" : 43,
                  "endColumn" : 59
                },
                "contextRegion" : {
                  "startLine" : 39,
                  "endLine" : 43,
                  "snippet" : {
                    "text" : "        return jsonify({'error': 'invalid schema', 'schema': key_schema}, 400)\n\n    key = libapi.keygen(data['username'], data['password'])\n\n    if key:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Subscript"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libapi.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 31
                },
                "region" : {
                  "startLine" : 8,
                  "startColumn" : 22,
                  "endColumn" : 30
                },
                "contextRegion" : {
                  "startLine" : 6,
                  "endLine" : 10,
                  "snippet" : {
                    "text" : "\n\ndef keygen(username, password=None):\n\n    if password:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for password"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libapi.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 31
                },
                "region" : {
                  "startLine" : 11,
                  "startColumn" : 40,
                  "endColumn" : 48
                },
                "contextRegion" : {
                  "startLine" : 9,
                  "endLine" : 13,
                  "snippet" : {
                    "text" : "\n    if password:\n        if not libuser.login(username, password):\n            return None\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for password"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 5,
                  "startColumn" : 21,
                  "endColumn" : 29
                },
                "contextRegion" : {
                  "startLine" : 3,
                  "endLine" : 7,
                  "snippet" : {
                    "text" : "\n\ndef login(username, password):\n\n    conn = sqlite3.connect('db_users.sqlite')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for password"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 12,
                  "startColumn" : 22,
                  "endColumn" : 112
                },
                "contextRegion" : {
                  "startLine" : 10,
                  "endLine" : 14,
                  "snippet" : {
                    "text" : "    c = conn.cursor()\n\n    user = c.execute(\"SELECT * FROM users WHERE username = '{}' and password = '{}'\".format(username, password)).fetchone()\n\n    if user:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute()"
              }
            }
          } ]
        } ]
      }, {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_api.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 22
                },
                "region" : {
                  "startLine" : 34,
                  "startColumn" : 12,
                  "endColumn" : 19
                },
                "contextRegion" : {
                  "startLine" : 32,
                  "endLine" : 36,
                  "snippet" : {
                    "text" : "@mod_api.route('/key', methods=['POST'])\ndef do_key_create():\n    data = request.get_json()\n\n    try:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_api.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 22
                },
                "region" : {
                  "startLine" : 34,
                  "startColumn" : 12,
                  "endColumn" : 28
                },
                "contextRegion" : {
                  "startLine" : 32,
                  "endLine" : 36,
                  "snippet" : {
                    "text" : "@mod_api.route('/key', methods=['POST'])\ndef do_key_create():\n    data = request.get_json()\n\n    try:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_api.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 22
                },
                "region" : {
                  "startLine" : 41,
                  "startColumn" : 25,
                  "endColumn" : 41
                },
                "contextRegion" : {
                  "startLine" : 39,
                  "endLine" : 43,
                  "snippet" : {
                    "text" : "        return jsonify({'error': 'invalid schema', 'schema': key_schema}, 400)\n\n    key = libapi.keygen(data['username'], data['password'])\n\n    if key:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Subscript"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/libapi.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 15
                },
                "region" : {
                  "startLine" : 13,
                  "startColumn" : 12,
                  "endColumn" : 20
                },
                "contextRegion" : {
                  "startLine" : 11,
                  "endLine" : 15,
                  "snippet" : {
                    "text" : "not_after = 60 # 1 minute\n\ndef keygen(username, password=None, login=True):\n\n    if login:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for username"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/libapi.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 15
                },
                "region" : {
                  "startLine" : 16,
                  "startColumn" : 30,
                  "endColumn" : 38
                },
                "contextRegion" : {
                  "startLine" : 14,
                  "endLine" : 18,
                  "snippet" : {
                    "text" : "\n    if login:\n        if not libuser.login(username, password):\n            return None\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for username"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 5,
                  "startColumn" : 11,
                  "endColumn" : 19
                },
                "contextRegion" : {
                  "startLine" : 3,
                  "endLine" : 7,
                  "snippet" : {
                    "text" : "\n\ndef login(username, password):\n\n    conn = sqlite3.connect('db_users.sqlite')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for username"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 12,
                  "startColumn" : 22,
                  "endColumn" : 112
                },
                "contextRegion" : {
                  "startLine" : 10,
                  "endLine" : 14,
                  "snippet" : {
                    "text" : "    c = conn.cursor()\n\n    user = c.execute(\"SELECT * FROM users WHERE username = '{}' and password = '{}'\".format(username, password)).fetchone()\n\n    if user:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute()"
              }
            }
          } ]
        } ]
      }, {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_api.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 22
                },
                "region" : {
                  "startLine" : 34,
                  "startColumn" : 12,
                  "endColumn" : 19
                },
                "contextRegion" : {
                  "startLine" : 32,
                  "endLine" : 36,
                  "snippet" : {
                    "text" : "@mod_api.route('/key', methods=['POST'])\ndef do_key_create():\n    data = request.get_json()\n\n    try:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_api.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 22
                },
                "region" : {
                  "startLine" : 34,
                  "startColumn" : 12,
                  "endColumn" : 28
                },
                "contextRegion" : {
                  "startLine" : 32,
                  "endLine" : 36,
                  "snippet" : {
                    "text" : "@mod_api.route('/key', methods=['POST'])\ndef do_key_create():\n    data = request.get_json()\n\n    try:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_api.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 22
                },
                "region" : {
                  "startLine" : 41,
                  "startColumn" : 43,
                  "endColumn" : 59
                },
                "contextRegion" : {
                  "startLine" : 39,
                  "endLine" : 43,
                  "snippet" : {
                    "text" : "        return jsonify({'error': 'invalid schema', 'schema': key_schema}, 400)\n\n    key = libapi.keygen(data['username'], data['password'])\n\n    if key:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Subscript"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/libapi.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 15
                },
                "region" : {
                  "startLine" : 13,
                  "startColumn" : 22,
                  "endColumn" : 30
                },
                "contextRegion" : {
                  "startLine" : 11,
                  "endLine" : 15,
                  "snippet" : {
                    "text" : "not_after = 60 # 1 minute\n\ndef keygen(username, password=None, login=True):\n\n    if login:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for password"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/libapi.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 15
                },
                "region" : {
                  "startLine" : 16,
                  "startColumn" : 40,
                  "endColumn" : 48
                },
                "contextRegion" : {
                  "startLine" : 14,
                  "endLine" : 18,
                  "snippet" : {
                    "text" : "\n    if login:\n        if not libuser.login(username, password):\n            return None\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for password"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 5,
                  "startColumn" : 21,
                  "endColumn" : 29
                },
                "contextRegion" : {
                  "startLine" : 3,
                  "endLine" : 7,
                  "snippet" : {
                    "text" : "\n\ndef login(username, password):\n\n    conn = sqlite3.connect('db_users.sqlite')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for password"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 12,
                  "startColumn" : 22,
                  "endColumn" : 112
                },
                "contextRegion" : {
                  "startLine" : 10,
                  "endLine" : 14,
                  "snippet" : {
                    "text" : "    c = conn.cursor()\n\n    user = c.execute(\"SELECT * FROM users WHERE username = '{}' and password = '{}'\".format(username, password)).fetchone()\n\n    if user:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute()"
              }
            }
          } ]
        } ]
      }, {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 14,
                  "startColumn" : 8,
                  "endColumn" : 15
                },
                "contextRegion" : {
                  "startLine" : 12,
                  "endLine" : 16,
                  "snippet" : {
                    "text" : "    session.pop('username', None)\n\n    if request.method == 'POST':\n\n        username = request.form.get('username')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 16,
                  "startColumn" : 20,
                  "endColumn" : 32
                },
                "contextRegion" : {
                  "startLine" : 14,
                  "endLine" : 18,
                  "snippet" : {
                    "text" : "    if request.method == 'POST':\n\n        username = request.form.get('username')\n        password = request.form.get('password')\n        otp = request.form.get('otp')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 20,
                  "startColumn" : 34,
                  "endColumn" : 42
                },
                "contextRegion" : {
                  "startLine" : 18,
                  "endLine" : 22,
                  "snippet" : {
                    "text" : "        otp = request.form.get('otp')\n\n        username = libuser.login(username, password)\n\n        if not username:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for username"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 5,
                  "startColumn" : 11,
                  "endColumn" : 19
                },
                "contextRegion" : {
                  "startLine" : 3,
                  "endLine" : 7,
                  "snippet" : {
                    "text" : "\n\ndef login(username, password):\n\n    conn = sqlite3.connect('db_users.sqlite')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for username"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 12,
                  "startColumn" : 22,
                  "endColumn" : 112
                },
                "contextRegion" : {
                  "startLine" : 10,
                  "endLine" : 14,
                  "snippet" : {
                    "text" : "    c = conn.cursor()\n\n    user = c.execute(\"SELECT * FROM users WHERE username = '{}' and password = '{}'\".format(username, password)).fetchone()\n\n    if user:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute()"
              }
            }
          } ]
        } ]
      }, {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 14,
                  "startColumn" : 8,
                  "endColumn" : 15
                },
                "contextRegion" : {
                  "startLine" : 12,
                  "endLine" : 16,
                  "snippet" : {
                    "text" : "    session.pop('username', None)\n\n    if request.method == 'POST':\n\n        username = request.form.get('username')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 17,
                  "startColumn" : 20,
                  "endColumn" : 32
                },
                "contextRegion" : {
                  "startLine" : 15,
                  "endLine" : 19,
                  "snippet" : {
                    "text" : "\n        username = request.form.get('username')\n        password = request.form.get('password')\n        otp = request.form.get('otp')\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 20,
                  "startColumn" : 44,
                  "endColumn" : 52
                },
                "contextRegion" : {
                  "startLine" : 18,
                  "endLine" : 22,
                  "snippet" : {
                    "text" : "        otp = request.form.get('otp')\n\n        username = libuser.login(username, password)\n\n        if not username:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for password"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 5,
                  "startColumn" : 21,
                  "endColumn" : 29
                },
                "contextRegion" : {
                  "startLine" : 3,
                  "endLine" : 7,
                  "snippet" : {
                    "text" : "\n\ndef login(username, password):\n\n    conn = sqlite3.connect('db_users.sqlite')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for password"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 12,
                  "startColumn" : 22,
                  "endColumn" : 112
                },
                "contextRegion" : {
                  "startLine" : 10,
                  "endLine" : 14,
                  "snippet" : {
                    "text" : "    c = conn.cursor()\n\n    user = c.execute(\"SELECT * FROM users WHERE username = '{}' and password = '{}'\".format(username, password)).fetchone()\n\n    if user:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute()"
              }
            }
          } ]
        } ]
      }, {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 14,
                  "startColumn" : 8,
                  "endColumn" : 15
                },
                "contextRegion" : {
                  "startLine" : 12,
                  "endLine" : 16,
                  "snippet" : {
                    "text" : "    session.pop('username', None)\n\n    if request.method == 'POST':\n\n        username = request.form.get('username')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 16,
                  "startColumn" : 20,
                  "endColumn" : 27
                },
                "contextRegion" : {
                  "startLine" : 14,
                  "endLine" : 18,
                  "snippet" : {
                    "text" : "    if request.method == 'POST':\n\n        username = request.form.get('username')\n        password = request.form.get('password')\n        otp = request.form.get('otp')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 16,
                  "startColumn" : 20,
                  "endColumn" : 32
                },
                "contextRegion" : {
                  "startLine" : 14,
                  "endLine" : 18,
                  "snippet" : {
                    "text" : "    if request.method == 'POST':\n\n        username = request.form.get('username')\n        password = request.form.get('password')\n        otp = request.form.get('otp')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 20,
                  "startColumn" : 34,
                  "endColumn" : 42
                },
                "contextRegion" : {
                  "startLine" : 18,
                  "endLine" : 22,
                  "snippet" : {
                    "text" : "        otp = request.form.get('otp')\n\n        username = libuser.login(username, password)\n\n        if not username:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for username"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 5,
                  "startColumn" : 11,
                  "endColumn" : 19
                },
                "contextRegion" : {
                  "startLine" : 3,
                  "endLine" : 7,
                  "snippet" : {
                    "text" : "\n\ndef login(username, password):\n\n    conn = sqlite3.connect('db_users.sqlite')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for username"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 12,
                  "startColumn" : 22,
                  "endColumn" : 112
                },
                "contextRegion" : {
                  "startLine" : 10,
                  "endLine" : 14,
                  "snippet" : {
                    "text" : "    c = conn.cursor()\n\n    user = c.execute(\"SELECT * FROM users WHERE username = '{}' and password = '{}'\".format(username, password)).fetchone()\n\n    if user:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute()"
              }
            }
          } ]
        } ]
      }, {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 14,
                  "startColumn" : 8,
                  "endColumn" : 15
                },
                "contextRegion" : {
                  "startLine" : 12,
                  "endLine" : 16,
                  "snippet" : {
                    "text" : "    session.pop('username', None)\n\n    if request.method == 'POST':\n\n        username = request.form.get('username')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 17,
                  "startColumn" : 20,
                  "endColumn" : 27
                },
                "contextRegion" : {
                  "startLine" : 15,
                  "endLine" : 19,
                  "snippet" : {
                    "text" : "\n        username = request.form.get('username')\n        password = request.form.get('password')\n        otp = request.form.get('otp')\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 17,
                  "startColumn" : 20,
                  "endColumn" : 32
                },
                "contextRegion" : {
                  "startLine" : 15,
                  "endLine" : 19,
                  "snippet" : {
                    "text" : "\n        username = request.form.get('username')\n        password = request.form.get('password')\n        otp = request.form.get('otp')\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 20,
                  "startColumn" : 44,
                  "endColumn" : 52
                },
                "contextRegion" : {
                  "startLine" : 18,
                  "endLine" : 22,
                  "snippet" : {
                    "text" : "        otp = request.form.get('otp')\n\n        username = libuser.login(username, password)\n\n        if not username:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for password"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 5,
                  "startColumn" : 21,
                  "endColumn" : 29
                },
                "contextRegion" : {
                  "startLine" : 3,
                  "endLine" : 7,
                  "snippet" : {
                    "text" : "\n\ndef login(username, password):\n\n    conn = sqlite3.connect('db_users.sqlite')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for password"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 12,
                  "startColumn" : 22,
                  "endColumn" : 112
                },
                "contextRegion" : {
                  "startLine" : 10,
                  "endLine" : 14,
                  "snippet" : {
                    "text" : "    c = conn.cursor()\n\n    user = c.execute(\"SELECT * FROM users WHERE username = '{}' and password = '{}'\".format(username, password)).fetchone()\n\n    if user:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute()"
              }
            }
          } ]
        } ]
      }, {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 16,
                  "startColumn" : 20,
                  "endColumn" : 27
                },
                "contextRegion" : {
                  "startLine" : 14,
                  "endLine" : 18,
                  "snippet" : {
                    "text" : "    if request.method == 'POST':\n\n        username = request.form.get('username')\n        password = request.form.get('password')\n        otp = request.form.get('otp')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 16,
                  "startColumn" : 20,
                  "endColumn" : 32
                },
                "contextRegion" : {
                  "startLine" : 14,
                  "endLine" : 18,
                  "snippet" : {
                    "text" : "    if request.method == 'POST':\n\n        username = request.form.get('username')\n        password = request.form.get('password')\n        otp = request.form.get('otp')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 20,
                  "startColumn" : 34,
                  "endColumn" : 42
                },
                "contextRegion" : {
                  "startLine" : 18,
                  "endLine" : 22,
                  "snippet" : {
                    "text" : "        otp = request.form.get('otp')\n\n        username = libuser.login(username, password)\n\n        if not username:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for username"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 5,
                  "startColumn" : 11,
                  "endColumn" : 19
                },
                "contextRegion" : {
                  "startLine" : 3,
                  "endLine" : 7,
                  "snippet" : {
                    "text" : "\n\ndef login(username, password):\n\n    conn = sqlite3.connect('db_users.sqlite')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for username"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 12,
                  "startColumn" : 22,
                  "endColumn" : 112
                },
                "contextRegion" : {
                  "startLine" : 10,
                  "endLine" : 14,
                  "snippet" : {
                    "text" : "    c = conn.cursor()\n\n    user = c.execute(\"SELECT * FROM users WHERE username = '{}' and password = '{}'\".format(username, password)).fetchone()\n\n    if user:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute()"
              }
            }
          } ]
        } ]
      }, {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 16,
                  "startColumn" : 20,
                  "endColumn" : 27
                },
                "contextRegion" : {
                  "startLine" : 14,
                  "endLine" : 18,
                  "snippet" : {
                    "text" : "    if request.method == 'POST':\n\n        username = request.form.get('username')\n        password = request.form.get('password')\n        otp = request.form.get('otp')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 17,
                  "startColumn" : 20,
                  "endColumn" : 32
                },
                "contextRegion" : {
                  "startLine" : 15,
                  "endLine" : 19,
                  "snippet" : {
                    "text" : "\n        username = request.form.get('username')\n        password = request.form.get('password')\n        otp = request.form.get('otp')\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 20,
                  "startColumn" : 44,
                  "endColumn" : 52
                },
                "contextRegion" : {
                  "startLine" : 18,
                  "endLine" : 22,
                  "snippet" : {
                    "text" : "        otp = request.form.get('otp')\n\n        username = libuser.login(username, password)\n\n        if not username:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for password"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 5,
                  "startColumn" : 21,
                  "endColumn" : 29
                },
                "contextRegion" : {
                  "startLine" : 3,
                  "endLine" : 7,
                  "snippet" : {
                    "text" : "\n\ndef login(username, password):\n\n    conn = sqlite3.connect('db_users.sqlite')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for password"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 12,
                  "startColumn" : 22,
                  "endColumn" : 112
                },
                "contextRegion" : {
                  "startLine" : 10,
                  "endLine" : 14,
                  "snippet" : {
                    "text" : "    c = conn.cursor()\n\n    user = c.execute(\"SELECT * FROM users WHERE username = '{}' and password = '{}'\".format(username, password)).fetchone()\n\n    if user:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute()"
              }
            }
          } ]
        } ]
      }, {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 16,
                  "startColumn" : 20,
                  "endColumn" : 27
                },
                "contextRegion" : {
                  "startLine" : 14,
                  "endLine" : 18,
                  "snippet" : {
                    "text" : "    if request.method == 'POST':\n\n        username = request.form.get('username')\n        password = request.form.get('password')\n        otp = request.form.get('otp')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 17,
                  "startColumn" : 20,
                  "endColumn" : 27
                },
                "contextRegion" : {
                  "startLine" : 15,
                  "endLine" : 19,
                  "snippet" : {
                    "text" : "\n        username = request.form.get('username')\n        password = request.form.get('password')\n        otp = request.form.get('otp')\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 17,
                  "startColumn" : 20,
                  "endColumn" : 32
                },
                "contextRegion" : {
                  "startLine" : 15,
                  "endLine" : 19,
                  "snippet" : {
                    "text" : "\n        username = request.form.get('username')\n        password = request.form.get('password')\n        otp = request.form.get('otp')\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 20,
                  "startColumn" : 44,
                  "endColumn" : 52
                },
                "contextRegion" : {
                  "startLine" : 18,
                  "endLine" : 22,
                  "snippet" : {
                    "text" : "        otp = request.form.get('otp')\n\n        username = libuser.login(username, password)\n\n        if not username:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for password"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 5,
                  "startColumn" : 21,
                  "endColumn" : 29
                },
                "contextRegion" : {
                  "startLine" : 3,
                  "endLine" : 7,
                  "snippet" : {
                    "text" : "\n\ndef login(username, password):\n\n    conn = sqlite3.connect('db_users.sqlite')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for password"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 12,
                  "startColumn" : 22,
                  "endColumn" : 112
                },
                "contextRegion" : {
                  "startLine" : 10,
                  "endLine" : 14,
                  "snippet" : {
                    "text" : "    c = conn.cursor()\n\n    user = c.execute(\"SELECT * FROM users WHERE username = '{}' and password = '{}'\".format(username, password)).fetchone()\n\n    if user:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute()"
              }
            }
          } ]
        } ]
      }, {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 17,
                  "startColumn" : 20,
                  "endColumn" : 27
                },
                "contextRegion" : {
                  "startLine" : 15,
                  "endLine" : 19,
                  "snippet" : {
                    "text" : "\n        username = request.form.get('username')\n        password = request.form.get('password')\n        otp = request.form.get('otp')\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 17,
                  "startColumn" : 20,
                  "endColumn" : 32
                },
                "contextRegion" : {
                  "startLine" : 15,
                  "endLine" : 19,
                  "snippet" : {
                    "text" : "\n        username = request.form.get('username')\n        password = request.form.get('password')\n        otp = request.form.get('otp')\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 20,
                  "startColumn" : 44,
                  "endColumn" : 52
                },
                "contextRegion" : {
                  "startLine" : 18,
                  "endLine" : 22,
                  "snippet" : {
                    "text" : "        otp = request.form.get('otp')\n\n        username = libuser.login(username, password)\n\n        if not username:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for password"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 5,
                  "startColumn" : 21,
                  "endColumn" : 29
                },
                "contextRegion" : {
                  "startLine" : 3,
                  "endLine" : 7,
                  "snippet" : {
                    "text" : "\n\ndef login(username, password):\n\n    conn = sqlite3.connect('db_users.sqlite')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for password"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 12,
                  "startColumn" : 22,
                  "endColumn" : 112
                },
                "contextRegion" : {
                  "startLine" : 10,
                  "endLine" : 14,
                  "snippet" : {
                    "text" : "    c = conn.cursor()\n\n    user = c.execute(\"SELECT * FROM users WHERE username = '{}' and password = '{}'\".format(username, password)).fetchone()\n\n    if user:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute()"
              }
            }
          } ]
        } ]
      }, {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 15,
                  "startColumn" : 8,
                  "endColumn" : 15
                },
                "contextRegion" : {
                  "startLine" : 13,
                  "endLine" : 17,
                  "snippet" : {
                    "text" : "    session.pop('username', None)\n\n    if request.method == 'POST':\n\n        username = request.form.get('username')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 17,
                  "startColumn" : 20,
                  "endColumn" : 32
                },
                "contextRegion" : {
                  "startLine" : 15,
                  "endLine" : 19,
                  "snippet" : {
                    "text" : "    if request.method == 'POST':\n\n        username = request.form.get('username')\n        password = request.form.get('password')\n        otp = request.form.get('otp')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 21,
                  "startColumn" : 34,
                  "endColumn" : 42
                },
                "contextRegion" : {
                  "startLine" : 19,
                  "endLine" : 23,
                  "snippet" : {
                    "text" : "        otp = request.form.get('otp')\n\n        username = libuser.login(username, password)\n\n        if not username:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for username"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 5,
                  "startColumn" : 11,
                  "endColumn" : 19
                },
                "contextRegion" : {
                  "startLine" : 3,
                  "endLine" : 7,
                  "snippet" : {
                    "text" : "\n\ndef login(username, password):\n\n    conn = sqlite3.connect('db_users.sqlite')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for username"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 12,
                  "startColumn" : 22,
                  "endColumn" : 112
                },
                "contextRegion" : {
                  "startLine" : 10,
                  "endLine" : 14,
                  "snippet" : {
                    "text" : "    c = conn.cursor()\n\n    user = c.execute(\"SELECT * FROM users WHERE username = '{}' and password = '{}'\".format(username, password)).fetchone()\n\n    if user:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute()"
              }
            }
          } ]
        } ]
      }, {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 15,
                  "startColumn" : 8,
                  "endColumn" : 15
                },
                "contextRegion" : {
                  "startLine" : 13,
                  "endLine" : 17,
                  "snippet" : {
                    "text" : "    session.pop('username', None)\n\n    if request.method == 'POST':\n\n        username = request.form.get('username')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 18,
                  "startColumn" : 20,
                  "endColumn" : 32
                },
                "contextRegion" : {
                  "startLine" : 16,
                  "endLine" : 20,
                  "snippet" : {
                    "text" : "\n        username = request.form.get('username')\n        password = request.form.get('password')\n        otp = request.form.get('otp')\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 21,
                  "startColumn" : 44,
                  "endColumn" : 52
                },
                "contextRegion" : {
                  "startLine" : 19,
                  "endLine" : 23,
                  "snippet" : {
                    "text" : "        otp = request.form.get('otp')\n\n        username = libuser.login(username, password)\n\n        if not username:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for password"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 5,
                  "startColumn" : 21,
                  "endColumn" : 29
                },
                "contextRegion" : {
                  "startLine" : 3,
                  "endLine" : 7,
                  "snippet" : {
                    "text" : "\n\ndef login(username, password):\n\n    conn = sqlite3.connect('db_users.sqlite')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for password"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 12,
                  "startColumn" : 22,
                  "endColumn" : 112
                },
                "contextRegion" : {
                  "startLine" : 10,
                  "endLine" : 14,
                  "snippet" : {
                    "text" : "    c = conn.cursor()\n\n    user = c.execute(\"SELECT * FROM users WHERE username = '{}' and password = '{}'\".format(username, password)).fetchone()\n\n    if user:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute()"
              }
            }
          } ]
        } ]
      }, {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 15,
                  "startColumn" : 8,
                  "endColumn" : 15
                },
                "contextRegion" : {
                  "startLine" : 13,
                  "endLine" : 17,
                  "snippet" : {
                    "text" : "    session.pop('username', None)\n\n    if request.method == 'POST':\n\n        username = request.form.get('username')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 17,
                  "startColumn" : 20,
                  "endColumn" : 27
                },
                "contextRegion" : {
                  "startLine" : 15,
                  "endLine" : 19,
                  "snippet" : {
                    "text" : "    if request.method == 'POST':\n\n        username = request.form.get('username')\n        password = request.form.get('password')\n        otp = request.form.get('otp')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 17,
                  "startColumn" : 20,
                  "endColumn" : 32
                },
                "contextRegion" : {
                  "startLine" : 15,
                  "endLine" : 19,
                  "snippet" : {
                    "text" : "    if request.method == 'POST':\n\n        username = request.form.get('username')\n        password = request.form.get('password')\n        otp = request.form.get('otp')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 21,
                  "startColumn" : 34,
                  "endColumn" : 42
                },
                "contextRegion" : {
                  "startLine" : 19,
                  "endLine" : 23,
                  "snippet" : {
                    "text" : "        otp = request.form.get('otp')\n\n        username = libuser.login(username, password)\n\n        if not username:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for username"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 5,
                  "startColumn" : 11,
                  "endColumn" : 19
                },
                "contextRegion" : {
                  "startLine" : 3,
                  "endLine" : 7,
                  "snippet" : {
                    "text" : "\n\ndef login(username, password):\n\n    conn = sqlite3.connect('db_users.sqlite')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for username"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 12,
                  "startColumn" : 22,
                  "endColumn" : 112
                },
                "contextRegion" : {
                  "startLine" : 10,
                  "endLine" : 14,
                  "snippet" : {
                    "text" : "    c = conn.cursor()\n\n    user = c.execute(\"SELECT * FROM users WHERE username = '{}' and password = '{}'\".format(username, password)).fetchone()\n\n    if user:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute()"
              }
            }
          } ]
        } ]
      }, {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 15,
                  "startColumn" : 8,
                  "endColumn" : 15
                },
                "contextRegion" : {
                  "startLine" : 13,
                  "endLine" : 17,
                  "snippet" : {
                    "text" : "    session.pop('username', None)\n\n    if request.method == 'POST':\n\n        username = request.form.get('username')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 18,
                  "startColumn" : 20,
                  "endColumn" : 27
                },
                "contextRegion" : {
                  "startLine" : 16,
                  "endLine" : 20,
                  "snippet" : {
                    "text" : "\n        username = request.form.get('username')\n        password = request.form.get('password')\n        otp = request.form.get('otp')\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 18,
                  "startColumn" : 20,
                  "endColumn" : 32
                },
                "contextRegion" : {
                  "startLine" : 16,
                  "endLine" : 20,
                  "snippet" : {
                    "text" : "\n        username = request.form.get('username')\n        password = request.form.get('password')\n        otp = request.form.get('otp')\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 21,
                  "startColumn" : 44,
                  "endColumn" : 52
                },
                "contextRegion" : {
                  "startLine" : 19,
                  "endLine" : 23,
                  "snippet" : {
                    "text" : "        otp = request.form.get('otp')\n\n        username = libuser.login(username, password)\n\n        if not username:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for password"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 5,
                  "startColumn" : 21,
                  "endColumn" : 29
                },
                "contextRegion" : {
                  "startLine" : 3,
                  "endLine" : 7,
                  "snippet" : {
                    "text" : "\n\ndef login(username, password):\n\n    conn = sqlite3.connect('db_users.sqlite')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for password"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 12,
                  "startColumn" : 22,
                  "endColumn" : 112
                },
                "contextRegion" : {
                  "startLine" : 10,
                  "endLine" : 14,
                  "snippet" : {
                    "text" : "    c = conn.cursor()\n\n    user = c.execute(\"SELECT * FROM users WHERE username = '{}' and password = '{}'\".format(username, password)).fetchone()\n\n    if user:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute()"
              }
            }
          } ]
        } ]
      }, {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 17,
                  "startColumn" : 20,
                  "endColumn" : 27
                },
                "contextRegion" : {
                  "startLine" : 15,
                  "endLine" : 19,
                  "snippet" : {
                    "text" : "    if request.method == 'POST':\n\n        username = request.form.get('username')\n        password = request.form.get('password')\n        otp = request.form.get('otp')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 17,
                  "startColumn" : 20,
                  "endColumn" : 32
                },
                "contextRegion" : {
                  "startLine" : 15,
                  "endLine" : 19,
                  "snippet" : {
                    "text" : "    if request.method == 'POST':\n\n        username = request.form.get('username')\n        password = request.form.get('password')\n        otp = request.form.get('otp')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 21,
                  "startColumn" : 34,
                  "endColumn" : 42
                },
                "contextRegion" : {
                  "startLine" : 19,
                  "endLine" : 23,
                  "snippet" : {
                    "text" : "        otp = request.form.get('otp')\n\n        username = libuser.login(username, password)\n\n        if not username:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for username"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 5,
                  "startColumn" : 11,
                  "endColumn" : 19
                },
                "contextRegion" : {
                  "startLine" : 3,
                  "endLine" : 7,
                  "snippet" : {
                    "text" : "\n\ndef login(username, password):\n\n    conn = sqlite3.connect('db_users.sqlite')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for username"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 12,
                  "startColumn" : 22,
                  "endColumn" : 112
                },
                "contextRegion" : {
                  "startLine" : 10,
                  "endLine" : 14,
                  "snippet" : {
                    "text" : "    c = conn.cursor()\n\n    user = c.execute(\"SELECT * FROM users WHERE username = '{}' and password = '{}'\".format(username, password)).fetchone()\n\n    if user:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute()"
              }
            }
          } ]
        } ]
      }, {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 17,
                  "startColumn" : 20,
                  "endColumn" : 27
                },
                "contextRegion" : {
                  "startLine" : 15,
                  "endLine" : 19,
                  "snippet" : {
                    "text" : "    if request.method == 'POST':\n\n        username = request.form.get('username')\n        password = request.form.get('password')\n        otp = request.form.get('otp')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 18,
                  "startColumn" : 20,
                  "endColumn" : 32
                },
                "contextRegion" : {
                  "startLine" : 16,
                  "endLine" : 20,
                  "snippet" : {
                    "text" : "\n        username = request.form.get('username')\n        password = request.form.get('password')\n        otp = request.form.get('otp')\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 21,
                  "startColumn" : 44,
                  "endColumn" : 52
                },
                "contextRegion" : {
                  "startLine" : 19,
                  "endLine" : 23,
                  "snippet" : {
                    "text" : "        otp = request.form.get('otp')\n\n        username = libuser.login(username, password)\n\n        if not username:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for password"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 5,
                  "startColumn" : 21,
                  "endColumn" : 29
                },
                "contextRegion" : {
                  "startLine" : 3,
                  "endLine" : 7,
                  "snippet" : {
                    "text" : "\n\ndef login(username, password):\n\n    conn = sqlite3.connect('db_users.sqlite')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for password"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 12,
                  "startColumn" : 22,
                  "endColumn" : 112
                },
                "contextRegion" : {
                  "startLine" : 10,
                  "endLine" : 14,
                  "snippet" : {
                    "text" : "    c = conn.cursor()\n\n    user = c.execute(\"SELECT * FROM users WHERE username = '{}' and password = '{}'\".format(username, password)).fetchone()\n\n    if user:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute()"
              }
            }
          } ]
        } ]
      }, {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 17,
                  "startColumn" : 20,
                  "endColumn" : 27
                },
                "contextRegion" : {
                  "startLine" : 15,
                  "endLine" : 19,
                  "snippet" : {
                    "text" : "    if request.method == 'POST':\n\n        username = request.form.get('username')\n        password = request.form.get('password')\n        otp = request.form.get('otp')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 18,
                  "startColumn" : 20,
                  "endColumn" : 27
                },
                "contextRegion" : {
                  "startLine" : 16,
                  "endLine" : 20,
                  "snippet" : {
                    "text" : "\n        username = request.form.get('username')\n        password = request.form.get('password')\n        otp = request.form.get('otp')\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 18,
                  "startColumn" : 20,
                  "endColumn" : 32
                },
                "contextRegion" : {
                  "startLine" : 16,
                  "endLine" : 20,
                  "snippet" : {
                    "text" : "\n        username = request.form.get('username')\n        password = request.form.get('password')\n        otp = request.form.get('otp')\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 21,
                  "startColumn" : 44,
                  "endColumn" : 52
                },
                "contextRegion" : {
                  "startLine" : 19,
                  "endLine" : 23,
                  "snippet" : {
                    "text" : "        otp = request.form.get('otp')\n\n        username = libuser.login(username, password)\n\n        if not username:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for password"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 5,
                  "startColumn" : 21,
                  "endColumn" : 29
                },
                "contextRegion" : {
                  "startLine" : 3,
                  "endLine" : 7,
                  "snippet" : {
                    "text" : "\n\ndef login(username, password):\n\n    conn = sqlite3.connect('db_users.sqlite')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for password"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 12,
                  "startColumn" : 22,
                  "endColumn" : 112
                },
                "contextRegion" : {
                  "startLine" : 10,
                  "endLine" : 14,
                  "snippet" : {
                    "text" : "    c = conn.cursor()\n\n    user = c.execute(\"SELECT * FROM users WHERE username = '{}' and password = '{}'\".format(username, password)).fetchone()\n\n    if user:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute()"
              }
            }
          } ]
        } ]
      }, {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 18,
                  "startColumn" : 20,
                  "endColumn" : 27
                },
                "contextRegion" : {
                  "startLine" : 16,
                  "endLine" : 20,
                  "snippet" : {
                    "text" : "\n        username = request.form.get('username')\n        password = request.form.get('password')\n        otp = request.form.get('otp')\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 18,
                  "startColumn" : 20,
                  "endColumn" : 32
                },
                "contextRegion" : {
                  "startLine" : 16,
                  "endLine" : 20,
                  "snippet" : {
                    "text" : "\n        username = request.form.get('username')\n        password = request.form.get('password')\n        otp = request.form.get('otp')\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 21,
                  "startColumn" : 44,
                  "endColumn" : 52
                },
                "contextRegion" : {
                  "startLine" : 19,
                  "endLine" : 23,
                  "snippet" : {
                    "text" : "        otp = request.form.get('otp')\n\n        username = libuser.login(username, password)\n\n        if not username:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for password"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 5,
                  "startColumn" : 21,
                  "endColumn" : 29
                },
                "contextRegion" : {
                  "startLine" : 3,
                  "endLine" : 7,
                  "snippet" : {
                    "text" : "\n\ndef login(username, password):\n\n    conn = sqlite3.connect('db_users.sqlite')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for password"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 12,
                  "startColumn" : 22,
                  "endColumn" : 112
                },
                "contextRegion" : {
                  "startLine" : 10,
                  "endLine" : 14,
                  "snippet" : {
                    "text" : "    c = conn.cursor()\n\n    user = c.execute(\"SELECT * FROM users WHERE username = '{}' and password = '{}'\".format(username, password)).fetchone()\n\n    if user:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute()"
              }
            }
          } ]
        } ]
      }, {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 44,
                  "startColumn" : 8,
                  "endColumn" : 15
                },
                "contextRegion" : {
                  "startLine" : 42,
                  "endLine" : 46,
                  "snippet" : {
                    "text" : "    session.pop('username', None)\n\n    if request.method == 'POST':\n\n        username = request.form.get('username')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 46,
                  "startColumn" : 20,
                  "endColumn" : 32
                },
                "contextRegion" : {
                  "startLine" : 44,
                  "endLine" : 48,
                  "snippet" : {
                    "text" : "    if request.method == 'POST':\n\n        username = request.form.get('username')\n        password = request.form.get('password')\n        email = request.form.get('password')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 50,
                  "startColumn" : 45,
                  "endColumn" : 53
                },
                "contextRegion" : {
                  "startLine" : 48,
                  "endLine" : 52,
                  "snippet" : {
                    "text" : "        email = request.form.get('password')\n\n        session['username'] = libuser.login(username, password)\n\n        if session['username']:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for username"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 5,
                  "startColumn" : 11,
                  "endColumn" : 19
                },
                "contextRegion" : {
                  "startLine" : 3,
                  "endLine" : 7,
                  "snippet" : {
                    "text" : "\n\ndef login(username, password):\n\n    conn = sqlite3.connect('db_users.sqlite')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for username"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 12,
                  "startColumn" : 22,
                  "endColumn" : 112
                },
                "contextRegion" : {
                  "startLine" : 10,
                  "endLine" : 14,
                  "snippet" : {
                    "text" : "    c = conn.cursor()\n\n    user = c.execute(\"SELECT * FROM users WHERE username = '{}' and password = '{}'\".format(username, password)).fetchone()\n\n    if user:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute()"
              }
            }
          } ]
        } ]
      }, {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 44,
                  "startColumn" : 8,
                  "endColumn" : 15
                },
                "contextRegion" : {
                  "startLine" : 42,
                  "endLine" : 46,
                  "snippet" : {
                    "text" : "    session.pop('username', None)\n\n    if request.method == 'POST':\n\n        username = request.form.get('username')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 47,
                  "startColumn" : 20,
                  "endColumn" : 32
                },
                "contextRegion" : {
                  "startLine" : 45,
                  "endLine" : 49,
                  "snippet" : {
                    "text" : "\n        username = request.form.get('username')\n        password = request.form.get('password')\n        email = request.form.get('password')\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 50,
                  "startColumn" : 55,
                  "endColumn" : 63
                },
                "contextRegion" : {
                  "startLine" : 48,
                  "endLine" : 52,
                  "snippet" : {
                    "text" : "        email = request.form.get('password')\n\n        session['username'] = libuser.login(username, password)\n\n        if session['username']:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for password"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 5,
                  "startColumn" : 21,
                  "endColumn" : 29
                },
                "contextRegion" : {
                  "startLine" : 3,
                  "endLine" : 7,
                  "snippet" : {
                    "text" : "\n\ndef login(username, password):\n\n    conn = sqlite3.connect('db_users.sqlite')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for password"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 12,
                  "startColumn" : 22,
                  "endColumn" : 112
                },
                "contextRegion" : {
                  "startLine" : 10,
                  "endLine" : 14,
                  "snippet" : {
                    "text" : "    c = conn.cursor()\n\n    user = c.execute(\"SELECT * FROM users WHERE username = '{}' and password = '{}'\".format(username, password)).fetchone()\n\n    if user:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute()"
              }
            }
          } ]
        } ]
      }, {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 44,
                  "startColumn" : 8,
                  "endColumn" : 15
                },
                "contextRegion" : {
                  "startLine" : 42,
                  "endLine" : 46,
                  "snippet" : {
                    "text" : "    session.pop('username', None)\n\n    if request.method == 'POST':\n\n        username = request.form.get('username')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 46,
                  "startColumn" : 20,
                  "endColumn" : 27
                },
                "contextRegion" : {
                  "startLine" : 44,
                  "endLine" : 48,
                  "snippet" : {
                    "text" : "    if request.method == 'POST':\n\n        username = request.form.get('username')\n        password = request.form.get('password')\n        email = request.form.get('password')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 46,
                  "startColumn" : 20,
                  "endColumn" : 32
                },
                "contextRegion" : {
                  "startLine" : 44,
                  "endLine" : 48,
                  "snippet" : {
                    "text" : "    if request.method == 'POST':\n\n        username = request.form.get('username')\n        password = request.form.get('password')\n        email = request.form.get('password')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 50,
                  "startColumn" : 45,
                  "endColumn" : 53
                },
                "contextRegion" : {
                  "startLine" : 48,
                  "endLine" : 52,
                  "snippet" : {
                    "text" : "        email = request.form.get('password')\n\n        session['username'] = libuser.login(username, password)\n\n        if session['username']:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for username"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 5,
                  "startColumn" : 11,
                  "endColumn" : 19
                },
                "contextRegion" : {
                  "startLine" : 3,
                  "endLine" : 7,
                  "snippet" : {
                    "text" : "\n\ndef login(username, password):\n\n    conn = sqlite3.connect('db_users.sqlite')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for username"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 12,
                  "startColumn" : 22,
                  "endColumn" : 112
                },
                "contextRegion" : {
                  "startLine" : 10,
                  "endLine" : 14,
                  "snippet" : {
                    "text" : "    c = conn.cursor()\n\n    user = c.execute(\"SELECT * FROM users WHERE username = '{}' and password = '{}'\".format(username, password)).fetchone()\n\n    if user:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute()"
              }
            }
          } ]
        } ]
      }, {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 44,
                  "startColumn" : 8,
                  "endColumn" : 15
                },
                "contextRegion" : {
                  "startLine" : 42,
                  "endLine" : 46,
                  "snippet" : {
                    "text" : "    session.pop('username', None)\n\n    if request.method == 'POST':\n\n        username = request.form.get('username')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 47,
                  "startColumn" : 20,
                  "endColumn" : 27
                },
                "contextRegion" : {
                  "startLine" : 45,
                  "endLine" : 49,
                  "snippet" : {
                    "text" : "\n        username = request.form.get('username')\n        password = request.form.get('password')\n        email = request.form.get('password')\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 47,
                  "startColumn" : 20,
                  "endColumn" : 32
                },
                "contextRegion" : {
                  "startLine" : 45,
                  "endLine" : 49,
                  "snippet" : {
                    "text" : "\n        username = request.form.get('username')\n        password = request.form.get('password')\n        email = request.form.get('password')\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 50,
                  "startColumn" : 55,
                  "endColumn" : 63
                },
                "contextRegion" : {
                  "startLine" : 48,
                  "endLine" : 52,
                  "snippet" : {
                    "text" : "        email = request.form.get('password')\n\n        session['username'] = libuser.login(username, password)\n\n        if session['username']:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for password"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 5,
                  "startColumn" : 21,
                  "endColumn" : 29
                },
                "contextRegion" : {
                  "startLine" : 3,
                  "endLine" : 7,
                  "snippet" : {
                    "text" : "\n\ndef login(username, password):\n\n    conn = sqlite3.connect('db_users.sqlite')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for password"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 12,
                  "startColumn" : 22,
                  "endColumn" : 112
                },
                "contextRegion" : {
                  "startLine" : 10,
                  "endLine" : 14,
                  "snippet" : {
                    "text" : "    c = conn.cursor()\n\n    user = c.execute(\"SELECT * FROM users WHERE username = '{}' and password = '{}'\".format(username, password)).fetchone()\n\n    if user:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute()"
              }
            }
          } ]
        } ]
      }, {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 46,
                  "startColumn" : 20,
                  "endColumn" : 27
                },
                "contextRegion" : {
                  "startLine" : 44,
                  "endLine" : 48,
                  "snippet" : {
                    "text" : "    if request.method == 'POST':\n\n        username = request.form.get('username')\n        password = request.form.get('password')\n        email = request.form.get('password')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 46,
                  "startColumn" : 20,
                  "endColumn" : 32
                },
                "contextRegion" : {
                  "startLine" : 44,
                  "endLine" : 48,
                  "snippet" : {
                    "text" : "    if request.method == 'POST':\n\n        username = request.form.get('username')\n        password = request.form.get('password')\n        email = request.form.get('password')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 50,
                  "startColumn" : 45,
                  "endColumn" : 53
                },
                "contextRegion" : {
                  "startLine" : 48,
                  "endLine" : 52,
                  "snippet" : {
                    "text" : "        email = request.form.get('password')\n\n        session['username'] = libuser.login(username, password)\n\n        if session['username']:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for username"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 5,
                  "startColumn" : 11,
                  "endColumn" : 19
                },
                "contextRegion" : {
                  "startLine" : 3,
                  "endLine" : 7,
                  "snippet" : {
                    "text" : "\n\ndef login(username, password):\n\n    conn = sqlite3.connect('db_users.sqlite')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for username"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 12,
                  "startColumn" : 22,
                  "endColumn" : 112
                },
                "contextRegion" : {
                  "startLine" : 10,
                  "endLine" : 14,
                  "snippet" : {
                    "text" : "    c = conn.cursor()\n\n    user = c.execute(\"SELECT * FROM users WHERE username = '{}' and password = '{}'\".format(username, password)).fetchone()\n\n    if user:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute()"
              }
            }
          } ]
        } ]
      }, {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 46,
                  "startColumn" : 20,
                  "endColumn" : 27
                },
                "contextRegion" : {
                  "startLine" : 44,
                  "endLine" : 48,
                  "snippet" : {
                    "text" : "    if request.method == 'POST':\n\n        username = request.form.get('username')\n        password = request.form.get('password')\n        email = request.form.get('password')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 47,
                  "startColumn" : 20,
                  "endColumn" : 32
                },
                "contextRegion" : {
                  "startLine" : 45,
                  "endLine" : 49,
                  "snippet" : {
                    "text" : "\n        username = request.form.get('username')\n        password = request.form.get('password')\n        email = request.form.get('password')\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 50,
                  "startColumn" : 55,
                  "endColumn" : 63
                },
                "contextRegion" : {
                  "startLine" : 48,
                  "endLine" : 52,
                  "snippet" : {
                    "text" : "        email = request.form.get('password')\n\n        session['username'] = libuser.login(username, password)\n\n        if session['username']:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for password"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 5,
                  "startColumn" : 21,
                  "endColumn" : 29
                },
                "contextRegion" : {
                  "startLine" : 3,
                  "endLine" : 7,
                  "snippet" : {
                    "text" : "\n\ndef login(username, password):\n\n    conn = sqlite3.connect('db_users.sqlite')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for password"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 12,
                  "startColumn" : 22,
                  "endColumn" : 112
                },
                "contextRegion" : {
                  "startLine" : 10,
                  "endLine" : 14,
                  "snippet" : {
                    "text" : "    c = conn.cursor()\n\n    user = c.execute(\"SELECT * FROM users WHERE username = '{}' and password = '{}'\".format(username, password)).fetchone()\n\n    if user:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute()"
              }
            }
          } ]
        } ]
      }, {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 46,
                  "startColumn" : 20,
                  "endColumn" : 27
                },
                "contextRegion" : {
                  "startLine" : 44,
                  "endLine" : 48,
                  "snippet" : {
                    "text" : "    if request.method == 'POST':\n\n        username = request.form.get('username')\n        password = request.form.get('password')\n        email = request.form.get('password')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 47,
                  "startColumn" : 20,
                  "endColumn" : 27
                },
                "contextRegion" : {
                  "startLine" : 45,
                  "endLine" : 49,
                  "snippet" : {
                    "text" : "\n        username = request.form.get('username')\n        password = request.form.get('password')\n        email = request.form.get('password')\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 47,
                  "startColumn" : 20,
                  "endColumn" : 32
                },
                "contextRegion" : {
                  "startLine" : 45,
                  "endLine" : 49,
                  "snippet" : {
                    "text" : "\n        username = request.form.get('username')\n        password = request.form.get('password')\n        email = request.form.get('password')\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 50,
                  "startColumn" : 55,
                  "endColumn" : 63
                },
                "contextRegion" : {
                  "startLine" : 48,
                  "endLine" : 52,
                  "snippet" : {
                    "text" : "        email = request.form.get('password')\n\n        session['username'] = libuser.login(username, password)\n\n        if session['username']:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for password"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 5,
                  "startColumn" : 21,
                  "endColumn" : 29
                },
                "contextRegion" : {
                  "startLine" : 3,
                  "endLine" : 7,
                  "snippet" : {
                    "text" : "\n\ndef login(username, password):\n\n    conn = sqlite3.connect('db_users.sqlite')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for password"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 12,
                  "startColumn" : 22,
                  "endColumn" : 112
                },
                "contextRegion" : {
                  "startLine" : 10,
                  "endLine" : 14,
                  "snippet" : {
                    "text" : "    c = conn.cursor()\n\n    user = c.execute(\"SELECT * FROM users WHERE username = '{}' and password = '{}'\".format(username, password)).fetchone()\n\n    if user:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute()"
              }
            }
          } ]
        } ]
      }, {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 47,
                  "startColumn" : 20,
                  "endColumn" : 27
                },
                "contextRegion" : {
                  "startLine" : 45,
                  "endLine" : 49,
                  "snippet" : {
                    "text" : "\n        username = request.form.get('username')\n        password = request.form.get('password')\n        email = request.form.get('password')\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 47,
                  "startColumn" : 20,
                  "endColumn" : 32
                },
                "contextRegion" : {
                  "startLine" : 45,
                  "endLine" : 49,
                  "snippet" : {
                    "text" : "\n        username = request.form.get('username')\n        password = request.form.get('password')\n        email = request.form.get('password')\n\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 50,
                  "startColumn" : 55,
                  "endColumn" : 63
                },
                "contextRegion" : {
                  "startLine" : 48,
                  "endLine" : 52,
                  "snippet" : {
                    "text" : "        email = request.form.get('password')\n\n        session['username'] = libuser.login(username, password)\n\n        if session['username']:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for password"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 5,
                  "startColumn" : 21,
                  "endColumn" : 29
                },
                "contextRegion" : {
                  "startLine" : 3,
                  "endLine" : 7,
                  "snippet" : {
                    "text" : "\n\ndef login(username, password):\n\n    conn = sqlite3.connect('db_users.sqlite')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for password"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 12,
                  "startColumn" : 22,
                  "endColumn" : 112
                },
                "contextRegion" : {
                  "startLine" : 10,
                  "endLine" : 14,
                  "snippet" : {
                    "text" : "    c = conn.cursor()\n\n    user = c.execute(\"SELECT * FROM users WHERE username = '{}' and password = '{}'\".format(username, password)).fetchone()\n\n    if user:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute()"
              }
            }
          } ]
        } ]
      }, {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 69,
                  "startColumn" : 24,
                  "endColumn" : 31
                },
                "contextRegion" : {
                  "startLine" : 67,
                  "endLine" : 71,
                  "snippet" : {
                    "text" : "        return redirect('/')\n\n    current_password = request.form.get('current_password')\n    new_password = request.form.get('new_password')\n    new_password_again = request.form.get('new_password_again')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 69,
                  "startColumn" : 24,
                  "endColumn" : 36
                },
                "contextRegion" : {
                  "startLine" : 67,
                  "endLine" : 71,
                  "snippet" : {
                    "text" : "        return redirect('/')\n\n    current_password = request.form.get('current_password')\n    new_password = request.form.get('new_password')\n    new_password_again = request.form.get('new_password_again')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "good/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 5
                },
                "region" : {
                  "startLine" : 73,
                  "startColumn" : 49,
                  "endColumn" : 65
                },
                "contextRegion" : {
                  "startLine" : 71,
                  "endLine" : 75,
                  "snippet" : {
                    "text" : "    new_password_again = request.form.get('new_password_again')\n\n    if not libuser.login(g.session['username'], current_password):\n        flash(\"Invalid current password\")\n        return render_template('user.chpasswd.html')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for current_password"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 5,
                  "startColumn" : 21,
                  "endColumn" : 29
                },
                "contextRegion" : {
                  "startLine" : 3,
                  "endLine" : 7,
                  "snippet" : {
                    "text" : "\n\ndef login(username, password):\n\n    conn = sqlite3.connect('db_users.sqlite')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for password"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 12,
                  "startColumn" : 22,
                  "endColumn" : 112
                },
                "contextRegion" : {
                  "startLine" : 10,
                  "endLine" : 14,
                  "snippet" : {
                    "text" : "    c = conn.cursor()\n\n    user = c.execute(\"SELECT * FROM users WHERE username = '{}' and password = '{}'\".format(username, password)).fetchone()\n\n    if user:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute()"
              }
            }
          } ]
        } ]
      } ],
      "relatedLocations" : [ {
        "id" : 1,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "bad/mod_api.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 21
          },
          "region" : {
            "startLine" : 32,
            "startColumn" : 12,
            "endColumn" : 19
          },
          "contextRegion" : {
            "startLine" : 30,
            "endLine" : 34,
            "snippet" : {
              "text" : "@mod_api.route('/key', methods=['POST'])\ndef do_key_create():\n    data = request.get_json()\n\n    try:\n"
            }
          }
        },
        "message" : {
          "text" : "a user-provided value"
        }
      }, {
        "id" : 2,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "good/mod_api.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 22
          },
          "region" : {
            "startLine" : 34,
            "startColumn" : 12,
            "endColumn" : 19
          },
          "contextRegion" : {
            "startLine" : 32,
            "endLine" : 36,
            "snippet" : {
              "text" : "@mod_api.route('/key', methods=['POST'])\ndef do_key_create():\n    data = request.get_json()\n\n    try:\n"
            }
          }
        },
        "message" : {
          "text" : "a user-provided value"
        }
      }, {
        "id" : 3,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "bad/mod_user.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 14,
            "startColumn" : 8,
            "endColumn" : 15
          },
          "contextRegion" : {
            "startLine" : 12,
            "endLine" : 16,
            "snippet" : {
              "text" : "    session.pop('username', None)\n\n    if request.method == 'POST':\n\n        username = request.form.get('username')\n"
            }
          }
        },
        "message" : {
          "text" : "a user-provided value"
        }
      }, {
        "id" : 4,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "bad/mod_user.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 16,
            "startColumn" : 20,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 14,
            "endLine" : 18,
            "snippet" : {
              "text" : "    if request.method == 'POST':\n\n        username = request.form.get('username')\n        password = request.form.get('password')\n        otp = request.form.get('otp')\n"
            }
          }
        },
        "message" : {
          "text" : "a user-provided value"
        }
      }, {
        "id" : 5,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "bad/mod_user.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 17,
            "startColumn" : 20,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 15,
            "endLine" : 19,
            "snippet" : {
              "text" : "\n        username = request.form.get('username')\n        password = request.form.get('password')\n        otp = request.form.get('otp')\n\n"
            }
          }
        },
        "message" : {
          "text" : "a user-provided value"
        }
      }, {
        "id" : 6,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "good/mod_user.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 15,
            "startColumn" : 8,
            "endColumn" : 15
          },
          "contextRegion" : {
            "startLine" : 13,
            "endLine" : 17,
            "snippet" : {
              "text" : "    session.pop('username', None)\n\n    if request.method == 'POST':\n\n        username = request.form.get('username')\n"
            }
          }
        },
        "message" : {
          "text" : "a user-provided value"
        }
      }, {
        "id" : 7,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "good/mod_user.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 17,
            "startColumn" : 20,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 15,
            "endLine" : 19,
            "snippet" : {
              "text" : "    if request.method == 'POST':\n\n        username = request.form.get('username')\n        password = request.form.get('password')\n        otp = request.form.get('otp')\n"
            }
          }
        },
        "message" : {
          "text" : "a user-provided value"
        }
      }, {
        "id" : 8,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "good/mod_user.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 18,
            "startColumn" : 20,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 16,
            "endLine" : 20,
            "snippet" : {
              "text" : "\n        username = request.form.get('username')\n        password = request.form.get('password')\n        otp = request.form.get('otp')\n\n"
            }
          }
        },
        "message" : {
          "text" : "a user-provided value"
        }
      }, {
        "id" : 9,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "good/mod_user.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 44,
            "startColumn" : 8,
            "endColumn" : 15
          },
          "contextRegion" : {
            "startLine" : 42,
            "endLine" : 46,
            "snippet" : {
              "text" : "    session.pop('username', None)\n\n    if request.method == 'POST':\n\n        username = request.form.get('username')\n"
            }
          }
        },
        "message" : {
          "text" : "a user-provided value"
        }
      }, {
        "id" : 10,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "good/mod_user.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 46,
            "startColumn" : 20,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 44,
            "endLine" : 48,
            "snippet" : {
              "text" : "    if request.method == 'POST':\n\n        username = request.form.get('username')\n        password = request.form.get('password')\n        email = request.form.get('password')\n"
            }
          }
        },
        "message" : {
          "text" : "a user-provided value"
        }
      }, {
        "id" : 11,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "good/mod_user.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 47,
            "startColumn" : 20,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 45,
            "endLine" : 49,
            "snippet" : {
              "text" : "\n        username = request.form.get('username')\n        password = request.form.get('password')\n        email = request.form.get('password')\n\n"
            }
          }
        },
        "message" : {
          "text" : "a user-provided value"
        }
      }, {
        "id" : 12,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "good/mod_user.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 69,
            "startColumn" : 24,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 67,
            "endLine" : 71,
            "snippet" : {
              "text" : "        return redirect('/')\n\n    current_password = request.form.get('current_password')\n    new_password = request.form.get('new_password')\n    new_password_again = request.form.get('new_password_again')\n"
            }
          }
        },
        "message" : {
          "text" : "a user-provided value"
        }
      } ]
    }, {
      "ruleId" : "py/sql-injection",
      "ruleIndex" : 93,
      "message" : {
        "text" : "This SQL query depends on [a user-provided value](1).\nThis SQL query depends on [a user-provided value](2).\nThis SQL query depends on [a user-provided value](3)."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "bad/libuser.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 9
          },
          "region" : {
            "startLine" : 25,
            "startColumn" : 15,
            "endColumn" : 160
          },
          "contextRegion" : {
            "startLine" : 23,
            "endLine" : 27,
            "snippet" : {
              "text" : "    c = conn.cursor()\n\n    c.execute(\"INSERT INTO users (username, password, failures, mfa_enabled, mfa_secret) VALUES ('%s', '%s', '%d', '%d', '%s')\" %(username, password, 0, 0, ''))\n\n    conn.commit()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "dca96e071a47ec37:1",
        "primaryLocationStartColumnFingerprint" : "10"
      },
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 43,
                  "startColumn" : 8,
                  "endColumn" : 15
                },
                "contextRegion" : {
                  "startLine" : 41,
                  "endLine" : 45,
                  "snippet" : {
                    "text" : "    session.pop('username', None)\n\n    if request.method == 'POST':\n\n        username = request.form.get('username')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 45,
                  "startColumn" : 20,
                  "endColumn" : 32
                },
                "contextRegion" : {
                  "startLine" : 43,
                  "endLine" : 47,
                  "snippet" : {
                    "text" : "    if request.method == 'POST':\n\n        username = request.form.get('username')\n        password = request.form.get('password')\n        #email = request.form.get('password')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 52,
                  "startColumn" : 24,
                  "endColumn" : 32
                },
                "contextRegion" : {
                  "startLine" : 50,
                  "endLine" : 54,
                  "snippet" : {
                    "text" : "            return render_template('user.create.html')\n\n        libuser.create(username, password)\n        flash(\"User created. Please login.\")\n        return redirect('/user/login')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for username"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 20,
                  "startColumn" : 12,
                  "endColumn" : 20
                },
                "contextRegion" : {
                  "startLine" : 18,
                  "endLine" : 22,
                  "snippet" : {
                    "text" : "\n\ndef create(username, password):\n\n    conn = sqlite3.connect('db_users.sqlite')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for username"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 25,
                  "startColumn" : 131,
                  "endColumn" : 159
                },
                "contextRegion" : {
                  "startLine" : 23,
                  "endLine" : 27,
                  "snippet" : {
                    "text" : "    c = conn.cursor()\n\n    c.execute(\"INSERT INTO users (username, password, failures, mfa_enabled, mfa_secret) VALUES ('%s', '%s', '%d', '%d', '%s')\" %(username, password, 0, 0, ''))\n\n    conn.commit()\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Tuple"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 25,
                  "startColumn" : 15,
                  "endColumn" : 160
                },
                "contextRegion" : {
                  "startLine" : 23,
                  "endLine" : 27,
                  "snippet" : {
                    "text" : "    c = conn.cursor()\n\n    c.execute(\"INSERT INTO users (username, password, failures, mfa_enabled, mfa_secret) VALUES ('%s', '%s', '%d', '%d', '%s')\" %(username, password, 0, 0, ''))\n\n    conn.commit()\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for BinaryExpr"
              }
            }
          } ]
        } ]
      }, {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 43,
                  "startColumn" : 8,
                  "endColumn" : 15
                },
                "contextRegion" : {
                  "startLine" : 41,
                  "endLine" : 45,
                  "snippet" : {
                    "text" : "    session.pop('username', None)\n\n    if request.method == 'POST':\n\n        username = request.form.get('username')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 46,
                  "startColumn" : 20,
                  "endColumn" : 32
                },
                "contextRegion" : {
                  "startLine" : 44,
                  "endLine" : 48,
                  "snippet" : {
                    "text" : "\n        username = request.form.get('username')\n        password = request.form.get('password')\n        #email = request.form.get('password')\n        if not username or not password:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 52,
                  "startColumn" : 34,
                  "endColumn" : 42
                },
                "contextRegion" : {
                  "startLine" : 50,
                  "endLine" : 54,
                  "snippet" : {
                    "text" : "            return render_template('user.create.html')\n\n        libuser.create(username, password)\n        flash(\"User created. Please login.\")\n        return redirect('/user/login')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for password"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 20,
                  "startColumn" : 22,
                  "endColumn" : 30
                },
                "contextRegion" : {
                  "startLine" : 18,
                  "endLine" : 22,
                  "snippet" : {
                    "text" : "\n\ndef create(username, password):\n\n    conn = sqlite3.connect('db_users.sqlite')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for password"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 25,
                  "startColumn" : 131,
                  "endColumn" : 159
                },
                "contextRegion" : {
                  "startLine" : 23,
                  "endLine" : 27,
                  "snippet" : {
                    "text" : "    c = conn.cursor()\n\n    c.execute(\"INSERT INTO users (username, password, failures, mfa_enabled, mfa_secret) VALUES ('%s', '%s', '%d', '%d', '%s')\" %(username, password, 0, 0, ''))\n\n    conn.commit()\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Tuple"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 25,
                  "startColumn" : 15,
                  "endColumn" : 160
                },
                "contextRegion" : {
                  "startLine" : 23,
                  "endLine" : 27,
                  "snippet" : {
                    "text" : "    c = conn.cursor()\n\n    c.execute(\"INSERT INTO users (username, password, failures, mfa_enabled, mfa_secret) VALUES ('%s', '%s', '%d', '%d', '%s')\" %(username, password, 0, 0, ''))\n\n    conn.commit()\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for BinaryExpr"
              }
            }
          } ]
        } ]
      }, {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 43,
                  "startColumn" : 8,
                  "endColumn" : 15
                },
                "contextRegion" : {
                  "startLine" : 41,
                  "endLine" : 45,
                  "snippet" : {
                    "text" : "    session.pop('username', None)\n\n    if request.method == 'POST':\n\n        username = request.form.get('username')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 45,
                  "startColumn" : 20,
                  "endColumn" : 27
                },
                "contextRegion" : {
                  "startLine" : 43,
                  "endLine" : 47,
                  "snippet" : {
                    "text" : "    if request.method == 'POST':\n\n        username = request.form.get('username')\n        password = request.form.get('password')\n        #email = request.form.get('password')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 45,
                  "startColumn" : 20,
                  "endColumn" : 32
                },
                "contextRegion" : {
                  "startLine" : 43,
                  "endLine" : 47,
                  "snippet" : {
                    "text" : "    if request.method == 'POST':\n\n        username = request.form.get('username')\n        password = request.form.get('password')\n        #email = request.form.get('password')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 52,
                  "startColumn" : 24,
                  "endColumn" : 32
                },
                "contextRegion" : {
                  "startLine" : 50,
                  "endLine" : 54,
                  "snippet" : {
                    "text" : "            return render_template('user.create.html')\n\n        libuser.create(username, password)\n        flash(\"User created. Please login.\")\n        return redirect('/user/login')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for username"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 20,
                  "startColumn" : 12,
                  "endColumn" : 20
                },
                "contextRegion" : {
                  "startLine" : 18,
                  "endLine" : 22,
                  "snippet" : {
                    "text" : "\n\ndef create(username, password):\n\n    conn = sqlite3.connect('db_users.sqlite')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for username"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 25,
                  "startColumn" : 131,
                  "endColumn" : 159
                },
                "contextRegion" : {
                  "startLine" : 23,
                  "endLine" : 27,
                  "snippet" : {
                    "text" : "    c = conn.cursor()\n\n    c.execute(\"INSERT INTO users (username, password, failures, mfa_enabled, mfa_secret) VALUES ('%s', '%s', '%d', '%d', '%s')\" %(username, password, 0, 0, ''))\n\n    conn.commit()\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Tuple"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 25,
                  "startColumn" : 15,
                  "endColumn" : 160
                },
                "contextRegion" : {
                  "startLine" : 23,
                  "endLine" : 27,
                  "snippet" : {
                    "text" : "    c = conn.cursor()\n\n    c.execute(\"INSERT INTO users (username, password, failures, mfa_enabled, mfa_secret) VALUES ('%s', '%s', '%d', '%d', '%s')\" %(username, password, 0, 0, ''))\n\n    conn.commit()\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for BinaryExpr"
              }
            }
          } ]
        } ]
      }, {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 43,
                  "startColumn" : 8,
                  "endColumn" : 15
                },
                "contextRegion" : {
                  "startLine" : 41,
                  "endLine" : 45,
                  "snippet" : {
                    "text" : "    session.pop('username', None)\n\n    if request.method == 'POST':\n\n        username = request.form.get('username')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 46,
                  "startColumn" : 20,
                  "endColumn" : 27
                },
                "contextRegion" : {
                  "startLine" : 44,
                  "endLine" : 48,
                  "snippet" : {
                    "text" : "\n        username = request.form.get('username')\n        password = request.form.get('password')\n        #email = request.form.get('password')\n        if not username or not password:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 46,
                  "startColumn" : 20,
                  "endColumn" : 32
                },
                "contextRegion" : {
                  "startLine" : 44,
                  "endLine" : 48,
                  "snippet" : {
                    "text" : "\n        username = request.form.get('username')\n        password = request.form.get('password')\n        #email = request.form.get('password')\n        if not username or not password:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 52,
                  "startColumn" : 34,
                  "endColumn" : 42
                },
                "contextRegion" : {
                  "startLine" : 50,
                  "endLine" : 54,
                  "snippet" : {
                    "text" : "            return render_template('user.create.html')\n\n        libuser.create(username, password)\n        flash(\"User created. Please login.\")\n        return redirect('/user/login')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for password"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 20,
                  "startColumn" : 22,
                  "endColumn" : 30
                },
                "contextRegion" : {
                  "startLine" : 18,
                  "endLine" : 22,
                  "snippet" : {
                    "text" : "\n\ndef create(username, password):\n\n    conn = sqlite3.connect('db_users.sqlite')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for password"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 25,
                  "startColumn" : 131,
                  "endColumn" : 159
                },
                "contextRegion" : {
                  "startLine" : 23,
                  "endLine" : 27,
                  "snippet" : {
                    "text" : "    c = conn.cursor()\n\n    c.execute(\"INSERT INTO users (username, password, failures, mfa_enabled, mfa_secret) VALUES ('%s', '%s', '%d', '%d', '%s')\" %(username, password, 0, 0, ''))\n\n    conn.commit()\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Tuple"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 25,
                  "startColumn" : 15,
                  "endColumn" : 160
                },
                "contextRegion" : {
                  "startLine" : 23,
                  "endLine" : 27,
                  "snippet" : {
                    "text" : "    c = conn.cursor()\n\n    c.execute(\"INSERT INTO users (username, password, failures, mfa_enabled, mfa_secret) VALUES ('%s', '%s', '%d', '%d', '%s')\" %(username, password, 0, 0, ''))\n\n    conn.commit()\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for BinaryExpr"
              }
            }
          } ]
        } ]
      }, {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 45,
                  "startColumn" : 20,
                  "endColumn" : 27
                },
                "contextRegion" : {
                  "startLine" : 43,
                  "endLine" : 47,
                  "snippet" : {
                    "text" : "    if request.method == 'POST':\n\n        username = request.form.get('username')\n        password = request.form.get('password')\n        #email = request.form.get('password')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 45,
                  "startColumn" : 20,
                  "endColumn" : 32
                },
                "contextRegion" : {
                  "startLine" : 43,
                  "endLine" : 47,
                  "snippet" : {
                    "text" : "    if request.method == 'POST':\n\n        username = request.form.get('username')\n        password = request.form.get('password')\n        #email = request.form.get('password')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 52,
                  "startColumn" : 24,
                  "endColumn" : 32
                },
                "contextRegion" : {
                  "startLine" : 50,
                  "endLine" : 54,
                  "snippet" : {
                    "text" : "            return render_template('user.create.html')\n\n        libuser.create(username, password)\n        flash(\"User created. Please login.\")\n        return redirect('/user/login')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for username"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 20,
                  "startColumn" : 12,
                  "endColumn" : 20
                },
                "contextRegion" : {
                  "startLine" : 18,
                  "endLine" : 22,
                  "snippet" : {
                    "text" : "\n\ndef create(username, password):\n\n    conn = sqlite3.connect('db_users.sqlite')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for username"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 25,
                  "startColumn" : 131,
                  "endColumn" : 159
                },
                "contextRegion" : {
                  "startLine" : 23,
                  "endLine" : 27,
                  "snippet" : {
                    "text" : "    c = conn.cursor()\n\n    c.execute(\"INSERT INTO users (username, password, failures, mfa_enabled, mfa_secret) VALUES ('%s', '%s', '%d', '%d', '%s')\" %(username, password, 0, 0, ''))\n\n    conn.commit()\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Tuple"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 25,
                  "startColumn" : 15,
                  "endColumn" : 160
                },
                "contextRegion" : {
                  "startLine" : 23,
                  "endLine" : 27,
                  "snippet" : {
                    "text" : "    c = conn.cursor()\n\n    c.execute(\"INSERT INTO users (username, password, failures, mfa_enabled, mfa_secret) VALUES ('%s', '%s', '%d', '%d', '%s')\" %(username, password, 0, 0, ''))\n\n    conn.commit()\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for BinaryExpr"
              }
            }
          } ]
        } ]
      }, {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 45,
                  "startColumn" : 20,
                  "endColumn" : 27
                },
                "contextRegion" : {
                  "startLine" : 43,
                  "endLine" : 47,
                  "snippet" : {
                    "text" : "    if request.method == 'POST':\n\n        username = request.form.get('username')\n        password = request.form.get('password')\n        #email = request.form.get('password')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 46,
                  "startColumn" : 20,
                  "endColumn" : 32
                },
                "contextRegion" : {
                  "startLine" : 44,
                  "endLine" : 48,
                  "snippet" : {
                    "text" : "\n        username = request.form.get('username')\n        password = request.form.get('password')\n        #email = request.form.get('password')\n        if not username or not password:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 52,
                  "startColumn" : 34,
                  "endColumn" : 42
                },
                "contextRegion" : {
                  "startLine" : 50,
                  "endLine" : 54,
                  "snippet" : {
                    "text" : "            return render_template('user.create.html')\n\n        libuser.create(username, password)\n        flash(\"User created. Please login.\")\n        return redirect('/user/login')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for password"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 20,
                  "startColumn" : 22,
                  "endColumn" : 30
                },
                "contextRegion" : {
                  "startLine" : 18,
                  "endLine" : 22,
                  "snippet" : {
                    "text" : "\n\ndef create(username, password):\n\n    conn = sqlite3.connect('db_users.sqlite')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for password"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 25,
                  "startColumn" : 131,
                  "endColumn" : 159
                },
                "contextRegion" : {
                  "startLine" : 23,
                  "endLine" : 27,
                  "snippet" : {
                    "text" : "    c = conn.cursor()\n\n    c.execute(\"INSERT INTO users (username, password, failures, mfa_enabled, mfa_secret) VALUES ('%s', '%s', '%d', '%d', '%s')\" %(username, password, 0, 0, ''))\n\n    conn.commit()\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Tuple"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 25,
                  "startColumn" : 15,
                  "endColumn" : 160
                },
                "contextRegion" : {
                  "startLine" : 23,
                  "endLine" : 27,
                  "snippet" : {
                    "text" : "    c = conn.cursor()\n\n    c.execute(\"INSERT INTO users (username, password, failures, mfa_enabled, mfa_secret) VALUES ('%s', '%s', '%d', '%d', '%s')\" %(username, password, 0, 0, ''))\n\n    conn.commit()\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for BinaryExpr"
              }
            }
          } ]
        } ]
      }, {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 45,
                  "startColumn" : 20,
                  "endColumn" : 27
                },
                "contextRegion" : {
                  "startLine" : 43,
                  "endLine" : 47,
                  "snippet" : {
                    "text" : "    if request.method == 'POST':\n\n        username = request.form.get('username')\n        password = request.form.get('password')\n        #email = request.form.get('password')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 46,
                  "startColumn" : 20,
                  "endColumn" : 27
                },
                "contextRegion" : {
                  "startLine" : 44,
                  "endLine" : 48,
                  "snippet" : {
                    "text" : "\n        username = request.form.get('username')\n        password = request.form.get('password')\n        #email = request.form.get('password')\n        if not username or not password:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 46,
                  "startColumn" : 20,
                  "endColumn" : 32
                },
                "contextRegion" : {
                  "startLine" : 44,
                  "endLine" : 48,
                  "snippet" : {
                    "text" : "\n        username = request.form.get('username')\n        password = request.form.get('password')\n        #email = request.form.get('password')\n        if not username or not password:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 52,
                  "startColumn" : 34,
                  "endColumn" : 42
                },
                "contextRegion" : {
                  "startLine" : 50,
                  "endLine" : 54,
                  "snippet" : {
                    "text" : "            return render_template('user.create.html')\n\n        libuser.create(username, password)\n        flash(\"User created. Please login.\")\n        return redirect('/user/login')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for password"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 20,
                  "startColumn" : 22,
                  "endColumn" : 30
                },
                "contextRegion" : {
                  "startLine" : 18,
                  "endLine" : 22,
                  "snippet" : {
                    "text" : "\n\ndef create(username, password):\n\n    conn = sqlite3.connect('db_users.sqlite')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for password"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 25,
                  "startColumn" : 131,
                  "endColumn" : 159
                },
                "contextRegion" : {
                  "startLine" : 23,
                  "endLine" : 27,
                  "snippet" : {
                    "text" : "    c = conn.cursor()\n\n    c.execute(\"INSERT INTO users (username, password, failures, mfa_enabled, mfa_secret) VALUES ('%s', '%s', '%d', '%d', '%s')\" %(username, password, 0, 0, ''))\n\n    conn.commit()\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Tuple"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 25,
                  "startColumn" : 15,
                  "endColumn" : 160
                },
                "contextRegion" : {
                  "startLine" : 23,
                  "endLine" : 27,
                  "snippet" : {
                    "text" : "    c = conn.cursor()\n\n    c.execute(\"INSERT INTO users (username, password, failures, mfa_enabled, mfa_secret) VALUES ('%s', '%s', '%d', '%d', '%s')\" %(username, password, 0, 0, ''))\n\n    conn.commit()\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for BinaryExpr"
              }
            }
          } ]
        } ]
      }, {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 46,
                  "startColumn" : 20,
                  "endColumn" : 27
                },
                "contextRegion" : {
                  "startLine" : 44,
                  "endLine" : 48,
                  "snippet" : {
                    "text" : "\n        username = request.form.get('username')\n        password = request.form.get('password')\n        #email = request.form.get('password')\n        if not username or not password:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for request"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 46,
                  "startColumn" : 20,
                  "endColumn" : 32
                },
                "contextRegion" : {
                  "startLine" : 44,
                  "endLine" : 48,
                  "snippet" : {
                    "text" : "\n        username = request.form.get('username')\n        password = request.form.get('password')\n        #email = request.form.get('password')\n        if not username or not password:\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Attribute"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/mod_user.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 6
                },
                "region" : {
                  "startLine" : 52,
                  "startColumn" : 34,
                  "endColumn" : 42
                },
                "contextRegion" : {
                  "startLine" : 50,
                  "endLine" : 54,
                  "snippet" : {
                    "text" : "            return render_template('user.create.html')\n\n        libuser.create(username, password)\n        flash(\"User created. Please login.\")\n        return redirect('/user/login')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for password"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 20,
                  "startColumn" : 22,
                  "endColumn" : 30
                },
                "contextRegion" : {
                  "startLine" : 18,
                  "endLine" : 22,
                  "snippet" : {
                    "text" : "\n\ndef create(username, password):\n\n    conn = sqlite3.connect('db_users.sqlite')\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for password"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 25,
                  "startColumn" : 131,
                  "endColumn" : 159
                },
                "contextRegion" : {
                  "startLine" : 23,
                  "endLine" : 27,
                  "snippet" : {
                    "text" : "    c = conn.cursor()\n\n    c.execute(\"INSERT INTO users (username, password, failures, mfa_enabled, mfa_secret) VALUES ('%s', '%s', '%d', '%d', '%s')\" %(username, password, 0, 0, ''))\n\n    conn.commit()\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for Tuple"
              }
            }
          }, {
            "location" : {
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "bad/libuser.py",
                  "uriBaseId" : "%SRCROOT%",
                  "index" : 9
                },
                "region" : {
                  "startLine" : 25,
                  "startColumn" : 15,
                  "endColumn" : 160
                },
                "contextRegion" : {
                  "startLine" : 23,
                  "endLine" : 27,
                  "snippet" : {
                    "text" : "    c = conn.cursor()\n\n    c.execute(\"INSERT INTO users (username, password, failures, mfa_enabled, mfa_secret) VALUES ('%s', '%s', '%d', '%d', '%s')\" %(username, password, 0, 0, ''))\n\n    conn.commit()\n"
                  }
                }
              },
              "message" : {
                "text" : "ControlFlowNode for BinaryExpr"
              }
            }
          } ]
        } ]
      } ],
      "relatedLocations" : [ {
        "id" : 1,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "bad/mod_user.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 43,
            "startColumn" : 8,
            "endColumn" : 15
          },
          "contextRegion" : {
            "startLine" : 41,
            "endLine" : 45,
            "snippet" : {
              "text" : "    session.pop('username', None)\n\n    if request.method == 'POST':\n\n        username = request.form.get('username')\n"
            }
          }
        },
        "message" : {
          "text" : "a user-provided value"
        }
      }, {
        "id" : 2,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "bad/mod_user.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 45,
            "startColumn" : 20,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 43,
            "endLine" : 47,
            "snippet" : {
              "text" : "    if request.method == 'POST':\n\n        username = request.form.get('username')\n        password = request.form.get('password')\n        #email = request.form.get('password')\n"
            }
          }
        },
        "message" : {
          "text" : "a user-provided value"
        }
      }, {
        "id" : 3,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "bad/mod_user.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 46,
            "startColumn" : 20,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 44,
            "endLine" : 48,
            "snippet" : {
              "text" : "\n        username = request.form.get('username')\n        password = request.form.get('password')\n        #email = request.form.get('password')\n        if not username or not password:\n"
            }
          }
        },
        "message" : {
          "text" : "a user-provided value"
        }
      } ]
    }, {
      "ruleId" : "py/flask-debug",
      "ruleIndex" : 96,
      "message" : {
        "text" : "A Flask app appears to be run in debug mode. This may allow an attacker to run arbitrary code through the debugger."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "good/vulpy-ssl.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 32
          },
          "region" : {
            "startLine" : 29,
            "endColumn" : 87
          },
          "contextRegion" : {
            "startLine" : 27,
            "endLine" : 29,
            "snippet" : {
              "text" : "    g.session = libsession.load(request)\n\napp.run(debug=True, host='127.0.1.1', ssl_context=('/tmp/acme.cert', '/tmp/acme.key'))\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b0c28a6e08dc0c46:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/flask-debug",
      "ruleIndex" : 96,
      "message" : {
        "text" : "A Flask app appears to be run in debug mode. This may allow an attacker to run arbitrary code through the debugger."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "bad/vulpy-ssl.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 33
          },
          "region" : {
            "startLine" : 29,
            "endColumn" : 87
          },
          "contextRegion" : {
            "startLine" : 27,
            "endLine" : 29,
            "snippet" : {
              "text" : "    g.session = libsession.load(request)\n\napp.run(debug=True, host='127.0.1.1', ssl_context=('/tmp/acme.cert', '/tmp/acme.key'))\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b0c28a6e08dc0c46:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/flask-debug",
      "ruleIndex" : 96,
      "message" : {
        "text" : "A Flask app appears to be run in debug mode. This may allow an attacker to run arbitrary code through the debugger."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "bad/vulpy.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 34
          },
          "region" : {
            "startLine" : 55,
            "endColumn" : 72
          },
          "contextRegion" : {
            "startLine" : 53,
            "endLine" : 55,
            "snippet" : {
              "text" : "\n\napp.run(debug=True, host='127.0.1.1', port=5000, extra_files='csp.txt')\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "acec19fa0fda9f4d:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/flask-debug",
      "ruleIndex" : 96,
      "message" : {
        "text" : "A Flask app appears to be run in debug mode. This may allow an attacker to run arbitrary code through the debugger."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "good/vulpy.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 35
          },
          "region" : {
            "startLine" : 53,
            "endColumn" : 72
          },
          "contextRegion" : {
            "startLine" : 51,
            "endLine" : 54,
            "snippet" : {
              "text" : "    return response\n\napp.run(debug=True, host='127.0.1.1', port=5001, extra_files='csp.txt')\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "92d0ce9893394f28:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/unreachable-statement",
      "ruleIndex" : 124,
      "message" : {
        "text" : "Unreachable statement."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "good/libuser.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 20
          },
          "region" : {
            "startLine" : 51,
            "startColumn" : 5,
            "endColumn" : 17
          },
          "contextRegion" : {
            "startLine" : 49,
            "endLine" : 53,
            "snippet" : {
              "text" : "\n    #print('No deberia haber llegado aca')\n    return False\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "462c73efe920db8d:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/unreachable-statement",
      "ruleIndex" : 124,
      "message" : {
        "text" : "Unreachable statement."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "good/mod_mfa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 25
          },
          "region" : {
            "startLine" : 55,
            "startColumn" : 5,
            "endColumn" : 46
          },
          "contextRegion" : {
            "startLine" : 53,
            "endLine" : 57,
            "snippet" : {
              "text" : "        return redirect('/mfa/')\n\n    return render_template('mfa.enable.html')\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d6bd3070be542edc:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/unreachable-statement",
      "ruleIndex" : 124,
      "message" : {
        "text" : "Unreachable statement."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "bad/mod_mfa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 36
          },
          "region" : {
            "startLine" : 54,
            "startColumn" : 5,
            "endColumn" : 46
          },
          "contextRegion" : {
            "startLine" : 52,
            "endLine" : 56,
            "snippet" : {
              "text" : "        return redirect('/mfa/')\n\n    return render_template('mfa.enable.html')\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d6bd3070be542edc:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/unreachable-statement",
      "ruleIndex" : 124,
      "message" : {
        "text" : "Unreachable statement."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "good/mod_user.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 87,
            "startColumn" : 5,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 85,
            "endLine" : 88,
            "snippet" : {
              "text" : "    libuser.password_set(g.session['username'], new_password)\n    return redirect('/')\n    flash(\"Password changed\")\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "82c238c169135ba3:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/unused-local-variable",
      "ruleIndex" : 134,
      "message" : {
        "text" : "The value assigned to local variable 'rows' is never used."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "good/libposts.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 18
          },
          "region" : {
            "startLine" : 28,
            "startColumn" : 5,
            "endColumn" : 9
          },
          "contextRegion" : {
            "startLine" : 26,
            "endLine" : 30,
            "snippet" : {
              "text" : "    c = conn.cursor()\n\n    rows = c.execute(\"INSERT INTO posts (username, text, date) VALUES (?, ?, DateTime('now'))\", (username, text)) #WHERE username = ?\", (username,)).fetchall()\n    conn.commit()\n    #posts = [ dict(zip(row.keys(), row)) for row in rows ]\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2b43957e7f3d7581:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/unused-local-variable",
      "ruleIndex" : 134,
      "message" : {
        "text" : "The value assigned to local variable 'rows' is never used."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "bad/libposts.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 19
          },
          "region" : {
            "startLine" : 28,
            "startColumn" : 5,
            "endColumn" : 9
          },
          "contextRegion" : {
            "startLine" : 26,
            "endLine" : 30,
            "snippet" : {
              "text" : "    c = conn.cursor()\n\n    rows = c.execute(\"INSERT INTO posts (username, text, date) VALUES (?, ?, DateTime('now'))\", (username, text)) #WHERE username = ?\", (username,)).fetchall()\n    conn.commit()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2b43957e7f3d7581:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/unused-local-variable",
      "ruleIndex" : 134,
      "message" : {
        "text" : "The value assigned to local variable 'email' is never used."
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "good/mod_user.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 48,
            "startColumn" : 9,
            "endColumn" : 14
          },
          "contextRegion" : {
            "startLine" : 46,
            "endLine" : 50,
            "snippet" : {
              "text" : "        username = request.form.get('username')\n        password = request.form.get('password')\n        email = request.form.get('password')\n\n        session['username'] = libuser.login(username, password)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2efd6121c44681f2:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    } ],
    "columnKind" : "unicodeCodePoints",
    "properties" : {
      "semmle.formatSpecifier" : "sarif-latest"
    }
  } ]
}