<?xml version="1.0"?><OWASPZAPReport version="2.9.0" generated="Tue, 12 May 2020 20:57:30">
<site name="https://mainsite.com" host="mainsite.com" port="443" ssl="true"><alerts><alertitem>
  <pluginid>10011</pluginid>
  <alert>Cookie Without Secure Flag</alert>
  <name>Cookie Without Secure Flag</name>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>&lt;p&gt;A cookie has been set without the secure flag, which means that the cookie can be accessed via unencrypted connections.&lt;/p&gt;</desc>
  <instances>
  <instance>
  <uri>https://mainsite.com</uri>
  <method>GET</method>
  <param>opvc</param>
  <evidence>Set-Cookie: opvc</evidence>
  </instance>
  <instance>
  <uri>https://mainsite.com</uri>
  <method>GET</method>
  <param>dmid</param>
  <evidence>Set-Cookie: dmid</evidence>
  </instance>
  <instance>
  <uri>https://mainsite.com</uri>
  <method>GET</method>
  <param>sitevisitscookie</param>
  <evidence>Set-Cookie: sitevisitscookie</evidence>
  </instance>
  </instances>
  <count>3</count>
  <solution>&lt;p&gt;Whenever a cookie contains sensitive information or is a session token, then it should always be passed using an encrypted channel. Ensure that the secure flag is set for cookies containing such sensitive information.&lt;/p&gt;</solution>
  <reference>&lt;p&gt;http://www.owasp.org/index.php/Testing_for_cookies_attributes_(OWASP-SM-002)&lt;/p&gt;</reference>
  <cweid>614</cweid>
  <wascid>13</wascid>
  <sourceid>3</sourceid>
</alertitem>
<alertitem>
  <pluginid>10054</pluginid>
  <alert>Cookie Without SameSite Attribute</alert>
  <name>Cookie Without SameSite Attribute</name>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>&lt;p&gt;A cookie has been set without the SameSite attribute, which means that the cookie can be sent as a result of a &apos;cross-site&apos; request. The SameSite attribute is an effective counter measure to cross-site request forgery, cross-site script inclusion, and timing attacks.&lt;/p&gt;</desc>
  <instances>
  <instance>
  <uri>https://mainsite.com</uri>
  <method>GET</method>
  <param>sitevisitscookie</param>
  <evidence>Set-Cookie: sitevisitscookie</evidence>
  </instance>
  <instance>
  <uri>https://mainsite.com</uri>
  <method>GET</method>
  <param>dmid</param>
  <evidence>Set-Cookie: dmid</evidence>
  </instance>
  <instance>
  <uri>https://mainsite.com</uri>
  <method>GET</method>
  <param>JSESSIONID</param>
  <evidence>Set-Cookie: JSESSIONID</evidence>
  </instance>
  <instance>
  <uri>https://mainsite.com</uri>
  <method>GET</method>
  <param>opvc</param>
  <evidence>Set-Cookie: opvc</evidence>
  </instance>
  </instances>
  <count>4</count>
  <solution>&lt;p&gt;Ensure that the SameSite attribute is set to either &apos;lax&apos; or ideally &apos;strict&apos; for all cookies.&lt;/p&gt;</solution>
  <reference>&lt;p&gt;https://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site&lt;/p&gt;</reference>
  <cweid>16</cweid>
  <wascid>13</wascid>
  <sourceid>3</sourceid>
</alertitem>
<alertitem>
  <pluginid>10055</pluginid>
  <alert>CSP Scanner: Wildcard Directive</alert>
  <name>CSP Scanner: Wildcard Directive</name>
  <riskcode>2</riskcode>
  <confidence>2</confidence>
  <riskdesc>Medium (Medium)</riskdesc>
  <desc>&lt;p&gt;The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: &lt;/p&gt;&lt;p&gt;script-src, script-src-elem, script-src-attr, style-src, style-src-elem, style-src-attr, img-src, connect-src, frame-src, font-src, media-src, object-src, manifest-src, worker-src, prefetch-src&lt;/p&gt;</desc>
  <instances>
  <instance>
  <uri>https://mainsite.com</uri>
  <method>GET</method>
  <param>Content-Security-Policy</param>
  <evidence>frame-ancestors &apos;self&apos;;</evidence>
  </instance>
  </instances>
  <count>1</count>
  <solution>&lt;p&gt;Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.&lt;/p&gt;</solution>
  <reference>&lt;p&gt;http://www.w3.org/TR/CSP2/&lt;/p&gt;&lt;p&gt;http://www.w3.org/TR/CSP/&lt;/p&gt;&lt;p&gt;http://caniuse.com/#search=content+security+policy&lt;/p&gt;&lt;p&gt;http://content-security-policy.com/&lt;/p&gt;&lt;p&gt;https://github.com/shapesecurity/salvation&lt;/p&gt;</reference>
  <cweid>16</cweid>
  <wascid>15</wascid>
  <sourceid>3</sourceid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie No HttpOnly Flag</alert>
  <name>Cookie No HttpOnly Flag</name>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>&lt;p&gt;A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.&lt;/p&gt;</desc>
  <instances>
  <instance>
  <uri>https://mainsite.com</uri>
  <method>GET</method>
  <param>opvc</param>
  <evidence>Set-Cookie: opvc</evidence>
  </instance>
  <instance>
  <uri>https://mainsite.com</uri>
  <method>GET</method>
  <param>dmid</param>
  <evidence>Set-Cookie: dmid</evidence>
  </instance>
  <instance>
  <uri>https://mainsite.com</uri>
  <method>GET</method>
  <param>sitevisitscookie</param>
  <evidence>Set-Cookie: sitevisitscookie</evidence>
  </instance>
  </instances>
  <count>3</count>
  <solution>&lt;p&gt;Ensure that the HttpOnly flag is set for all cookies.&lt;/p&gt;</solution>
  <reference>&lt;p&gt;http://www.owasp.org/index.php/HttpOnly&lt;/p&gt;</reference>
  <cweid>16</cweid>
  <wascid>13</wascid>
  <sourceid>3</sourceid>
</alertitem>
<alertitem>
  <pluginid>10096</pluginid>
  <alert>Timestamp Disclosure - Unix</alert>
  <name>Timestamp Disclosure - Unix</name>
  <riskcode>0</riskcode>
  <confidence>1</confidence>
  <riskdesc>Informational (Low)</riskdesc>
  <desc>&lt;p&gt;A timestamp was disclosed by the application/web server - Unix&lt;/p&gt;</desc>
  <instances>
  <instance>
  <uri>https://mainsite.com</uri>
  <method>GET</method>
  <evidence>265151019</evidence>
  </instance>
  <instance>
  <uri>https://mainsite.com</uri>
  <method>GET</method>
  <evidence>398525181</evidence>
  </instance>
  <instance>
  <uri>https://mainsite.com</uri>
  <method>GET</method>
  <evidence>153792000</evidence>
  </instance>
  <instance>
  <uri>https://mainsite.com</uri>
  <method>GET</method>
  <evidence>1028274645</evidence>
  </instance>
  </instances>
  <count>4</count>
  <solution>&lt;p&gt;Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.&lt;/p&gt;</solution>
  <otherinfo>&lt;p&gt;265151019, which evaluates to: 1978-05-27 22:03:39&lt;/p&gt;</otherinfo>
  <reference>&lt;p&gt;https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure&lt;/p&gt;&lt;p&gt;http://projects.webappsec.org/w/page/13246936/Information%20Leakage&lt;/p&gt;</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
  <sourceid>3</sourceid>
</alertitem>
<alertitem>
  <pluginid>10017</pluginid>
  <alert>Cross-Domain JavaScript Source File Inclusion</alert>
  <name>Cross-Domain JavaScript Source File Inclusion</name>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>&lt;p&gt;The page includes one or more script files from a third-party domain.&lt;/p&gt;</desc>
  <instances>
  <instance>
  <uri>https://mainsite.com</uri>
  <method>GET</method>
  <param>https://consent.cookiebot.com/uc.js</param>
  <evidence>&lt;script id=&quot;Cookiebot&quot; src=&quot;https://consent.cookiebot.com/uc.js&quot; data-cbid=&quot;4079ecf4-44a4-4dca-b14c-fa341fdbefd4&quot; type=&quot;text/javascript&quot; defer&gt;&lt;/script&gt;</evidence>
  </instance>
  </instances>
  <count>1</count>
  <solution>&lt;p&gt;Ensure JavaScript source files are loaded from only trusted sources, and the sources can&apos;t be controlled by end users of the application.&lt;/p&gt;</solution>
  <reference>&lt;p&gt;&lt;/p&gt;</reference>
  <cweid>829</cweid>
  <wascid>15</wascid>
  <sourceid>3</sourceid>
</alertitem>
<alertitem>
  <pluginid>10015</pluginid>
  <alert>Incomplete or No Cache-control and Pragma HTTP Header Set</alert>
  <name>Incomplete or No Cache-control and Pragma HTTP Header Set</name>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>&lt;p&gt;The cache-control and pragma HTTP header have not been set properly or are missing allowing the browser and proxies to cache content.&lt;/p&gt;</desc>
  <instances>
  <instance>
  <uri>https://mainsite.com</uri>
  <method>GET</method>
  <param>Cache-Control</param>
  </instance>
  </instances>
  <count>1</count>
  <solution>&lt;p&gt;Whenever possible ensure the cache-control HTTP header is set with no-cache, no-store, must-revalidate; and that the pragma HTTP header is set with no-cache.&lt;/p&gt;</solution>
  <reference>&lt;p&gt;https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Web_Content_Caching&lt;/p&gt;</reference>
  <cweid>525</cweid>
  <wascid>13</wascid>
  <sourceid>3</sourceid>
</alertitem>
</alerts></site></OWASPZAPReport>