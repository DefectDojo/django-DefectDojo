[
  {
    "vulnerabilities": [
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2019-04-14T12:54:43.072009Z",
        "credit": [
          "Giorgi Dalakishvili of the Bank of Georgia"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n\n[Microsoft.AspNetCore](https://www.nuget.org/packages/Microsoft.AspNetCore) is an open-source and cross-platform framework for building modern cloud based internet connected applications, such as web apps, IoT apps and mobile backends.\n\n\nAffected versions of this package are vulnerable to Denial of Service (DoS).\nwhen ASP.NET Core improperly handles web requests. An attacker who successfully exploited this vulnerability remotely, without authentication and may cause denial of service against an ASP.NET Core web application.\r\n\r\n** NOTE: The vulnerability affects any Microsoft ASP.NET Core 2.2 applications if it is hosted on an IIS server running AspNetCoreModuleV2 (ANCM) prior to and including version 12.2.19024.2.\r\n\r\nThe vulnerability affects any Microsoft ASP.NET Core 1.0/1.1/2.1 application if they have explicitly opted into using the newer AspNetCoreModuleV2 (ANCM) prior to and including version 12.2.19024.2. **\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\r\n\r\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\r\n\r\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\r\n\r\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\r\n\r\nTwo common types of DoS vulnerabilities:\r\n\r\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\r\n\r\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\n\n## Remediation\n\nThere is no fixed version for `Microsoft.AspNetCore`.\n\n\n## References\n\n- [GitHub Issue](https://github.com/aspnet/Announcements/issues/352)\n\n- [Microsoft Security Advisory](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0815)\n",
        "disclosureTime": "2019-04-09T07:00:00Z",
        "exploit": "Not Defined",
        "fixedIn": [],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-DOTNET-MICROSOFTASPNETCORE-174184",
        "identifiers": {
          "CVE": [
            "CVE-2019-0815"
          ],
          "CWE": [
            "CWE-200"
          ]
        },
        "language": "dotnet",
        "modificationTime": "2019-04-14T14:50:43.271387Z",
        "moduleName": "microsoft.aspnetcore",
        "packageManager": "nuget",
        "packageName": "Microsoft.AspNetCore",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-04-14T07:00:00Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/aspnet/Announcements/issues/352"
          },
          {
            "title": "Microsoft Security Advisory",
            "url": "https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0815"
          }
        ],
        "semver": {
          "vulnerable": [
            "[0,]"
          ]
        },
        "severity": "high",
        "severityWithCritical": "high",
        "title": "Denial of Service (DoS)",
        "from": [
          "project@1.0.0",
          "Microsoft.AspNetCore.App@2.2.0",
          "Microsoft.AspNetCore@2.2.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "Microsoft.AspNetCore",
        "version": "2.2.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H/RL:O",
        "alternativeIds": [],
        "creationTime": "2019-01-09T13:00:30.836763Z",
        "credit": [
          "Barry Dorrans"
        ],
        "cvssScore": 5.9,
        "description": "## Overview\n[microsoft.aspnetcore.app](https://www.nuget.org/packages/microsoft.aspnetcore.app) is a provides a default set of APIs for building an ASP.NET Core application.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS). An unauthenticated attacker can cause a denial of service remotely, by issuing specially crafted requests to the .NET Core application. This is caused by an improper handling of a web request in ASP.NET Core. This CVE ID is unique from CVE-2019-0548.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLetΓÇÖs take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesnΓÇÖt match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `microsoft.aspnetcore.app` to version 2.2.1, 2.1.7 or higher.\n## References\n- [GitHub Issue](https://github.com/aspnet/Announcements/issues/334)\n- [Microsoft Security Guidance](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0564)\n",
        "disclosureTime": "2019-01-08T20:32:39Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "2.2.1",
          "2.1.7"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-DOTNET-MICROSOFTASPNETCOREAPP-72896",
        "identifiers": {
          "CVE": [
            "CVE-2019-0564"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "dotnet",
        "modificationTime": "2019-01-10T09:27:21.079398Z",
        "moduleName": "microsoft.aspnetcore.app",
        "packageManager": "nuget",
        "packageName": "Microsoft.AspNetCore.App",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-01-10T09:27:21.069255Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/aspnet/Announcements/issues/334"
          },
          {
            "title": "Microsoft Security Guidance",
            "url": "https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0564"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.2.0,2.2.1)",
            "[2.1.0,2.1.7)"
          ]
        },
        "severity": "medium",
        "severityWithCritical": "medium",
        "title": "Denial of Service (DoS)",
        "from": [
          "project@1.0.0",
          "Microsoft.AspNetCore.App@2.2.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "Microsoft.AspNetCore.App",
        "version": "2.2.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
        "alternativeIds": [],
        "creationTime": "2019-07-10T12:59:49.630871Z",
        "credit": [
          "Datalust"
        ],
        "cvssScore": 5.4,
        "description": "## Overview\n[microsoft.aspnetcore.server.httpsys](https://www.nuget.org/packages/Microsoft.AspNetCore.Server.HttpSys/) is an ASP.NET Core HTTP server that uses the Windows HTTP Server API.\n\nAffected versions of this package are vulnerable to Open Redirect. A spoofing vulnerability exists that could lead to an redirection. An attacker who successfully exploits this vulnerability could redirect a targeted user to a malicious website.\n## Remediation\nUpgrade `microsoft.aspnetcore.server.httpsys` to version 2.1.12, 2.2.6 or higher.\n## References\n- [GitHub Commit](https://github.com/aspnet/AspNetCore/commit/b9c8f3491937c5c756cfc244d1da5a956faca19e)\n- [GitHub Issue](https://github.com/aspnet/Announcements/issues/373)\n- [Microsoft Advisory](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-1075)\n",
        "disclosureTime": "2019-07-09T07:00:00Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "2.1.12",
          "2.2.6"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-DOTNET-MICROSOFTASPNETCORESERVERHTTPSYS-451562",
        "identifiers": {
          "CVE": [
            "CVE-2019-1075"
          ],
          "CWE": [
            "CWE-601"
          ]
        },
        "language": "dotnet",
        "modificationTime": "2020-06-12T14:37:00.791944Z",
        "moduleName": "microsoft.aspnetcore.server.httpsys",
        "packageManager": "nuget",
        "packageName": "Microsoft.AspNetCore.Server.HttpSys",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-07-10T12:46:32Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/aspnet/AspNetCore/commit/b9c8f3491937c5c756cfc244d1da5a956faca19e"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/aspnet/Announcements/issues/373"
          },
          {
            "title": "Microsoft Advisory",
            "url": "https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-1075"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.1.0, 2.1.12)",
            "[2.2.0, 2.2.6)"
          ]
        },
        "severity": "medium",
        "severityWithCritical": "medium",
        "title": "Open Redirect",
        "from": [
          "project@1.0.0",
          "Microsoft.AspNetCore.App@2.2.0",
          "Microsoft.AspNetCore.Server.HttpSys@2.2.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "Microsoft.AspNetCore.Server.HttpSys",
        "version": "2.2.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
        "alternativeIds": [],
        "creationTime": "2019-07-10T12:59:49.620809Z",
        "credit": [
          "Datalust"
        ],
        "cvssScore": 5.4,
        "description": "## Overview\n[microsoft.aspnetcore.server.iis](https://www.nuget.org/packages/Microsoft.AspNetCore.Server.IIS/) is a that provides support for hosting ASP.NET Core in IIS using the AspNetCoreModule.\n\nAffected versions of this package are vulnerable to Open Redirect. A spoofing vulnerability exists that could lead to an redirection. An attacker who successfully exploits this vulnerability could redirect a targeted user to a malicious website.\n## Remediation\nUpgrade `microsoft.aspnetcore.server.iis` to version 2.2.6 or higher.\n## References\n- [GitHub Commit](https://github.com/aspnet/AspNetCore/commit/b9c8f3491937c5c756cfc244d1da5a956faca19e)\n- [GitHub Issue](https://github.com/aspnet/Announcements/issues/373)\n- [Microsoft Advisory](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-1075)\n",
        "disclosureTime": "2019-07-09T07:00:00Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "2.2.6"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-DOTNET-MICROSOFTASPNETCORESERVERIIS-451561",
        "identifiers": {
          "CVE": [
            "CVE-2019-1075"
          ],
          "CWE": [
            "CWE-601"
          ]
        },
        "language": "dotnet",
        "modificationTime": "2020-06-12T14:37:02.665834Z",
        "moduleName": "microsoft.aspnetcore.server.iis",
        "packageManager": "nuget",
        "packageName": "Microsoft.AspNetCore.Server.IIS",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-07-10T12:46:32Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/aspnet/AspNetCore/commit/b9c8f3491937c5c756cfc244d1da5a956faca19e"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/aspnet/Announcements/issues/373"
          },
          {
            "title": "Microsoft Advisory",
            "url": "https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-1075"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.2.0, 2.2.6)"
          ]
        },
        "severity": "medium",
        "severityWithCritical": "medium",
        "title": "Open Redirect",
        "from": [
          "project@1.0.0",
          "Microsoft.AspNetCore.App@2.2.0",
          "Microsoft.AspNetCore.Server.IIS@2.2.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "Microsoft.AspNetCore.Server.IIS",
        "version": "2.2.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
        "alternativeIds": [],
        "creationTime": "2019-07-10T12:59:49.620809Z",
        "credit": [
          "Datalust"
        ],
        "cvssScore": 5.4,
        "description": "## Overview\n[microsoft.aspnetcore.server.iis](https://www.nuget.org/packages/Microsoft.AspNetCore.Server.IIS/) is a that provides support for hosting ASP.NET Core in IIS using the AspNetCoreModule.\n\nAffected versions of this package are vulnerable to Open Redirect. A spoofing vulnerability exists that could lead to an redirection. An attacker who successfully exploits this vulnerability could redirect a targeted user to a malicious website.\n## Remediation\nUpgrade `microsoft.aspnetcore.server.iis` to version 2.2.6 or higher.\n## References\n- [GitHub Commit](https://github.com/aspnet/AspNetCore/commit/b9c8f3491937c5c756cfc244d1da5a956faca19e)\n- [GitHub Issue](https://github.com/aspnet/Announcements/issues/373)\n- [Microsoft Advisory](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-1075)\n",
        "disclosureTime": "2019-07-09T07:00:00Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "2.2.6"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-DOTNET-MICROSOFTASPNETCORESERVERIIS-451561",
        "identifiers": {
          "CVE": [
            "CVE-2019-1075"
          ],
          "CWE": [
            "CWE-601"
          ]
        },
        "language": "dotnet",
        "modificationTime": "2020-06-12T14:37:02.665834Z",
        "moduleName": "microsoft.aspnetcore.server.iis",
        "packageManager": "nuget",
        "packageName": "Microsoft.AspNetCore.Server.IIS",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-07-10T12:46:32Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/aspnet/AspNetCore/commit/b9c8f3491937c5c756cfc244d1da5a956faca19e"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/aspnet/Announcements/issues/373"
          },
          {
            "title": "Microsoft Advisory",
            "url": "https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-1075"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.2.0, 2.2.6)"
          ]
        },
        "severity": "medium",
        "severityWithCritical": "medium",
        "title": "Open Redirect",
        "from": [
          "project@1.0.0",
          "Microsoft.AspNetCore.App@2.2.0",
          "Microsoft.AspNetCore@2.2.0",
          "Microsoft.AspNetCore.Server.IIS@2.2.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "Microsoft.AspNetCore.Server.IIS",
        "version": "2.2.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2019-09-11T13:56:02.052136Z",
        "credit": [
          "Ian Routledge (@ediblecode)"
        ],
        "cvssScore": 9,
        "description": "## Overview\n[Microsoft.AspNetCore.SpaServices](https://www.nuget.org/packages/Microsoft.AspNetCore.SpaServices/) is a package Helpers for building single-page applications on ASP.NET MVC Core.\n\nAffected versions of this package are vulnerable to Remote Code Execution (RCE). When a WebApp is created using vulnerable project templates, fails to properly sanitize requests. An attacker who successfully exploited this vulnerability could perform content injection attacks and run script in the security context of the logged-on user.\n## Remediation\nUpgrade `Microsoft.AspNetCore.SpaServices` to version 2.1.2, 2.2.1 or higher.\n## References\n- [GitHub Issue](https://github.com/aspnet/Announcements/issues/384)\n- [Microsoft Advisory](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-1302)\n",
        "disclosureTime": "2019-09-10T07:00:00Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "2.1.2",
          "2.2.1"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-DOTNET-MICROSOFTASPNETCORESPASERVICES-466519",
        "identifiers": {
          "CVE": [
            "CVE-2019-1302"
          ],
          "CWE": [
            "CWE-266"
          ]
        },
        "language": "dotnet",
        "modificationTime": "2020-06-12T14:36:56.283760Z",
        "moduleName": "microsoft.aspnetcore.spaservices",
        "packageManager": "nuget",
        "packageName": "Microsoft.AspNetCore.SpaServices",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-09-11T09:57:31Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/aspnet/Announcements/issues/384"
          },
          {
            "title": "Microsoft Advisory",
            "url": "https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-1302"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.1.0,2.1.2)",
            "[2.2.0,2.2.1)"
          ]
        },
        "severity": "high",
        "severityWithCritical": "critical",
        "title": "Remote Code Execution (RCE)",
        "from": [
          "project@1.0.0",
          "Microsoft.AspNetCore.App@2.2.0",
          "Microsoft.AspNetCore.SpaServices@2.2.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "Microsoft.AspNetCore.SpaServices",
        "version": "2.2.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2019-09-11T13:56:02.052136Z",
        "credit": [
          "Ian Routledge (@ediblecode)"
        ],
        "cvssScore": 9,
        "description": "## Overview\n[Microsoft.AspNetCore.SpaServices](https://www.nuget.org/packages/Microsoft.AspNetCore.SpaServices/) is a package Helpers for building single-page applications on ASP.NET MVC Core.\n\nAffected versions of this package are vulnerable to Remote Code Execution (RCE). When a WebApp is created using vulnerable project templates, fails to properly sanitize requests. An attacker who successfully exploited this vulnerability could perform content injection attacks and run script in the security context of the logged-on user.\n## Remediation\nUpgrade `Microsoft.AspNetCore.SpaServices` to version 2.1.2, 2.2.1 or higher.\n## References\n- [GitHub Issue](https://github.com/aspnet/Announcements/issues/384)\n- [Microsoft Advisory](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-1302)\n",
        "disclosureTime": "2019-09-10T07:00:00Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "2.1.2",
          "2.2.1"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-DOTNET-MICROSOFTASPNETCORESPASERVICES-466519",
        "identifiers": {
          "CVE": [
            "CVE-2019-1302"
          ],
          "CWE": [
            "CWE-266"
          ]
        },
        "language": "dotnet",
        "modificationTime": "2020-06-12T14:36:56.283760Z",
        "moduleName": "microsoft.aspnetcore.spaservices",
        "packageManager": "nuget",
        "packageName": "Microsoft.AspNetCore.SpaServices",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-09-11T09:57:31Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/aspnet/Announcements/issues/384"
          },
          {
            "title": "Microsoft Advisory",
            "url": "https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-1302"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.1.0,2.1.2)",
            "[2.2.0,2.2.1)"
          ]
        },
        "severity": "high",
        "severityWithCritical": "critical",
        "title": "Remote Code Execution (RCE)",
        "from": [
          "project@1.0.0",
          "Microsoft.AspNetCore.App@2.2.0",
          "Microsoft.AspNetCore.SpaServices.Extensions@2.2.0",
          "Microsoft.AspNetCore.SpaServices@2.2.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "Microsoft.AspNetCore.SpaServices",
        "version": "2.2.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H/RL:O",
        "alternativeIds": [],
        "creationTime": "2019-01-09T12:47:52.676198Z",
        "credit": [
          "Barry Dorrans"
        ],
        "cvssScore": 5.9,
        "description": "## Overview\n[Microsoft.AspNetCore.WebSockets](https://www.nuget.org/packages/Microsoft.AspNetCore.WebSockets) is an ASP.NET Core web socket middleware for use on top of opaque servers.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS). An unauthenticated attacker can cause a denial of service remotely, by issuing specially crafted requests to the .NET Core application. This is caused by an improper handling of a web request in ASP.NET Core. This CVE ID is unique from CVE-2019-0548.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLetΓÇÖs take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesnΓÇÖt match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `Microsoft.AspNetCore.WebSockets` to version 2.1.7, 2.2.1 or higher.\n## References\n- [GitHub Issue](https://github.com/aspnet/Announcements/issues/334)\n- [Microsoft Security Guidance](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0564)\n",
        "disclosureTime": "2019-01-08T20:32:39Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "2.1.7",
          "2.2.1"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-DOTNET-MICROSOFTASPNETCOREWEBSOCKETS-72891",
        "identifiers": {
          "CVE": [
            "CVE-2019-0564"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "dotnet",
        "modificationTime": "2020-06-12T14:36:55.646152Z",
        "moduleName": "microsoft.aspnetcore.websockets",
        "packageManager": "nuget",
        "packageName": "Microsoft.AspNetCore.WebSockets",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-01-10T09:27:21.069255Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/aspnet/Announcements/issues/334"
          },
          {
            "title": "Microsoft Security Guidance",
            "url": "https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0564"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.1.0,2.1.7)",
            "[2.2.0,2.2.1)"
          ]
        },
        "severity": "medium",
        "severityWithCritical": "medium",
        "title": "Denial of Service (DoS)",
        "from": [
          "project@1.0.0",
          "Microsoft.AspNetCore.App@2.2.0",
          "Microsoft.AspNetCore.WebSockets@2.2.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "Microsoft.AspNetCore.WebSockets",
        "version": "2.2.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2019-01-09T15:27:01.057215Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n[Microsoft.AspNetCore.WebSockets](https://www.nuget.org/packages/Microsoft.AspNetCore.WebSockets) is an ASP.NET Core web socket middleware for use on top of opaque servers.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS). If an application is hosted on Internet Information Server (IIS), a remote unauthenticated attacker can use a specially crafted request can cause a Denial of Service.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLetΓÇÖs take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesnΓÇÖt match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `Microsoft.AspNetCore.WebSockets` to version 2.1.7, 2.2.1 or higher.\n## References\n- [Microsoft Security Advisory](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0548)\n- [RHSA Security Advisory](https://access.redhat.com/errata/RHSA-2019:0040)\n",
        "disclosureTime": "2019-01-08T20:32:39Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "2.1.7",
          "2.2.1"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-DOTNET-MICROSOFTASPNETCOREWEBSOCKETS-72898",
        "identifiers": {
          "CVE": [
            "CVE-2019-0548"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "dotnet",
        "modificationTime": "2020-06-12T14:36:55.640951Z",
        "moduleName": "microsoft.aspnetcore.websockets",
        "packageManager": "nuget",
        "packageName": "Microsoft.AspNetCore.WebSockets",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-01-10T09:27:20.770391Z",
        "references": [
          {
            "title": "Microsoft Security Advisory",
            "url": "https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0548"
          },
          {
            "title": "RHSA Security Advisory",
            "url": "https://access.redhat.com/errata/RHSA-2019:0040"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.1.0,2.1.7)",
            "[2.2.0,2.2.1)"
          ]
        },
        "severity": "high",
        "severityWithCritical": "high",
        "title": "Denial of Service (DoS)",
        "from": [
          "project@1.0.0",
          "Microsoft.AspNetCore.App@2.2.0",
          "Microsoft.AspNetCore.WebSockets@2.2.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "Microsoft.AspNetCore.WebSockets",
        "version": "2.2.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H/RL:O",
        "alternativeIds": [],
        "creationTime": "2019-01-09T12:47:52.676198Z",
        "credit": [
          "Barry Dorrans"
        ],
        "cvssScore": 5.9,
        "description": "## Overview\n[Microsoft.AspNetCore.WebSockets](https://www.nuget.org/packages/Microsoft.AspNetCore.WebSockets) is an ASP.NET Core web socket middleware for use on top of opaque servers.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS). An unauthenticated attacker can cause a denial of service remotely, by issuing specially crafted requests to the .NET Core application. This is caused by an improper handling of a web request in ASP.NET Core. This CVE ID is unique from CVE-2019-0548.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLetΓÇÖs take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesnΓÇÖt match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `Microsoft.AspNetCore.WebSockets` to version 2.1.7, 2.2.1 or higher.\n## References\n- [GitHub Issue](https://github.com/aspnet/Announcements/issues/334)\n- [Microsoft Security Guidance](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0564)\n",
        "disclosureTime": "2019-01-08T20:32:39Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "2.1.7",
          "2.2.1"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-DOTNET-MICROSOFTASPNETCOREWEBSOCKETS-72891",
        "identifiers": {
          "CVE": [
            "CVE-2019-0564"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "dotnet",
        "modificationTime": "2020-06-12T14:36:55.646152Z",
        "moduleName": "microsoft.aspnetcore.websockets",
        "packageManager": "nuget",
        "packageName": "Microsoft.AspNetCore.WebSockets",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-01-10T09:27:21.069255Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/aspnet/Announcements/issues/334"
          },
          {
            "title": "Microsoft Security Guidance",
            "url": "https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0564"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.1.0,2.1.7)",
            "[2.2.0,2.2.1)"
          ]
        },
        "severity": "medium",
        "severityWithCritical": "medium",
        "title": "Denial of Service (DoS)",
        "from": [
          "project@1.0.0",
          "Microsoft.AspNetCore.App@2.2.0",
          "Microsoft.AspNetCore.Http.Connections@1.1.0",
          "Microsoft.AspNetCore.WebSockets@2.2.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "Microsoft.AspNetCore.WebSockets",
        "version": "2.2.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2019-01-09T15:27:01.057215Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n[Microsoft.AspNetCore.WebSockets](https://www.nuget.org/packages/Microsoft.AspNetCore.WebSockets) is an ASP.NET Core web socket middleware for use on top of opaque servers.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS). If an application is hosted on Internet Information Server (IIS), a remote unauthenticated attacker can use a specially crafted request can cause a Denial of Service.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLetΓÇÖs take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesnΓÇÖt match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `Microsoft.AspNetCore.WebSockets` to version 2.1.7, 2.2.1 or higher.\n## References\n- [Microsoft Security Advisory](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0548)\n- [RHSA Security Advisory](https://access.redhat.com/errata/RHSA-2019:0040)\n",
        "disclosureTime": "2019-01-08T20:32:39Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "2.1.7",
          "2.2.1"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-DOTNET-MICROSOFTASPNETCOREWEBSOCKETS-72898",
        "identifiers": {
          "CVE": [
            "CVE-2019-0548"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "dotnet",
        "modificationTime": "2020-06-12T14:36:55.640951Z",
        "moduleName": "microsoft.aspnetcore.websockets",
        "packageManager": "nuget",
        "packageName": "Microsoft.AspNetCore.WebSockets",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-01-10T09:27:20.770391Z",
        "references": [
          {
            "title": "Microsoft Security Advisory",
            "url": "https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0548"
          },
          {
            "title": "RHSA Security Advisory",
            "url": "https://access.redhat.com/errata/RHSA-2019:0040"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.1.0,2.1.7)",
            "[2.2.0,2.2.1)"
          ]
        },
        "severity": "high",
        "severityWithCritical": "high",
        "title": "Denial of Service (DoS)",
        "from": [
          "project@1.0.0",
          "Microsoft.AspNetCore.App@2.2.0",
          "Microsoft.AspNetCore.Http.Connections@1.1.0",
          "Microsoft.AspNetCore.WebSockets@2.2.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "Microsoft.AspNetCore.WebSockets",
        "version": "2.2.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H/RL:O",
        "alternativeIds": [],
        "creationTime": "2019-01-09T12:47:52.676198Z",
        "credit": [
          "Barry Dorrans"
        ],
        "cvssScore": 5.9,
        "description": "## Overview\n[Microsoft.AspNetCore.WebSockets](https://www.nuget.org/packages/Microsoft.AspNetCore.WebSockets) is an ASP.NET Core web socket middleware for use on top of opaque servers.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS). An unauthenticated attacker can cause a denial of service remotely, by issuing specially crafted requests to the .NET Core application. This is caused by an improper handling of a web request in ASP.NET Core. This CVE ID is unique from CVE-2019-0548.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLetΓÇÖs take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesnΓÇÖt match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `Microsoft.AspNetCore.WebSockets` to version 2.1.7, 2.2.1 or higher.\n## References\n- [GitHub Issue](https://github.com/aspnet/Announcements/issues/334)\n- [Microsoft Security Guidance](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0564)\n",
        "disclosureTime": "2019-01-08T20:32:39Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "2.1.7",
          "2.2.1"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-DOTNET-MICROSOFTASPNETCOREWEBSOCKETS-72891",
        "identifiers": {
          "CVE": [
            "CVE-2019-0564"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "dotnet",
        "modificationTime": "2020-06-12T14:36:55.646152Z",
        "moduleName": "microsoft.aspnetcore.websockets",
        "packageManager": "nuget",
        "packageName": "Microsoft.AspNetCore.WebSockets",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-01-10T09:27:21.069255Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/aspnet/Announcements/issues/334"
          },
          {
            "title": "Microsoft Security Guidance",
            "url": "https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0564"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.1.0,2.1.7)",
            "[2.2.0,2.2.1)"
          ]
        },
        "severity": "medium",
        "severityWithCritical": "medium",
        "title": "Denial of Service (DoS)",
        "from": [
          "project@1.0.0",
          "Microsoft.AspNetCore.App@2.2.0",
          "Microsoft.AspNetCore.SpaServices.Extensions@2.2.0",
          "Microsoft.AspNetCore.WebSockets@2.2.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "Microsoft.AspNetCore.WebSockets",
        "version": "2.2.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2019-01-09T15:27:01.057215Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n[Microsoft.AspNetCore.WebSockets](https://www.nuget.org/packages/Microsoft.AspNetCore.WebSockets) is an ASP.NET Core web socket middleware for use on top of opaque servers.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS). If an application is hosted on Internet Information Server (IIS), a remote unauthenticated attacker can use a specially crafted request can cause a Denial of Service.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLetΓÇÖs take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesnΓÇÖt match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `Microsoft.AspNetCore.WebSockets` to version 2.1.7, 2.2.1 or higher.\n## References\n- [Microsoft Security Advisory](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0548)\n- [RHSA Security Advisory](https://access.redhat.com/errata/RHSA-2019:0040)\n",
        "disclosureTime": "2019-01-08T20:32:39Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "2.1.7",
          "2.2.1"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-DOTNET-MICROSOFTASPNETCOREWEBSOCKETS-72898",
        "identifiers": {
          "CVE": [
            "CVE-2019-0548"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "dotnet",
        "modificationTime": "2020-06-12T14:36:55.640951Z",
        "moduleName": "microsoft.aspnetcore.websockets",
        "packageManager": "nuget",
        "packageName": "Microsoft.AspNetCore.WebSockets",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-01-10T09:27:20.770391Z",
        "references": [
          {
            "title": "Microsoft Security Advisory",
            "url": "https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0548"
          },
          {
            "title": "RHSA Security Advisory",
            "url": "https://access.redhat.com/errata/RHSA-2019:0040"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.1.0,2.1.7)",
            "[2.2.0,2.2.1)"
          ]
        },
        "severity": "high",
        "severityWithCritical": "high",
        "title": "Denial of Service (DoS)",
        "from": [
          "project@1.0.0",
          "Microsoft.AspNetCore.App@2.2.0",
          "Microsoft.AspNetCore.SpaServices.Extensions@2.2.0",
          "Microsoft.AspNetCore.WebSockets@2.2.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "Microsoft.AspNetCore.WebSockets",
        "version": "2.2.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:N/RL:O",
        "alternativeIds": [],
        "creationTime": "2019-03-07T12:44:14.822656Z",
        "credit": [
          "Jonathan Birch of Microsoft Corporation"
        ],
        "cvssScore": 7.4,
        "description": "## Overview\n[Microsoft.NETCore.App](https://www.nuget.org/packages/Microsoft.NETCore.App) is a set of .NET API's that are included in the default .NET Core application model.\n\nAffected versions of this package are vulnerable to Authentication Bypass by Spoofing due to the way they parse URL's. An attacker could use it to bypass security logic intended to ensure that a user-provided URL belonged to a specific hostname or a subdomain of that hostname. \r\nTo exploit the vulnerability, an attacker must provide a URL string to an application that attempts to verify that the URL belongs to a specific hostname or to a subdomain of that hostname. The application must then make an HTTP request to the attacker-provided URL either directly or by sending a processed version of the attacker-provided URL to a web browser.\n## Remediation\nUpgrade `Microsoft.NETCore.App` to version 2.1.8, 2.2.2 or higher.\n## References\n- [GitHub Issue](https://github.com/dotnet/announcements/issues/97)\n- [Microsoft Security Portal](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0657)\n- [RedHat Bugzilla Bug](https://bugzilla.redhat.com/show_bug.cgi?id=1673891)\n",
        "disclosureTime": "2019-02-12T00:00:00Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "2.1.8",
          "2.2.2"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-DOTNET-MICROSOFTNETCOREAPP-173754",
        "identifiers": {
          "CVE": [
            "CVE-2019-0657"
          ],
          "CWE": [
            "CWE-290"
          ]
        },
        "language": "dotnet",
        "modificationTime": "2020-06-12T14:36:41.870760Z",
        "moduleName": "microsoft.netcore.app",
        "packageManager": "nuget",
        "packageName": "Microsoft.NETCore.App",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-03-06T00:18:35Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/dotnet/announcements/issues/97"
          },
          {
            "title": "Microsoft Security Portal",
            "url": "https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0657"
          },
          {
            "title": "RedHat Bugzilla Bug",
            "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1673891"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.1.0,2.1.8)",
            "[2.2.0,2.2.2)"
          ]
        },
        "severity": "high",
        "severityWithCritical": "high",
        "title": "Authentication Bypass by Spoofing",
        "from": [
          "project@1.0.0",
          "Microsoft.NETCore.App@2.2.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "Microsoft.NETCore.App",
        "version": "2.2.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2019-05-15T16:27:39.878053Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n\n[Microsoft.NETCore.App](https://www.nuget.org/packages/Microsoft.NETCore.App) is a set of .NET API's that are included in the default .NET Core application model.\n\n\nAffected versions of this package are vulnerable to Denial of Service (DoS).\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\r\n\r\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\r\n\r\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\r\n\r\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\r\n\r\nTwo common types of DoS vulnerabilities:\r\n\r\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\r\n\r\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\n\n## Remediation\n\nUpgrade `Microsoft.NETCore.App` to version 2.1.11, 2.2.5 or higher.\n\n\n## References\n\n- [Microsoft Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md)\n\n- [Microsoft Security Advisory](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0982)\n",
        "disclosureTime": "2019-05-14T07:00:00Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "2.1.11",
          "2.2.5"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-DOTNET-MICROSOFTNETCOREAPP-174710",
        "identifiers": {
          "CVE": [
            "CVE-2019-0982"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "dotnet",
        "modificationTime": "2020-05-13T15:22:23.048741Z",
        "moduleName": "microsoft.netcore.app",
        "packageManager": "nuget",
        "packageName": "Microsoft.NETCore.App",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-05-15T16:27:51Z",
        "references": [
          {
            "title": "Microsoft Release Notes",
            "url": "https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md"
          },
          {
            "title": "Microsoft Security Advisory",
            "url": "https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0982"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.1.0, 2.1.11)",
            "[2.2.0, 2.2.5)"
          ]
        },
        "severity": "high",
        "severityWithCritical": "high",
        "title": "Denial of Service (DoS)",
        "from": [
          "project@1.0.0",
          "Microsoft.NETCore.App@2.2.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "Microsoft.NETCore.App",
        "version": "2.2.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
        "alternativeIds": [],
        "creationTime": "2019-07-10T12:46:11.368301Z",
        "credit": [
          "Datalust"
        ],
        "cvssScore": 5.4,
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Open Redirect. A spoofing vulnerability exists that could lead to an redirection. An attacker who successfully exploits this vulnerability could redirect a targeted user to a malicious website.\n## Remediation\nUpgrade `microsoft.netcore.app` to version 2.1.12, 2.2.6 or higher.\n## References\n- [GitHub Commit](https://github.com/aspnet/AspNetCore/commit/b9c8f3491937c5c756cfc244d1da5a956faca19e)\n- [GitHub Issue](https://github.com/aspnet/Announcements/issues/373)\n- [Microsoft Advisory](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-1075)\n",
        "disclosureTime": "2019-07-09T07:00:00Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "2.1.12",
          "2.2.6"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-DOTNET-MICROSOFTNETCOREAPP-451559",
        "identifiers": {
          "CVE": [
            "CVE-2019-1075"
          ],
          "CWE": [
            "CWE-601"
          ]
        },
        "language": "dotnet",
        "modificationTime": "2020-06-12T14:37:05.822041Z",
        "moduleName": "microsoft.netcore.app",
        "packageManager": "nuget",
        "packageName": "Microsoft.NETCore.App",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-07-10T12:46:32Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/aspnet/AspNetCore/commit/b9c8f3491937c5c756cfc244d1da5a956faca19e"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/aspnet/Announcements/issues/373"
          },
          {
            "title": "Microsoft Advisory",
            "url": "https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-1075"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.1.0 ,2.1.12)",
            "[2.2.0,2.2.6)"
          ]
        },
        "severity": "medium",
        "severityWithCritical": "medium",
        "title": "Open Redirect",
        "from": [
          "project@1.0.0",
          "Microsoft.NETCore.App@2.2.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "Microsoft.NETCore.App",
        "version": "2.2.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H/RL:O",
        "alternativeIds": [],
        "creationTime": "2019-01-09T13:00:30.826174Z",
        "credit": [
          "Barry Dorrans"
        ],
        "cvssScore": 5.9,
        "description": "## Overview\n[Microsoft.NETCore.App](https://www.nuget.org/packages/Microsoft.NETCore.App) is a set of .NET API's that are included in the default .NET Core application model.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS). An unauthenticated attacker can cause a denial of service remotely, by issuing specially crafted requests to the .NET Core application. This is caused by an improper handling of a web request in ASP.NET Core. This CVE ID is unique from CVE-2019-0548.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLetΓÇÖs take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesnΓÇÖt match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `Microsoft.NETCore.App` to version 2.2.1, 2.1.7 or higher.\n## References\n- [GitHub Issue](https://github.com/aspnet/Announcements/issues/334)\n- [Microsoft Security Guidance](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0564)\n",
        "disclosureTime": "2019-01-08T20:32:39Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "2.2.1",
          "2.1.7"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-DOTNET-MICROSOFTNETCOREAPP-72895",
        "identifiers": {
          "CVE": [
            "CVE-2019-0564"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "dotnet",
        "modificationTime": "2019-01-10T09:27:20.978680Z",
        "moduleName": "microsoft.netcore.app",
        "packageManager": "nuget",
        "packageName": "Microsoft.NETCore.App",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-01-10T09:27:21.069255Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/aspnet/Announcements/issues/334"
          },
          {
            "title": "Microsoft Security Guidance",
            "url": "https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0564"
          }
        ],
        "semver": {
          "vulnerable": [
            "[2.2.0,2.2.1)",
            "[2.1.0,2.1.7)"
          ]
        },
        "severity": "medium",
        "severityWithCritical": "medium",
        "title": "Denial of Service (DoS)",
        "from": [
          "project@1.0.0",
          "Microsoft.NETCore.App@2.2.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "Microsoft.NETCore.App",
        "version": "2.2.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H/RL:O",
        "alternativeIds": [],
        "creationTime": "2019-01-09T13:00:30.815994Z",
        "credit": [
          "Barry Dorrans"
        ],
        "cvssScore": 5.9,
        "description": "## Overview\n[System.Net.WebSockets.WebSocketProtocol](https://www.nuget.org/packages/System.Net.WebSockets.WebSocketProtocol) is a provides the WebSocketProtocol class, which allows creating a websocket from a connected stream using WebSocketsProtocol.CreateFromConnectedStream.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS). An unauthenticated attacker can cause a denial of service remotely, by issuing specially crafted requests to the .NET Core application. This is caused by an improper handling of a web request in ASP.NET Core. This CVE ID is unique from CVE-2019-0548.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLetΓÇÖs take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesnΓÇÖt match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `System.Net.WebSockets.WebSocketProtocol` to version 4.5.3 or higher.\n## References\n- [GitHub Issue](https://github.com/aspnet/Announcements/issues/334)\n- [Microsoft Security Guidance](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0564)\n",
        "disclosureTime": "2019-01-08T20:32:39Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "4.5.3"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-DOTNET-SYSTEMNETWEBSOCKETSWEBSOCKETPROTOCOL-72894",
        "identifiers": {
          "CVE": [
            "CVE-2019-0564"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "dotnet",
        "modificationTime": "2019-01-10T09:27:20.995924Z",
        "moduleName": "system.net.websockets.websocketprotocol",
        "packageManager": "nuget",
        "packageName": "System.Net.WebSockets.WebSocketProtocol",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-01-10T09:27:21.069255Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/aspnet/Announcements/issues/334"
          },
          {
            "title": "Microsoft Security Guidance",
            "url": "https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0564"
          }
        ],
        "semver": {
          "vulnerable": [
            "[4.5.0,4.5.3)"
          ]
        },
        "severity": "medium",
        "severityWithCritical": "medium",
        "title": "Denial of Service (DoS)",
        "from": [
          "project@1.0.0",
          "Microsoft.AspNetCore.App@2.2.0",
          "Microsoft.AspNetCore.Http.Connections@1.1.0",
          "Microsoft.AspNetCore.WebSockets@2.2.0",
          "System.Net.WebSockets.WebSocketProtocol@4.5.1"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "System.Net.WebSockets.WebSocketProtocol",
        "version": "4.5.1"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2019-05-15T16:00:51.866263Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n\n[System.Text.RegularExpressions](https://www.nuget.org/packages/System.Text.RegularExpressions/) is a regular expression engine.\n\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS)\ndue to improperly processing of RegEx strings.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLetΓÇÖs take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesnΓÇÖt match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\n\nUpgrade `System.Text.RegularExpressions` to version 4.3.1 or higher.\n\n\n## References\n\n- [GitHub Issue](https://github.com/dotnet/announcements/issues/111)\n\n- [Microsoft Security Advisory](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0820)\n",
        "disclosureTime": "2019-05-14T07:00:00Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "4.3.1"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-DOTNET-SYSTEMTEXTREGULAREXPRESSIONS-174708",
        "identifiers": {
          "CVE": [
            "CVE-2019-0820"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "dotnet",
        "modificationTime": "2019-05-16T17:17:39.462702Z",
        "moduleName": "system.text.regularexpressions",
        "packageManager": "nuget",
        "packageName": "System.Text.RegularExpressions",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-05-16T15:55:53Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/dotnet/announcements/issues/111"
          },
          {
            "title": "Microsoft Security Advisory",
            "url": "https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0820"
          }
        ],
        "semver": {
          "vulnerable": [
            "[4.3.0, 4.3.1)"
          ]
        },
        "severity": "high",
        "severityWithCritical": "high",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "from": [
          "project@1.0.0",
          "Telerik.UI.for.AspNet.Core@2021.1.224",
          "System.Data.Common@4.1.0",
          "System.Text.RegularExpressions@4.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "System.Text.RegularExpressions",
        "version": "4.3.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2019-05-15T16:00:51.866263Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n\n[System.Text.RegularExpressions](https://www.nuget.org/packages/System.Text.RegularExpressions/) is a regular expression engine.\n\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS)\ndue to improperly processing of RegEx strings.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLetΓÇÖs take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesnΓÇÖt match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\n\nUpgrade `System.Text.RegularExpressions` to version 4.3.1 or higher.\n\n\n## References\n\n- [GitHub Issue](https://github.com/dotnet/announcements/issues/111)\n\n- [Microsoft Security Advisory](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0820)\n",
        "disclosureTime": "2019-05-14T07:00:00Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "4.3.1"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-DOTNET-SYSTEMTEXTREGULAREXPRESSIONS-174708",
        "identifiers": {
          "CVE": [
            "CVE-2019-0820"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "dotnet",
        "modificationTime": "2019-05-16T17:17:39.462702Z",
        "moduleName": "system.text.regularexpressions",
        "packageManager": "nuget",
        "packageName": "System.Text.RegularExpressions",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-05-16T15:55:53Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/dotnet/announcements/issues/111"
          },
          {
            "title": "Microsoft Security Advisory",
            "url": "https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0820"
          }
        ],
        "semver": {
          "vulnerable": [
            "[4.3.0, 4.3.1)"
          ]
        },
        "severity": "high",
        "severityWithCritical": "high",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "from": [
          "project@1.0.0",
          "Microsoft.AspNetCore.App@2.2.0",
          "Microsoft.AspNetCore.Authentication.JwtBearer@2.2.0",
          "Microsoft.IdentityModel.Protocols.OpenIdConnect@5.3.0",
          "Microsoft.IdentityModel.Protocols@5.3.0",
          "Microsoft.IdentityModel.Tokens@5.4.0",
          "System.Text.RegularExpressions@4.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "System.Text.RegularExpressions",
        "version": "4.3.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2019-05-15T16:00:51.866263Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n\n[System.Text.RegularExpressions](https://www.nuget.org/packages/System.Text.RegularExpressions/) is a regular expression engine.\n\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS)\ndue to improperly processing of RegEx strings.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLetΓÇÖs take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesnΓÇÖt match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\n\nUpgrade `System.Text.RegularExpressions` to version 4.3.1 or higher.\n\n\n## References\n\n- [GitHub Issue](https://github.com/dotnet/announcements/issues/111)\n\n- [Microsoft Security Advisory](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0820)\n",
        "disclosureTime": "2019-05-14T07:00:00Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "4.3.1"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-DOTNET-SYSTEMTEXTREGULAREXPRESSIONS-174708",
        "identifiers": {
          "CVE": [
            "CVE-2019-0820"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "dotnet",
        "modificationTime": "2019-05-16T17:17:39.462702Z",
        "moduleName": "system.text.regularexpressions",
        "packageManager": "nuget",
        "packageName": "System.Text.RegularExpressions",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-05-16T15:55:53Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/dotnet/announcements/issues/111"
          },
          {
            "title": "Microsoft Security Advisory",
            "url": "https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0820"
          }
        ],
        "semver": {
          "vulnerable": [
            "[4.3.0, 4.3.1)"
          ]
        },
        "severity": "high",
        "severityWithCritical": "high",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "from": [
          "project@1.0.0",
          "Microsoft.AspNetCore.App@2.2.0",
          "Microsoft.AspNetCore.Authentication.JwtBearer@2.2.0",
          "Microsoft.IdentityModel.Protocols.OpenIdConnect@5.3.0",
          "Microsoft.IdentityModel.Protocols@5.3.0",
          "Microsoft.IdentityModel.Tokens@5.4.0",
          "System.Runtime.Serialization.Xml@4.3.0",
          "System.Private.DataContractSerialization@4.3.0",
          "System.Text.RegularExpressions@4.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "System.Text.RegularExpressions",
        "version": "4.3.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2019-05-15T16:00:51.866263Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n\n[System.Text.RegularExpressions](https://www.nuget.org/packages/System.Text.RegularExpressions/) is a regular expression engine.\n\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS)\ndue to improperly processing of RegEx strings.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLetΓÇÖs take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesnΓÇÖt match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\n\nUpgrade `System.Text.RegularExpressions` to version 4.3.1 or higher.\n\n\n## References\n\n- [GitHub Issue](https://github.com/dotnet/announcements/issues/111)\n\n- [Microsoft Security Advisory](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0820)\n",
        "disclosureTime": "2019-05-14T07:00:00Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "4.3.1"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-DOTNET-SYSTEMTEXTREGULAREXPRESSIONS-174708",
        "identifiers": {
          "CVE": [
            "CVE-2019-0820"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "dotnet",
        "modificationTime": "2019-05-16T17:17:39.462702Z",
        "moduleName": "system.text.regularexpressions",
        "packageManager": "nuget",
        "packageName": "System.Text.RegularExpressions",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-05-16T15:55:53Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/dotnet/announcements/issues/111"
          },
          {
            "title": "Microsoft Security Advisory",
            "url": "https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0820"
          }
        ],
        "semver": {
          "vulnerable": [
            "[4.3.0, 4.3.1)"
          ]
        },
        "severity": "high",
        "severityWithCritical": "high",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "from": [
          "project@1.0.0",
          "Microsoft.AspNetCore.App@2.2.0",
          "Microsoft.AspNetCore.Authentication.JwtBearer@2.2.0",
          "Microsoft.IdentityModel.Protocols.OpenIdConnect@5.3.0",
          "Microsoft.IdentityModel.Protocols@5.3.0",
          "Microsoft.IdentityModel.Tokens@5.4.0",
          "System.Runtime.Serialization.Xml@4.3.0",
          "System.Private.DataContractSerialization@4.3.0",
          "System.Xml.ReaderWriter@4.3.0",
          "System.Text.RegularExpressions@4.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "System.Text.RegularExpressions",
        "version": "4.3.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2019-05-15T16:00:51.866263Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n\n[System.Text.RegularExpressions](https://www.nuget.org/packages/System.Text.RegularExpressions/) is a regular expression engine.\n\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS)\ndue to improperly processing of RegEx strings.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLetΓÇÖs take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesnΓÇÖt match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\n\nUpgrade `System.Text.RegularExpressions` to version 4.3.1 or higher.\n\n\n## References\n\n- [GitHub Issue](https://github.com/dotnet/announcements/issues/111)\n\n- [Microsoft Security Advisory](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0820)\n",
        "disclosureTime": "2019-05-14T07:00:00Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "4.3.1"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-DOTNET-SYSTEMTEXTREGULAREXPRESSIONS-174708",
        "identifiers": {
          "CVE": [
            "CVE-2019-0820"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "dotnet",
        "modificationTime": "2019-05-16T17:17:39.462702Z",
        "moduleName": "system.text.regularexpressions",
        "packageManager": "nuget",
        "packageName": "System.Text.RegularExpressions",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-05-16T15:55:53Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/dotnet/announcements/issues/111"
          },
          {
            "title": "Microsoft Security Advisory",
            "url": "https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0820"
          }
        ],
        "semver": {
          "vulnerable": [
            "[4.3.0, 4.3.1)"
          ]
        },
        "severity": "high",
        "severityWithCritical": "high",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "from": [
          "project@1.0.0",
          "Microsoft.AspNetCore.App@2.2.0",
          "Microsoft.AspNetCore.Authentication.JwtBearer@2.2.0",
          "Microsoft.IdentityModel.Protocols.OpenIdConnect@5.3.0",
          "Microsoft.IdentityModel.Protocols@5.3.0",
          "Microsoft.IdentityModel.Tokens@5.4.0",
          "System.Runtime.Serialization.Xml@4.3.0",
          "System.Private.DataContractSerialization@4.3.0",
          "System.Xml.XmlSerializer@4.3.0",
          "System.Text.RegularExpressions@4.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "System.Text.RegularExpressions",
        "version": "4.3.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2019-05-15T16:00:51.866263Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n\n[System.Text.RegularExpressions](https://www.nuget.org/packages/System.Text.RegularExpressions/) is a regular expression engine.\n\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS)\ndue to improperly processing of RegEx strings.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLetΓÇÖs take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesnΓÇÖt match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\n\nUpgrade `System.Text.RegularExpressions` to version 4.3.1 or higher.\n\n\n## References\n\n- [GitHub Issue](https://github.com/dotnet/announcements/issues/111)\n\n- [Microsoft Security Advisory](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0820)\n",
        "disclosureTime": "2019-05-14T07:00:00Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "4.3.1"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-DOTNET-SYSTEMTEXTREGULAREXPRESSIONS-174708",
        "identifiers": {
          "CVE": [
            "CVE-2019-0820"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "dotnet",
        "modificationTime": "2019-05-16T17:17:39.462702Z",
        "moduleName": "system.text.regularexpressions",
        "packageManager": "nuget",
        "packageName": "System.Text.RegularExpressions",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-05-16T15:55:53Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/dotnet/announcements/issues/111"
          },
          {
            "title": "Microsoft Security Advisory",
            "url": "https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0820"
          }
        ],
        "semver": {
          "vulnerable": [
            "[4.3.0, 4.3.1)"
          ]
        },
        "severity": "high",
        "severityWithCritical": "high",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "from": [
          "project@1.0.0",
          "Telerik.UI.for.AspNet.Core@2021.1.224",
          "Microsoft.AspNetCore.Mvc@2.2.0",
          "Microsoft.AspNetCore.Mvc.Localization@2.2.0",
          "Microsoft.AspNetCore.Mvc.Razor@2.2.0",
          "Microsoft.AspNetCore.Mvc.Razor.Extensions@2.2.0",
          "Microsoft.CodeAnalysis.Razor@2.2.0",
          "Microsoft.CodeAnalysis.CSharp@2.8.0",
          "Microsoft.CodeAnalysis.Common@2.8.0",
          "System.Xml.ReaderWriter@4.3.0",
          "System.Text.RegularExpressions@4.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "System.Text.RegularExpressions",
        "version": "4.3.0"
      }
    ],
    "ok": false,
    "dependencyCount": 309,
    "org": "company-poc",
    "policy": "# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.19.0\nignore: {}\npatch: {}\n",
    "isPrivate": true,
    "licensesPolicy": {
      "severities": {},
      "orgLicenseRules": {
        "AGPL-1.0": {
          "licenseType": "AGPL-1.0",
          "severity": "high",
          "instructions": ""
        },
        "AGPL-3.0": {
          "licenseType": "AGPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "Artistic-1.0": {
          "licenseType": "Artistic-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "Artistic-2.0": {
          "licenseType": "Artistic-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "CDDL-1.0": {
          "licenseType": "CDDL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "CPOL-1.02": {
          "licenseType": "CPOL-1.02",
          "severity": "high",
          "instructions": ""
        },
        "EPL-1.0": {
          "licenseType": "EPL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "GPL-2.0": {
          "licenseType": "GPL-2.0",
          "severity": "high",
          "instructions": ""
        },
        "GPL-3.0": {
          "licenseType": "GPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "LGPL-2.0": {
          "licenseType": "LGPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-2.1": {
          "licenseType": "LGPL-2.1",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-3.0": {
          "licenseType": "LGPL-3.0",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-1.1": {
          "licenseType": "MPL-1.1",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-2.0": {
          "licenseType": "MPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "MS-RL": {
          "licenseType": "MS-RL",
          "severity": "medium",
          "instructions": ""
        },
        "SimPL-2.0": {
          "licenseType": "SimPL-2.0",
          "severity": "high",
          "instructions": ""
        }
      }
    },
    "packageManager": "nuget",
    "projectId": "8ec8f901-adfb-45e5-89a7-17946c344797",
    "ignoreSettings": null,
    "summary": "24 vulnerable dependency paths",
    "filesystemPolicy": false,
    "filtered": {
      "ignore": [],
      "patch": []
    },
    "uniqueCount": 13,
    "targetFile": "company.Api.project\\src\\obj\\project.assets.json",
    "projectName": "project",
    "foundProjectCount": 1,
    "displayTargetFile": "company.Api.project\\src\\obj\\project.assets.json",
    "path": "C:\\Users\\uac\\source\\repos\\project"
  },
  {
    "vulnerabilities": [
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2020-07-16T08:19:48.462528Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 8.1,
        "description": "## Overview\n[ajv](https://www.npmjs.com/package/ajv) is an Another JSON Schema Validator\n\nAffected versions of this package are vulnerable to Prototype Pollution. A carefully crafted JSON schema could be provided that allows execution of other code by prototype pollution. (While untrusted schemas are recommended against, the worst case of an untrusted schema should be a denial of service, not execution of code.)\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of ΓÇ£pathΓÇ¥, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototypeΓÇö use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. ΓÇ£JavaScript prototype pollution attack in NodeJS application.ΓÇ¥ GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `ajv` to version 6.12.3 or higher.\n## References\n- [HackerOne Report](https://hackerone.com/bugs?subject=user&report_id=894259)\n",
        "disclosureTime": "2020-07-16T08:14:41Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "6.12.3"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-AJV-584908",
        "identifiers": {
          "CVE": [
            "CVE-2020-15366"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "js",
        "modificationTime": "2020-07-16T13:58:04.600521Z",
        "moduleName": "ajv",
        "packageManager": "npm",
        "packageName": "ajv",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-07-16T13:58:04Z",
        "references": [
          {
            "title": "HackerOne Report",
            "url": "https://hackerone.com/bugs?subject=user&report_id=894259"
          }
        ],
        "semver": {
          "vulnerable": [
            "<6.12.3"
          ]
        },
        "severity": "high",
        "severityWithCritical": "high",
        "title": "Prototype Pollution",
        "from": [
          "email-template-manager@0.0.0",
          "node-sass@4.12.0",
          "request@2.88.0",
          "har-validator@5.1.3",
          "ajv@6.6.2"
        ],
        "upgradePath": [
          false,
          "node-sass@4.12.0",
          "request@2.88.0",
          "har-validator@5.1.3",
          "ajv@6.12.3"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "ajv",
        "version": "6.6.2"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2020-07-16T08:19:48.462528Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 8.1,
        "description": "## Overview\n[ajv](https://www.npmjs.com/package/ajv) is an Another JSON Schema Validator\n\nAffected versions of this package are vulnerable to Prototype Pollution. A carefully crafted JSON schema could be provided that allows execution of other code by prototype pollution. (While untrusted schemas are recommended against, the worst case of an untrusted schema should be a denial of service, not execution of code.)\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of ΓÇ£pathΓÇ¥, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototypeΓÇö use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. ΓÇ£JavaScript prototype pollution attack in NodeJS application.ΓÇ¥ GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `ajv` to version 6.12.3 or higher.\n## References\n- [HackerOne Report](https://hackerone.com/bugs?subject=user&report_id=894259)\n",
        "disclosureTime": "2020-07-16T08:14:41Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "6.12.3"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-AJV-584908",
        "identifiers": {
          "CVE": [
            "CVE-2020-15366"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "js",
        "modificationTime": "2020-07-16T13:58:04.600521Z",
        "moduleName": "ajv",
        "packageManager": "npm",
        "packageName": "ajv",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-07-16T13:58:04Z",
        "references": [
          {
            "title": "HackerOne Report",
            "url": "https://hackerone.com/bugs?subject=user&report_id=894259"
          }
        ],
        "semver": {
          "vulnerable": [
            "<6.12.3"
          ]
        },
        "severity": "high",
        "severityWithCritical": "high",
        "title": "Prototype Pollution",
        "from": [
          "email-template-manager@0.0.0",
          "ng2-pdf-viewer@6.0.2",
          "pdfjs-dist@2.2.228",
          "worker-loader@2.0.0",
          "schema-utils@0.4.7",
          "ajv@6.6.2"
        ],
        "upgradePath": [
          false,
          "ng2-pdf-viewer@6.0.2",
          "pdfjs-dist@2.2.228",
          "worker-loader@2.0.0",
          "schema-utils@0.4.7",
          "ajv@6.12.3"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "ajv",
        "version": "6.6.2"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2020-07-16T08:19:48.462528Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 8.1,
        "description": "## Overview\n[ajv](https://www.npmjs.com/package/ajv) is an Another JSON Schema Validator\n\nAffected versions of this package are vulnerable to Prototype Pollution. A carefully crafted JSON schema could be provided that allows execution of other code by prototype pollution. (While untrusted schemas are recommended against, the worst case of an untrusted schema should be a denial of service, not execution of code.)\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of ΓÇ£pathΓÇ¥, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototypeΓÇö use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. ΓÇ£JavaScript prototype pollution attack in NodeJS application.ΓÇ¥ GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `ajv` to version 6.12.3 or higher.\n## References\n- [HackerOne Report](https://hackerone.com/bugs?subject=user&report_id=894259)\n",
        "disclosureTime": "2020-07-16T08:14:41Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "6.12.3"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-AJV-584908",
        "identifiers": {
          "CVE": [
            "CVE-2020-15366"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "js",
        "modificationTime": "2020-07-16T13:58:04.600521Z",
        "moduleName": "ajv",
        "packageManager": "npm",
        "packageName": "ajv",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-07-16T13:58:04Z",
        "references": [
          {
            "title": "HackerOne Report",
            "url": "https://hackerone.com/bugs?subject=user&report_id=894259"
          }
        ],
        "semver": {
          "vulnerable": [
            "<6.12.3"
          ]
        },
        "severity": "high",
        "severityWithCritical": "high",
        "title": "Prototype Pollution",
        "from": [
          "email-template-manager@0.0.0",
          "node-sass@4.12.0",
          "node-gyp@3.8.0",
          "request@2.88.0",
          "har-validator@5.1.3",
          "ajv@6.6.2"
        ],
        "upgradePath": [
          false,
          "node-sass@4.12.0",
          "node-gyp@3.8.0",
          "request@2.88.0",
          "har-validator@5.1.3",
          "ajv@6.12.3"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "ajv",
        "version": "6.6.2"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:H/UI:R/S:U/C:L/I:L/A:L",
        "alternativeIds": [],
        "creationTime": "2021-02-09T16:38:25.910081Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 3.9,
        "description": "## Overview\n[@angular/core](https://www.npmjs.com/package/@angular/core) is a package that lets you write client-side web applications as if you had a smarter browser. It also lets you use HTML as your template language and lets you extend HTMLΓÇÖs syntax to express your applicationΓÇÖs components clearly and succinctly.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) in development, with SSR enabled.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browserΓÇÖs Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if theyΓÇÖve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the userΓÇÖs browser.| \n|**DOM-based**|Client|The attacker forces the userΓÇÖs browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `@angular/core` to version 11.0.5, 11.1.0-next.3 or higher.\n## References\n- [GitHub Commit](https://github.com/angular/angular/commit/0fc8466f1be392917e0c7e3448b2144d52286b56)\n- [GitHub Commit 2](https://github.com/angular/angular/commit/ba8da742e3b243e8f43d4c63aa842b44e14f2b09)\n- [GitHub PR](https://github.com/angular/angular/pull/40525)\n",
        "disclosureTime": "2021-01-22T11:36:15Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "11.0.5",
          "11.1.0-next.3"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-ANGULARCORE-1070902",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-79"
          ]
        },
        "language": "js",
        "modificationTime": "2021-02-10T14:30:32.983288Z",
        "moduleName": "@angular/core",
        "packageManager": "npm",
        "packageName": "@angular/core",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2021-02-10T14:30:33Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/angular/angular/commit/0fc8466f1be392917e0c7e3448b2144d52286b56"
          },
          {
            "title": "GitHub Commit 2",
            "url": "https://github.com/angular/angular/commit/ba8da742e3b243e8f43d4c63aa842b44e14f2b09"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/angular/angular/pull/40525"
          }
        ],
        "semver": {
          "vulnerable": [
            "<11.0.5",
            ">=11.1.0-next.0 <11.1.0-next.3"
          ]
        },
        "severity": "low",
        "severityWithCritical": "low",
        "title": "Cross-site Scripting (XSS)",
        "from": [
          "email-template-manager@0.0.0",
          "@angular/core@7.2.14"
        ],
        "upgradePath": [
          false,
          "@angular/core@11.0.5"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "@angular/core",
        "version": "7.2.14"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P/RL:O/RC:C",
        "alternativeIds": [],
        "creationTime": "2021-03-23T16:13:42.109692Z",
        "credit": [
          "Yeting Li"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n[hosted-git-info](https://www.npmjs.org/package/hosted-git-info) is a Provides metadata and conversions from repository urls for Github, Bitbucket and Gitlab\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via regular expression `shortcutMatch ` in the `fromUrl` function in index.js. The affected regular expression exhibits polynomial worst-case time complexity.\r\n\r\n### PoC by Yeting Li\r\n```\r\nvar hostedGitInfo = require(\"hosted-git-info\")\r\nfunction build_attack(n) {\r\n    var ret = \"a:\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"a\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\nfor(var i = 1; i <= 5000000; i++) {\r\n   if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n       var parsedInfo = hostedGitInfo.fromUrl(attack_str)\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLetΓÇÖs take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesnΓÇÖt match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `hosted-git-info` to version 3.0.8, 2.8.9 or higher.\n## References\n- [GitHub Commit](https://github.com/npm/hosted-git-info/commit/bede0dc38e1785e732bf0a48ba6f81a4a908eba3)\n",
        "disclosureTime": "2020-11-28T00:00:00Z",
        "exploit": "Proof of Concept",
        "fixedIn": [
          "3.0.8",
          "2.8.9"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-HOSTEDGITINFO-1088355",
        "identifiers": {
          "CVE": [
            "CVE-2021-23362"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "js",
        "modificationTime": "2021-04-08T12:53:49.093606Z",
        "moduleName": "hosted-git-info",
        "packageManager": "npm",
        "packageName": "hosted-git-info",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2021-03-23T17:13:24Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/npm/hosted-git-info/commit/bede0dc38e1785e732bf0a48ba6f81a4a908eba3"
          }
        ],
        "semver": {
          "vulnerable": [
            ">=3.0.0 <3.0.8",
            "<2.8.9"
          ]
        },
        "severity": "medium",
        "severityWithCritical": "medium",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "from": [
          "email-template-manager@0.0.0",
          "node-sass@4.12.0",
          "meow@3.7.0",
          "normalize-package-data@2.4.1",
          "hosted-git-info@2.7.1"
        ],
        "upgradePath": [
          false,
          "node-sass@4.12.0",
          "meow@3.7.0",
          "normalize-package-data@2.4.1",
          "hosted-git-info@2.8.9"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "hosted-git-info",
        "version": "2.7.1"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P/RL:O/RC:C",
        "alternativeIds": [],
        "creationTime": "2021-03-23T16:13:42.109692Z",
        "credit": [
          "Yeting Li"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n[hosted-git-info](https://www.npmjs.org/package/hosted-git-info) is a Provides metadata and conversions from repository urls for Github, Bitbucket and Gitlab\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via regular expression `shortcutMatch ` in the `fromUrl` function in index.js. The affected regular expression exhibits polynomial worst-case time complexity.\r\n\r\n### PoC by Yeting Li\r\n```\r\nvar hostedGitInfo = require(\"hosted-git-info\")\r\nfunction build_attack(n) {\r\n    var ret = \"a:\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"a\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\nfor(var i = 1; i <= 5000000; i++) {\r\n   if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n       var parsedInfo = hostedGitInfo.fromUrl(attack_str)\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLetΓÇÖs take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesnΓÇÖt match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `hosted-git-info` to version 3.0.8, 2.8.9 or higher.\n## References\n- [GitHub Commit](https://github.com/npm/hosted-git-info/commit/bede0dc38e1785e732bf0a48ba6f81a4a908eba3)\n",
        "disclosureTime": "2020-11-28T00:00:00Z",
        "exploit": "Proof of Concept",
        "fixedIn": [
          "3.0.8",
          "2.8.9"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-HOSTEDGITINFO-1088355",
        "identifiers": {
          "CVE": [
            "CVE-2021-23362"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "js",
        "modificationTime": "2021-04-08T12:53:49.093606Z",
        "moduleName": "hosted-git-info",
        "packageManager": "npm",
        "packageName": "hosted-git-info",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2021-03-23T17:13:24Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/npm/hosted-git-info/commit/bede0dc38e1785e732bf0a48ba6f81a4a908eba3"
          }
        ],
        "semver": {
          "vulnerable": [
            ">=3.0.0 <3.0.8",
            "<2.8.9"
          ]
        },
        "severity": "medium",
        "severityWithCritical": "medium",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "from": [
          "email-template-manager@0.0.0",
          "node-sass@4.12.0",
          "meow@3.7.0",
          "read-pkg-up@1.0.1",
          "read-pkg@1.1.0",
          "normalize-package-data@2.4.1",
          "hosted-git-info@2.7.1"
        ],
        "upgradePath": [
          false,
          "node-sass@4.12.0",
          "meow@3.7.0",
          "read-pkg-up@1.0.1",
          "read-pkg@1.1.0",
          "normalize-package-data@2.4.1",
          "hosted-git-info@2.8.9"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "hosted-git-info",
        "version": "2.7.1"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P/RL:O/RC:C",
        "alternativeIds": [],
        "creationTime": "2021-03-23T16:13:42.109692Z",
        "credit": [
          "Yeting Li"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n[hosted-git-info](https://www.npmjs.org/package/hosted-git-info) is a Provides metadata and conversions from repository urls for Github, Bitbucket and Gitlab\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via regular expression `shortcutMatch ` in the `fromUrl` function in index.js. The affected regular expression exhibits polynomial worst-case time complexity.\r\n\r\n### PoC by Yeting Li\r\n```\r\nvar hostedGitInfo = require(\"hosted-git-info\")\r\nfunction build_attack(n) {\r\n    var ret = \"a:\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"a\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\nfor(var i = 1; i <= 5000000; i++) {\r\n   if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n       var parsedInfo = hostedGitInfo.fromUrl(attack_str)\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLetΓÇÖs take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesnΓÇÖt match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `hosted-git-info` to version 3.0.8, 2.8.9 or higher.\n## References\n- [GitHub Commit](https://github.com/npm/hosted-git-info/commit/bede0dc38e1785e732bf0a48ba6f81a4a908eba3)\n",
        "disclosureTime": "2020-11-28T00:00:00Z",
        "exploit": "Proof of Concept",
        "fixedIn": [
          "3.0.8",
          "2.8.9"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-HOSTEDGITINFO-1088355",
        "identifiers": {
          "CVE": [
            "CVE-2021-23362"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "js",
        "modificationTime": "2021-04-08T12:53:49.093606Z",
        "moduleName": "hosted-git-info",
        "packageManager": "npm",
        "packageName": "hosted-git-info",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2021-03-23T17:13:24Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/npm/hosted-git-info/commit/bede0dc38e1785e732bf0a48ba6f81a4a908eba3"
          }
        ],
        "semver": {
          "vulnerable": [
            ">=3.0.0 <3.0.8",
            "<2.8.9"
          ]
        },
        "severity": "medium",
        "severityWithCritical": "medium",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "from": [
          "email-template-manager@0.0.0",
          "node-sass@4.12.0",
          "sass-graph@2.2.4",
          "yargs@7.1.0",
          "read-pkg-up@1.0.1",
          "read-pkg@1.1.0",
          "normalize-package-data@2.4.1",
          "hosted-git-info@2.7.1"
        ],
        "upgradePath": [
          false,
          "node-sass@4.12.0",
          "sass-graph@2.2.4",
          "yargs@7.1.0",
          "read-pkg-up@1.0.1",
          "read-pkg@1.1.0",
          "normalize-package-data@2.4.1",
          "hosted-git-info@2.8.9"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "hosted-git-info",
        "version": "2.7.1"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
        "alternativeIds": [],
        "creationTime": "2019-12-16T14:21:14.675101Z",
        "credit": [
          "Feng Xiao"
        ],
        "cvssScore": 3.7,
        "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
        "disclosureTime": "2019-12-16T14:31:14Z",
        "exploit": "Proof of Concept",
        "fixedIn": [
          "6.0.3"
        ],
        "functions": [
          {
            "functionId": {
              "className": null,
              "filePath": "index.js",
              "functionName": "ctorName"
            },
            "version": [
              ">=6.0.0 <6.0.3"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "filePath": "index.js",
              "functionName": "ctorName"
            },
            "version": [
              ">=6.0.0 <6.0.3"
            ]
          }
        ],
        "id": "SNYK-JS-KINDOF-537849",
        "identifiers": {
          "CVE": [
            "CVE-2019-20149"
          ],
          "CWE": [
            "CWE-20"
          ],
          "GHSA": [
            "GHSA-6c8f-qphg-qjgp"
          ],
          "NSP": [
            1490
          ]
        },
        "language": "js",
        "modificationTime": "2020-06-12T14:36:55.567043Z",
        "moduleName": "kind-of",
        "packageManager": "npm",
        "packageName": "kind-of",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-01-19T14:31:13Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/jonschlinkert/kind-of/issues/30"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/jonschlinkert/kind-of/pull/31"
          }
        ],
        "semver": {
          "vulnerable": [
            ">=6.0.0 <6.0.3"
          ]
        },
        "severity": "low",
        "severityWithCritical": "low",
        "title": "Validation Bypass",
        "from": [
          "email-template-manager@0.0.0",
          "clone-deep@4.0.1",
          "kind-of@6.0.2"
        ],
        "upgradePath": [
          false,
          "clone-deep@4.0.1",
          "kind-of@6.0.3"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "kind-of",
        "version": "6.0.2"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
        "alternativeIds": [],
        "creationTime": "2019-12-16T14:21:14.675101Z",
        "credit": [
          "Feng Xiao"
        ],
        "cvssScore": 3.7,
        "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
        "disclosureTime": "2019-12-16T14:31:14Z",
        "exploit": "Proof of Concept",
        "fixedIn": [
          "6.0.3"
        ],
        "functions": [
          {
            "functionId": {
              "className": null,
              "filePath": "index.js",
              "functionName": "ctorName"
            },
            "version": [
              ">=6.0.0 <6.0.3"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "filePath": "index.js",
              "functionName": "ctorName"
            },
            "version": [
              ">=6.0.0 <6.0.3"
            ]
          }
        ],
        "id": "SNYK-JS-KINDOF-537849",
        "identifiers": {
          "CVE": [
            "CVE-2019-20149"
          ],
          "CWE": [
            "CWE-20"
          ],
          "GHSA": [
            "GHSA-6c8f-qphg-qjgp"
          ],
          "NSP": [
            1490
          ]
        },
        "language": "js",
        "modificationTime": "2020-06-12T14:36:55.567043Z",
        "moduleName": "kind-of",
        "packageManager": "npm",
        "packageName": "kind-of",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-01-19T14:31:13Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/jonschlinkert/kind-of/issues/30"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/jonschlinkert/kind-of/pull/31"
          }
        ],
        "semver": {
          "vulnerable": [
            ">=6.0.0 <6.0.3"
          ]
        },
        "severity": "low",
        "severityWithCritical": "low",
        "title": "Validation Bypass",
        "from": [
          "email-template-manager@0.0.0",
          "clone-deep@4.0.1",
          "shallow-clone@3.0.0",
          "kind-of@6.0.2"
        ],
        "upgradePath": [
          false,
          "clone-deep@4.0.1",
          "shallow-clone@3.0.0",
          "kind-of@6.0.3"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "kind-of",
        "version": "6.0.2"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
        "alternativeIds": [],
        "creationTime": "2020-10-16T16:48:40.985673Z",
        "credit": [
          "Liyuan Chen"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLetΓÇÖs take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesnΓÇÖt match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
        "disclosureTime": "2020-10-16T16:47:34Z",
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.21"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-LODASH-1018905",
        "identifiers": {
          "CVE": [
            "CVE-2020-28500"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "js",
        "modificationTime": "2021-02-22T09:58:41.562106Z",
        "moduleName": "lodash",
        "packageManager": "npm",
        "packageName": "lodash",
        "patches": [],
        "proprietary": true,
        "publicationTime": "2021-02-15T11:50:49Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a"
          },
          {
            "title": "GitHub Fix PR",
            "url": "https://github.com/lodash/lodash/pull/5065"
          }
        ],
        "semver": {
          "vulnerable": [
            "<4.17.21"
          ]
        },
        "severity": "medium",
        "severityWithCritical": "medium",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "from": [
          "email-template-manager@0.0.0",
          "node-sass@4.12.0",
          "lodash@4.17.11"
        ],
        "upgradePath": [
          false,
          "node-sass@4.12.0",
          "lodash@4.17.21"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "lodash",
        "version": "4.17.11"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
        "alternativeIds": [],
        "creationTime": "2020-11-17T14:07:17.048472Z",
        "credit": [
          "Marc Hassan"
        ],
        "cvssScore": 7.2,
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
        "disclosureTime": "2020-11-17T13:02:10Z",
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.21"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-LODASH-1040724",
        "identifiers": {
          "CVE": [
            "CVE-2021-23337"
          ],
          "CWE": [
            "CWE-78"
          ]
        },
        "language": "js",
        "modificationTime": "2021-02-22T09:58:04.543992Z",
        "moduleName": "lodash",
        "packageManager": "npm",
        "packageName": "lodash",
        "patches": [],
        "proprietary": true,
        "publicationTime": "2021-02-15T11:50:50Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c"
          },
          {
            "title": "Vulnerable Code",
            "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851"
          }
        ],
        "semver": {
          "vulnerable": [
            "<4.17.21"
          ]
        },
        "severity": "high",
        "severityWithCritical": "high",
        "title": "Command Injection",
        "from": [
          "email-template-manager@0.0.0",
          "node-sass@4.12.0",
          "lodash@4.17.11"
        ],
        "upgradePath": [
          false,
          "node-sass@4.12.0",
          "lodash@4.17.21"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "lodash",
        "version": "4.17.11"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "alternativeIds": [],
        "creationTime": "2019-06-19T12:04:21.040000Z",
        "credit": [
          "Snyk Security Team"
        ],
        "cvssScore": 7.3,
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `defaultsDeep` could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nconst mergeFn = require('lodash').defaultsDeep;\r\nconst payload = '{\"constructor\": {\"prototype\": {\"a0\": true}}}'\r\n\r\nfunction check() {\r\n    mergeFn({}, JSON.parse(payload));\r\n    if (({})[`a0`] === true) {\r\n        console.log(`Vulnerable to Prototype Pollution via ${payload}`);\r\n    }\r\n  }\r\n\r\ncheck();\r\n```\r\n\r\nFor more information, check out our [blog post](https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/)\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of ΓÇ£pathΓÇ¥, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototypeΓÇö use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. ΓÇ£JavaScript prototype pollution attack in NodeJS application.ΓÇ¥ GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.12 or higher.\n## References\n- [GitHub Issue](https://github.com/lodash/lodash/issues/4348)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4336)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4355)\n- [GitHub PR](https://github.com/sailshq/lodash/pull/1)\n- [Node Security Advisory](https://www.npmjs.com/advisories/1065)\n- [Snyk Blog](https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/)\n",
        "disclosureTime": "2019-06-19T11:45:02Z",
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.12"
        ],
        "functions": [
          {
            "functionId": {
              "className": null,
              "filePath": "lodash.js",
              "functionName": "runInContext.customDefaultsMerge"
            },
            "version": [
              ">=4.17.3 <4.17.12"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "filePath": "lodash.js",
              "functionName": "runInContext.customDefaultsMerge"
            },
            "version": [
              ">=4.17.3 <4.17.12"
            ]
          }
        ],
        "id": "SNYK-JS-LODASH-450202",
        "identifiers": {
          "CVE": [
            "CVE-2019-10744"
          ],
          "CWE": [
            "CWE-400"
          ],
          "GHSA": [
            "GHSA-jf85-cpcp-j695"
          ],
          "NSP": [
            1065
          ]
        },
        "language": "js",
        "modificationTime": "2020-08-24T08:59:58.227467Z",
        "moduleName": "lodash",
        "packageManager": "npm",
        "packageName": "lodash",
        "patches": [
          {
            "comments": [],
            "id": "patch:SNYK-JS-LODASH-450202:0",
            "modificationTime": "2019-12-03T11:40:45.719849Z",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/lodash/20190702/lodash_20190702_0_0_1f8ea07746963a535385a5befc19fa687a627d2b.patch"
            ],
            "version": "=4.17.11"
          }
        ],
        "proprietary": true,
        "publicationTime": "2019-07-02T11:45:01Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/lodash/lodash/issues/4348"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/lodash/lodash/pull/4336"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/lodash/lodash/pull/4355"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/sailshq/lodash/pull/1"
          },
          {
            "title": "Node Security Advisory",
            "url": "https://www.npmjs.com/advisories/1065"
          },
          {
            "title": "Snyk Blog",
            "url": "https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/"
          }
        ],
        "semver": {
          "vulnerable": [
            "<4.17.12"
          ]
        },
        "severity": "high",
        "severityWithCritical": "high",
        "title": "Prototype Pollution",
        "from": [
          "email-template-manager@0.0.0",
          "node-sass@4.12.0",
          "lodash@4.17.11"
        ],
        "upgradePath": [
          false,
          "node-sass@4.12.0",
          "lodash@4.17.12"
        ],
        "isUpgradable": true,
        "isPatchable": true,
        "name": "lodash",
        "version": "4.17.11"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L/E:P/RL:U/RC:C",
        "alternativeIds": [],
        "creationTime": "2020-04-28T14:32:13.683154Z",
        "credit": [
          "posix"
        ],
        "cvssScore": 6.3,
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `zipObjectDeep` can be tricked into adding or modifying properties of the Object prototype. These properties will be present on all objects.\r\n\r\n## PoC\r\n```\r\nconst _ = require('lodash');\r\n_.zipObjectDeep(['__proto__.z'],[123])\r\nconsole.log(z) // 123\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of ΓÇ£pathΓÇ¥, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototypeΓÇö use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. ΓÇ£JavaScript prototype pollution attack in NodeJS application.ΓÇ¥ GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.16 or higher.\n## References\n- [GitHub PR](https://github.com/lodash/lodash/pull/4759)\n- [HackerOne Report](https://hackerone.com/reports/712065)\n",
        "disclosureTime": "2020-04-27T22:14:18Z",
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.16"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-LODASH-567746",
        "identifiers": {
          "CVE": [
            "CVE-2020-8203"
          ],
          "CWE": [
            "CWE-400"
          ],
          "GHSA": [
            "GHSA-p6mc-m468-83gw"
          ],
          "NSP": [
            1523
          ]
        },
        "language": "js",
        "modificationTime": "2020-07-09T08:34:04.944267Z",
        "moduleName": "lodash",
        "packageManager": "npm",
        "packageName": "lodash",
        "patches": [
          {
            "comments": [],
            "id": "patch:SNYK-JS-LODASH-567746:0",
            "modificationTime": "2020-04-30T14:28:46.729327Z",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/lodash/20200430/lodash_0_0_20200430_6baae67d501e4c45021280876d42efe351e77551.patch"
            ],
            "version": ">=4.14.2"
          }
        ],
        "proprietary": false,
        "publicationTime": "2020-04-28T14:59:14Z",
        "references": [
          {
            "title": "GitHub PR",
            "url": "https://github.com/lodash/lodash/pull/4759"
          },
          {
            "title": "HackerOne Report",
            "url": "https://hackerone.com/reports/712065"
          }
        ],
        "semver": {
          "vulnerable": [
            "<4.17.16"
          ]
        },
        "severity": "medium",
        "severityWithCritical": "medium",
        "title": "Prototype Pollution",
        "from": [
          "email-template-manager@0.0.0",
          "node-sass@4.12.0",
          "lodash@4.17.11"
        ],
        "upgradePath": [
          false,
          "node-sass@4.12.0",
          "lodash@4.17.16"
        ],
        "isUpgradable": true,
        "isPatchable": true,
        "name": "lodash",
        "version": "4.17.11"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2020-07-24T12:05:01.916784Z",
        "credit": [
          "reeser"
        ],
        "cvssScore": 9.8,
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution in `zipObjectDeep` due to an incomplete fix for [CVE-2020-8203](https://snyk.io/vuln/SNYK-JS-LODASH-567746).\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of ΓÇ£pathΓÇ¥, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototypeΓÇö use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. ΓÇ£JavaScript prototype pollution attack in NodeJS application.ΓÇ¥ GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.20 or higher.\n## References\n- [GitHub Issue](https://github.com/lodash/lodash/issues/4874)\n",
        "disclosureTime": "2020-07-24T12:00:52Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "4.17.20"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-LODASH-590103",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "js",
        "modificationTime": "2020-08-16T12:11:40.402299Z",
        "moduleName": "lodash",
        "packageManager": "npm",
        "packageName": "lodash",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-08-16T13:09:06Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/lodash/lodash/issues/4874"
          }
        ],
        "semver": {
          "vulnerable": [
            "<4.17.20"
          ]
        },
        "severity": "high",
        "severityWithCritical": "critical",
        "title": "Prototype Pollution",
        "from": [
          "email-template-manager@0.0.0",
          "node-sass@4.12.0",
          "lodash@4.17.11"
        ],
        "upgradePath": [
          false,
          "node-sass@4.12.0",
          "lodash@4.17.20"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "lodash",
        "version": "4.17.11"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "alternativeIds": [],
        "creationTime": "2020-08-21T12:52:58.443440Z",
        "credit": [
          "awarau"
        ],
        "cvssScore": 7.3,
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `setWith` and `set` functions.\r\n\r\n### PoC by awarau\r\n* Create a JS file with this contents:\r\n```\r\nlod = require('lodash')\r\nlod.setWith({}, \"__proto__[test]\", \"123\")\r\nlod.set({}, \"__proto__[test2]\", \"456\")\r\nconsole.log(Object.prototype)\r\n```\r\n* Execute it with `node`\r\n* Observe that `test` and `test2` is now in the `Object.prototype`.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of ΓÇ£pathΓÇ¥, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototypeΓÇö use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. ΓÇ£JavaScript prototype pollution attack in NodeJS application.ΓÇ¥ GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.17 or higher.\n## References\n- [HackerOne Report](https://hackerone.com/reports/864701)\n",
        "disclosureTime": "2020-08-21T10:34:29Z",
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.17"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-LODASH-608086",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "js",
        "modificationTime": "2020-08-27T16:44:20.914177Z",
        "moduleName": "lodash",
        "packageManager": "npm",
        "packageName": "lodash",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-08-21T12:53:03Z",
        "references": [
          {
            "title": "HackerOne Report",
            "url": "https://hackerone.com/reports/864701"
          }
        ],
        "semver": {
          "vulnerable": [
            "<4.17.17"
          ]
        },
        "severity": "high",
        "severityWithCritical": "high",
        "title": "Prototype Pollution",
        "from": [
          "email-template-manager@0.0.0",
          "node-sass@4.12.0",
          "lodash@4.17.11"
        ],
        "upgradePath": [
          false,
          "node-sass@4.12.0",
          "lodash@4.17.17"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "lodash",
        "version": "4.17.11"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
        "alternativeIds": [],
        "creationTime": "2020-10-16T16:48:40.985673Z",
        "credit": [
          "Liyuan Chen"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLetΓÇÖs take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesnΓÇÖt match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
        "disclosureTime": "2020-10-16T16:47:34Z",
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.21"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-LODASH-1018905",
        "identifiers": {
          "CVE": [
            "CVE-2020-28500"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "js",
        "modificationTime": "2021-02-22T09:58:41.562106Z",
        "moduleName": "lodash",
        "packageManager": "npm",
        "packageName": "lodash",
        "patches": [],
        "proprietary": true,
        "publicationTime": "2021-02-15T11:50:49Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a"
          },
          {
            "title": "GitHub Fix PR",
            "url": "https://github.com/lodash/lodash/pull/5065"
          }
        ],
        "semver": {
          "vulnerable": [
            "<4.17.21"
          ]
        },
        "severity": "medium",
        "severityWithCritical": "medium",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "from": [
          "email-template-manager@0.0.0",
          "node-sass@4.12.0",
          "sass-graph@2.2.4",
          "lodash@4.17.11"
        ],
        "upgradePath": [
          false,
          "node-sass@4.12.0",
          "sass-graph@2.2.4",
          "lodash@4.17.21"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "lodash",
        "version": "4.17.11"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
        "alternativeIds": [],
        "creationTime": "2020-11-17T14:07:17.048472Z",
        "credit": [
          "Marc Hassan"
        ],
        "cvssScore": 7.2,
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
        "disclosureTime": "2020-11-17T13:02:10Z",
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.21"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-LODASH-1040724",
        "identifiers": {
          "CVE": [
            "CVE-2021-23337"
          ],
          "CWE": [
            "CWE-78"
          ]
        },
        "language": "js",
        "modificationTime": "2021-02-22T09:58:04.543992Z",
        "moduleName": "lodash",
        "packageManager": "npm",
        "packageName": "lodash",
        "patches": [],
        "proprietary": true,
        "publicationTime": "2021-02-15T11:50:50Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c"
          },
          {
            "title": "Vulnerable Code",
            "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851"
          }
        ],
        "semver": {
          "vulnerable": [
            "<4.17.21"
          ]
        },
        "severity": "high",
        "severityWithCritical": "high",
        "title": "Command Injection",
        "from": [
          "email-template-manager@0.0.0",
          "node-sass@4.12.0",
          "sass-graph@2.2.4",
          "lodash@4.17.11"
        ],
        "upgradePath": [
          false,
          "node-sass@4.12.0",
          "sass-graph@2.2.4",
          "lodash@4.17.21"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "lodash",
        "version": "4.17.11"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "alternativeIds": [],
        "creationTime": "2019-06-19T12:04:21.040000Z",
        "credit": [
          "Snyk Security Team"
        ],
        "cvssScore": 7.3,
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `defaultsDeep` could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nconst mergeFn = require('lodash').defaultsDeep;\r\nconst payload = '{\"constructor\": {\"prototype\": {\"a0\": true}}}'\r\n\r\nfunction check() {\r\n    mergeFn({}, JSON.parse(payload));\r\n    if (({})[`a0`] === true) {\r\n        console.log(`Vulnerable to Prototype Pollution via ${payload}`);\r\n    }\r\n  }\r\n\r\ncheck();\r\n```\r\n\r\nFor more information, check out our [blog post](https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/)\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of ΓÇ£pathΓÇ¥, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototypeΓÇö use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. ΓÇ£JavaScript prototype pollution attack in NodeJS application.ΓÇ¥ GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.12 or higher.\n## References\n- [GitHub Issue](https://github.com/lodash/lodash/issues/4348)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4336)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4355)\n- [GitHub PR](https://github.com/sailshq/lodash/pull/1)\n- [Node Security Advisory](https://www.npmjs.com/advisories/1065)\n- [Snyk Blog](https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/)\n",
        "disclosureTime": "2019-06-19T11:45:02Z",
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.12"
        ],
        "functions": [
          {
            "functionId": {
              "className": null,
              "filePath": "lodash.js",
              "functionName": "runInContext.customDefaultsMerge"
            },
            "version": [
              ">=4.17.3 <4.17.12"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "filePath": "lodash.js",
              "functionName": "runInContext.customDefaultsMerge"
            },
            "version": [
              ">=4.17.3 <4.17.12"
            ]
          }
        ],
        "id": "SNYK-JS-LODASH-450202",
        "identifiers": {
          "CVE": [
            "CVE-2019-10744"
          ],
          "CWE": [
            "CWE-400"
          ],
          "GHSA": [
            "GHSA-jf85-cpcp-j695"
          ],
          "NSP": [
            1065
          ]
        },
        "language": "js",
        "modificationTime": "2020-08-24T08:59:58.227467Z",
        "moduleName": "lodash",
        "packageManager": "npm",
        "packageName": "lodash",
        "patches": [
          {
            "comments": [],
            "id": "patch:SNYK-JS-LODASH-450202:0",
            "modificationTime": "2019-12-03T11:40:45.719849Z",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/lodash/20190702/lodash_20190702_0_0_1f8ea07746963a535385a5befc19fa687a627d2b.patch"
            ],
            "version": "=4.17.11"
          }
        ],
        "proprietary": true,
        "publicationTime": "2019-07-02T11:45:01Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/lodash/lodash/issues/4348"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/lodash/lodash/pull/4336"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/lodash/lodash/pull/4355"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/sailshq/lodash/pull/1"
          },
          {
            "title": "Node Security Advisory",
            "url": "https://www.npmjs.com/advisories/1065"
          },
          {
            "title": "Snyk Blog",
            "url": "https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/"
          }
        ],
        "semver": {
          "vulnerable": [
            "<4.17.12"
          ]
        },
        "severity": "high",
        "severityWithCritical": "high",
        "title": "Prototype Pollution",
        "from": [
          "email-template-manager@0.0.0",
          "node-sass@4.12.0",
          "sass-graph@2.2.4",
          "lodash@4.17.11"
        ],
        "upgradePath": [
          false,
          "node-sass@4.12.0",
          "sass-graph@2.2.4",
          "lodash@4.17.12"
        ],
        "isUpgradable": true,
        "isPatchable": true,
        "name": "lodash",
        "version": "4.17.11"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L/E:P/RL:U/RC:C",
        "alternativeIds": [],
        "creationTime": "2020-04-28T14:32:13.683154Z",
        "credit": [
          "posix"
        ],
        "cvssScore": 6.3,
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `zipObjectDeep` can be tricked into adding or modifying properties of the Object prototype. These properties will be present on all objects.\r\n\r\n## PoC\r\n```\r\nconst _ = require('lodash');\r\n_.zipObjectDeep(['__proto__.z'],[123])\r\nconsole.log(z) // 123\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of ΓÇ£pathΓÇ¥, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototypeΓÇö use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. ΓÇ£JavaScript prototype pollution attack in NodeJS application.ΓÇ¥ GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.16 or higher.\n## References\n- [GitHub PR](https://github.com/lodash/lodash/pull/4759)\n- [HackerOne Report](https://hackerone.com/reports/712065)\n",
        "disclosureTime": "2020-04-27T22:14:18Z",
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.16"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-LODASH-567746",
        "identifiers": {
          "CVE": [
            "CVE-2020-8203"
          ],
          "CWE": [
            "CWE-400"
          ],
          "GHSA": [
            "GHSA-p6mc-m468-83gw"
          ],
          "NSP": [
            1523
          ]
        },
        "language": "js",
        "modificationTime": "2020-07-09T08:34:04.944267Z",
        "moduleName": "lodash",
        "packageManager": "npm",
        "packageName": "lodash",
        "patches": [
          {
            "comments": [],
            "id": "patch:SNYK-JS-LODASH-567746:0",
            "modificationTime": "2020-04-30T14:28:46.729327Z",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/lodash/20200430/lodash_0_0_20200430_6baae67d501e4c45021280876d42efe351e77551.patch"
            ],
            "version": ">=4.14.2"
          }
        ],
        "proprietary": false,
        "publicationTime": "2020-04-28T14:59:14Z",
        "references": [
          {
            "title": "GitHub PR",
            "url": "https://github.com/lodash/lodash/pull/4759"
          },
          {
            "title": "HackerOne Report",
            "url": "https://hackerone.com/reports/712065"
          }
        ],
        "semver": {
          "vulnerable": [
            "<4.17.16"
          ]
        },
        "severity": "medium",
        "severityWithCritical": "medium",
        "title": "Prototype Pollution",
        "from": [
          "email-template-manager@0.0.0",
          "node-sass@4.12.0",
          "sass-graph@2.2.4",
          "lodash@4.17.11"
        ],
        "upgradePath": [
          false,
          "node-sass@4.12.0",
          "sass-graph@2.2.4",
          "lodash@4.17.16"
        ],
        "isUpgradable": true,
        "isPatchable": true,
        "name": "lodash",
        "version": "4.17.11"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2020-07-24T12:05:01.916784Z",
        "credit": [
          "reeser"
        ],
        "cvssScore": 9.8,
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution in `zipObjectDeep` due to an incomplete fix for [CVE-2020-8203](https://snyk.io/vuln/SNYK-JS-LODASH-567746).\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of ΓÇ£pathΓÇ¥, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototypeΓÇö use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. ΓÇ£JavaScript prototype pollution attack in NodeJS application.ΓÇ¥ GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.20 or higher.\n## References\n- [GitHub Issue](https://github.com/lodash/lodash/issues/4874)\n",
        "disclosureTime": "2020-07-24T12:00:52Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "4.17.20"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-LODASH-590103",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "js",
        "modificationTime": "2020-08-16T12:11:40.402299Z",
        "moduleName": "lodash",
        "packageManager": "npm",
        "packageName": "lodash",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-08-16T13:09:06Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/lodash/lodash/issues/4874"
          }
        ],
        "semver": {
          "vulnerable": [
            "<4.17.20"
          ]
        },
        "severity": "high",
        "severityWithCritical": "critical",
        "title": "Prototype Pollution",
        "from": [
          "email-template-manager@0.0.0",
          "node-sass@4.12.0",
          "sass-graph@2.2.4",
          "lodash@4.17.11"
        ],
        "upgradePath": [
          false,
          "node-sass@4.12.0",
          "sass-graph@2.2.4",
          "lodash@4.17.20"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "lodash",
        "version": "4.17.11"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "alternativeIds": [],
        "creationTime": "2020-08-21T12:52:58.443440Z",
        "credit": [
          "awarau"
        ],
        "cvssScore": 7.3,
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `setWith` and `set` functions.\r\n\r\n### PoC by awarau\r\n* Create a JS file with this contents:\r\n```\r\nlod = require('lodash')\r\nlod.setWith({}, \"__proto__[test]\", \"123\")\r\nlod.set({}, \"__proto__[test2]\", \"456\")\r\nconsole.log(Object.prototype)\r\n```\r\n* Execute it with `node`\r\n* Observe that `test` and `test2` is now in the `Object.prototype`.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of ΓÇ£pathΓÇ¥, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototypeΓÇö use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. ΓÇ£JavaScript prototype pollution attack in NodeJS application.ΓÇ¥ GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.17 or higher.\n## References\n- [HackerOne Report](https://hackerone.com/reports/864701)\n",
        "disclosureTime": "2020-08-21T10:34:29Z",
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.17"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-LODASH-608086",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "js",
        "modificationTime": "2020-08-27T16:44:20.914177Z",
        "moduleName": "lodash",
        "packageManager": "npm",
        "packageName": "lodash",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-08-21T12:53:03Z",
        "references": [
          {
            "title": "HackerOne Report",
            "url": "https://hackerone.com/reports/864701"
          }
        ],
        "semver": {
          "vulnerable": [
            "<4.17.17"
          ]
        },
        "severity": "high",
        "severityWithCritical": "high",
        "title": "Prototype Pollution",
        "from": [
          "email-template-manager@0.0.0",
          "node-sass@4.12.0",
          "sass-graph@2.2.4",
          "lodash@4.17.11"
        ],
        "upgradePath": [
          false,
          "node-sass@4.12.0",
          "sass-graph@2.2.4",
          "lodash@4.17.17"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "lodash",
        "version": "4.17.11"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
        "alternativeIds": [],
        "creationTime": "2020-10-16T16:48:40.985673Z",
        "credit": [
          "Liyuan Chen"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLetΓÇÖs take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesnΓÇÖt match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
        "disclosureTime": "2020-10-16T16:47:34Z",
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.21"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-LODASH-1018905",
        "identifiers": {
          "CVE": [
            "CVE-2020-28500"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "js",
        "modificationTime": "2021-02-22T09:58:41.562106Z",
        "moduleName": "lodash",
        "packageManager": "npm",
        "packageName": "lodash",
        "patches": [],
        "proprietary": true,
        "publicationTime": "2021-02-15T11:50:49Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a"
          },
          {
            "title": "GitHub Fix PR",
            "url": "https://github.com/lodash/lodash/pull/5065"
          }
        ],
        "semver": {
          "vulnerable": [
            "<4.17.21"
          ]
        },
        "severity": "medium",
        "severityWithCritical": "medium",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "from": [
          "email-template-manager@0.0.0",
          "node-sass@4.12.0",
          "gaze@1.1.3",
          "globule@1.2.1",
          "lodash@4.17.11"
        ],
        "upgradePath": [
          false,
          "node-sass@4.12.0",
          "gaze@1.1.3",
          "globule@1.2.1",
          "lodash@4.17.21"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "lodash",
        "version": "4.17.11"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
        "alternativeIds": [],
        "creationTime": "2020-11-17T14:07:17.048472Z",
        "credit": [
          "Marc Hassan"
        ],
        "cvssScore": 7.2,
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
        "disclosureTime": "2020-11-17T13:02:10Z",
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.21"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-LODASH-1040724",
        "identifiers": {
          "CVE": [
            "CVE-2021-23337"
          ],
          "CWE": [
            "CWE-78"
          ]
        },
        "language": "js",
        "modificationTime": "2021-02-22T09:58:04.543992Z",
        "moduleName": "lodash",
        "packageManager": "npm",
        "packageName": "lodash",
        "patches": [],
        "proprietary": true,
        "publicationTime": "2021-02-15T11:50:50Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c"
          },
          {
            "title": "Vulnerable Code",
            "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851"
          }
        ],
        "semver": {
          "vulnerable": [
            "<4.17.21"
          ]
        },
        "severity": "high",
        "severityWithCritical": "high",
        "title": "Command Injection",
        "from": [
          "email-template-manager@0.0.0",
          "node-sass@4.12.0",
          "gaze@1.1.3",
          "globule@1.2.1",
          "lodash@4.17.11"
        ],
        "upgradePath": [
          false,
          "node-sass@4.12.0",
          "gaze@1.1.3",
          "globule@1.2.1",
          "lodash@4.17.21"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "lodash",
        "version": "4.17.11"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "alternativeIds": [],
        "creationTime": "2019-06-19T12:04:21.040000Z",
        "credit": [
          "Snyk Security Team"
        ],
        "cvssScore": 7.3,
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `defaultsDeep` could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nconst mergeFn = require('lodash').defaultsDeep;\r\nconst payload = '{\"constructor\": {\"prototype\": {\"a0\": true}}}'\r\n\r\nfunction check() {\r\n    mergeFn({}, JSON.parse(payload));\r\n    if (({})[`a0`] === true) {\r\n        console.log(`Vulnerable to Prototype Pollution via ${payload}`);\r\n    }\r\n  }\r\n\r\ncheck();\r\n```\r\n\r\nFor more information, check out our [blog post](https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/)\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of ΓÇ£pathΓÇ¥, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototypeΓÇö use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. ΓÇ£JavaScript prototype pollution attack in NodeJS application.ΓÇ¥ GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.12 or higher.\n## References\n- [GitHub Issue](https://github.com/lodash/lodash/issues/4348)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4336)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4355)\n- [GitHub PR](https://github.com/sailshq/lodash/pull/1)\n- [Node Security Advisory](https://www.npmjs.com/advisories/1065)\n- [Snyk Blog](https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/)\n",
        "disclosureTime": "2019-06-19T11:45:02Z",
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.12"
        ],
        "functions": [
          {
            "functionId": {
              "className": null,
              "filePath": "lodash.js",
              "functionName": "runInContext.customDefaultsMerge"
            },
            "version": [
              ">=4.17.3 <4.17.12"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "filePath": "lodash.js",
              "functionName": "runInContext.customDefaultsMerge"
            },
            "version": [
              ">=4.17.3 <4.17.12"
            ]
          }
        ],
        "id": "SNYK-JS-LODASH-450202",
        "identifiers": {
          "CVE": [
            "CVE-2019-10744"
          ],
          "CWE": [
            "CWE-400"
          ],
          "GHSA": [
            "GHSA-jf85-cpcp-j695"
          ],
          "NSP": [
            1065
          ]
        },
        "language": "js",
        "modificationTime": "2020-08-24T08:59:58.227467Z",
        "moduleName": "lodash",
        "packageManager": "npm",
        "packageName": "lodash",
        "patches": [
          {
            "comments": [],
            "id": "patch:SNYK-JS-LODASH-450202:0",
            "modificationTime": "2019-12-03T11:40:45.719849Z",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/lodash/20190702/lodash_20190702_0_0_1f8ea07746963a535385a5befc19fa687a627d2b.patch"
            ],
            "version": "=4.17.11"
          }
        ],
        "proprietary": true,
        "publicationTime": "2019-07-02T11:45:01Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/lodash/lodash/issues/4348"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/lodash/lodash/pull/4336"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/lodash/lodash/pull/4355"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/sailshq/lodash/pull/1"
          },
          {
            "title": "Node Security Advisory",
            "url": "https://www.npmjs.com/advisories/1065"
          },
          {
            "title": "Snyk Blog",
            "url": "https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/"
          }
        ],
        "semver": {
          "vulnerable": [
            "<4.17.12"
          ]
        },
        "severity": "high",
        "severityWithCritical": "high",
        "title": "Prototype Pollution",
        "from": [
          "email-template-manager@0.0.0",
          "node-sass@4.12.0",
          "gaze@1.1.3",
          "globule@1.2.1",
          "lodash@4.17.11"
        ],
        "upgradePath": [
          false,
          "node-sass@4.12.0",
          "gaze@1.1.3",
          "globule@1.2.1",
          "lodash@4.17.12"
        ],
        "isUpgradable": true,
        "isPatchable": true,
        "name": "lodash",
        "version": "4.17.11"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L/E:P/RL:U/RC:C",
        "alternativeIds": [],
        "creationTime": "2020-04-28T14:32:13.683154Z",
        "credit": [
          "posix"
        ],
        "cvssScore": 6.3,
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `zipObjectDeep` can be tricked into adding or modifying properties of the Object prototype. These properties will be present on all objects.\r\n\r\n## PoC\r\n```\r\nconst _ = require('lodash');\r\n_.zipObjectDeep(['__proto__.z'],[123])\r\nconsole.log(z) // 123\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of ΓÇ£pathΓÇ¥, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototypeΓÇö use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. ΓÇ£JavaScript prototype pollution attack in NodeJS application.ΓÇ¥ GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.16 or higher.\n## References\n- [GitHub PR](https://github.com/lodash/lodash/pull/4759)\n- [HackerOne Report](https://hackerone.com/reports/712065)\n",
        "disclosureTime": "2020-04-27T22:14:18Z",
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.16"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-LODASH-567746",
        "identifiers": {
          "CVE": [
            "CVE-2020-8203"
          ],
          "CWE": [
            "CWE-400"
          ],
          "GHSA": [
            "GHSA-p6mc-m468-83gw"
          ],
          "NSP": [
            1523
          ]
        },
        "language": "js",
        "modificationTime": "2020-07-09T08:34:04.944267Z",
        "moduleName": "lodash",
        "packageManager": "npm",
        "packageName": "lodash",
        "patches": [
          {
            "comments": [],
            "id": "patch:SNYK-JS-LODASH-567746:0",
            "modificationTime": "2020-04-30T14:28:46.729327Z",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/lodash/20200430/lodash_0_0_20200430_6baae67d501e4c45021280876d42efe351e77551.patch"
            ],
            "version": ">=4.14.2"
          }
        ],
        "proprietary": false,
        "publicationTime": "2020-04-28T14:59:14Z",
        "references": [
          {
            "title": "GitHub PR",
            "url": "https://github.com/lodash/lodash/pull/4759"
          },
          {
            "title": "HackerOne Report",
            "url": "https://hackerone.com/reports/712065"
          }
        ],
        "semver": {
          "vulnerable": [
            "<4.17.16"
          ]
        },
        "severity": "medium",
        "severityWithCritical": "medium",
        "title": "Prototype Pollution",
        "from": [
          "email-template-manager@0.0.0",
          "node-sass@4.12.0",
          "gaze@1.1.3",
          "globule@1.2.1",
          "lodash@4.17.11"
        ],
        "upgradePath": [
          false,
          "node-sass@4.12.0",
          "gaze@1.1.3",
          "globule@1.2.1",
          "lodash@4.17.16"
        ],
        "isUpgradable": true,
        "isPatchable": true,
        "name": "lodash",
        "version": "4.17.11"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2020-07-24T12:05:01.916784Z",
        "credit": [
          "reeser"
        ],
        "cvssScore": 9.8,
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution in `zipObjectDeep` due to an incomplete fix for [CVE-2020-8203](https://snyk.io/vuln/SNYK-JS-LODASH-567746).\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of ΓÇ£pathΓÇ¥, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototypeΓÇö use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. ΓÇ£JavaScript prototype pollution attack in NodeJS application.ΓÇ¥ GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.20 or higher.\n## References\n- [GitHub Issue](https://github.com/lodash/lodash/issues/4874)\n",
        "disclosureTime": "2020-07-24T12:00:52Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "4.17.20"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-LODASH-590103",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "js",
        "modificationTime": "2020-08-16T12:11:40.402299Z",
        "moduleName": "lodash",
        "packageManager": "npm",
        "packageName": "lodash",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-08-16T13:09:06Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/lodash/lodash/issues/4874"
          }
        ],
        "semver": {
          "vulnerable": [
            "<4.17.20"
          ]
        },
        "severity": "high",
        "severityWithCritical": "critical",
        "title": "Prototype Pollution",
        "from": [
          "email-template-manager@0.0.0",
          "node-sass@4.12.0",
          "gaze@1.1.3",
          "globule@1.2.1",
          "lodash@4.17.11"
        ],
        "upgradePath": [
          false,
          "node-sass@4.12.0",
          "gaze@1.1.3",
          "globule@1.2.1",
          "lodash@4.17.20"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "lodash",
        "version": "4.17.11"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "alternativeIds": [],
        "creationTime": "2020-08-21T12:52:58.443440Z",
        "credit": [
          "awarau"
        ],
        "cvssScore": 7.3,
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `setWith` and `set` functions.\r\n\r\n### PoC by awarau\r\n* Create a JS file with this contents:\r\n```\r\nlod = require('lodash')\r\nlod.setWith({}, \"__proto__[test]\", \"123\")\r\nlod.set({}, \"__proto__[test2]\", \"456\")\r\nconsole.log(Object.prototype)\r\n```\r\n* Execute it with `node`\r\n* Observe that `test` and `test2` is now in the `Object.prototype`.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of ΓÇ£pathΓÇ¥, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototypeΓÇö use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. ΓÇ£JavaScript prototype pollution attack in NodeJS application.ΓÇ¥ GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.17 or higher.\n## References\n- [HackerOne Report](https://hackerone.com/reports/864701)\n",
        "disclosureTime": "2020-08-21T10:34:29Z",
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.17"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-LODASH-608086",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "js",
        "modificationTime": "2020-08-27T16:44:20.914177Z",
        "moduleName": "lodash",
        "packageManager": "npm",
        "packageName": "lodash",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-08-21T12:53:03Z",
        "references": [
          {
            "title": "HackerOne Report",
            "url": "https://hackerone.com/reports/864701"
          }
        ],
        "semver": {
          "vulnerable": [
            "<4.17.17"
          ]
        },
        "severity": "high",
        "severityWithCritical": "high",
        "title": "Prototype Pollution",
        "from": [
          "email-template-manager@0.0.0",
          "node-sass@4.12.0",
          "gaze@1.1.3",
          "globule@1.2.1",
          "lodash@4.17.11"
        ],
        "upgradePath": [
          false,
          "node-sass@4.12.0",
          "gaze@1.1.3",
          "globule@1.2.1",
          "lodash@4.17.17"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "lodash",
        "version": "4.17.11"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "alternativeIds": [],
        "creationTime": "2020-03-11T08:25:47.093051Z",
        "credit": [
          "Snyk Security Team"
        ],
        "cvssScore": 5.6,
        "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The library could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` or `__proto__` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nrequire('minimist')('--__proto__.injected0 value0'.split(' '));\r\nconsole.log(({}).injected0 === 'value0'); // true\r\n\r\nrequire('minimist')('--constructor.prototype.injected1 value1'.split(' '));\r\nconsole.log(({}).injected1 === 'value1'); // true\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of ΓÇ£pathΓÇ¥, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototypeΓÇö use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. ΓÇ£JavaScript prototype pollution attack in NodeJS application.ΓÇ¥ GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 0.2.1, 1.2.3 or higher.\n## References\n- [Command Injection PoC](https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a)\n- [GitHub Fix Commit #1](https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94)\n- [GitHub Fix Commit #2](https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab)\n- [Snyk Research Blog](https://snyk.io/blog/prototype-pollution-minimist/)\n",
        "disclosureTime": "2020-03-10T08:22:24Z",
        "exploit": "Proof of Concept",
        "fixedIn": [
          "0.2.1",
          "1.2.3"
        ],
        "functions": [
          {
            "functionId": {
              "className": null,
              "filePath": "index.js",
              "functionName": "setKey"
            },
            "version": [
              "<0.2.1",
              ">=1.0.0 <1.1.1"
            ]
          },
          {
            "functionId": {
              "className": null,
              "filePath": "index.js",
              "functionName": "module.exports.setKey"
            },
            "version": [
              "<0.2.1",
              ">=1.1.1 <1.2.3"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "filePath": "index.js",
              "functionName": "setKey"
            },
            "version": [
              "<0.2.1",
              ">=1.0.0 <1.1.1"
            ]
          },
          {
            "functionId": {
              "filePath": "index.js",
              "functionName": "module.exports.setKey"
            },
            "version": [
              "<0.2.1",
              ">=1.1.1 <1.2.3"
            ]
          }
        ],
        "id": "SNYK-JS-MINIMIST-559764",
        "identifiers": {
          "CVE": [
            "CVE-2020-7598"
          ],
          "CWE": [
            "CWE-400"
          ],
          "GHSA": [
            "GHSA-vh95-rmgr-6w4m"
          ],
          "NSP": [
            1179
          ]
        },
        "language": "js",
        "modificationTime": "2020-12-20T09:48:43.878574Z",
        "moduleName": "minimist",
        "packageManager": "npm",
        "packageName": "minimist",
        "patches": [],
        "proprietary": true,
        "publicationTime": "2020-03-11T08:22:19Z",
        "references": [
          {
            "title": "Command Injection PoC",
            "url": "https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a"
          },
          {
            "title": "GitHub Fix Commit #1",
            "url": "https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94"
          },
          {
            "title": "GitHub Fix Commit #2",
            "url": "https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab"
          },
          {
            "title": "Snyk Research Blog",
            "url": "https://snyk.io/blog/prototype-pollution-minimist/"
          }
        ],
        "semver": {
          "vulnerable": [
            "<0.2.1",
            ">=1.0.0 <1.2.3"
          ]
        },
        "severity": "medium",
        "severityWithCritical": "medium",
        "title": "Prototype Pollution",
        "from": [
          "email-template-manager@0.0.0",
          "node-sass@4.12.0",
          "meow@3.7.0",
          "minimist@1.2.0"
        ],
        "upgradePath": [
          false,
          "node-sass@4.12.0",
          "meow@3.7.0",
          "minimist@1.2.3"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "minimist",
        "version": "1.2.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "alternativeIds": [],
        "creationTime": "2020-03-11T08:25:47.093051Z",
        "credit": [
          "Snyk Security Team"
        ],
        "cvssScore": 5.6,
        "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The library could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` or `__proto__` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nrequire('minimist')('--__proto__.injected0 value0'.split(' '));\r\nconsole.log(({}).injected0 === 'value0'); // true\r\n\r\nrequire('minimist')('--constructor.prototype.injected1 value1'.split(' '));\r\nconsole.log(({}).injected1 === 'value1'); // true\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of ΓÇ£pathΓÇ¥, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototypeΓÇö use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. ΓÇ£JavaScript prototype pollution attack in NodeJS application.ΓÇ¥ GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 0.2.1, 1.2.3 or higher.\n## References\n- [Command Injection PoC](https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a)\n- [GitHub Fix Commit #1](https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94)\n- [GitHub Fix Commit #2](https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab)\n- [Snyk Research Blog](https://snyk.io/blog/prototype-pollution-minimist/)\n",
        "disclosureTime": "2020-03-10T08:22:24Z",
        "exploit": "Proof of Concept",
        "fixedIn": [
          "0.2.1",
          "1.2.3"
        ],
        "functions": [
          {
            "functionId": {
              "className": null,
              "filePath": "index.js",
              "functionName": "setKey"
            },
            "version": [
              "<0.2.1",
              ">=1.0.0 <1.1.1"
            ]
          },
          {
            "functionId": {
              "className": null,
              "filePath": "index.js",
              "functionName": "module.exports.setKey"
            },
            "version": [
              "<0.2.1",
              ">=1.1.1 <1.2.3"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "filePath": "index.js",
              "functionName": "setKey"
            },
            "version": [
              "<0.2.1",
              ">=1.0.0 <1.1.1"
            ]
          },
          {
            "functionId": {
              "filePath": "index.js",
              "functionName": "module.exports.setKey"
            },
            "version": [
              "<0.2.1",
              ">=1.1.1 <1.2.3"
            ]
          }
        ],
        "id": "SNYK-JS-MINIMIST-559764",
        "identifiers": {
          "CVE": [
            "CVE-2020-7598"
          ],
          "CWE": [
            "CWE-400"
          ],
          "GHSA": [
            "GHSA-vh95-rmgr-6w4m"
          ],
          "NSP": [
            1179
          ]
        },
        "language": "js",
        "modificationTime": "2020-12-20T09:48:43.878574Z",
        "moduleName": "minimist",
        "packageManager": "npm",
        "packageName": "minimist",
        "patches": [],
        "proprietary": true,
        "publicationTime": "2020-03-11T08:22:19Z",
        "references": [
          {
            "title": "Command Injection PoC",
            "url": "https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a"
          },
          {
            "title": "GitHub Fix Commit #1",
            "url": "https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94"
          },
          {
            "title": "GitHub Fix Commit #2",
            "url": "https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab"
          },
          {
            "title": "Snyk Research Blog",
            "url": "https://snyk.io/blog/prototype-pollution-minimist/"
          }
        ],
        "semver": {
          "vulnerable": [
            "<0.2.1",
            ">=1.0.0 <1.2.3"
          ]
        },
        "severity": "medium",
        "severityWithCritical": "medium",
        "title": "Prototype Pollution",
        "from": [
          "email-template-manager@0.0.0",
          "ng2-pdf-viewer@6.0.2",
          "pdfjs-dist@2.2.228",
          "worker-loader@2.0.0",
          "loader-utils@1.2.3",
          "json5@1.0.1",
          "minimist@1.2.0"
        ],
        "upgradePath": [
          false,
          "ng2-pdf-viewer@6.0.2",
          "pdfjs-dist@2.2.228",
          "worker-loader@2.0.0",
          "loader-utils@1.2.3",
          "json5@1.0.1",
          "minimist@1.2.3"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "minimist",
        "version": "1.2.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "alternativeIds": [],
        "creationTime": "2020-03-11T08:25:47.093051Z",
        "credit": [
          "Snyk Security Team"
        ],
        "cvssScore": 5.6,
        "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The library could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` or `__proto__` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nrequire('minimist')('--__proto__.injected0 value0'.split(' '));\r\nconsole.log(({}).injected0 === 'value0'); // true\r\n\r\nrequire('minimist')('--constructor.prototype.injected1 value1'.split(' '));\r\nconsole.log(({}).injected1 === 'value1'); // true\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of ΓÇ£pathΓÇ¥, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototypeΓÇö use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. ΓÇ£JavaScript prototype pollution attack in NodeJS application.ΓÇ¥ GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 0.2.1, 1.2.3 or higher.\n## References\n- [Command Injection PoC](https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a)\n- [GitHub Fix Commit #1](https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94)\n- [GitHub Fix Commit #2](https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab)\n- [Snyk Research Blog](https://snyk.io/blog/prototype-pollution-minimist/)\n",
        "disclosureTime": "2020-03-10T08:22:24Z",
        "exploit": "Proof of Concept",
        "fixedIn": [
          "0.2.1",
          "1.2.3"
        ],
        "functions": [
          {
            "functionId": {
              "className": null,
              "filePath": "index.js",
              "functionName": "setKey"
            },
            "version": [
              "<0.2.1",
              ">=1.0.0 <1.1.1"
            ]
          },
          {
            "functionId": {
              "className": null,
              "filePath": "index.js",
              "functionName": "module.exports.setKey"
            },
            "version": [
              "<0.2.1",
              ">=1.1.1 <1.2.3"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "filePath": "index.js",
              "functionName": "setKey"
            },
            "version": [
              "<0.2.1",
              ">=1.0.0 <1.1.1"
            ]
          },
          {
            "functionId": {
              "filePath": "index.js",
              "functionName": "module.exports.setKey"
            },
            "version": [
              "<0.2.1",
              ">=1.1.1 <1.2.3"
            ]
          }
        ],
        "id": "SNYK-JS-MINIMIST-559764",
        "identifiers": {
          "CVE": [
            "CVE-2020-7598"
          ],
          "CWE": [
            "CWE-400"
          ],
          "GHSA": [
            "GHSA-vh95-rmgr-6w4m"
          ],
          "NSP": [
            1179
          ]
        },
        "language": "js",
        "modificationTime": "2020-12-20T09:48:43.878574Z",
        "moduleName": "minimist",
        "packageManager": "npm",
        "packageName": "minimist",
        "patches": [],
        "proprietary": true,
        "publicationTime": "2020-03-11T08:22:19Z",
        "references": [
          {
            "title": "Command Injection PoC",
            "url": "https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a"
          },
          {
            "title": "GitHub Fix Commit #1",
            "url": "https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94"
          },
          {
            "title": "GitHub Fix Commit #2",
            "url": "https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab"
          },
          {
            "title": "Snyk Research Blog",
            "url": "https://snyk.io/blog/prototype-pollution-minimist/"
          }
        ],
        "semver": {
          "vulnerable": [
            "<0.2.1",
            ">=1.0.0 <1.2.3"
          ]
        },
        "severity": "medium",
        "severityWithCritical": "medium",
        "title": "Prototype Pollution",
        "from": [
          "email-template-manager@0.0.0",
          "node-sass@4.12.0",
          "mkdirp@0.5.1",
          "minimist@0.0.8"
        ],
        "upgradePath": [
          false,
          "node-sass@4.12.0",
          "mkdirp@0.5.2",
          "minimist@1.2.5"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "minimist",
        "version": "0.0.8"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "alternativeIds": [],
        "creationTime": "2020-03-11T08:25:47.093051Z",
        "credit": [
          "Snyk Security Team"
        ],
        "cvssScore": 5.6,
        "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The library could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` or `__proto__` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nrequire('minimist')('--__proto__.injected0 value0'.split(' '));\r\nconsole.log(({}).injected0 === 'value0'); // true\r\n\r\nrequire('minimist')('--constructor.prototype.injected1 value1'.split(' '));\r\nconsole.log(({}).injected1 === 'value1'); // true\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of ΓÇ£pathΓÇ¥, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototypeΓÇö use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. ΓÇ£JavaScript prototype pollution attack in NodeJS application.ΓÇ¥ GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 0.2.1, 1.2.3 or higher.\n## References\n- [Command Injection PoC](https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a)\n- [GitHub Fix Commit #1](https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94)\n- [GitHub Fix Commit #2](https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab)\n- [Snyk Research Blog](https://snyk.io/blog/prototype-pollution-minimist/)\n",
        "disclosureTime": "2020-03-10T08:22:24Z",
        "exploit": "Proof of Concept",
        "fixedIn": [
          "0.2.1",
          "1.2.3"
        ],
        "functions": [
          {
            "functionId": {
              "className": null,
              "filePath": "index.js",
              "functionName": "setKey"
            },
            "version": [
              "<0.2.1",
              ">=1.0.0 <1.1.1"
            ]
          },
          {
            "functionId": {
              "className": null,
              "filePath": "index.js",
              "functionName": "module.exports.setKey"
            },
            "version": [
              "<0.2.1",
              ">=1.1.1 <1.2.3"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "filePath": "index.js",
              "functionName": "setKey"
            },
            "version": [
              "<0.2.1",
              ">=1.0.0 <1.1.1"
            ]
          },
          {
            "functionId": {
              "filePath": "index.js",
              "functionName": "module.exports.setKey"
            },
            "version": [
              "<0.2.1",
              ">=1.1.1 <1.2.3"
            ]
          }
        ],
        "id": "SNYK-JS-MINIMIST-559764",
        "identifiers": {
          "CVE": [
            "CVE-2020-7598"
          ],
          "CWE": [
            "CWE-400"
          ],
          "GHSA": [
            "GHSA-vh95-rmgr-6w4m"
          ],
          "NSP": [
            1179
          ]
        },
        "language": "js",
        "modificationTime": "2020-12-20T09:48:43.878574Z",
        "moduleName": "minimist",
        "packageManager": "npm",
        "packageName": "minimist",
        "patches": [],
        "proprietary": true,
        "publicationTime": "2020-03-11T08:22:19Z",
        "references": [
          {
            "title": "Command Injection PoC",
            "url": "https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a"
          },
          {
            "title": "GitHub Fix Commit #1",
            "url": "https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94"
          },
          {
            "title": "GitHub Fix Commit #2",
            "url": "https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab"
          },
          {
            "title": "Snyk Research Blog",
            "url": "https://snyk.io/blog/prototype-pollution-minimist/"
          }
        ],
        "semver": {
          "vulnerable": [
            "<0.2.1",
            ">=1.0.0 <1.2.3"
          ]
        },
        "severity": "medium",
        "severityWithCritical": "medium",
        "title": "Prototype Pollution",
        "from": [
          "email-template-manager@0.0.0",
          "node-sass@4.12.0",
          "node-gyp@3.8.0",
          "mkdirp@0.5.1",
          "minimist@0.0.8"
        ],
        "upgradePath": [
          false,
          "node-sass@4.12.0",
          "node-gyp@3.8.0",
          "mkdirp@0.5.2",
          "minimist@1.2.5"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "minimist",
        "version": "0.0.8"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "alternativeIds": [],
        "creationTime": "2020-03-11T08:25:47.093051Z",
        "credit": [
          "Snyk Security Team"
        ],
        "cvssScore": 5.6,
        "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The library could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` or `__proto__` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nrequire('minimist')('--__proto__.injected0 value0'.split(' '));\r\nconsole.log(({}).injected0 === 'value0'); // true\r\n\r\nrequire('minimist')('--constructor.prototype.injected1 value1'.split(' '));\r\nconsole.log(({}).injected1 === 'value1'); // true\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of ΓÇ£pathΓÇ¥, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototypeΓÇö use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. ΓÇ£JavaScript prototype pollution attack in NodeJS application.ΓÇ¥ GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 0.2.1, 1.2.3 or higher.\n## References\n- [Command Injection PoC](https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a)\n- [GitHub Fix Commit #1](https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94)\n- [GitHub Fix Commit #2](https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab)\n- [Snyk Research Blog](https://snyk.io/blog/prototype-pollution-minimist/)\n",
        "disclosureTime": "2020-03-10T08:22:24Z",
        "exploit": "Proof of Concept",
        "fixedIn": [
          "0.2.1",
          "1.2.3"
        ],
        "functions": [
          {
            "functionId": {
              "className": null,
              "filePath": "index.js",
              "functionName": "setKey"
            },
            "version": [
              "<0.2.1",
              ">=1.0.0 <1.1.1"
            ]
          },
          {
            "functionId": {
              "className": null,
              "filePath": "index.js",
              "functionName": "module.exports.setKey"
            },
            "version": [
              "<0.2.1",
              ">=1.1.1 <1.2.3"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "filePath": "index.js",
              "functionName": "setKey"
            },
            "version": [
              "<0.2.1",
              ">=1.0.0 <1.1.1"
            ]
          },
          {
            "functionId": {
              "filePath": "index.js",
              "functionName": "module.exports.setKey"
            },
            "version": [
              "<0.2.1",
              ">=1.1.1 <1.2.3"
            ]
          }
        ],
        "id": "SNYK-JS-MINIMIST-559764",
        "identifiers": {
          "CVE": [
            "CVE-2020-7598"
          ],
          "CWE": [
            "CWE-400"
          ],
          "GHSA": [
            "GHSA-vh95-rmgr-6w4m"
          ],
          "NSP": [
            1179
          ]
        },
        "language": "js",
        "modificationTime": "2020-12-20T09:48:43.878574Z",
        "moduleName": "minimist",
        "packageManager": "npm",
        "packageName": "minimist",
        "patches": [],
        "proprietary": true,
        "publicationTime": "2020-03-11T08:22:19Z",
        "references": [
          {
            "title": "Command Injection PoC",
            "url": "https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a"
          },
          {
            "title": "GitHub Fix Commit #1",
            "url": "https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94"
          },
          {
            "title": "GitHub Fix Commit #2",
            "url": "https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab"
          },
          {
            "title": "Snyk Research Blog",
            "url": "https://snyk.io/blog/prototype-pollution-minimist/"
          }
        ],
        "semver": {
          "vulnerable": [
            "<0.2.1",
            ">=1.0.0 <1.2.3"
          ]
        },
        "severity": "medium",
        "severityWithCritical": "medium",
        "title": "Prototype Pollution",
        "from": [
          "email-template-manager@0.0.0",
          "node-sass@4.12.0",
          "node-gyp@3.8.0",
          "fstream@1.0.12",
          "mkdirp@0.5.1",
          "minimist@0.0.8"
        ],
        "upgradePath": [
          false,
          "node-sass@4.12.0",
          "node-gyp@3.8.0",
          "fstream@1.0.12",
          "mkdirp@0.5.2",
          "minimist@1.2.5"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "minimist",
        "version": "0.0.8"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "alternativeIds": [],
        "creationTime": "2020-03-11T08:25:47.093051Z",
        "credit": [
          "Snyk Security Team"
        ],
        "cvssScore": 5.6,
        "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The library could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` or `__proto__` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nrequire('minimist')('--__proto__.injected0 value0'.split(' '));\r\nconsole.log(({}).injected0 === 'value0'); // true\r\n\r\nrequire('minimist')('--constructor.prototype.injected1 value1'.split(' '));\r\nconsole.log(({}).injected1 === 'value1'); // true\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of ΓÇ£pathΓÇ¥, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototypeΓÇö use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. ΓÇ£JavaScript prototype pollution attack in NodeJS application.ΓÇ¥ GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 0.2.1, 1.2.3 or higher.\n## References\n- [Command Injection PoC](https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a)\n- [GitHub Fix Commit #1](https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94)\n- [GitHub Fix Commit #2](https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab)\n- [Snyk Research Blog](https://snyk.io/blog/prototype-pollution-minimist/)\n",
        "disclosureTime": "2020-03-10T08:22:24Z",
        "exploit": "Proof of Concept",
        "fixedIn": [
          "0.2.1",
          "1.2.3"
        ],
        "functions": [
          {
            "functionId": {
              "className": null,
              "filePath": "index.js",
              "functionName": "setKey"
            },
            "version": [
              "<0.2.1",
              ">=1.0.0 <1.1.1"
            ]
          },
          {
            "functionId": {
              "className": null,
              "filePath": "index.js",
              "functionName": "module.exports.setKey"
            },
            "version": [
              "<0.2.1",
              ">=1.1.1 <1.2.3"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "filePath": "index.js",
              "functionName": "setKey"
            },
            "version": [
              "<0.2.1",
              ">=1.0.0 <1.1.1"
            ]
          },
          {
            "functionId": {
              "filePath": "index.js",
              "functionName": "module.exports.setKey"
            },
            "version": [
              "<0.2.1",
              ">=1.1.1 <1.2.3"
            ]
          }
        ],
        "id": "SNYK-JS-MINIMIST-559764",
        "identifiers": {
          "CVE": [
            "CVE-2020-7598"
          ],
          "CWE": [
            "CWE-400"
          ],
          "GHSA": [
            "GHSA-vh95-rmgr-6w4m"
          ],
          "NSP": [
            1179
          ]
        },
        "language": "js",
        "modificationTime": "2020-12-20T09:48:43.878574Z",
        "moduleName": "minimist",
        "packageManager": "npm",
        "packageName": "minimist",
        "patches": [],
        "proprietary": true,
        "publicationTime": "2020-03-11T08:22:19Z",
        "references": [
          {
            "title": "Command Injection PoC",
            "url": "https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a"
          },
          {
            "title": "GitHub Fix Commit #1",
            "url": "https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94"
          },
          {
            "title": "GitHub Fix Commit #2",
            "url": "https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab"
          },
          {
            "title": "Snyk Research Blog",
            "url": "https://snyk.io/blog/prototype-pollution-minimist/"
          }
        ],
        "semver": {
          "vulnerable": [
            "<0.2.1",
            ">=1.0.0 <1.2.3"
          ]
        },
        "severity": "medium",
        "severityWithCritical": "medium",
        "title": "Prototype Pollution",
        "from": [
          "email-template-manager@0.0.0",
          "node-sass@4.12.0",
          "node-gyp@3.8.0",
          "tar@2.2.2",
          "fstream@1.0.12",
          "mkdirp@0.5.1",
          "minimist@0.0.8"
        ],
        "upgradePath": [
          false,
          "node-sass@4.12.0",
          "node-gyp@3.8.0",
          "tar@2.2.2",
          "fstream@1.0.12",
          "mkdirp@0.5.2",
          "minimist@1.2.5"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "minimist",
        "version": "0.0.8"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
        "alternativeIds": [],
        "creationTime": "2021-01-12T08:49:09.354534Z",
        "credit": [
          "Lorenzo Stella"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\n[node-sass](https://npmjs.org/package/node-sass) is a Node.js bindings package for libsass.\n\nAffected versions of this package are vulnerable to Improper Certificate Validation. Certificate validation is disabled by default when requesting binaries, even if the user is not specifying an alternative download path.\n## Remediation\nThere is no fixed version for `node-sass`.\n## References\n- [GitHub PR (suggested fix)](https://github.com/sass/node-sass/pull/3086)\n- [GitHub PR (vulnerable code)](https://github.com/sass/node-sass/pull/567#issuecomment-656609236)\n",
        "disclosureTime": "2021-01-12T08:31:32Z",
        "exploit": "Not Defined",
        "fixedIn": [],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-NODESASS-1059081",
        "identifiers": {
          "CVE": [
            "CVE-2020-24025"
          ],
          "CWE": [
            "CWE-295"
          ]
        },
        "language": "js",
        "modificationTime": "2021-01-28T16:07:43.555268Z",
        "moduleName": "node-sass",
        "packageManager": "npm",
        "packageName": "node-sass",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2021-01-12T15:00:41Z",
        "references": [
          {
            "title": "GitHub PR (suggested fix)",
            "url": "https://github.com/sass/node-sass/pull/3086"
          },
          {
            "title": "GitHub PR (vulnerable code)",
            "url": "https://github.com/sass/node-sass/pull/567%23issuecomment-656609236"
          }
        ],
        "semver": {
          "vulnerable": [
            ">=2.0.0"
          ]
        },
        "severity": "medium",
        "severityWithCritical": "medium",
        "title": "Improper Certificate Validation",
        "from": [
          "email-template-manager@0.0.0",
          "node-sass@4.12.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "node-sass",
        "version": "4.12.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H/E:U/RL:U/RC:R",
        "alternativeIds": [],
        "creationTime": "2019-11-25T10:49:20.049890Z",
        "credit": [
          "Unkown"
        ],
        "cvssScore": 9.8,
        "description": "## Overview\n[node-sass](https://npmjs.org/package/node-sass) is a Node.js bindings package for libsass.\n\nAffected versions of this package are vulnerable to Use After Free. A use-after-free vulnerability exists in `handle_error()` in `sass_context.cpp` in LibSass 3.4.x and 3.5.x through 3.5.4 that could be leveraged to cause a denial of service (application crash) or possibly unspecified other impact. `node-sass` is affected by this vulnerability due to its usage of `libsass`.\n## Remediation\nUpgrade `node-sass` to version 4.13.1 or higher.\n## References\n- [GitHub Commit - libsass](https://github.com/sass/libsass/commit/930857ce4938f64ce1c31463dbd19b1aa781a5f7)\n- [GitHub Issue - libsass](https://github.com/sass/libsass/issues/2643)\n- [GitHub Issue - node-sass](https://github.com/sass/node-sass/issues/2621)\n",
        "disclosureTime": "2018-05-26T20:29:00Z",
        "exploit": "Unproven",
        "fixedIn": [
          "4.13.1"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-NODESASS-535497",
        "identifiers": {
          "CVE": [
            "CVE-2018-11499"
          ],
          "CWE": [
            "CWE-416"
          ]
        },
        "language": "js",
        "modificationTime": "2020-10-13T18:53:05.265934Z",
        "moduleName": "node-sass",
        "packageManager": "npm",
        "packageName": "node-sass",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-11-25T10:30:41Z",
        "references": [
          {
            "title": "GitHub Commit - libsass",
            "url": "https://github.com/sass/libsass/commit/930857ce4938f64ce1c31463dbd19b1aa781a5f7"
          },
          {
            "title": "GitHub Issue - libsass",
            "url": "https://github.com/sass/libsass/issues/2643"
          },
          {
            "title": "GitHub Issue - node-sass",
            "url": "https://github.com/sass/node-sass/issues/2621"
          }
        ],
        "semver": {
          "vulnerable": [
            ">=4.4.0 <4.13.1"
          ]
        },
        "severity": "high",
        "severityWithCritical": "critical",
        "title": "Use After Free",
        "from": [
          "email-template-manager@0.0.0",
          "node-sass@4.12.0"
        ],
        "upgradePath": [
          false,
          "node-sass@4.13.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "node-sass",
        "version": "4.12.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H/E:U/RL:U/RC:R",
        "alternativeIds": [],
        "creationTime": "2019-11-25T10:53:38.997425Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 6.5,
        "description": "## Overview\n[node-sass](https://npmjs.org/package/node-sass) is a Node.js bindings package for libsass.\n\nAffected versions of this package are vulnerable to Out-of-Bounds. A heap-based buffer over-read exists in `Sass::Prelexer::parenthese_scope` in `prelexer.hpp`.  `node-sass` is affected by this vulnerability due to its bundled usage of `libsass`.\n## Remediation\nThere is no fixed version for `node-sass`.\n## References\n- [GitHub Issue](https://github.com/sass/libsass/issues/2814)\n- [GitHub PR](https://github.com/sass/libsass/pull/2857)\n",
        "disclosureTime": "2019-01-14T10:52:45Z",
        "exploit": "Unproven",
        "fixedIn": [],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-NODESASS-535498",
        "identifiers": {
          "CVE": [
            "CVE-2019-6283"
          ],
          "CWE": [
            "CWE-119"
          ]
        },
        "language": "js",
        "modificationTime": "2021-01-27T13:18:18.772565Z",
        "moduleName": "node-sass",
        "packageManager": "npm",
        "packageName": "node-sass",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-11-25T10:52:39Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/sass/libsass/issues/2814"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/sass/libsass/pull/2857"
          }
        ],
        "semver": {
          "vulnerable": [
            "*"
          ]
        },
        "severity": "medium",
        "severityWithCritical": "medium",
        "title": "Out-of-Bounds",
        "from": [
          "email-template-manager@0.0.0",
          "node-sass@4.12.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "node-sass",
        "version": "4.12.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H/E:U/RL:U/RC:U",
        "alternativeIds": [],
        "creationTime": "2019-11-25T11:17:34.265849Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 8.8,
        "description": "## Overview\n[node-sass](https://npmjs.org/package/node-sass) is a Node.js bindings package for libsass.\n\nAffected versions of this package are vulnerable to NULL Pointer Dereference in the function `Sass::Functions::selector_append` which could be leveraged by an attacker to cause a denial of service (application crash) or possibly have unspecified other impact.  `node-sass` is affected by this vulnerability due to its bundled usage of `libsass`.\n## Remediation\nThere is no fixed version for `node-sass`.\n## References\n- [GitHub Commit](https://github.com/sass/libsass/commit/280ffd8c692cc24199b678f38fc796825d7df4a1)\n- [GitHub Commit](https://github.com/sass/libsass/commit/c93f0581c6b7794d8c1d5637c5c4dabd591b1d57)\n- [GitHub Issue](https://github.com/sass/libsass/issues/2663)\n",
        "disclosureTime": "2018-06-03T11:48:11Z",
        "exploit": "Unproven",
        "fixedIn": [],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-NODESASS-535500",
        "identifiers": {
          "CVE": [
            "CVE-2018-11694"
          ],
          "CWE": [
            "CWE-476"
          ]
        },
        "language": "js",
        "modificationTime": "2021-01-26T12:58:32.136210Z",
        "moduleName": "node-sass",
        "packageManager": "npm",
        "packageName": "node-sass",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-11-25T11:14:52Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/sass/libsass/commit/280ffd8c692cc24199b678f38fc796825d7df4a1"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/sass/libsass/commit/c93f0581c6b7794d8c1d5637c5c4dabd591b1d57"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/sass/libsass/issues/2663"
          }
        ],
        "semver": {
          "vulnerable": [
            "*"
          ]
        },
        "severity": "high",
        "severityWithCritical": "high",
        "title": "NULL Pointer Dereference",
        "from": [
          "email-template-manager@0.0.0",
          "node-sass@4.12.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "node-sass",
        "version": "4.12.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H/E:U/RL:U/RC:U",
        "alternativeIds": [],
        "creationTime": "2019-11-25T11:27:34.687368Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 6.5,
        "description": "## Overview\n[node-sass](https://npmjs.org/package/node-sass) is a Node.js bindings package for libsass.\n\nAffected versions of this package are vulnerable to NULL Pointer Dereference. In LibSass 3.5.5, a NULL Pointer Dereference in the function `Sass::Eval::operator()``(Sass::Supports_Operator*)` in `eval.cpp` may cause a Denial of Service (application crash) via a crafted sass input file.\n## Remediation\nThere is no fixed version for `node-sass`.\n## References\n- [GitHub Commit](https://github.com/sass/libsass/commit/69ae7ef4775e1dbd5985940927e28fe34201331d)\n- [GitHub Issue](https://github.com/sass/libsass/issues/2786)\n- [GitHub PR](https://github.com/sass/libsass/pull/2860)\n",
        "disclosureTime": "2018-12-17T11:25:14Z",
        "exploit": "Unproven",
        "fixedIn": [],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-NODESASS-535502",
        "identifiers": {
          "CVE": [
            "CVE-2018-20190"
          ],
          "CWE": [
            "CWE-476"
          ]
        },
        "language": "js",
        "modificationTime": "2021-01-27T13:16:40.520137Z",
        "moduleName": "node-sass",
        "packageManager": "npm",
        "packageName": "node-sass",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-11-25T11:25:06Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/sass/libsass/commit/69ae7ef4775e1dbd5985940927e28fe34201331d"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/sass/libsass/issues/2786"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/sass/libsass/pull/2860"
          }
        ],
        "semver": {
          "vulnerable": [
            "*"
          ]
        },
        "severity": "medium",
        "severityWithCritical": "medium",
        "title": "NULL Pointer Dereference",
        "from": [
          "email-template-manager@0.0.0",
          "node-sass@4.12.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "node-sass",
        "version": "4.12.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2020-01-08T15:54:16.379717Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 8.1,
        "description": "## Overview\n[node-sass](https://npmjs.org/package/node-sass) is a Node.js bindings package for libsass.\n\nAffected versions of this package are vulnerable to Out-of-bounds Read via the function `Sass::Prelexer::exactly()` which could be leveraged by an attacker to disclose information or manipulated to read from unmapped memory causing a denial of service. Note: `node-sass` is affected by this vulnerability due to its bundled usage of the `libsass` package.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browserΓÇÖs Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if theyΓÇÖve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the userΓÇÖs browser.| \n|**DOM-based**|Client|The attacker forces the userΓÇÖs browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nThere is no fixed version for `node-sass`.\n## References\n- [GitHub Commit](https://github.com/sass/libsass/commit/eb15533b07773c30dc03c9d742865604f47120ef)\n- [NVD](https://nvd.nist.gov/vuln/detail/CVE-2018-11697)\n",
        "disclosureTime": "2018-04-06T00:00:00Z",
        "exploit": "Not Defined",
        "fixedIn": [],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-NODESASS-540956",
        "identifiers": {
          "CVE": [
            "CVE-2018-11697"
          ],
          "CWE": [
            "CWE-79"
          ]
        },
        "language": "js",
        "modificationTime": "2021-02-01T08:49:47.842815Z",
        "moduleName": "node-sass",
        "packageManager": "npm",
        "packageName": "node-sass",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-01-08T00:00:00Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/sass/libsass/commit/eb15533b07773c30dc03c9d742865604f47120ef"
          },
          {
            "title": "NVD",
            "url": "https://nvd.nist.gov/vuln/detail/CVE-2018-11697"
          }
        ],
        "semver": {
          "vulnerable": [
            "*"
          ]
        },
        "severity": "high",
        "severityWithCritical": "high",
        "title": "Out-of-bounds Read",
        "from": [
          "email-template-manager@0.0.0",
          "node-sass@4.12.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "node-sass",
        "version": "4.12.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:L",
        "alternativeIds": [],
        "creationTime": "2020-01-08T15:54:20.880133Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 4.3,
        "description": "## Overview\n[node-sass](https://npmjs.org/package/node-sass) is a Node.js bindings package for libsass.\n\nAffected versions of this package are vulnerable to Out-of-bounds Read via `Sass::weaveParents` in `ast_sel_weave.cpp`. Note: `node-sass` is affected by this vulnerability due to its bundled usage of the `libsass` package.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLetΓÇÖs take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesnΓÇÖt match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nThere is no fixed version for `node-sass`.\n## References\n- [GitHub Commit](https://github.com/sass/libsass/commit/e1c16e09b4a953757a15149deaaf28a3fd81dc97)\n- [NVD](https://nvd.nist.gov/vuln/detail/CVE-2019-18798)\n",
        "disclosureTime": "2019-06-11T00:00:00Z",
        "exploit": "Not Defined",
        "fixedIn": [],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-NODESASS-540958",
        "identifiers": {
          "CVE": [
            "CVE-2019-18798"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "js",
        "modificationTime": "2021-02-01T08:43:30.299373Z",
        "moduleName": "node-sass",
        "packageManager": "npm",
        "packageName": "node-sass",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-01-08T00:00:00Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/sass/libsass/commit/e1c16e09b4a953757a15149deaaf28a3fd81dc97"
          },
          {
            "title": "NVD",
            "url": "https://nvd.nist.gov/vuln/detail/CVE-2019-18798"
          }
        ],
        "semver": {
          "vulnerable": [
            "*"
          ]
        },
        "severity": "medium",
        "severityWithCritical": "medium",
        "title": "Out-of-bounds Read",
        "from": [
          "email-template-manager@0.0.0",
          "node-sass@4.12.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "node-sass",
        "version": "4.12.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:L",
        "alternativeIds": [],
        "creationTime": "2020-01-08T15:54:35.116986Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 4.3,
        "description": "## Overview\n[node-sass](https://npmjs.org/package/node-sass) is a Node.js bindings package for libsass.\n\nAffected versions of this package are vulnerable to Uncontrolled Recursion via `Sass::Eval::operator()(Sass::Binary_Expression*)` in `eval.cpp`. Note: `node-sass` is affected by this vulnerability due to its bundled usage of the `libsass` package.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browserΓÇÖs Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if theyΓÇÖve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the userΓÇÖs browser.| \n|**DOM-based**|Client|The attacker forces the userΓÇÖs browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nThere is no fixed version for `node-sass`.\n## References\n- [GitHub Issue](https://github.com/sass/libsass/issues/3000)\n- [NVD](https://nvd.nist.gov/vuln/detail/CVE-2019-18797)\n",
        "disclosureTime": "2019-08-11T00:00:00Z",
        "exploit": "Not Defined",
        "fixedIn": [],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-NODESASS-540964",
        "identifiers": {
          "CVE": [
            "CVE-2019-18797"
          ],
          "CWE": [
            "CWE-79"
          ]
        },
        "language": "js",
        "modificationTime": "2021-02-01T08:49:06.854582Z",
        "moduleName": "node-sass",
        "packageManager": "npm",
        "packageName": "node-sass",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-01-08T00:00:00Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/sass/libsass/issues/3000"
          },
          {
            "title": "NVD",
            "url": "https://nvd.nist.gov/vuln/detail/CVE-2019-18797"
          }
        ],
        "semver": {
          "vulnerable": [
            "*"
          ]
        },
        "severity": "medium",
        "severityWithCritical": "medium",
        "title": "Uncontrolled Recursion",
        "from": [
          "email-template-manager@0.0.0",
          "node-sass@4.12.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "node-sass",
        "version": "4.12.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2020-01-08T15:55:07.174487Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 6.5,
        "description": "## Overview\n[node-sass](https://npmjs.org/package/node-sass) is a Node.js bindings package for libsass.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS). Uncontrolled recursion is possible in `Sass::Complex_Selector::perform` in `ast.hpp` and `Sass::Inspect::operator` in `inspect.cpp`. Note: `node-sass` is affected by this vulnerability due to its bundled usage of the `libsass` package.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browserΓÇÖs Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if theyΓÇÖve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the userΓÇÖs browser.| \n|**DOM-based**|Client|The attacker forces the userΓÇÖs browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nThere is no fixed version for `node-sass`.\n## References\n- [GitHub Issue](https://github.com/sass/libsass/issues/2671)\n- [NVD](https://nvd.nist.gov/vuln/detail/CVE-2018-20822)\n",
        "disclosureTime": "2018-06-13T00:00:00Z",
        "exploit": "Not Defined",
        "fixedIn": [],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-NODESASS-540978",
        "identifiers": {
          "CVE": [
            "CVE-2018-20822"
          ],
          "CWE": [
            "CWE-79"
          ]
        },
        "language": "js",
        "modificationTime": "2021-02-01T08:49:38.356910Z",
        "moduleName": "node-sass",
        "packageManager": "npm",
        "packageName": "node-sass",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-01-08T00:00:00Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/sass/libsass/issues/2671"
          },
          {
            "title": "NVD",
            "url": "https://nvd.nist.gov/vuln/detail/CVE-2018-20822"
          }
        ],
        "semver": {
          "vulnerable": [
            "*"
          ]
        },
        "severity": "medium",
        "severityWithCritical": "medium",
        "title": "Denial of Service (DoS)",
        "from": [
          "email-template-manager@0.0.0",
          "node-sass@4.12.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "node-sass",
        "version": "4.12.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2020-01-08T15:55:11.832946Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 6.5,
        "description": "## Overview\n[node-sass](https://npmjs.org/package/node-sass) is a Node.js bindings package for libsass.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS). The parsing component allows attackers to cause uncontrolled recursion in `Sass::Parser::parse_css_variable_value` in parser.cpp. Note: `node-sass` is affected by this vulnerability due to its bundled usage of the `libsass` package.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browserΓÇÖs Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if theyΓÇÖve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the userΓÇÖs browser.| \n|**DOM-based**|Client|The attacker forces the userΓÇÖs browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nThere is no fixed version for `node-sass`.\n## References\n- [GitHub Commit](https://github.com/sass/libsass/commit/f2db04883e5fff4e03777dcc1eb60d4373c45be1)\n- [GitHub Issue](https://github.com/sass/libsass/issues/2658)\n",
        "disclosureTime": "2018-06-02T00:00:00Z",
        "exploit": "Not Defined",
        "fixedIn": [],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-NODESASS-540980",
        "identifiers": {
          "CVE": [
            "CVE-2018-20821"
          ],
          "CWE": [
            "CWE-79"
          ]
        },
        "language": "js",
        "modificationTime": "2021-01-27T13:17:22.558432Z",
        "moduleName": "node-sass",
        "packageManager": "npm",
        "packageName": "node-sass",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-01-08T00:00:00Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/sass/libsass/commit/f2db04883e5fff4e03777dcc1eb60d4373c45be1"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/sass/libsass/issues/2658"
          }
        ],
        "semver": {
          "vulnerable": [
            "*"
          ]
        },
        "severity": "medium",
        "severityWithCritical": "medium",
        "title": "Denial of Service (DoS)",
        "from": [
          "email-template-manager@0.0.0",
          "node-sass@4.12.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "node-sass",
        "version": "4.12.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2020-01-08T15:55:34.469639Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 6.5,
        "description": "## Overview\n[node-sass](https://npmjs.org/package/node-sass) is a Node.js bindings package for libsass.\n\nAffected versions of this package are vulnerable to Out-of-bounds Read via `Sass::Prelexer::skip_over_scopes` in `prelexer.hpp` when called from `Sass::Parser::parse_import()`, a similar issue to CVE-2018-11693. Note: `node-sass` is affected by this vulnerability due to its bundled usage of the `libsass` package.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browserΓÇÖs Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if theyΓÇÖve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the userΓÇÖs browser.| \n|**DOM-based**|Client|The attacker forces the userΓÇÖs browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nThere is no fixed version for `node-sass`.\n## References\n- [GitHub Commit](https://github.com/sass/libsass/commit/8e681e20795ee1cf203ff7002367c29735addf67)\n- [NVD](https://nvd.nist.gov/vuln/detail/CVE-2019-6286)\n",
        "disclosureTime": "2019-04-08T00:00:00Z",
        "exploit": "Not Defined",
        "fixedIn": [],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-NODESASS-540990",
        "identifiers": {
          "CVE": [
            "CVE-2019-6286"
          ],
          "CWE": [
            "CWE-79"
          ]
        },
        "language": "js",
        "modificationTime": "2021-01-27T13:21:56.023039Z",
        "moduleName": "node-sass",
        "packageManager": "npm",
        "packageName": "node-sass",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-01-08T00:00:00Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/sass/libsass/commit/8e681e20795ee1cf203ff7002367c29735addf67"
          },
          {
            "title": "NVD",
            "url": "https://nvd.nist.gov/vuln/detail/CVE-2019-6286"
          }
        ],
        "semver": {
          "vulnerable": [
            "*"
          ]
        },
        "severity": "medium",
        "severityWithCritical": "medium",
        "title": "Out-of-bounds Read",
        "from": [
          "email-template-manager@0.0.0",
          "node-sass@4.12.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "node-sass",
        "version": "4.12.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:L",
        "alternativeIds": [],
        "creationTime": "2020-01-08T15:55:38.727504Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 4.3,
        "description": "## Overview\n[node-sass](https://npmjs.org/package/node-sass) is a Node.js bindings package for libsass.\n\nAffected versions of this package are vulnerable to NULL Pointer Dereference via `Sass::Parser::parseCompoundSelector`in `parser_selectors.cpp`. Note: `node-sass` is affected by this vulnerability due to its bundled usage of the `libsass` package.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browserΓÇÖs Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if theyΓÇÖve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the userΓÇÖs browser.| \n|**DOM-based**|Client|The attacker forces the userΓÇÖs browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nThere is no fixed version for `node-sass`.\n## References\n- [GitHub Commit](https://github.com/sass/libsass/commit/e1c16e09b4a953757a15149deaaf28a3fd81dc97)\n- [NVD](https://nvd.nist.gov/vuln/detail/CVE-2019-18799)\n",
        "disclosureTime": "2019-11-08T00:00:00Z",
        "exploit": "Not Defined",
        "fixedIn": [],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-NODESASS-540992",
        "identifiers": {
          "CVE": [
            "CVE-2019-18799"
          ],
          "CWE": [
            "CWE-79"
          ]
        },
        "language": "js",
        "modificationTime": "2021-02-01T08:49:19.472238Z",
        "moduleName": "node-sass",
        "packageManager": "npm",
        "packageName": "node-sass",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-01-08T00:00:00Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/sass/libsass/commit/e1c16e09b4a953757a15149deaaf28a3fd81dc97"
          },
          {
            "title": "NVD",
            "url": "https://nvd.nist.gov/vuln/detail/CVE-2019-18799"
          }
        ],
        "semver": {
          "vulnerable": [
            "*"
          ]
        },
        "severity": "medium",
        "severityWithCritical": "medium",
        "title": "NULL Pointer Dereference",
        "from": [
          "email-template-manager@0.0.0",
          "node-sass@4.12.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "node-sass",
        "version": "4.12.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2020-01-08T15:55:43.915190Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 6.5,
        "description": "## Overview\n[node-sass](https://npmjs.org/package/node-sass) is a Node.js bindings package for libsass.\n\nAffected versions of this package are vulnerable to NULL Pointer Dereference. The function `Sass::Selector_List::populate_extends` in `SharedPtr.hpp` (used by `ast.cpp` and `ast_selectors.cpp`) may cause a Denial of Service (application crash) via a crafted sass input file. Note: `node-sass` is affected by this vulnerability due to its bundled usage of the `libsass` package.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browserΓÇÖs Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if theyΓÇÖve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the userΓÇÖs browser.| \n|**DOM-based**|Client|The attacker forces the userΓÇÖs browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nThere is no fixed version for `node-sass`.\n## References\n- [GitHub Commit](https://github.com/sass/libsass/commit/e94b5f91ec372a84be1f9c0da32cb6e0af0b99fe)\n- [NVD](https://nvd.nist.gov/vuln/detail/CVE-2018-19797)\n",
        "disclosureTime": "2019-12-02T00:00:00Z",
        "exploit": "Not Defined",
        "fixedIn": [],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-NODESASS-540994",
        "identifiers": {
          "CVE": [
            "CVE-2018-19797"
          ],
          "CWE": [
            "CWE-79"
          ]
        },
        "language": "js",
        "modificationTime": "2021-01-27T10:37:37.776523Z",
        "moduleName": "node-sass",
        "packageManager": "npm",
        "packageName": "node-sass",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-01-08T00:00:00Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/sass/libsass/commit/e94b5f91ec372a84be1f9c0da32cb6e0af0b99fe"
          },
          {
            "title": "NVD",
            "url": "https://nvd.nist.gov/vuln/detail/CVE-2018-19797"
          }
        ],
        "semver": {
          "vulnerable": [
            "*"
          ]
        },
        "severity": "medium",
        "severityWithCritical": "medium",
        "title": "NULL Pointer Dereference",
        "from": [
          "email-template-manager@0.0.0",
          "node-sass@4.12.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "node-sass",
        "version": "4.12.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2020-01-08T15:55:49.365066Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 8.1,
        "description": "## Overview\n[node-sass](https://npmjs.org/package/node-sass) is a Node.js bindings package for libsass.\n\nAffected versions of this package are vulnerable to Out-of-bounds Read via the function `Sass::handle_error` which could be leveraged by an attacker to disclose information or manipulated to read from unmapped memory causing a denial of service. Note: `node-sass` is affected by this vulnerability due to its bundled usage of the `libsass` package.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browserΓÇÖs Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if theyΓÇÖve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the userΓÇÖs browser.| \n|**DOM-based**|Client|The attacker forces the userΓÇÖs browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nThere is no fixed version for `node-sass`.\n## References\n- [GitHub Commit](https://github.com/sass/libsass/commit/8f40dc03e5ab5a8b2ebeb72b31f8d1adbb2fd6ae)\n- [NVD](https://nvd.nist.gov/vuln/detail/CVE-2018-11698)\n",
        "disclosureTime": "2019-11-22T00:00:00Z",
        "exploit": "Not Defined",
        "fixedIn": [],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-NODESASS-540996",
        "identifiers": {
          "CVE": [
            "CVE-2018-11698"
          ],
          "CWE": [
            "CWE-79"
          ]
        },
        "language": "js",
        "modificationTime": "2021-01-27T10:36:39.214566Z",
        "moduleName": "node-sass",
        "packageManager": "npm",
        "packageName": "node-sass",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-01-08T00:00:00Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/sass/libsass/commit/8f40dc03e5ab5a8b2ebeb72b31f8d1adbb2fd6ae"
          },
          {
            "title": "NVD",
            "url": "https://nvd.nist.gov/vuln/detail/CVE-2018-11698"
          }
        ],
        "semver": {
          "vulnerable": [
            "*"
          ]
        },
        "severity": "high",
        "severityWithCritical": "high",
        "title": "Out-of-bounds Read",
        "from": [
          "email-template-manager@0.0.0",
          "node-sass@4.12.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "node-sass",
        "version": "4.12.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2020-01-08T15:55:53.988216Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 6.5,
        "description": "## Overview\n[node-sass](https://npmjs.org/package/node-sass) is a Node.js bindings package for libsass.\n\nAffected versions of this package are vulnerable to Out-of-Bounds via `Sass::Prelexer::alternatives` in `prelexer.hpp`. Note: `node-sass` is affected by this vulnerability due to its bundled usage of the `libsass` package.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browserΓÇÖs Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if theyΓÇÖve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the userΓÇÖs browser.| \n|**DOM-based**|Client|The attacker forces the userΓÇÖs browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nThere is no fixed version for `node-sass`.\n## References\n- [GitHub Commit](https://github.com/sass/libsass/pull/2857/commits/0f3d3f8df99af422af055c41d778ca9c5c60a0bb)\n- [GitHub Issue](https://github.com/sass/libsass/issues/2814)\n- [NVD](https://nvd.nist.gov/vuln/detail/CVE-2019-6284)\n",
        "disclosureTime": "2019-04-08T00:00:00Z",
        "exploit": "Not Defined",
        "fixedIn": [],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-NODESASS-540998",
        "identifiers": {
          "CVE": [
            "CVE-2019-6284"
          ],
          "CWE": [
            "CWE-79"
          ]
        },
        "language": "js",
        "modificationTime": "2021-01-27T13:21:14.602326Z",
        "moduleName": "node-sass",
        "packageManager": "npm",
        "packageName": "node-sass",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-01-08T00:00:00Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/sass/libsass/pull/2857/commits/0f3d3f8df99af422af055c41d778ca9c5c60a0bb"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/sass/libsass/issues/2814"
          },
          {
            "title": "NVD",
            "url": "https://nvd.nist.gov/vuln/detail/CVE-2019-6284"
          }
        ],
        "semver": {
          "vulnerable": [
            "*"
          ]
        },
        "severity": "medium",
        "severityWithCritical": "medium",
        "title": "Out-of-Bounds",
        "from": [
          "email-template-manager@0.0.0",
          "node-sass@4.12.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "node-sass",
        "version": "4.12.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2020-01-08T15:55:58.595345Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 8.8,
        "description": "## Overview\n[node-sass](https://npmjs.org/package/node-sass) is a Node.js bindings package for libsass.\n\nAffected versions of this package are vulnerable to Use After Free via the `SharedPtr` class in `SharedPtr.cpp` (or `SharedPtr.hpp`) that may cause a denial of service (application crash) or possibly have unspecified other impact. Note: `node-sass` is affected by this vulnerability due to its bundled usage of the `libsass` package.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browserΓÇÖs Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if theyΓÇÖve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the userΓÇÖs browser.| \n|**DOM-based**|Client|The attacker forces the userΓÇÖs browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nThere is no fixed version for `node-sass`.\n## References\n- [GitHub Commit](https://github.com/sass/libsass/commit/b21fb9f84096d9927780b86fa90629a096af358d)\n- [NVD](https://nvd.nist.gov/vuln/detail/CVE-2018-19827)\n",
        "disclosureTime": "2019-12-03T00:00:00Z",
        "exploit": "Not Defined",
        "fixedIn": [],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-NODESASS-541000",
        "identifiers": {
          "CVE": [
            "CVE-2018-19827"
          ],
          "CWE": [
            "CWE-79"
          ]
        },
        "language": "js",
        "modificationTime": "2020-06-12T14:37:03.348651Z",
        "moduleName": "node-sass",
        "packageManager": "npm",
        "packageName": "node-sass",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-01-08T00:00:00Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/sass/libsass/commit/b21fb9f84096d9927780b86fa90629a096af358d"
          },
          {
            "title": "NVD",
            "url": "https://nvd.nist.gov/vuln/detail/CVE-2018-19827"
          }
        ],
        "semver": {
          "vulnerable": [
            "*"
          ]
        },
        "severity": "high",
        "severityWithCritical": "high",
        "title": "Use After Free",
        "from": [
          "email-template-manager@0.0.0",
          "node-sass@4.12.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "node-sass",
        "version": "4.12.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2020-01-08T15:56:03.064793Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 6.5,
        "description": "## Overview\n[node-sass](https://npmjs.org/package/node-sass) is a Node.js bindings package for libsass.\n\nAffected versions of this package are vulnerable to Out-of-bounds Read. The function `handle_error` in `sass_context.cpp` allows attackers to cause a denial-of-service resulting from a heap-based buffer over-read via a crafted sass file. Note: `node-sass` is affected by this vulnerability due to its bundled usage of the `libsass` package.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browserΓÇÖs Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if theyΓÇÖve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the userΓÇÖs browser.| \n|**DOM-based**|Client|The attacker forces the userΓÇÖs browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nThere is no fixed version for `node-sass`.\n## References\n- [GitHub Commit](https://github.com/sass/libsass/commit/2cabd116b95d67dcd9d44fcb936dee03f4fc71b9)\n- [GitHub Issue](https://github.com/sass/libsass/issues/2657)\n- [GitHub PR](https://github.com/sass/libsass/pull/2767)\n",
        "disclosureTime": "2018-11-28T00:00:00Z",
        "exploit": "Not Defined",
        "fixedIn": [],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-NODESASS-541002",
        "identifiers": {
          "CVE": [
            "CVE-2018-19839"
          ],
          "CWE": [
            "CWE-79"
          ]
        },
        "language": "js",
        "modificationTime": "2020-06-12T14:36:56.477670Z",
        "moduleName": "node-sass",
        "packageManager": "npm",
        "packageName": "node-sass",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-01-08T00:00:00Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/sass/libsass/commit/2cabd116b95d67dcd9d44fcb936dee03f4fc71b9"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/sass/libsass/issues/2657"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/sass/libsass/pull/2767"
          }
        ],
        "semver": {
          "vulnerable": [
            "*"
          ]
        },
        "severity": "medium",
        "severityWithCritical": "medium",
        "title": "Out-of-bounds Read",
        "from": [
          "email-template-manager@0.0.0",
          "node-sass@4.12.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "node-sass",
        "version": "4.12.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [],
        "creationTime": "2020-01-19T11:23:26.266933Z",
        "credit": [
          "Alexander Jordan"
        ],
        "cvssScore": 5.9,
        "description": "## Overview\n[node-sass](https://npmjs.org/package/node-sass) is a Node.js bindings package for libsass.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS). Crafted objects passed to the `renderSync` function may trigger C++ assertions in `CustomImporterBridge::get_importer_entry` and `CustomImporterBridge::post_process_return_value` that crash the Node process. This may allow attackers to crash the system's running Node process and lead to Denial of Service.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLetΓÇÖs take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesnΓÇÖt match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `node-sass` to version 4.13.1 or higher.\n## References\n- [GitHub Commit](https://github.com/sass/node-sass/commit/338fd7a14d3b8bd374a382336df16f9c6792b884)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/961)\n",
        "disclosureTime": "2020-12-13T13:44:17Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "4.13.1"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-NODESASS-542662",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-400"
          ],
          "GHSA": [
            "GHSA-f6rp-gv58-9cw3"
          ],
          "NSP": [
            961
          ]
        },
        "language": "js",
        "modificationTime": "2020-06-12T14:36:55.965273Z",
        "moduleName": "node-sass",
        "packageManager": "npm",
        "packageName": "node-sass",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-01-19T11:27:45Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/sass/node-sass/commit/338fd7a14d3b8bd374a382336df16f9c6792b884"
          },
          {
            "title": "NPM Security Advisory",
            "url": "https://www.npmjs.com/advisories/961"
          }
        ],
        "semver": {
          "vulnerable": [
            ">=3.3.0 <4.13.1"
          ]
        },
        "severity": "medium",
        "severityWithCritical": "medium",
        "title": "Denial of Service (DoS)",
        "from": [
          "email-template-manager@0.0.0",
          "node-sass@4.12.0"
        ],
        "upgradePath": [
          false,
          "node-sass@4.13.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "node-sass",
        "version": "4.12.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N/E:U/RL:O/RC:R",
        "alternativeIds": [],
        "creationTime": "2021-01-07T12:41:17.131304Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 5.4,
        "description": "## Overview\n[tinymce](https://github.com/tinymce/tinymce-dist) is a Web based JavaScript HTML WYSIWYG editor control.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS). A vulnerability exists within the URL sanitization logic of the core parser. The vulnerability allowed arbitrary JavaScript execution when inserting a specially crafted piece of content into the editor using the clipboard or APIs.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browserΓÇÖs Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if theyΓÇÖve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the userΓÇÖs browser.| \n|**DOM-based**|Client|The attacker forces the userΓÇÖs browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `tinymce` to version 5.6.0 or higher.\n## References\n- [TinyMCE Release Notes](https://www.tiny.cloud/docs/release-notes/release-notes56/#securityfixes)\n",
        "disclosureTime": "2021-01-06T19:27:54Z",
        "exploit": "Unproven",
        "fixedIn": [
          "5.6.0"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-TINYMCE-1056408",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-79"
          ],
          "GHSA": [
            "GHSA-w7jx-j77m-wp65"
          ]
        },
        "language": "js",
        "modificationTime": "2021-01-07T16:40:31.635900Z",
        "moduleName": "tinymce",
        "packageManager": "npm",
        "packageName": "tinymce",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2021-01-07T16:40:30Z",
        "references": [
          {
            "title": "TinyMCE Release Notes",
            "url": "https://www.tiny.cloud/docs/release-notes/release-notes56/%23securityfixes"
          }
        ],
        "semver": {
          "vulnerable": [
            "<5.6.0"
          ]
        },
        "severity": "medium",
        "severityWithCritical": "medium",
        "title": "Cross-site Scripting (XSS)",
        "from": [
          "email-template-manager@0.0.0",
          "tinymce@5.0.4"
        ],
        "upgradePath": [
          false,
          "tinymce@5.6.0"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "tinymce",
        "version": "5.0.4"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
        "alternativeIds": [],
        "creationTime": "2020-01-31T10:34:38.252292Z",
        "credit": [
          "Michal Bentkowski"
        ],
        "cvssScore": 7.3,
        "description": "## Overview\n[tinymce](https://github.com/tinymce/tinymce-dist) is a Web based JavaScript HTML WYSIWYG editor control.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) in the core parser, paste and `visualchars` plugins. The vulnerability allowed arbitrary JavaScript execution when inserting a specially crafted piece of content into the editor via the clipboard or APIs.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browserΓÇÖs Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if theyΓÇÖve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the userΓÇÖs browser.| \n|**DOM-based**|Client|The attacker forces the userΓÇÖs browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `tinymce` to version 5.1.4, 4.9.7 or higher.\n## References\n- [GitHub Advisory](https://github.com/tinymce/tinymce/security/advisories/GHSA-27gm-ghr9-4v95)\n- [GitHub Commit](https://github.com/tinymce/tinymce/commit/425a859780fd7d839593c57636e9ba3473e79a12)\n- [GitHub Commit](https://github.com/tinymce/tinymce/commit/67e52b815cf575498cab127dbf7f1899216d819f)\n- [GitHub Commit](https://github.com/tinymce/tinymce/commit/b9576c8681d6f715623e6a1f403e5aca8d27cbe0)\n",
        "disclosureTime": "2020-01-30T10:35:10Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "5.1.4",
          "4.9.7"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-TINYMCE-543825",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-79"
          ],
          "GHSA": [
            "GHSA-27gm-ghr9-4v95"
          ]
        },
        "language": "js",
        "modificationTime": "2020-06-12T14:36:54.814775Z",
        "moduleName": "tinymce",
        "packageManager": "npm",
        "packageName": "tinymce",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-01-31T10:35:08Z",
        "references": [
          {
            "title": "GitHub Advisory",
            "url": "https://github.com/tinymce/tinymce/security/advisories/GHSA-27gm-ghr9-4v95"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/tinymce/tinymce/commit/425a859780fd7d839593c57636e9ba3473e79a12"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/tinymce/tinymce/commit/67e52b815cf575498cab127dbf7f1899216d819f"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/tinymce/tinymce/commit/b9576c8681d6f715623e6a1f403e5aca8d27cbe0"
          }
        ],
        "semver": {
          "vulnerable": [
            ">=5.0.0 <5.1.4",
            "<4.9.7"
          ]
        },
        "severity": "high",
        "severityWithCritical": "high",
        "title": "Cross-site Scripting (XSS)",
        "from": [
          "email-template-manager@0.0.0",
          "tinymce@5.0.4"
        ],
        "upgradePath": [
          false,
          "tinymce@5.1.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "tinymce",
        "version": "5.0.4"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "alternativeIds": [],
        "creationTime": "2020-05-12T13:46:42.094289Z",
        "credit": [
          "Michal Bentkowski"
        ],
        "cvssScore": 6.3,
        "description": "## Overview\n[tinymce](https://github.com/tinymce/tinymce-dist) is a Web based JavaScript HTML WYSIWYG editor control.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) via the `media` plugin.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browserΓÇÖs Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if theyΓÇÖve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the userΓÇÖs browser.| \n|**DOM-based**|Client|The attacker forces the userΓÇÖs browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `tinymce` to version 4.9.10, 5.2.2 or higher.\n## References\n- [GitHub Commit](https://github.com/tinymce/tinymce/pull/5593/files)\n- [Release Notes](https://www.tiny.cloud/docs/release-notes/release-notes522/#securityfixes)\n",
        "disclosureTime": "2020-05-12T13:14:14Z",
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.9.10",
          "5.2.2"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-TINYMCE-568922",
        "identifiers": {
          "CVE": [
            "CVE-2019-1010091"
          ],
          "CWE": [
            "CWE-79"
          ],
          "GHSA": [
            "GHSA-c78w-2gw7-gjv3"
          ]
        },
        "language": "js",
        "modificationTime": "2020-05-12T15:14:06.604729Z",
        "moduleName": "tinymce",
        "packageManager": "npm",
        "packageName": "tinymce",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-05-12T15:14:06Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/tinymce/tinymce/pull/5593/files"
          },
          {
            "title": "Release Notes",
            "url": "https://www.tiny.cloud/docs/release-notes/release-notes522/%23securityfixes"
          }
        ],
        "semver": {
          "vulnerable": [
            "<4.9.10",
            ">=5.0.0 <5.2.2"
          ]
        },
        "severity": "medium",
        "severityWithCritical": "medium",
        "title": "Cross-site Scripting (XSS)",
        "from": [
          "email-template-manager@0.0.0",
          "tinymce@5.0.4"
        ],
        "upgradePath": [
          false,
          "tinymce@5.2.2"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "tinymce",
        "version": "5.0.4"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:H",
        "alternativeIds": [],
        "creationTime": "2020-08-12T10:32:42.440074Z",
        "credit": [
          "George Steketee",
          "Chris Davis"
        ],
        "cvssScore": 9.6,
        "description": "## Overview\n[tinymce](https://github.com/tinymce/tinymce-dist) is a Web based JavaScript HTML WYSIWYG editor control.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS). It allows arbitrary JavaScript execution when inserting a specially crafted piece of content into the editor via the clipboard or APIs.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browserΓÇÖs Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if theyΓÇÖve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the userΓÇÖs browser.| \n|**DOM-based**|Client|The attacker forces the userΓÇÖs browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `tinymce` to version 4.9.11, 5.4.0 or higher.\n## References\n- [TinyMCE Release Notes](https://www.tiny.cloud/docs/release-notes/release-notes54/#securityfixes)\n",
        "disclosureTime": "2020-08-11T14:55:01Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "4.9.11",
          "5.4.0"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-TINYMCE-598223",
        "identifiers": {
          "CVE": [
            "CVE-2020-12648"
          ],
          "CWE": [
            "CWE-79"
          ],
          "GHSA": [
            "GHSA-vrv8-v4w8-f95h"
          ]
        },
        "language": "js",
        "modificationTime": "2020-08-12T10:53:14.352152Z",
        "moduleName": "tinymce",
        "packageManager": "npm",
        "packageName": "tinymce",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-08-12T10:53:14Z",
        "references": [
          {
            "title": "TinyMCE Release Notes",
            "url": "https://www.tiny.cloud/docs/release-notes/release-notes54/%23securityfixes"
          }
        ],
        "semver": {
          "vulnerable": [
            "<4.9.11",
            ">=5.0.0 <5.4.0"
          ]
        },
        "severity": "high",
        "severityWithCritical": "critical",
        "title": "Cross-site Scripting (XSS)",
        "from": [
          "email-template-manager@0.0.0",
          "tinymce@5.0.4"
        ],
        "upgradePath": [
          false,
          "tinymce@5.4.0"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "tinymce",
        "version": "5.0.4"
      },
      {
        "license": "LGPL-2.1",
        "semver": {
          "vulnerable": [
            ">=0"
          ]
        },
        "id": "snyk:lic:npm:tinymce:LGPL-2.1",
        "type": "license",
        "packageManager": "npm",
        "language": "js",
        "packageName": "tinymce",
        "title": "LGPL-2.1 license",
        "description": "LGPL-2.1 license",
        "publicationTime": "2021-03-16T22:57:53.213Z",
        "creationTime": "2021-03-16T22:57:53.213Z",
        "patches": [],
        "licenseTemplateUrl": "https://raw.githubusercontent.com/spdx/license-list/master/LGPL-2.1.txt",
        "severity": "medium",
        "from": [
          "email-template-manager@0.0.0",
          "tinymce@5.0.4"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "tinymce",
        "version": "5.0.4"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
        "alternativeIds": [],
        "creationTime": "2020-10-25T14:27:16.715665Z",
        "credit": [
          "po6ix"
        ],
        "cvssScore": 7.3,
        "description": "## Overview\n[y18n](https://www.npmjs.com/package/y18n) is a the bare-bones internationalization library used by yargs\n\nAffected versions of this package are vulnerable to Prototype Pollution. PoC by po6ix:\r\n```\r\nconst y18n = require('y18n')();\r\n \r\ny18n.setLocale('__proto__');\r\ny18n.updateLocale({polluted: true});\r\n\r\nconsole.log(polluted); // true\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of ΓÇ£pathΓÇ¥, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototypeΓÇö use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. ΓÇ£JavaScript prototype pollution attack in NodeJS application.ΓÇ¥ GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `y18n` to version 3.2.2, 4.0.1, 5.0.5 or higher.\n## References\n- [GitHub Issue](https://github.com/yargs/y18n/issues/96)\n- [GitHub PR](https://github.com/yargs/y18n/pull/108)\n",
        "disclosureTime": "2020-10-25T14:24:22Z",
        "exploit": "Proof of Concept",
        "fixedIn": [
          "3.2.2",
          "4.0.1",
          "5.0.5"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-Y18N-1021887",
        "identifiers": {
          "CVE": [
            "CVE-2020-7774"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "js",
        "modificationTime": "2021-01-05T15:29:00.943111Z",
        "moduleName": "y18n",
        "packageManager": "npm",
        "packageName": "y18n",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-11-10T15:27:28Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/yargs/y18n/issues/96"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/yargs/y18n/pull/108"
          }
        ],
        "semver": {
          "vulnerable": [
            "<3.2.2",
            ">=4.0.0 <4.0.1",
            ">=5.0.0 <5.0.5"
          ]
        },
        "severity": "high",
        "severityWithCritical": "high",
        "title": "Prototype Pollution",
        "from": [
          "email-template-manager@0.0.0",
          "node-sass@4.12.0",
          "sass-graph@2.2.4",
          "yargs@7.1.0",
          "y18n@3.2.1"
        ],
        "upgradePath": [
          false,
          "node-sass@4.12.0",
          "sass-graph@2.2.4",
          "yargs@7.1.0",
          "y18n@3.2.2"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "y18n",
        "version": "3.2.1"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "alternativeIds": [],
        "creationTime": "2020-03-16T16:41:36.590728Z",
        "credit": [
          "Snyk Security Team"
        ],
        "cvssScore": 5.6,
        "description": "## Overview\n[yargs-parser](https://www.npmjs.com/package/yargs-parser) is a mighty option parser used by yargs.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The library could be tricked into adding or modifying properties of `Object.prototype` using a `__proto__` payload.\r\n\r\nOur research team checked several attack vectors to verify this vulnerability:\r\n\r\n1. It could be used for [privilege escalation](https://gist.github.com/Kirill89/dcd8100d010896157a36624119439832).\r\n2. The library could be used to parse user input received from different sources:\r\n    - terminal emulators\r\n    - system calls from other code bases\r\n    - CLI RPC servers\r\n\r\n## PoC by Snyk\r\n```\r\nconst parser = require(\"yargs-parser\");\r\nconsole.log(parser('--foo.__proto__.bar baz'));\r\nconsole.log(({}).bar);\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of ΓÇ£pathΓÇ¥, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototypeΓÇö use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. ΓÇ£JavaScript prototype pollution attack in NodeJS application.ΓÇ¥ GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `yargs-parser` to version 5.0.0-security.0, 13.1.2, 15.0.1, 18.1.1 or higher.\n## References\n- [Command Injection PoC](https://gist.github.com/Kirill89/dcd8100d010896157a36624119439832)\n- [GitHub Fix Commit](https://github.com/yargs/yargs-parser/commit/63810ca1ae1a24b08293a4d971e70e058c7a41e2)\n- [Snyk Research Blog](https://snyk.io/blog/prototype-pollution-minimist/)\n",
        "disclosureTime": "2020-03-16T16:35:35Z",
        "exploit": "Proof of Concept",
        "fixedIn": [
          "5.0.0-security.0",
          "13.1.2",
          "15.0.1",
          "18.1.1"
        ],
        "functions": [
          {
            "functionId": {
              "className": null,
              "filePath": "index.js",
              "functionName": "parse.setKey"
            },
            "version": [
              "<13.1.2",
              ">=14.0.0 <15.0.1",
              ">=16.0.0 <18.1.1"
            ]
          },
          {
            "functionId": {
              "className": null,
              "filePath": "index.js",
              "functionName": "parse.setKey"
            },
            "version": [
              "<13.1.2",
              ">=14.0.0 <15.0.1",
              ">=16.0.0 <18.1.1"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "filePath": "index.js",
              "functionName": "parse.setKey"
            },
            "version": [
              "<13.1.2",
              ">=14.0.0 <15.0.1",
              ">=16.0.0 <18.1.1"
            ]
          },
          {
            "functionId": {
              "filePath": "index.js",
              "functionName": "parse.setKey"
            },
            "version": [
              "<13.1.2",
              ">=14.0.0 <15.0.1",
              ">=16.0.0 <18.1.1"
            ]
          }
        ],
        "id": "SNYK-JS-YARGSPARSER-560381",
        "identifiers": {
          "CVE": [
            "CVE-2020-7608"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            1500
          ]
        },
        "language": "js",
        "modificationTime": "2020-09-25T10:27:51.271313Z",
        "moduleName": "yargs-parser",
        "packageManager": "npm",
        "packageName": "yargs-parser",
        "patches": [],
        "proprietary": true,
        "publicationTime": "2020-03-16T16:35:33Z",
        "references": [
          {
            "title": "Command Injection PoC",
            "url": "https://gist.github.com/Kirill89/dcd8100d010896157a36624119439832"
          },
          {
            "title": "GitHub Fix Commit",
            "url": "https://github.com/yargs/yargs-parser/commit/63810ca1ae1a24b08293a4d971e70e058c7a41e2"
          },
          {
            "title": "Snyk Research Blog",
            "url": "https://snyk.io/blog/prototype-pollution-minimist/"
          }
        ],
        "semver": {
          "vulnerable": [
            "<5.0.0-security.0",
            ">5.0.0-security.0 <13.1.2",
            ">=14.0.0 <15.0.1",
            ">=16.0.0 <18.1.1"
          ]
        },
        "severity": "medium",
        "severityWithCritical": "medium",
        "title": "Prototype Pollution",
        "from": [
          "email-template-manager@0.0.0",
          "node-sass@4.12.0",
          "sass-graph@2.2.4",
          "yargs@7.1.0",
          "yargs-parser@5.0.0"
        ],
        "upgradePath": [
          false,
          "node-sass@4.12.0",
          "sass-graph@2.2.5",
          "yargs@13.3.2",
          "yargs-parser@13.1.2"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "yargs-parser",
        "version": "5.0.0"
      }
    ],
    "ok": false,
    "dependencyCount": 218,
    "org": "company-poc",
    "policy": "# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.19.0\nignore: {}\npatch: {}\n",
    "isPrivate": true,
    "licensesPolicy": {
      "severities": {},
      "orgLicenseRules": {
        "AGPL-1.0": {
          "licenseType": "AGPL-1.0",
          "severity": "high",
          "instructions": ""
        },
        "AGPL-3.0": {
          "licenseType": "AGPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "Artistic-1.0": {
          "licenseType": "Artistic-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "Artistic-2.0": {
          "licenseType": "Artistic-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "CDDL-1.0": {
          "licenseType": "CDDL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "CPOL-1.02": {
          "licenseType": "CPOL-1.02",
          "severity": "high",
          "instructions": ""
        },
        "EPL-1.0": {
          "licenseType": "EPL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "GPL-2.0": {
          "licenseType": "GPL-2.0",
          "severity": "high",
          "instructions": ""
        },
        "GPL-3.0": {
          "licenseType": "GPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "LGPL-2.0": {
          "licenseType": "LGPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-2.1": {
          "licenseType": "LGPL-2.1",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-3.0": {
          "licenseType": "LGPL-3.0",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-1.1": {
          "licenseType": "MPL-1.1",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-2.0": {
          "licenseType": "MPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "MS-RL": {
          "licenseType": "MS-RL",
          "severity": "medium",
          "instructions": ""
        },
        "SimPL-2.0": {
          "licenseType": "SimPL-2.0",
          "severity": "high",
          "instructions": ""
        }
      }
    },
    "packageManager": "npm",
    "projectId": "a9d9476f-875b-497f-adab-b83af0336524",
    "ignoreSettings": null,
    "summary": "58 vulnerable dependency paths",
    "remediation": {
      "unresolved": [
        {
          "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
          "alternativeIds": [],
          "creationTime": "2020-07-16T08:19:48.462528Z",
          "credit": [
            "Unknown"
          ],
          "cvssScore": 8.1,
          "description": "## Overview\n[ajv](https://www.npmjs.com/package/ajv) is an Another JSON Schema Validator\n\nAffected versions of this package are vulnerable to Prototype Pollution. A carefully crafted JSON schema could be provided that allows execution of other code by prototype pollution. (While untrusted schemas are recommended against, the worst case of an untrusted schema should be a denial of service, not execution of code.)\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of ΓÇ£pathΓÇ¥, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototypeΓÇö use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. ΓÇ£JavaScript prototype pollution attack in NodeJS application.ΓÇ¥ GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `ajv` to version 6.12.3 or higher.\n## References\n- [HackerOne Report](https://hackerone.com/bugs?subject=user&report_id=894259)\n",
          "disclosureTime": "2020-07-16T08:14:41Z",
          "exploit": "Not Defined",
          "fixedIn": [
            "6.12.3"
          ],
          "functions": [],
          "functions_new": [],
          "id": "SNYK-JS-AJV-584908",
          "identifiers": {
            "CVE": [
              "CVE-2020-15366"
            ],
            "CWE": [
              "CWE-400"
            ]
          },
          "language": "js",
          "modificationTime": "2020-07-16T13:58:04.600521Z",
          "moduleName": "ajv",
          "packageManager": "npm",
          "packageName": "ajv",
          "patches": [],
          "proprietary": false,
          "publicationTime": "2020-07-16T13:58:04Z",
          "references": [
            {
              "title": "HackerOne Report",
              "url": "https://hackerone.com/bugs?subject=user&report_id=894259"
            }
          ],
          "semver": {
            "vulnerable": [
              "<6.12.3"
            ]
          },
          "severity": "high",
          "severityWithCritical": "high",
          "title": "Prototype Pollution",
          "from": [
            "email-template-manager@0.0.0",
            "node-sass@4.12.0",
            "node-gyp@3.8.0",
            "request@2.88.0",
            "har-validator@5.1.3",
            "ajv@6.6.2"
          ],
          "upgradePath": [
            false,
            "node-sass@4.12.0",
            "node-gyp@3.8.0",
            "request@2.88.0",
            "har-validator@5.1.3",
            "ajv@6.12.3"
          ],
          "isUpgradable": true,
          "isPatchable": false,
          "isPinnable": false,
          "name": "ajv",
          "version": "6.6.2"
        },
        {
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P/RL:O/RC:C",
          "alternativeIds": [],
          "creationTime": "2021-03-23T16:13:42.109692Z",
          "credit": [
            "Yeting Li"
          ],
          "cvssScore": 5.3,
          "description": "## Overview\n[hosted-git-info](https://www.npmjs.org/package/hosted-git-info) is a Provides metadata and conversions from repository urls for Github, Bitbucket and Gitlab\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via regular expression `shortcutMatch ` in the `fromUrl` function in index.js. The affected regular expression exhibits polynomial worst-case time complexity.\r\n\r\n### PoC by Yeting Li\r\n```\r\nvar hostedGitInfo = require(\"hosted-git-info\")\r\nfunction build_attack(n) {\r\n    var ret = \"a:\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"a\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\nfor(var i = 1; i <= 5000000; i++) {\r\n   if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n       var parsedInfo = hostedGitInfo.fromUrl(attack_str)\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLetΓÇÖs take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesnΓÇÖt match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `hosted-git-info` to version 3.0.8, 2.8.9 or higher.\n## References\n- [GitHub Commit](https://github.com/npm/hosted-git-info/commit/bede0dc38e1785e732bf0a48ba6f81a4a908eba3)\n",
          "disclosureTime": "2020-11-28T00:00:00Z",
          "exploit": "Proof of Concept",
          "fixedIn": [
            "3.0.8",
            "2.8.9"
          ],
          "functions": [],
          "functions_new": [],
          "id": "SNYK-JS-HOSTEDGITINFO-1088355",
          "identifiers": {
            "CVE": [
              "CVE-2021-23362"
            ],
            "CWE": [
              "CWE-400"
            ]
          },
          "language": "js",
          "modificationTime": "2021-04-08T12:53:49.093606Z",
          "moduleName": "hosted-git-info",
          "packageManager": "npm",
          "packageName": "hosted-git-info",
          "patches": [],
          "proprietary": false,
          "publicationTime": "2021-03-23T17:13:24Z",
          "references": [
            {
              "title": "GitHub Commit",
              "url": "https://github.com/npm/hosted-git-info/commit/bede0dc38e1785e732bf0a48ba6f81a4a908eba3"
            }
          ],
          "semver": {
            "vulnerable": [
              ">=3.0.0 <3.0.8",
              "<2.8.9"
            ]
          },
          "severity": "medium",
          "severityWithCritical": "medium",
          "title": "Regular Expression Denial of Service (ReDoS)",
          "from": [
            "email-template-manager@0.0.0",
            "node-sass@4.12.0",
            "sass-graph@2.2.4",
            "yargs@7.1.0",
            "read-pkg-up@1.0.1",
            "read-pkg@1.1.0",
            "normalize-package-data@2.4.1",
            "hosted-git-info@2.7.1"
          ],
          "upgradePath": [
            false,
            "node-sass@4.12.0",
            "sass-graph@2.2.4",
            "yargs@7.1.0",
            "read-pkg-up@1.0.1",
            "read-pkg@1.1.0",
            "normalize-package-data@2.4.1",
            "hosted-git-info@2.8.9"
          ],
          "isUpgradable": true,
          "isPatchable": false,
          "isPinnable": false,
          "name": "hosted-git-info",
          "version": "2.7.1"
        },
        {
          "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
          "alternativeIds": [],
          "creationTime": "2019-12-16T14:21:14.675101Z",
          "credit": [
            "Feng Xiao"
          ],
          "cvssScore": 3.7,
          "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
          "disclosureTime": "2019-12-16T14:31:14Z",
          "exploit": "Proof of Concept",
          "fixedIn": [
            "6.0.3"
          ],
          "functions": [
            {
              "functionId": {
                "className": null,
                "filePath": "index.js",
                "functionName": "ctorName"
              },
              "version": [
                ">=6.0.0 <6.0.3"
              ]
            }
          ],
          "functions_new": [
            {
              "functionId": {
                "filePath": "index.js",
                "functionName": "ctorName"
              },
              "version": [
                ">=6.0.0 <6.0.3"
              ]
            }
          ],
          "id": "SNYK-JS-KINDOF-537849",
          "identifiers": {
            "CVE": [
              "CVE-2019-20149"
            ],
            "CWE": [
              "CWE-20"
            ],
            "GHSA": [
              "GHSA-6c8f-qphg-qjgp"
            ],
            "NSP": [
              1490
            ]
          },
          "language": "js",
          "modificationTime": "2020-06-12T14:36:55.567043Z",
          "moduleName": "kind-of",
          "packageManager": "npm",
          "packageName": "kind-of",
          "patches": [],
          "proprietary": false,
          "publicationTime": "2020-01-19T14:31:13Z",
          "references": [
            {
              "title": "GitHub Issue",
              "url": "https://github.com/jonschlinkert/kind-of/issues/30"
            },
            {
              "title": "GitHub PR",
              "url": "https://github.com/jonschlinkert/kind-of/pull/31"
            }
          ],
          "semver": {
            "vulnerable": [
              ">=6.0.0 <6.0.3"
            ]
          },
          "severity": "low",
          "severityWithCritical": "low",
          "title": "Validation Bypass",
          "from": [
            "email-template-manager@0.0.0",
            "clone-deep@4.0.1",
            "shallow-clone@3.0.0",
            "kind-of@6.0.2"
          ],
          "upgradePath": [
            false,
            "clone-deep@4.0.1",
            "shallow-clone@3.0.0",
            "kind-of@6.0.3"
          ],
          "isUpgradable": true,
          "isPatchable": false,
          "isPinnable": false,
          "name": "kind-of",
          "version": "6.0.2"
        },
        {
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
          "alternativeIds": [],
          "creationTime": "2020-10-16T16:48:40.985673Z",
          "credit": [
            "Liyuan Chen"
          ],
          "cvssScore": 5.3,
          "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLetΓÇÖs take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesnΓÇÖt match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
          "disclosureTime": "2020-10-16T16:47:34Z",
          "exploit": "Proof of Concept",
          "fixedIn": [
            "4.17.21"
          ],
          "functions": [],
          "functions_new": [],
          "id": "SNYK-JS-LODASH-1018905",
          "identifiers": {
            "CVE": [
              "CVE-2020-28500"
            ],
            "CWE": [
              "CWE-400"
            ]
          },
          "language": "js",
          "modificationTime": "2021-02-22T09:58:41.562106Z",
          "moduleName": "lodash",
          "packageManager": "npm",
          "packageName": "lodash",
          "patches": [],
          "proprietary": true,
          "publicationTime": "2021-02-15T11:50:49Z",
          "references": [
            {
              "title": "GitHub Commit",
              "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a"
            },
            {
              "title": "GitHub Fix PR",
              "url": "https://github.com/lodash/lodash/pull/5065"
            }
          ],
          "semver": {
            "vulnerable": [
              "<4.17.21"
            ]
          },
          "severity": "medium",
          "severityWithCritical": "medium",
          "title": "Regular Expression Denial of Service (ReDoS)",
          "from": [
            "email-template-manager@0.0.0",
            "node-sass@4.12.0",
            "gaze@1.1.3",
            "globule@1.2.1",
            "lodash@4.17.11"
          ],
          "upgradePath": [
            false,
            "node-sass@4.12.0",
            "gaze@1.1.3",
            "globule@1.2.1",
            "lodash@4.17.21"
          ],
          "isUpgradable": true,
          "isPatchable": false,
          "isPinnable": false,
          "name": "lodash",
          "version": "4.17.11"
        },
        {
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
          "alternativeIds": [],
          "creationTime": "2020-11-17T14:07:17.048472Z",
          "credit": [
            "Marc Hassan"
          ],
          "cvssScore": 7.2,
          "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
          "disclosureTime": "2020-11-17T13:02:10Z",
          "exploit": "Proof of Concept",
          "fixedIn": [
            "4.17.21"
          ],
          "functions": [],
          "functions_new": [],
          "id": "SNYK-JS-LODASH-1040724",
          "identifiers": {
            "CVE": [
              "CVE-2021-23337"
            ],
            "CWE": [
              "CWE-78"
            ]
          },
          "language": "js",
          "modificationTime": "2021-02-22T09:58:04.543992Z",
          "moduleName": "lodash",
          "packageManager": "npm",
          "packageName": "lodash",
          "patches": [],
          "proprietary": true,
          "publicationTime": "2021-02-15T11:50:50Z",
          "references": [
            {
              "title": "GitHub Commit",
              "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c"
            },
            {
              "title": "Vulnerable Code",
              "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851"
            }
          ],
          "semver": {
            "vulnerable": [
              "<4.17.21"
            ]
          },
          "severity": "high",
          "severityWithCritical": "high",
          "title": "Command Injection",
          "from": [
            "email-template-manager@0.0.0",
            "node-sass@4.12.0",
            "gaze@1.1.3",
            "globule@1.2.1",
            "lodash@4.17.11"
          ],
          "upgradePath": [
            false,
            "node-sass@4.12.0",
            "gaze@1.1.3",
            "globule@1.2.1",
            "lodash@4.17.21"
          ],
          "isUpgradable": true,
          "isPatchable": false,
          "isPinnable": false,
          "name": "lodash",
          "version": "4.17.11"
        },
        {
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
          "alternativeIds": [],
          "creationTime": "2019-06-19T12:04:21.040000Z",
          "credit": [
            "Snyk Security Team"
          ],
          "cvssScore": 7.3,
          "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `defaultsDeep` could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nconst mergeFn = require('lodash').defaultsDeep;\r\nconst payload = '{\"constructor\": {\"prototype\": {\"a0\": true}}}'\r\n\r\nfunction check() {\r\n    mergeFn({}, JSON.parse(payload));\r\n    if (({})[`a0`] === true) {\r\n        console.log(`Vulnerable to Prototype Pollution via ${payload}`);\r\n    }\r\n  }\r\n\r\ncheck();\r\n```\r\n\r\nFor more information, check out our [blog post](https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/)\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of ΓÇ£pathΓÇ¥, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototypeΓÇö use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. ΓÇ£JavaScript prototype pollution attack in NodeJS application.ΓÇ¥ GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.12 or higher.\n## References\n- [GitHub Issue](https://github.com/lodash/lodash/issues/4348)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4336)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4355)\n- [GitHub PR](https://github.com/sailshq/lodash/pull/1)\n- [Node Security Advisory](https://www.npmjs.com/advisories/1065)\n- [Snyk Blog](https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/)\n",
          "disclosureTime": "2019-06-19T11:45:02Z",
          "exploit": "Proof of Concept",
          "fixedIn": [
            "4.17.12"
          ],
          "functions": [
            {
              "functionId": {
                "className": null,
                "filePath": "lodash.js",
                "functionName": "runInContext.customDefaultsMerge"
              },
              "version": [
                ">=4.17.3 <4.17.12"
              ]
            }
          ],
          "functions_new": [
            {
              "functionId": {
                "filePath": "lodash.js",
                "functionName": "runInContext.customDefaultsMerge"
              },
              "version": [
                ">=4.17.3 <4.17.12"
              ]
            }
          ],
          "id": "SNYK-JS-LODASH-450202",
          "identifiers": {
            "CVE": [
              "CVE-2019-10744"
            ],
            "CWE": [
              "CWE-400"
            ],
            "GHSA": [
              "GHSA-jf85-cpcp-j695"
            ],
            "NSP": [
              1065
            ]
          },
          "language": "js",
          "modificationTime": "2020-08-24T08:59:58.227467Z",
          "moduleName": "lodash",
          "packageManager": "npm",
          "packageName": "lodash",
          "patches": [
            {
              "comments": [],
              "id": "patch:SNYK-JS-LODASH-450202:0",
              "modificationTime": "2019-12-03T11:40:45.719849Z",
              "urls": [
                "https://snyk-patches.s3.amazonaws.com/npm/lodash/20190702/lodash_20190702_0_0_1f8ea07746963a535385a5befc19fa687a627d2b.patch"
              ],
              "version": "=4.17.11"
            }
          ],
          "proprietary": true,
          "publicationTime": "2019-07-02T11:45:01Z",
          "references": [
            {
              "title": "GitHub Issue",
              "url": "https://github.com/lodash/lodash/issues/4348"
            },
            {
              "title": "GitHub PR",
              "url": "https://github.com/lodash/lodash/pull/4336"
            },
            {
              "title": "GitHub PR",
              "url": "https://github.com/lodash/lodash/pull/4355"
            },
            {
              "title": "GitHub PR",
              "url": "https://github.com/sailshq/lodash/pull/1"
            },
            {
              "title": "Node Security Advisory",
              "url": "https://www.npmjs.com/advisories/1065"
            },
            {
              "title": "Snyk Blog",
              "url": "https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/"
            }
          ],
          "semver": {
            "vulnerable": [
              "<4.17.12"
            ]
          },
          "severity": "high",
          "severityWithCritical": "high",
          "title": "Prototype Pollution",
          "from": [
            "email-template-manager@0.0.0",
            "node-sass@4.12.0",
            "gaze@1.1.3",
            "globule@1.2.1",
            "lodash@4.17.11"
          ],
          "upgradePath": [
            false,
            "node-sass@4.12.0",
            "gaze@1.1.3",
            "globule@1.2.1",
            "lodash@4.17.12"
          ],
          "isUpgradable": true,
          "isPatchable": true,
          "isPinnable": false,
          "name": "lodash",
          "version": "4.17.11"
        },
        {
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
          "alternativeIds": [],
          "creationTime": "2020-07-24T12:05:01.916784Z",
          "credit": [
            "reeser"
          ],
          "cvssScore": 9.8,
          "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution in `zipObjectDeep` due to an incomplete fix for [CVE-2020-8203](https://snyk.io/vuln/SNYK-JS-LODASH-567746).\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of ΓÇ£pathΓÇ¥, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototypeΓÇö use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. ΓÇ£JavaScript prototype pollution attack in NodeJS application.ΓÇ¥ GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.20 or higher.\n## References\n- [GitHub Issue](https://github.com/lodash/lodash/issues/4874)\n",
          "disclosureTime": "2020-07-24T12:00:52Z",
          "exploit": "Not Defined",
          "fixedIn": [
            "4.17.20"
          ],
          "functions": [],
          "functions_new": [],
          "id": "SNYK-JS-LODASH-590103",
          "identifiers": {
            "CVE": [],
            "CWE": [
              "CWE-400"
            ]
          },
          "language": "js",
          "modificationTime": "2020-08-16T12:11:40.402299Z",
          "moduleName": "lodash",
          "packageManager": "npm",
          "packageName": "lodash",
          "patches": [],
          "proprietary": false,
          "publicationTime": "2020-08-16T13:09:06Z",
          "references": [
            {
              "title": "GitHub Issue",
              "url": "https://github.com/lodash/lodash/issues/4874"
            }
          ],
          "semver": {
            "vulnerable": [
              "<4.17.20"
            ]
          },
          "severity": "high",
          "severityWithCritical": "critical",
          "title": "Prototype Pollution",
          "from": [
            "email-template-manager@0.0.0",
            "node-sass@4.12.0",
            "gaze@1.1.3",
            "globule@1.2.1",
            "lodash@4.17.11"
          ],
          "upgradePath": [
            false,
            "node-sass@4.12.0",
            "gaze@1.1.3",
            "globule@1.2.1",
            "lodash@4.17.20"
          ],
          "isUpgradable": true,
          "isPatchable": false,
          "isPinnable": false,
          "name": "lodash",
          "version": "4.17.11"
        },
        {
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
          "alternativeIds": [],
          "creationTime": "2020-08-21T12:52:58.443440Z",
          "credit": [
            "awarau"
          ],
          "cvssScore": 7.3,
          "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `setWith` and `set` functions.\r\n\r\n### PoC by awarau\r\n* Create a JS file with this contents:\r\n```\r\nlod = require('lodash')\r\nlod.setWith({}, \"__proto__[test]\", \"123\")\r\nlod.set({}, \"__proto__[test2]\", \"456\")\r\nconsole.log(Object.prototype)\r\n```\r\n* Execute it with `node`\r\n* Observe that `test` and `test2` is now in the `Object.prototype`.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of ΓÇ£pathΓÇ¥, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototypeΓÇö use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. ΓÇ£JavaScript prototype pollution attack in NodeJS application.ΓÇ¥ GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.17 or higher.\n## References\n- [HackerOne Report](https://hackerone.com/reports/864701)\n",
          "disclosureTime": "2020-08-21T10:34:29Z",
          "exploit": "Proof of Concept",
          "fixedIn": [
            "4.17.17"
          ],
          "functions": [],
          "functions_new": [],
          "id": "SNYK-JS-LODASH-608086",
          "identifiers": {
            "CVE": [],
            "CWE": [
              "CWE-400"
            ]
          },
          "language": "js",
          "modificationTime": "2020-08-27T16:44:20.914177Z",
          "moduleName": "lodash",
          "packageManager": "npm",
          "packageName": "lodash",
          "patches": [],
          "proprietary": false,
          "publicationTime": "2020-08-21T12:53:03Z",
          "references": [
            {
              "title": "HackerOne Report",
              "url": "https://hackerone.com/reports/864701"
            }
          ],
          "semver": {
            "vulnerable": [
              "<4.17.17"
            ]
          },
          "severity": "high",
          "severityWithCritical": "high",
          "title": "Prototype Pollution",
          "from": [
            "email-template-manager@0.0.0",
            "node-sass@4.12.0",
            "gaze@1.1.3",
            "globule@1.2.1",
            "lodash@4.17.11"
          ],
          "upgradePath": [
            false,
            "node-sass@4.12.0",
            "gaze@1.1.3",
            "globule@1.2.1",
            "lodash@4.17.17"
          ],
          "isUpgradable": true,
          "isPatchable": false,
          "isPinnable": false,
          "name": "lodash",
          "version": "4.17.11"
        },
        {
          "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
          "alternativeIds": [],
          "creationTime": "2020-03-11T08:25:47.093051Z",
          "credit": [
            "Snyk Security Team"
          ],
          "cvssScore": 5.6,
          "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The library could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` or `__proto__` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nrequire('minimist')('--__proto__.injected0 value0'.split(' '));\r\nconsole.log(({}).injected0 === 'value0'); // true\r\n\r\nrequire('minimist')('--constructor.prototype.injected1 value1'.split(' '));\r\nconsole.log(({}).injected1 === 'value1'); // true\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of ΓÇ£pathΓÇ¥, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototypeΓÇö use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. ΓÇ£JavaScript prototype pollution attack in NodeJS application.ΓÇ¥ GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 0.2.1, 1.2.3 or higher.\n## References\n- [Command Injection PoC](https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a)\n- [GitHub Fix Commit #1](https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94)\n- [GitHub Fix Commit #2](https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab)\n- [Snyk Research Blog](https://snyk.io/blog/prototype-pollution-minimist/)\n",
          "disclosureTime": "2020-03-10T08:22:24Z",
          "exploit": "Proof of Concept",
          "fixedIn": [
            "0.2.1",
            "1.2.3"
          ],
          "functions": [
            {
              "functionId": {
                "className": null,
                "filePath": "index.js",
                "functionName": "setKey"
              },
              "version": [
                "<0.2.1",
                ">=1.0.0 <1.1.1"
              ]
            },
            {
              "functionId": {
                "className": null,
                "filePath": "index.js",
                "functionName": "module.exports.setKey"
              },
              "version": [
                "<0.2.1",
                ">=1.1.1 <1.2.3"
              ]
            }
          ],
          "functions_new": [
            {
              "functionId": {
                "filePath": "index.js",
                "functionName": "setKey"
              },
              "version": [
                "<0.2.1",
                ">=1.0.0 <1.1.1"
              ]
            },
            {
              "functionId": {
                "filePath": "index.js",
                "functionName": "module.exports.setKey"
              },
              "version": [
                "<0.2.1",
                ">=1.1.1 <1.2.3"
              ]
            }
          ],
          "id": "SNYK-JS-MINIMIST-559764",
          "identifiers": {
            "CVE": [
              "CVE-2020-7598"
            ],
            "CWE": [
              "CWE-400"
            ],
            "GHSA": [
              "GHSA-vh95-rmgr-6w4m"
            ],
            "NSP": [
              1179
            ]
          },
          "language": "js",
          "modificationTime": "2020-12-20T09:48:43.878574Z",
          "moduleName": "minimist",
          "packageManager": "npm",
          "packageName": "minimist",
          "patches": [],
          "proprietary": true,
          "publicationTime": "2020-03-11T08:22:19Z",
          "references": [
            {
              "title": "Command Injection PoC",
              "url": "https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a"
            },
            {
              "title": "GitHub Fix Commit #1",
              "url": "https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94"
            },
            {
              "title": "GitHub Fix Commit #2",
              "url": "https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab"
            },
            {
              "title": "Snyk Research Blog",
              "url": "https://snyk.io/blog/prototype-pollution-minimist/"
            }
          ],
          "semver": {
            "vulnerable": [
              "<0.2.1",
              ">=1.0.0 <1.2.3"
            ]
          },
          "severity": "medium",
          "severityWithCritical": "medium",
          "title": "Prototype Pollution",
          "from": [
            "email-template-manager@0.0.0",
            "node-sass@4.12.0",
            "node-gyp@3.8.0",
            "tar@2.2.2",
            "fstream@1.0.12",
            "mkdirp@0.5.1",
            "minimist@0.0.8"
          ],
          "upgradePath": [
            false,
            "node-sass@4.12.0",
            "node-gyp@3.8.0",
            "tar@2.2.2",
            "fstream@1.0.12",
            "mkdirp@0.5.2",
            "minimist@1.2.5"
          ],
          "isUpgradable": true,
          "isPatchable": false,
          "isPinnable": false,
          "name": "minimist",
          "version": "0.0.8"
        },
        {
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
          "alternativeIds": [],
          "creationTime": "2021-01-12T08:49:09.354534Z",
          "credit": [
            "Lorenzo Stella"
          ],
          "cvssScore": 5.3,
          "description": "## Overview\n[node-sass](https://npmjs.org/package/node-sass) is a Node.js bindings package for libsass.\n\nAffected versions of this package are vulnerable to Improper Certificate Validation. Certificate validation is disabled by default when requesting binaries, even if the user is not specifying an alternative download path.\n## Remediation\nThere is no fixed version for `node-sass`.\n## References\n- [GitHub PR (suggested fix)](https://github.com/sass/node-sass/pull/3086)\n- [GitHub PR (vulnerable code)](https://github.com/sass/node-sass/pull/567#issuecomment-656609236)\n",
          "disclosureTime": "2021-01-12T08:31:32Z",
          "exploit": "Not Defined",
          "fixedIn": [],
          "functions": [],
          "functions_new": [],
          "id": "SNYK-JS-NODESASS-1059081",
          "identifiers": {
            "CVE": [
              "CVE-2020-24025"
            ],
            "CWE": [
              "CWE-295"
            ]
          },
          "language": "js",
          "modificationTime": "2021-01-28T16:07:43.555268Z",
          "moduleName": "node-sass",
          "packageManager": "npm",
          "packageName": "node-sass",
          "patches": [],
          "proprietary": false,
          "publicationTime": "2021-01-12T15:00:41Z",
          "references": [
            {
              "title": "GitHub PR (suggested fix)",
              "url": "https://github.com/sass/node-sass/pull/3086"
            },
            {
              "title": "GitHub PR (vulnerable code)",
              "url": "https://github.com/sass/node-sass/pull/567%23issuecomment-656609236"
            }
          ],
          "semver": {
            "vulnerable": [
              ">=2.0.0"
            ]
          },
          "severity": "medium",
          "severityWithCritical": "medium",
          "title": "Improper Certificate Validation",
          "from": [
            "email-template-manager@0.0.0",
            "node-sass@4.12.0"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "name": "node-sass",
          "version": "4.12.0"
        },
        {
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H/E:U/RL:U/RC:R",
          "alternativeIds": [],
          "creationTime": "2019-11-25T10:53:38.997425Z",
          "credit": [
            "Unknown"
          ],
          "cvssScore": 6.5,
          "description": "## Overview\n[node-sass](https://npmjs.org/package/node-sass) is a Node.js bindings package for libsass.\n\nAffected versions of this package are vulnerable to Out-of-Bounds. A heap-based buffer over-read exists in `Sass::Prelexer::parenthese_scope` in `prelexer.hpp`.  `node-sass` is affected by this vulnerability due to its bundled usage of `libsass`.\n## Remediation\nThere is no fixed version for `node-sass`.\n## References\n- [GitHub Issue](https://github.com/sass/libsass/issues/2814)\n- [GitHub PR](https://github.com/sass/libsass/pull/2857)\n",
          "disclosureTime": "2019-01-14T10:52:45Z",
          "exploit": "Unproven",
          "fixedIn": [],
          "functions": [],
          "functions_new": [],
          "id": "SNYK-JS-NODESASS-535498",
          "identifiers": {
            "CVE": [
              "CVE-2019-6283"
            ],
            "CWE": [
              "CWE-119"
            ]
          },
          "language": "js",
          "modificationTime": "2021-01-27T13:18:18.772565Z",
          "moduleName": "node-sass",
          "packageManager": "npm",
          "packageName": "node-sass",
          "patches": [],
          "proprietary": false,
          "publicationTime": "2019-11-25T10:52:39Z",
          "references": [
            {
              "title": "GitHub Issue",
              "url": "https://github.com/sass/libsass/issues/2814"
            },
            {
              "title": "GitHub PR",
              "url": "https://github.com/sass/libsass/pull/2857"
            }
          ],
          "semver": {
            "vulnerable": [
              "*"
            ]
          },
          "severity": "medium",
          "severityWithCritical": "medium",
          "title": "Out-of-Bounds",
          "from": [
            "email-template-manager@0.0.0",
            "node-sass@4.12.0"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "name": "node-sass",
          "version": "4.12.0"
        },
        {
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H/E:U/RL:U/RC:U",
          "alternativeIds": [],
          "creationTime": "2019-11-25T11:17:34.265849Z",
          "credit": [
            "Unknown"
          ],
          "cvssScore": 8.8,
          "description": "## Overview\n[node-sass](https://npmjs.org/package/node-sass) is a Node.js bindings package for libsass.\n\nAffected versions of this package are vulnerable to NULL Pointer Dereference in the function `Sass::Functions::selector_append` which could be leveraged by an attacker to cause a denial of service (application crash) or possibly have unspecified other impact.  `node-sass` is affected by this vulnerability due to its bundled usage of `libsass`.\n## Remediation\nThere is no fixed version for `node-sass`.\n## References\n- [GitHub Commit](https://github.com/sass/libsass/commit/280ffd8c692cc24199b678f38fc796825d7df4a1)\n- [GitHub Commit](https://github.com/sass/libsass/commit/c93f0581c6b7794d8c1d5637c5c4dabd591b1d57)\n- [GitHub Issue](https://github.com/sass/libsass/issues/2663)\n",
          "disclosureTime": "2018-06-03T11:48:11Z",
          "exploit": "Unproven",
          "fixedIn": [],
          "functions": [],
          "functions_new": [],
          "id": "SNYK-JS-NODESASS-535500",
          "identifiers": {
            "CVE": [
              "CVE-2018-11694"
            ],
            "CWE": [
              "CWE-476"
            ]
          },
          "language": "js",
          "modificationTime": "2021-01-26T12:58:32.136210Z",
          "moduleName": "node-sass",
          "packageManager": "npm",
          "packageName": "node-sass",
          "patches": [],
          "proprietary": false,
          "publicationTime": "2019-11-25T11:14:52Z",
          "references": [
            {
              "title": "GitHub Commit",
              "url": "https://github.com/sass/libsass/commit/280ffd8c692cc24199b678f38fc796825d7df4a1"
            },
            {
              "title": "GitHub Commit",
              "url": "https://github.com/sass/libsass/commit/c93f0581c6b7794d8c1d5637c5c4dabd591b1d57"
            },
            {
              "title": "GitHub Issue",
              "url": "https://github.com/sass/libsass/issues/2663"
            }
          ],
          "semver": {
            "vulnerable": [
              "*"
            ]
          },
          "severity": "high",
          "severityWithCritical": "high",
          "title": "NULL Pointer Dereference",
          "from": [
            "email-template-manager@0.0.0",
            "node-sass@4.12.0"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "name": "node-sass",
          "version": "4.12.0"
        },
        {
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H/E:U/RL:U/RC:U",
          "alternativeIds": [],
          "creationTime": "2019-11-25T11:27:34.687368Z",
          "credit": [
            "Unknown"
          ],
          "cvssScore": 6.5,
          "description": "## Overview\n[node-sass](https://npmjs.org/package/node-sass) is a Node.js bindings package for libsass.\n\nAffected versions of this package are vulnerable to NULL Pointer Dereference. In LibSass 3.5.5, a NULL Pointer Dereference in the function `Sass::Eval::operator()``(Sass::Supports_Operator*)` in `eval.cpp` may cause a Denial of Service (application crash) via a crafted sass input file.\n## Remediation\nThere is no fixed version for `node-sass`.\n## References\n- [GitHub Commit](https://github.com/sass/libsass/commit/69ae7ef4775e1dbd5985940927e28fe34201331d)\n- [GitHub Issue](https://github.com/sass/libsass/issues/2786)\n- [GitHub PR](https://github.com/sass/libsass/pull/2860)\n",
          "disclosureTime": "2018-12-17T11:25:14Z",
          "exploit": "Unproven",
          "fixedIn": [],
          "functions": [],
          "functions_new": [],
          "id": "SNYK-JS-NODESASS-535502",
          "identifiers": {
            "CVE": [
              "CVE-2018-20190"
            ],
            "CWE": [
              "CWE-476"
            ]
          },
          "language": "js",
          "modificationTime": "2021-01-27T13:16:40.520137Z",
          "moduleName": "node-sass",
          "packageManager": "npm",
          "packageName": "node-sass",
          "patches": [],
          "proprietary": false,
          "publicationTime": "2019-11-25T11:25:06Z",
          "references": [
            {
              "title": "GitHub Commit",
              "url": "https://github.com/sass/libsass/commit/69ae7ef4775e1dbd5985940927e28fe34201331d"
            },
            {
              "title": "GitHub Issue",
              "url": "https://github.com/sass/libsass/issues/2786"
            },
            {
              "title": "GitHub PR",
              "url": "https://github.com/sass/libsass/pull/2860"
            }
          ],
          "semver": {
            "vulnerable": [
              "*"
            ]
          },
          "severity": "medium",
          "severityWithCritical": "medium",
          "title": "NULL Pointer Dereference",
          "from": [
            "email-template-manager@0.0.0",
            "node-sass@4.12.0"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "name": "node-sass",
          "version": "4.12.0"
        },
        {
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:H",
          "alternativeIds": [],
          "creationTime": "2020-01-08T15:54:16.379717Z",
          "credit": [
            "Unknown"
          ],
          "cvssScore": 8.1,
          "description": "## Overview\n[node-sass](https://npmjs.org/package/node-sass) is a Node.js bindings package for libsass.\n\nAffected versions of this package are vulnerable to Out-of-bounds Read via the function `Sass::Prelexer::exactly()` which could be leveraged by an attacker to disclose information or manipulated to read from unmapped memory causing a denial of service. Note: `node-sass` is affected by this vulnerability due to its bundled usage of the `libsass` package.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browserΓÇÖs Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if theyΓÇÖve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the userΓÇÖs browser.| \n|**DOM-based**|Client|The attacker forces the userΓÇÖs browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nThere is no fixed version for `node-sass`.\n## References\n- [GitHub Commit](https://github.com/sass/libsass/commit/eb15533b07773c30dc03c9d742865604f47120ef)\n- [NVD](https://nvd.nist.gov/vuln/detail/CVE-2018-11697)\n",
          "disclosureTime": "2018-04-06T00:00:00Z",
          "exploit": "Not Defined",
          "fixedIn": [],
          "functions": [],
          "functions_new": [],
          "id": "SNYK-JS-NODESASS-540956",
          "identifiers": {
            "CVE": [
              "CVE-2018-11697"
            ],
            "CWE": [
              "CWE-79"
            ]
          },
          "language": "js",
          "modificationTime": "2021-02-01T08:49:47.842815Z",
          "moduleName": "node-sass",
          "packageManager": "npm",
          "packageName": "node-sass",
          "patches": [],
          "proprietary": false,
          "publicationTime": "2020-01-08T00:00:00Z",
          "references": [
            {
              "title": "GitHub Commit",
              "url": "https://github.com/sass/libsass/commit/eb15533b07773c30dc03c9d742865604f47120ef"
            },
            {
              "title": "NVD",
              "url": "https://nvd.nist.gov/vuln/detail/CVE-2018-11697"
            }
          ],
          "semver": {
            "vulnerable": [
              "*"
            ]
          },
          "severity": "high",
          "severityWithCritical": "high",
          "title": "Out-of-bounds Read",
          "from": [
            "email-template-manager@0.0.0",
            "node-sass@4.12.0"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "name": "node-sass",
          "version": "4.12.0"
        },
        {
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:L",
          "alternativeIds": [],
          "creationTime": "2020-01-08T15:54:20.880133Z",
          "credit": [
            "Unknown"
          ],
          "cvssScore": 4.3,
          "description": "## Overview\n[node-sass](https://npmjs.org/package/node-sass) is a Node.js bindings package for libsass.\n\nAffected versions of this package are vulnerable to Out-of-bounds Read via `Sass::weaveParents` in `ast_sel_weave.cpp`. Note: `node-sass` is affected by this vulnerability due to its bundled usage of the `libsass` package.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLetΓÇÖs take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesnΓÇÖt match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nThere is no fixed version for `node-sass`.\n## References\n- [GitHub Commit](https://github.com/sass/libsass/commit/e1c16e09b4a953757a15149deaaf28a3fd81dc97)\n- [NVD](https://nvd.nist.gov/vuln/detail/CVE-2019-18798)\n",
          "disclosureTime": "2019-06-11T00:00:00Z",
          "exploit": "Not Defined",
          "fixedIn": [],
          "functions": [],
          "functions_new": [],
          "id": "SNYK-JS-NODESASS-540958",
          "identifiers": {
            "CVE": [
              "CVE-2019-18798"
            ],
            "CWE": [
              "CWE-400"
            ]
          },
          "language": "js",
          "modificationTime": "2021-02-01T08:43:30.299373Z",
          "moduleName": "node-sass",
          "packageManager": "npm",
          "packageName": "node-sass",
          "patches": [],
          "proprietary": false,
          "publicationTime": "2020-01-08T00:00:00Z",
          "references": [
            {
              "title": "GitHub Commit",
              "url": "https://github.com/sass/libsass/commit/e1c16e09b4a953757a15149deaaf28a3fd81dc97"
            },
            {
              "title": "NVD",
              "url": "https://nvd.nist.gov/vuln/detail/CVE-2019-18798"
            }
          ],
          "semver": {
            "vulnerable": [
              "*"
            ]
          },
          "severity": "medium",
          "severityWithCritical": "medium",
          "title": "Out-of-bounds Read",
          "from": [
            "email-template-manager@0.0.0",
            "node-sass@4.12.0"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "name": "node-sass",
          "version": "4.12.0"
        },
        {
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:L",
          "alternativeIds": [],
          "creationTime": "2020-01-08T15:54:35.116986Z",
          "credit": [
            "Unknown"
          ],
          "cvssScore": 4.3,
          "description": "## Overview\n[node-sass](https://npmjs.org/package/node-sass) is a Node.js bindings package for libsass.\n\nAffected versions of this package are vulnerable to Uncontrolled Recursion via `Sass::Eval::operator()(Sass::Binary_Expression*)` in `eval.cpp`. Note: `node-sass` is affected by this vulnerability due to its bundled usage of the `libsass` package.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browserΓÇÖs Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if theyΓÇÖve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the userΓÇÖs browser.| \n|**DOM-based**|Client|The attacker forces the userΓÇÖs browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nThere is no fixed version for `node-sass`.\n## References\n- [GitHub Issue](https://github.com/sass/libsass/issues/3000)\n- [NVD](https://nvd.nist.gov/vuln/detail/CVE-2019-18797)\n",
          "disclosureTime": "2019-08-11T00:00:00Z",
          "exploit": "Not Defined",
          "fixedIn": [],
          "functions": [],
          "functions_new": [],
          "id": "SNYK-JS-NODESASS-540964",
          "identifiers": {
            "CVE": [
              "CVE-2019-18797"
            ],
            "CWE": [
              "CWE-79"
            ]
          },
          "language": "js",
          "modificationTime": "2021-02-01T08:49:06.854582Z",
          "moduleName": "node-sass",
          "packageManager": "npm",
          "packageName": "node-sass",
          "patches": [],
          "proprietary": false,
          "publicationTime": "2020-01-08T00:00:00Z",
          "references": [
            {
              "title": "GitHub Issue",
              "url": "https://github.com/sass/libsass/issues/3000"
            },
            {
              "title": "NVD",
              "url": "https://nvd.nist.gov/vuln/detail/CVE-2019-18797"
            }
          ],
          "semver": {
            "vulnerable": [
              "*"
            ]
          },
          "severity": "medium",
          "severityWithCritical": "medium",
          "title": "Uncontrolled Recursion",
          "from": [
            "email-template-manager@0.0.0",
            "node-sass@4.12.0"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "name": "node-sass",
          "version": "4.12.0"
        },
        {
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H",
          "alternativeIds": [],
          "creationTime": "2020-01-08T15:55:07.174487Z",
          "credit": [
            "Unknown"
          ],
          "cvssScore": 6.5,
          "description": "## Overview\n[node-sass](https://npmjs.org/package/node-sass) is a Node.js bindings package for libsass.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS). Uncontrolled recursion is possible in `Sass::Complex_Selector::perform` in `ast.hpp` and `Sass::Inspect::operator` in `inspect.cpp`. Note: `node-sass` is affected by this vulnerability due to its bundled usage of the `libsass` package.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browserΓÇÖs Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if theyΓÇÖve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the userΓÇÖs browser.| \n|**DOM-based**|Client|The attacker forces the userΓÇÖs browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nThere is no fixed version for `node-sass`.\n## References\n- [GitHub Issue](https://github.com/sass/libsass/issues/2671)\n- [NVD](https://nvd.nist.gov/vuln/detail/CVE-2018-20822)\n",
          "disclosureTime": "2018-06-13T00:00:00Z",
          "exploit": "Not Defined",
          "fixedIn": [],
          "functions": [],
          "functions_new": [],
          "id": "SNYK-JS-NODESASS-540978",
          "identifiers": {
            "CVE": [
              "CVE-2018-20822"
            ],
            "CWE": [
              "CWE-79"
            ]
          },
          "language": "js",
          "modificationTime": "2021-02-01T08:49:38.356910Z",
          "moduleName": "node-sass",
          "packageManager": "npm",
          "packageName": "node-sass",
          "patches": [],
          "proprietary": false,
          "publicationTime": "2020-01-08T00:00:00Z",
          "references": [
            {
              "title": "GitHub Issue",
              "url": "https://github.com/sass/libsass/issues/2671"
            },
            {
              "title": "NVD",
              "url": "https://nvd.nist.gov/vuln/detail/CVE-2018-20822"
            }
          ],
          "semver": {
            "vulnerable": [
              "*"
            ]
          },
          "severity": "medium",
          "severityWithCritical": "medium",
          "title": "Denial of Service (DoS)",
          "from": [
            "email-template-manager@0.0.0",
            "node-sass@4.12.0"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "name": "node-sass",
          "version": "4.12.0"
        },
        {
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H",
          "alternativeIds": [],
          "creationTime": "2020-01-08T15:55:11.832946Z",
          "credit": [
            "Unknown"
          ],
          "cvssScore": 6.5,
          "description": "## Overview\n[node-sass](https://npmjs.org/package/node-sass) is a Node.js bindings package for libsass.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS). The parsing component allows attackers to cause uncontrolled recursion in `Sass::Parser::parse_css_variable_value` in parser.cpp. Note: `node-sass` is affected by this vulnerability due to its bundled usage of the `libsass` package.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browserΓÇÖs Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if theyΓÇÖve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the userΓÇÖs browser.| \n|**DOM-based**|Client|The attacker forces the userΓÇÖs browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nThere is no fixed version for `node-sass`.\n## References\n- [GitHub Commit](https://github.com/sass/libsass/commit/f2db04883e5fff4e03777dcc1eb60d4373c45be1)\n- [GitHub Issue](https://github.com/sass/libsass/issues/2658)\n",
          "disclosureTime": "2018-06-02T00:00:00Z",
          "exploit": "Not Defined",
          "fixedIn": [],
          "functions": [],
          "functions_new": [],
          "id": "SNYK-JS-NODESASS-540980",
          "identifiers": {
            "CVE": [
              "CVE-2018-20821"
            ],
            "CWE": [
              "CWE-79"
            ]
          },
          "language": "js",
          "modificationTime": "2021-01-27T13:17:22.558432Z",
          "moduleName": "node-sass",
          "packageManager": "npm",
          "packageName": "node-sass",
          "patches": [],
          "proprietary": false,
          "publicationTime": "2020-01-08T00:00:00Z",
          "references": [
            {
              "title": "GitHub Commit",
              "url": "https://github.com/sass/libsass/commit/f2db04883e5fff4e03777dcc1eb60d4373c45be1"
            },
            {
              "title": "GitHub Issue",
              "url": "https://github.com/sass/libsass/issues/2658"
            }
          ],
          "semver": {
            "vulnerable": [
              "*"
            ]
          },
          "severity": "medium",
          "severityWithCritical": "medium",
          "title": "Denial of Service (DoS)",
          "from": [
            "email-template-manager@0.0.0",
            "node-sass@4.12.0"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "name": "node-sass",
          "version": "4.12.0"
        },
        {
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H",
          "alternativeIds": [],
          "creationTime": "2020-01-08T15:55:34.469639Z",
          "credit": [
            "Unknown"
          ],
          "cvssScore": 6.5,
          "description": "## Overview\n[node-sass](https://npmjs.org/package/node-sass) is a Node.js bindings package for libsass.\n\nAffected versions of this package are vulnerable to Out-of-bounds Read via `Sass::Prelexer::skip_over_scopes` in `prelexer.hpp` when called from `Sass::Parser::parse_import()`, a similar issue to CVE-2018-11693. Note: `node-sass` is affected by this vulnerability due to its bundled usage of the `libsass` package.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browserΓÇÖs Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if theyΓÇÖve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the userΓÇÖs browser.| \n|**DOM-based**|Client|The attacker forces the userΓÇÖs browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nThere is no fixed version for `node-sass`.\n## References\n- [GitHub Commit](https://github.com/sass/libsass/commit/8e681e20795ee1cf203ff7002367c29735addf67)\n- [NVD](https://nvd.nist.gov/vuln/detail/CVE-2019-6286)\n",
          "disclosureTime": "2019-04-08T00:00:00Z",
          "exploit": "Not Defined",
          "fixedIn": [],
          "functions": [],
          "functions_new": [],
          "id": "SNYK-JS-NODESASS-540990",
          "identifiers": {
            "CVE": [
              "CVE-2019-6286"
            ],
            "CWE": [
              "CWE-79"
            ]
          },
          "language": "js",
          "modificationTime": "2021-01-27T13:21:56.023039Z",
          "moduleName": "node-sass",
          "packageManager": "npm",
          "packageName": "node-sass",
          "patches": [],
          "proprietary": false,
          "publicationTime": "2020-01-08T00:00:00Z",
          "references": [
            {
              "title": "GitHub Commit",
              "url": "https://github.com/sass/libsass/commit/8e681e20795ee1cf203ff7002367c29735addf67"
            },
            {
              "title": "NVD",
              "url": "https://nvd.nist.gov/vuln/detail/CVE-2019-6286"
            }
          ],
          "semver": {
            "vulnerable": [
              "*"
            ]
          },
          "severity": "medium",
          "severityWithCritical": "medium",
          "title": "Out-of-bounds Read",
          "from": [
            "email-template-manager@0.0.0",
            "node-sass@4.12.0"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "name": "node-sass",
          "version": "4.12.0"
        },
        {
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:L",
          "alternativeIds": [],
          "creationTime": "2020-01-08T15:55:38.727504Z",
          "credit": [
            "Unknown"
          ],
          "cvssScore": 4.3,
          "description": "## Overview\n[node-sass](https://npmjs.org/package/node-sass) is a Node.js bindings package for libsass.\n\nAffected versions of this package are vulnerable to NULL Pointer Dereference via `Sass::Parser::parseCompoundSelector`in `parser_selectors.cpp`. Note: `node-sass` is affected by this vulnerability due to its bundled usage of the `libsass` package.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browserΓÇÖs Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if theyΓÇÖve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the userΓÇÖs browser.| \n|**DOM-based**|Client|The attacker forces the userΓÇÖs browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nThere is no fixed version for `node-sass`.\n## References\n- [GitHub Commit](https://github.com/sass/libsass/commit/e1c16e09b4a953757a15149deaaf28a3fd81dc97)\n- [NVD](https://nvd.nist.gov/vuln/detail/CVE-2019-18799)\n",
          "disclosureTime": "2019-11-08T00:00:00Z",
          "exploit": "Not Defined",
          "fixedIn": [],
          "functions": [],
          "functions_new": [],
          "id": "SNYK-JS-NODESASS-540992",
          "identifiers": {
            "CVE": [
              "CVE-2019-18799"
            ],
            "CWE": [
              "CWE-79"
            ]
          },
          "language": "js",
          "modificationTime": "2021-02-01T08:49:19.472238Z",
          "moduleName": "node-sass",
          "packageManager": "npm",
          "packageName": "node-sass",
          "patches": [],
          "proprietary": false,
          "publicationTime": "2020-01-08T00:00:00Z",
          "references": [
            {
              "title": "GitHub Commit",
              "url": "https://github.com/sass/libsass/commit/e1c16e09b4a953757a15149deaaf28a3fd81dc97"
            },
            {
              "title": "NVD",
              "url": "https://nvd.nist.gov/vuln/detail/CVE-2019-18799"
            }
          ],
          "semver": {
            "vulnerable": [
              "*"
            ]
          },
          "severity": "medium",
          "severityWithCritical": "medium",
          "title": "NULL Pointer Dereference",
          "from": [
            "email-template-manager@0.0.0",
            "node-sass@4.12.0"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "name": "node-sass",
          "version": "4.12.0"
        },
        {
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H",
          "alternativeIds": [],
          "creationTime": "2020-01-08T15:55:43.915190Z",
          "credit": [
            "Unknown"
          ],
          "cvssScore": 6.5,
          "description": "## Overview\n[node-sass](https://npmjs.org/package/node-sass) is a Node.js bindings package for libsass.\n\nAffected versions of this package are vulnerable to NULL Pointer Dereference. The function `Sass::Selector_List::populate_extends` in `SharedPtr.hpp` (used by `ast.cpp` and `ast_selectors.cpp`) may cause a Denial of Service (application crash) via a crafted sass input file. Note: `node-sass` is affected by this vulnerability due to its bundled usage of the `libsass` package.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browserΓÇÖs Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if theyΓÇÖve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the userΓÇÖs browser.| \n|**DOM-based**|Client|The attacker forces the userΓÇÖs browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nThere is no fixed version for `node-sass`.\n## References\n- [GitHub Commit](https://github.com/sass/libsass/commit/e94b5f91ec372a84be1f9c0da32cb6e0af0b99fe)\n- [NVD](https://nvd.nist.gov/vuln/detail/CVE-2018-19797)\n",
          "disclosureTime": "2019-12-02T00:00:00Z",
          "exploit": "Not Defined",
          "fixedIn": [],
          "functions": [],
          "functions_new": [],
          "id": "SNYK-JS-NODESASS-540994",
          "identifiers": {
            "CVE": [
              "CVE-2018-19797"
            ],
            "CWE": [
              "CWE-79"
            ]
          },
          "language": "js",
          "modificationTime": "2021-01-27T10:37:37.776523Z",
          "moduleName": "node-sass",
          "packageManager": "npm",
          "packageName": "node-sass",
          "patches": [],
          "proprietary": false,
          "publicationTime": "2020-01-08T00:00:00Z",
          "references": [
            {
              "title": "GitHub Commit",
              "url": "https://github.com/sass/libsass/commit/e94b5f91ec372a84be1f9c0da32cb6e0af0b99fe"
            },
            {
              "title": "NVD",
              "url": "https://nvd.nist.gov/vuln/detail/CVE-2018-19797"
            }
          ],
          "semver": {
            "vulnerable": [
              "*"
            ]
          },
          "severity": "medium",
          "severityWithCritical": "medium",
          "title": "NULL Pointer Dereference",
          "from": [
            "email-template-manager@0.0.0",
            "node-sass@4.12.0"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "name": "node-sass",
          "version": "4.12.0"
        },
        {
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:H",
          "alternativeIds": [],
          "creationTime": "2020-01-08T15:55:49.365066Z",
          "credit": [
            "Unknown"
          ],
          "cvssScore": 8.1,
          "description": "## Overview\n[node-sass](https://npmjs.org/package/node-sass) is a Node.js bindings package for libsass.\n\nAffected versions of this package are vulnerable to Out-of-bounds Read via the function `Sass::handle_error` which could be leveraged by an attacker to disclose information or manipulated to read from unmapped memory causing a denial of service. Note: `node-sass` is affected by this vulnerability due to its bundled usage of the `libsass` package.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browserΓÇÖs Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if theyΓÇÖve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the userΓÇÖs browser.| \n|**DOM-based**|Client|The attacker forces the userΓÇÖs browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nThere is no fixed version for `node-sass`.\n## References\n- [GitHub Commit](https://github.com/sass/libsass/commit/8f40dc03e5ab5a8b2ebeb72b31f8d1adbb2fd6ae)\n- [NVD](https://nvd.nist.gov/vuln/detail/CVE-2018-11698)\n",
          "disclosureTime": "2019-11-22T00:00:00Z",
          "exploit": "Not Defined",
          "fixedIn": [],
          "functions": [],
          "functions_new": [],
          "id": "SNYK-JS-NODESASS-540996",
          "identifiers": {
            "CVE": [
              "CVE-2018-11698"
            ],
            "CWE": [
              "CWE-79"
            ]
          },
          "language": "js",
          "modificationTime": "2021-01-27T10:36:39.214566Z",
          "moduleName": "node-sass",
          "packageManager": "npm",
          "packageName": "node-sass",
          "patches": [],
          "proprietary": false,
          "publicationTime": "2020-01-08T00:00:00Z",
          "references": [
            {
              "title": "GitHub Commit",
              "url": "https://github.com/sass/libsass/commit/8f40dc03e5ab5a8b2ebeb72b31f8d1adbb2fd6ae"
            },
            {
              "title": "NVD",
              "url": "https://nvd.nist.gov/vuln/detail/CVE-2018-11698"
            }
          ],
          "semver": {
            "vulnerable": [
              "*"
            ]
          },
          "severity": "high",
          "severityWithCritical": "high",
          "title": "Out-of-bounds Read",
          "from": [
            "email-template-manager@0.0.0",
            "node-sass@4.12.0"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "name": "node-sass",
          "version": "4.12.0"
        },
        {
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H",
          "alternativeIds": [],
          "creationTime": "2020-01-08T15:55:53.988216Z",
          "credit": [
            "Unknown"
          ],
          "cvssScore": 6.5,
          "description": "## Overview\n[node-sass](https://npmjs.org/package/node-sass) is a Node.js bindings package for libsass.\n\nAffected versions of this package are vulnerable to Out-of-Bounds via `Sass::Prelexer::alternatives` in `prelexer.hpp`. Note: `node-sass` is affected by this vulnerability due to its bundled usage of the `libsass` package.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browserΓÇÖs Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if theyΓÇÖve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the userΓÇÖs browser.| \n|**DOM-based**|Client|The attacker forces the userΓÇÖs browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nThere is no fixed version for `node-sass`.\n## References\n- [GitHub Commit](https://github.com/sass/libsass/pull/2857/commits/0f3d3f8df99af422af055c41d778ca9c5c60a0bb)\n- [GitHub Issue](https://github.com/sass/libsass/issues/2814)\n- [NVD](https://nvd.nist.gov/vuln/detail/CVE-2019-6284)\n",
          "disclosureTime": "2019-04-08T00:00:00Z",
          "exploit": "Not Defined",
          "fixedIn": [],
          "functions": [],
          "functions_new": [],
          "id": "SNYK-JS-NODESASS-540998",
          "identifiers": {
            "CVE": [
              "CVE-2019-6284"
            ],
            "CWE": [
              "CWE-79"
            ]
          },
          "language": "js",
          "modificationTime": "2021-01-27T13:21:14.602326Z",
          "moduleName": "node-sass",
          "packageManager": "npm",
          "packageName": "node-sass",
          "patches": [],
          "proprietary": false,
          "publicationTime": "2020-01-08T00:00:00Z",
          "references": [
            {
              "title": "GitHub Commit",
              "url": "https://github.com/sass/libsass/pull/2857/commits/0f3d3f8df99af422af055c41d778ca9c5c60a0bb"
            },
            {
              "title": "GitHub Issue",
              "url": "https://github.com/sass/libsass/issues/2814"
            },
            {
              "title": "NVD",
              "url": "https://nvd.nist.gov/vuln/detail/CVE-2019-6284"
            }
          ],
          "semver": {
            "vulnerable": [
              "*"
            ]
          },
          "severity": "medium",
          "severityWithCritical": "medium",
          "title": "Out-of-Bounds",
          "from": [
            "email-template-manager@0.0.0",
            "node-sass@4.12.0"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "name": "node-sass",
          "version": "4.12.0"
        },
        {
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H",
          "alternativeIds": [],
          "creationTime": "2020-01-08T15:55:58.595345Z",
          "credit": [
            "Unknown"
          ],
          "cvssScore": 8.8,
          "description": "## Overview\n[node-sass](https://npmjs.org/package/node-sass) is a Node.js bindings package for libsass.\n\nAffected versions of this package are vulnerable to Use After Free via the `SharedPtr` class in `SharedPtr.cpp` (or `SharedPtr.hpp`) that may cause a denial of service (application crash) or possibly have unspecified other impact. Note: `node-sass` is affected by this vulnerability due to its bundled usage of the `libsass` package.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browserΓÇÖs Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if theyΓÇÖve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the userΓÇÖs browser.| \n|**DOM-based**|Client|The attacker forces the userΓÇÖs browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nThere is no fixed version for `node-sass`.\n## References\n- [GitHub Commit](https://github.com/sass/libsass/commit/b21fb9f84096d9927780b86fa90629a096af358d)\n- [NVD](https://nvd.nist.gov/vuln/detail/CVE-2018-19827)\n",
          "disclosureTime": "2019-12-03T00:00:00Z",
          "exploit": "Not Defined",
          "fixedIn": [],
          "functions": [],
          "functions_new": [],
          "id": "SNYK-JS-NODESASS-541000",
          "identifiers": {
            "CVE": [
              "CVE-2018-19827"
            ],
            "CWE": [
              "CWE-79"
            ]
          },
          "language": "js",
          "modificationTime": "2020-06-12T14:37:03.348651Z",
          "moduleName": "node-sass",
          "packageManager": "npm",
          "packageName": "node-sass",
          "patches": [],
          "proprietary": false,
          "publicationTime": "2020-01-08T00:00:00Z",
          "references": [
            {
              "title": "GitHub Commit",
              "url": "https://github.com/sass/libsass/commit/b21fb9f84096d9927780b86fa90629a096af358d"
            },
            {
              "title": "NVD",
              "url": "https://nvd.nist.gov/vuln/detail/CVE-2018-19827"
            }
          ],
          "semver": {
            "vulnerable": [
              "*"
            ]
          },
          "severity": "high",
          "severityWithCritical": "high",
          "title": "Use After Free",
          "from": [
            "email-template-manager@0.0.0",
            "node-sass@4.12.0"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "name": "node-sass",
          "version": "4.12.0"
        },
        {
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H",
          "alternativeIds": [],
          "creationTime": "2020-01-08T15:56:03.064793Z",
          "credit": [
            "Unknown"
          ],
          "cvssScore": 6.5,
          "description": "## Overview\n[node-sass](https://npmjs.org/package/node-sass) is a Node.js bindings package for libsass.\n\nAffected versions of this package are vulnerable to Out-of-bounds Read. The function `handle_error` in `sass_context.cpp` allows attackers to cause a denial-of-service resulting from a heap-based buffer over-read via a crafted sass file. Note: `node-sass` is affected by this vulnerability due to its bundled usage of the `libsass` package.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browserΓÇÖs Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if theyΓÇÖve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the userΓÇÖs browser.| \n|**DOM-based**|Client|The attacker forces the userΓÇÖs browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nThere is no fixed version for `node-sass`.\n## References\n- [GitHub Commit](https://github.com/sass/libsass/commit/2cabd116b95d67dcd9d44fcb936dee03f4fc71b9)\n- [GitHub Issue](https://github.com/sass/libsass/issues/2657)\n- [GitHub PR](https://github.com/sass/libsass/pull/2767)\n",
          "disclosureTime": "2018-11-28T00:00:00Z",
          "exploit": "Not Defined",
          "fixedIn": [],
          "functions": [],
          "functions_new": [],
          "id": "SNYK-JS-NODESASS-541002",
          "identifiers": {
            "CVE": [
              "CVE-2018-19839"
            ],
            "CWE": [
              "CWE-79"
            ]
          },
          "language": "js",
          "modificationTime": "2020-06-12T14:36:56.477670Z",
          "moduleName": "node-sass",
          "packageManager": "npm",
          "packageName": "node-sass",
          "patches": [],
          "proprietary": false,
          "publicationTime": "2020-01-08T00:00:00Z",
          "references": [
            {
              "title": "GitHub Commit",
              "url": "https://github.com/sass/libsass/commit/2cabd116b95d67dcd9d44fcb936dee03f4fc71b9"
            },
            {
              "title": "GitHub Issue",
              "url": "https://github.com/sass/libsass/issues/2657"
            },
            {
              "title": "GitHub PR",
              "url": "https://github.com/sass/libsass/pull/2767"
            }
          ],
          "semver": {
            "vulnerable": [
              "*"
            ]
          },
          "severity": "medium",
          "severityWithCritical": "medium",
          "title": "Out-of-bounds Read",
          "from": [
            "email-template-manager@0.0.0",
            "node-sass@4.12.0"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "name": "node-sass",
          "version": "4.12.0"
        },
        {
          "license": "LGPL-2.1",
          "semver": {
            "vulnerable": [
              ">=0"
            ]
          },
          "id": "snyk:lic:npm:tinymce:LGPL-2.1",
          "type": "license",
          "packageManager": "npm",
          "language": "js",
          "packageName": "tinymce",
          "title": "LGPL-2.1 license",
          "description": "LGPL-2.1 license",
          "publicationTime": "2021-03-16T22:57:53.213Z",
          "creationTime": "2021-03-16T22:57:53.213Z",
          "patches": [],
          "licenseTemplateUrl": "https://raw.githubusercontent.com/spdx/license-list/master/LGPL-2.1.txt",
          "severity": "medium",
          "from": [
            "email-template-manager@0.0.0",
            "tinymce@5.0.4"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "name": "tinymce",
          "version": "5.0.4"
        },
        {
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
          "alternativeIds": [],
          "creationTime": "2020-10-25T14:27:16.715665Z",
          "credit": [
            "po6ix"
          ],
          "cvssScore": 7.3,
          "description": "## Overview\n[y18n](https://www.npmjs.com/package/y18n) is a the bare-bones internationalization library used by yargs\n\nAffected versions of this package are vulnerable to Prototype Pollution. PoC by po6ix:\r\n```\r\nconst y18n = require('y18n')();\r\n \r\ny18n.setLocale('__proto__');\r\ny18n.updateLocale({polluted: true});\r\n\r\nconsole.log(polluted); // true\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of ΓÇ£pathΓÇ¥, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototypeΓÇö use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. ΓÇ£JavaScript prototype pollution attack in NodeJS application.ΓÇ¥ GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `y18n` to version 3.2.2, 4.0.1, 5.0.5 or higher.\n## References\n- [GitHub Issue](https://github.com/yargs/y18n/issues/96)\n- [GitHub PR](https://github.com/yargs/y18n/pull/108)\n",
          "disclosureTime": "2020-10-25T14:24:22Z",
          "exploit": "Proof of Concept",
          "fixedIn": [
            "3.2.2",
            "4.0.1",
            "5.0.5"
          ],
          "functions": [],
          "functions_new": [],
          "id": "SNYK-JS-Y18N-1021887",
          "identifiers": {
            "CVE": [
              "CVE-2020-7774"
            ],
            "CWE": [
              "CWE-400"
            ]
          },
          "language": "js",
          "modificationTime": "2021-01-05T15:29:00.943111Z",
          "moduleName": "y18n",
          "packageManager": "npm",
          "packageName": "y18n",
          "patches": [],
          "proprietary": false,
          "publicationTime": "2020-11-10T15:27:28Z",
          "references": [
            {
              "title": "GitHub Issue",
              "url": "https://github.com/yargs/y18n/issues/96"
            },
            {
              "title": "GitHub PR",
              "url": "https://github.com/yargs/y18n/pull/108"
            }
          ],
          "semver": {
            "vulnerable": [
              "<3.2.2",
              ">=4.0.0 <4.0.1",
              ">=5.0.0 <5.0.5"
            ]
          },
          "severity": "high",
          "severityWithCritical": "high",
          "title": "Prototype Pollution",
          "from": [
            "email-template-manager@0.0.0",
            "node-sass@4.12.0",
            "sass-graph@2.2.4",
            "yargs@7.1.0",
            "y18n@3.2.1"
          ],
          "upgradePath": [
            false,
            "node-sass@4.12.0",
            "sass-graph@2.2.4",
            "yargs@7.1.0",
            "y18n@3.2.2"
          ],
          "isUpgradable": true,
          "isPatchable": false,
          "isPinnable": false,
          "name": "y18n",
          "version": "3.2.1"
        },
        {
          "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
          "alternativeIds": [],
          "creationTime": "2020-03-16T16:41:36.590728Z",
          "credit": [
            "Snyk Security Team"
          ],
          "cvssScore": 5.6,
          "description": "## Overview\n[yargs-parser](https://www.npmjs.com/package/yargs-parser) is a mighty option parser used by yargs.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The library could be tricked into adding or modifying properties of `Object.prototype` using a `__proto__` payload.\r\n\r\nOur research team checked several attack vectors to verify this vulnerability:\r\n\r\n1. It could be used for [privilege escalation](https://gist.github.com/Kirill89/dcd8100d010896157a36624119439832).\r\n2. The library could be used to parse user input received from different sources:\r\n    - terminal emulators\r\n    - system calls from other code bases\r\n    - CLI RPC servers\r\n\r\n## PoC by Snyk\r\n```\r\nconst parser = require(\"yargs-parser\");\r\nconsole.log(parser('--foo.__proto__.bar baz'));\r\nconsole.log(({}).bar);\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of ΓÇ£pathΓÇ¥, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototypeΓÇö use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. ΓÇ£JavaScript prototype pollution attack in NodeJS application.ΓÇ¥ GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `yargs-parser` to version 5.0.0-security.0, 13.1.2, 15.0.1, 18.1.1 or higher.\n## References\n- [Command Injection PoC](https://gist.github.com/Kirill89/dcd8100d010896157a36624119439832)\n- [GitHub Fix Commit](https://github.com/yargs/yargs-parser/commit/63810ca1ae1a24b08293a4d971e70e058c7a41e2)\n- [Snyk Research Blog](https://snyk.io/blog/prototype-pollution-minimist/)\n",
          "disclosureTime": "2020-03-16T16:35:35Z",
          "exploit": "Proof of Concept",
          "fixedIn": [
            "5.0.0-security.0",
            "13.1.2",
            "15.0.1",
            "18.1.1"
          ],
          "functions": [
            {
              "functionId": {
                "className": null,
                "filePath": "index.js",
                "functionName": "parse.setKey"
              },
              "version": [
                "<13.1.2",
                ">=14.0.0 <15.0.1",
                ">=16.0.0 <18.1.1"
              ]
            },
            {
              "functionId": {
                "className": null,
                "filePath": "index.js",
                "functionName": "parse.setKey"
              },
              "version": [
                "<13.1.2",
                ">=14.0.0 <15.0.1",
                ">=16.0.0 <18.1.1"
              ]
            }
          ],
          "functions_new": [
            {
              "functionId": {
                "filePath": "index.js",
                "functionName": "parse.setKey"
              },
              "version": [
                "<13.1.2",
                ">=14.0.0 <15.0.1",
                ">=16.0.0 <18.1.1"
              ]
            },
            {
              "functionId": {
                "filePath": "index.js",
                "functionName": "parse.setKey"
              },
              "version": [
                "<13.1.2",
                ">=14.0.0 <15.0.1",
                ">=16.0.0 <18.1.1"
              ]
            }
          ],
          "id": "SNYK-JS-YARGSPARSER-560381",
          "identifiers": {
            "CVE": [
              "CVE-2020-7608"
            ],
            "CWE": [
              "CWE-400"
            ],
            "NSP": [
              1500
            ]
          },
          "language": "js",
          "modificationTime": "2020-09-25T10:27:51.271313Z",
          "moduleName": "yargs-parser",
          "packageManager": "npm",
          "packageName": "yargs-parser",
          "patches": [],
          "proprietary": true,
          "publicationTime": "2020-03-16T16:35:33Z",
          "references": [
            {
              "title": "Command Injection PoC",
              "url": "https://gist.github.com/Kirill89/dcd8100d010896157a36624119439832"
            },
            {
              "title": "GitHub Fix Commit",
              "url": "https://github.com/yargs/yargs-parser/commit/63810ca1ae1a24b08293a4d971e70e058c7a41e2"
            },
            {
              "title": "Snyk Research Blog",
              "url": "https://snyk.io/blog/prototype-pollution-minimist/"
            }
          ],
          "semver": {
            "vulnerable": [
              "<5.0.0-security.0",
              ">5.0.0-security.0 <13.1.2",
              ">=14.0.0 <15.0.1",
              ">=16.0.0 <18.1.1"
            ]
          },
          "severity": "medium",
          "severityWithCritical": "medium",
          "title": "Prototype Pollution",
          "from": [
            "email-template-manager@0.0.0",
            "node-sass@4.12.0",
            "sass-graph@2.2.4",
            "yargs@7.1.0",
            "yargs-parser@5.0.0"
          ],
          "upgradePath": [
            false,
            "node-sass@4.12.0",
            "sass-graph@2.2.5",
            "yargs@13.3.2",
            "yargs-parser@13.1.2"
          ],
          "isUpgradable": true,
          "isPatchable": false,
          "isPinnable": false,
          "name": "yargs-parser",
          "version": "5.0.0"
        }
      ],
      "upgrade": {
        "@angular/core@7.2.14": {
          "upgradeTo": "@angular/core@11.0.5",
          "upgrades": [
            "@angular/core@7.2.14"
          ],
          "vulns": [
            "SNYK-JS-ANGULARCORE-1070902"
          ]
        },
        "node-sass@4.12.0": {
          "upgradeTo": "node-sass@4.13.1",
          "upgrades": [
            "node-sass@4.12.0",
            "node-sass@4.12.0"
          ],
          "vulns": [
            "SNYK-JS-NODESASS-535497",
            "SNYK-JS-NODESASS-542662"
          ]
        },
        "tinymce@5.0.4": {
          "upgradeTo": "tinymce@5.6.0",
          "upgrades": [
            "tinymce@5.0.4",
            "tinymce@5.0.4",
            "tinymce@5.0.4",
            "tinymce@5.0.4"
          ],
          "vulns": [
            "SNYK-JS-TINYMCE-1056408",
            "SNYK-JS-TINYMCE-598223",
            "SNYK-JS-TINYMCE-568922",
            "SNYK-JS-TINYMCE-543825"
          ]
        }
      },
      "patch": {
        "SNYK-JS-LODASH-567746": {
          "paths": [
            {
              "node-sass > lodash": {
                "patched": "2021-04-14T14:30:00.070Z"
              }
            },
            {
              "node-sass > sass-graph > lodash": {
                "patched": "2021-04-14T14:30:00.070Z"
              }
            },
            {
              "node-sass > gaze > globule > lodash": {
                "patched": "2021-04-14T14:30:00.070Z"
              }
            }
          ]
        }
      },
      "ignore": {},
      "pin": {}
    },
    "filesystemPolicy": false,
    "filtered": {
      "ignore": [],
      "patch": []
    },
    "uniqueCount": 36,
    "projectName": "email-template-manager",
    "foundProjectCount": 1,
    "displayTargetFile": "company.Ux.project\\package-lock.json",
    "path": "C:\\Users\\uac\\source\\repos\\project"
  }
]
