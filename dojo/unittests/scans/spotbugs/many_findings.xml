<?xml version="1.0" encoding="utf-8"?>
<BugCollection sequence='0' release='' analysisTimestamp='1611147891990' version='4.2.0' timestamp='1611147883987'>
    <Project projectName='GoatKotlin'><Jar>C:\Users\s.gioria\Documents\GoatKotlin\target\classes</Jar><AuxClasspathEntry>c:\workspace\tools\m2repository\org\springframework\boot\spring-boot-starter-web\2.4.0\spring-boot-starter-web-2.4.0.jar</AuxClasspathEntry><AuxClasspathEntry>c:\workspace\tools\m2repository\org\springframework\boot\spring-boot-starter\2.4.0\spring-boot-starter-2.4.0.jar</AuxClasspathEntry><AuxClasspathEntry>c:\workspace\tools\m2repository\org\springframework\boot\spring-boot\2.4.0\spring-boot-2.4.0.jar</AuxClasspathEntry><AuxClasspathEntry>c:\workspace\tools\m2repository\org\springframework\boot\spring-boot-autoconfigure\2.4.0\spring-boot-autoconfigure-2.4.0.jar</AuxClasspathEntry><AuxClasspathEntry>c:\workspace\tools\m2repository\org\springframework\boot\spring-boot-starter-logging\2.4.0\spring-boot-starter-logging-2.4.0.jar</AuxClasspathEntry><AuxClasspathEntry>c:\workspace\tools\m2repository\ch\qos\logback\logback-classic\1.2.3\logback-classic-1.2.3.jar</AuxClasspathEntry><AuxClasspathEntry>c:\workspace\tools\m2repository\ch\qos\logback\logback-core\1.2.3\logback-core-1.2.3.jar</AuxClasspathEntry><AuxClasspathEntry>c:\workspace\tools\m2repository\org\apache\logging\log4j\log4j-to-slf4j\2.13.3\log4j-to-slf4j-2.13.3.jar</AuxClasspathEntry><AuxClasspathEntry>c:\workspace\tools\m2repository\org\apache\logging\log4j\log4j-api\2.13.3\log4j-api-2.13.3.jar</AuxClasspathEntry><AuxClasspathEntry>c:\workspace\tools\m2repository\org\slf4j\jul-to-slf4j\1.7.30\jul-to-slf4j-1.7.30.jar</AuxClasspathEntry><AuxClasspathEntry>c:\workspace\tools\m2repository\jakarta\annotation\jakarta.annotation-api\1.3.5\jakarta.annotation-api-1.3.5.jar</AuxClasspathEntry><AuxClasspathEntry>c:\workspace\tools\m2repository\org\yaml\snakeyaml\1.27\snakeyaml-1.27.jar</AuxClasspathEntry><AuxClasspathEntry>c:\workspace\tools\m2repository\org\springframework\boot\spring-boot-starter-json\2.4.0\spring-boot-starter-json-2.4.0.jar</AuxClasspathEntry><AuxClasspathEntry>c:\workspace\tools\m2repository\com\fasterxml\jackson\datatype\jackson-datatype-jdk8\2.11.3\jackson-datatype-jdk8-2.11.3.jar</AuxClasspathEntry><AuxClasspathEntry>c:\workspace\tools\m2repository\com\fasterxml\jackson\datatype\jackson-datatype-jsr310\2.11.3\jackson-datatype-jsr310-2.11.3.jar</AuxClasspathEntry><AuxClasspathEntry>c:\workspace\tools\m2repository\com\fasterxml\jackson\module\jackson-module-parameter-names\2.11.3\jackson-module-parameter-names-2.11.3.jar</AuxClasspathEntry><AuxClasspathEntry>c:\workspace\tools\m2repository\org\springframework\boot\spring-boot-starter-tomcat\2.4.0\spring-boot-starter-tomcat-2.4.0.jar</AuxClasspathEntry><AuxClasspathEntry>c:\workspace\tools\m2repository\org\apache\tomcat\embed\tomcat-embed-core\9.0.39\tomcat-embed-core-9.0.39.jar</AuxClasspathEntry><AuxClasspathEntry>c:\workspace\tools\m2repository\org\glassfish\jakarta.el\3.0.3\jakarta.el-3.0.3.jar</AuxClasspathEntry><AuxClasspathEntry>c:\workspace\tools\m2repository\org\apache\tomcat\embed\tomcat-embed-websocket\9.0.39\tomcat-embed-websocket-9.0.39.jar</AuxClasspathEntry><AuxClasspathEntry>c:\workspace\tools\m2repository\org\springframework\spring-web\5.3.1\spring-web-5.3.1.jar</AuxClasspathEntry><AuxClasspathEntry>c:\workspace\tools\m2repository\org\springframework\spring-beans\5.3.1\spring-beans-5.3.1.jar</AuxClasspathEntry><AuxClasspathEntry>c:\workspace\tools\m2repository\org\springframework\spring-webmvc\5.3.1\spring-webmvc-5.3.1.jar</AuxClasspathEntry><AuxClasspathEntry>c:\workspace\tools\m2repository\org\springframework\spring-aop\5.3.1\spring-aop-5.3.1.jar</AuxClasspathEntry><AuxClasspathEntry>c:\workspace\tools\m2repository\org\springframework\spring-context\5.3.1\spring-context-5.3.1.jar</AuxClasspathEntry><AuxClasspathEntry>c:\workspace\tools\m2repository\org\springframework\spring-expression\5.3.1\spring-expression-5.3.1.jar</AuxClasspathEntry><AuxClasspathEntry>c:\workspace\tools\m2repository\org\springframework\boot\spring-boot-starter-webflux\2.4.0\spring-boot-starter-webflux-2.4.0.jar</AuxClasspathEntry><AuxClasspathEntry>c:\workspace\tools\m2repository\org\springframework\boot\spring-boot-starter-reactor-netty\2.4.0\spring-boot-starter-reactor-netty-2.4.0.jar</AuxClasspathEntry><AuxClasspathEntry>c:\workspace\tools\m2repository\io\projectreactor\netty\reactor-netty-http\1.0.1\reactor-netty-http-1.0.1.jar</AuxClasspathEntry><AuxClasspathEntry>c:\workspace\tools\m2repository\io\netty\netty-codec-http\4.1.54.Final\netty-codec-http-4.1.54.Final.jar</AuxClasspathEntry><AuxClasspathEntry>c:\workspace\tools\m2repository\io\netty\netty-common\4.1.54.Final\netty-common-4.1.54.Final.jar</AuxClasspathEntry><AuxClasspathEntry>c:\workspace\tools\m2repository\io\netty\netty-buffer\4.1.54.Final\netty-buffer-4.1.54.Final.jar</AuxClasspathEntry><AuxClasspathEntry>c:\workspace\tools\m2repository\io\netty\netty-transport\4.1.54.Final\netty-transport-4.1.54.Final.jar</AuxClasspathEntry><AuxClasspathEntry>c:\workspace\tools\m2repository\io\netty\netty-codec\4.1.54.Final\netty-codec-4.1.54.Final.jar</AuxClasspathEntry><AuxClasspathEntry>c:\workspace\tools\m2repository\io\netty\netty-handler\4.1.54.Final\netty-handler-4.1.54.Final.jar</AuxClasspathEntry><AuxClasspathEntry>c:\workspace\tools\m2repository\io\netty\netty-codec-http2\4.1.54.Final\netty-codec-http2-4.1.54.Final.jar</AuxClasspathEntry><AuxClasspathEntry>c:\workspace\tools\m2repository\io\netty\netty-resolver-dns\4.1.54.Final\netty-resolver-dns-4.1.54.Final.jar</AuxClasspathEntry><AuxClasspathEntry>c:\workspace\tools\m2repository\io\netty\netty-resolver\4.1.54.Final\netty-resolver-4.1.54.Final.jar</AuxClasspathEntry><AuxClasspathEntry>c:\workspace\tools\m2repository\io\netty\netty-codec-dns\4.1.54.Final\netty-codec-dns-4.1.54.Final.jar</AuxClasspathEntry><AuxClasspathEntry>c:\workspace\tools\m2repository\io\netty\netty-transport-native-epoll\4.1.54.Final\netty-transport-native-epoll-4.1.54.Final-linux-x86_64.jar</AuxClasspathEntry><AuxClasspathEntry>c:\workspace\tools\m2repository\io\netty\netty-transport-native-unix-common\4.1.54.Final\netty-transport-native-unix-common-4.1.54.Final.jar</AuxClasspathEntry><AuxClasspathEntry>c:\workspace\tools\m2repository\io\projectreactor\netty\reactor-netty-core\1.0.1\reactor-netty-core-1.0.1.jar</AuxClasspathEntry><AuxClasspathEntry>c:\workspace\tools\m2repository\io\netty\netty-handler-proxy\4.1.54.Final\netty-handler-proxy-4.1.54.Final.jar</AuxClasspathEntry><AuxClasspathEntry>c:\workspace\tools\m2repository\io\netty\netty-codec-socks\4.1.54.Final\netty-codec-socks-4.1.54.Final.jar</AuxClasspathEntry><AuxClasspathEntry>c:\workspace\tools\m2repository\org\springframework\spring-webflux\5.3.1\spring-webflux-5.3.1.jar</AuxClasspathEntry><AuxClasspathEntry>c:\workspace\tools\m2repository\com\fasterxml\jackson\module\jackson-module-kotlin\2.11.3\jackson-module-kotlin-2.11.3.jar</AuxClasspathEntry><AuxClasspathEntry>c:\workspace\tools\m2repository\com\fasterxml\jackson\core\jackson-databind\2.11.3\jackson-databind-2.11.3.jar</AuxClasspathEntry><AuxClasspathEntry>c:\workspace\tools\m2repository\com\fasterxml\jackson\core\jackson-core\2.11.3\jackson-core-2.11.3.jar</AuxClasspathEntry><AuxClasspathEntry>c:\workspace\tools\m2repository\com\fasterxml\jackson\core\jackson-annotations\2.11.3\jackson-annotations-2.11.3.jar</AuxClasspathEntry><AuxClasspathEntry>c:\workspace\tools\m2repository\io\projectreactor\kotlin\reactor-kotlin-extensions\1.1.0\reactor-kotlin-extensions-1.1.0.jar</AuxClasspathEntry><AuxClasspathEntry>c:\workspace\tools\m2repository\io\projectreactor\reactor-core\3.4.0\reactor-core-3.4.0.jar</AuxClasspathEntry><AuxClasspathEntry>c:\workspace\tools\m2repository\org\reactivestreams\reactive-streams\1.0.3\reactive-streams-1.0.3.jar</AuxClasspathEntry><AuxClasspathEntry>c:\workspace\tools\m2repository\org\jetbrains\kotlin\kotlin-reflect\1.4.10\kotlin-reflect-1.4.10.jar</AuxClasspathEntry><AuxClasspathEntry>c:\workspace\tools\m2repository\org\jetbrains\kotlin\kotlin-stdlib\1.4.10\kotlin-stdlib-1.4.10.jar</AuxClasspathEntry><AuxClasspathEntry>c:\workspace\tools\m2repository\org\jetbrains\kotlin\kotlin-stdlib-common\1.4.10\kotlin-stdlib-common-1.4.10.jar</AuxClasspathEntry><AuxClasspathEntry>c:\workspace\tools\m2repository\org\jetbrains\annotations\13.0\annotations-13.0.jar</AuxClasspathEntry><AuxClasspathEntry>c:\workspace\tools\m2repository\org\jetbrains\kotlin\kotlin-stdlib-jdk8\1.4.10\kotlin-stdlib-jdk8-1.4.10.jar</AuxClasspathEntry><AuxClasspathEntry>c:\workspace\tools\m2repository\org\jetbrains\kotlin\kotlin-stdlib-jdk7\1.4.10\kotlin-stdlib-jdk7-1.4.10.jar</AuxClasspathEntry><AuxClasspathEntry>c:\workspace\tools\m2repository\org\jetbrains\kotlinx\kotlinx-coroutines-reactor\1.4.1\kotlinx-coroutines-reactor-1.4.1.jar</AuxClasspathEntry><AuxClasspathEntry>c:\workspace\tools\m2repository\org\jetbrains\kotlinx\kotlinx-coroutines-core\1.4.1\kotlinx-coroutines-core-1.4.1.jar</AuxClasspathEntry><AuxClasspathEntry>c:\workspace\tools\m2repository\org\jetbrains\kotlinx\kotlinx-coroutines-reactive\1.4.1\kotlinx-coroutines-reactive-1.4.1.jar</AuxClasspathEntry><AuxClasspathEntry>c:\workspace\tools\m2repository\org\slf4j\slf4j-api\1.7.30\slf4j-api-1.7.30.jar</AuxClasspathEntry><AuxClasspathEntry>c:\workspace\tools\m2repository\org\springframework\spring-core\5.3.1\spring-core-5.3.1.jar</AuxClasspathEntry><AuxClasspathEntry>c:\workspace\tools\m2repository\org\springframework\spring-jcl\5.3.1\spring-jcl-5.3.1.jar</AuxClasspathEntry><AuxClasspathEntry>c:\workspace\tools\m2repository\com\squareup\okhttp3\okhttp\4.10.0-RC1\okhttp-4.10.0-RC1.jar</AuxClasspathEntry><AuxClasspathEntry>c:\workspace\tools\m2repository\com\squareup\okio\okio\2.9.0\okio-2.9.0.jar</AuxClasspathEntry>



        <Plugin id='com.h3xstream.findsecbugs' enabled='true'></Plugin><SrcDir>C:\Users\s.gioria\Documents\GoatKotlin\src\main\kotlin</SrcDir><SrcDir>C:\Users\s.gioria\Documents\GoatKotlin\target\generated-sources\annotations</SrcDir><WrkDir>C:\Users\s.gioria\Documents\GoatKotlin\target</WrkDir></Project>
    <BugInstance instanceOccurrenceNum='0' instanceHash='985986513e805af82da7879f3a25ae47' cweid='78' rank='12' abbrev='SECCI' category='SECURITY' priority='2' type='COMMAND_INJECTION' instanceOccurrenceMax='0'>
        <ShortMessage>Potential Command Injection</ShortMessage>
        <LongMessage>This usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection</LongMessage>
        <Class classname='securitytest.command.IdentityFunctionCommandInjection' primary='true'>
            <SourceLine classname='securitytest.command.IdentityFunctionCommandInjection' start='20' end='170' sourcepath='securitytest/command/IdentityFunctionCommandInjection.kt' sourcefile='IdentityFunctionCommandInjection.kt'>
                <Message>At IdentityFunctionCommandInjection.kt:[lines 20-170]</Message>
            </SourceLine>
            <Message>In class securitytest.command.IdentityFunctionCommandInjection</Message>
        </Class>
        <Method isStatic='false' classname='securitytest.command.IdentityFunctionCommandInjection' signature='(Ljava/lang/String;)V' name='tained input executed after also does nothing' primary='true'>
            <SourceLine endBytecode='137' classname='securitytest.command.IdentityFunctionCommandInjection' start='93' end='96' sourcepath='securitytest/command/IdentityFunctionCommandInjection.kt' sourcefile='IdentityFunctionCommandInjection.kt' startBytecode='0'></SourceLine>
            <Message>In method securitytest.command.IdentityFunctionCommandInjection.tained input executed after also does nothing(String)</Message></Method>
        <SourceLine endBytecode='27' classname='securitytest.command.IdentityFunctionCommandInjection' start='95' end='95' sourcepath='securitytest/command/IdentityFunctionCommandInjection.kt' sourcefile='IdentityFunctionCommandInjection.kt' startBytecode='27' primary='true'>
            <Message>At IdentityFunctionCommandInjection.kt:[line 95]</Message>
        </SourceLine>
        <String role='Sink method' value='java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;'>
            <Message>Sink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;</Message>
        </String>
        <String role='Sink parameter' value='0'>
            <Message>Sink parameter 0</Message>
        </String>
        <String role='Unknown source' value='securitytest/command/IdentityFunctionCommandInjection.tained input executed after also does nothing(Ljava/lang/String;)V parameter 0'>
            <Message>Unknown source securitytest/command/IdentityFunctionCommandInjection.tained input executed after also does nothing(Ljava/lang/String;)V parameter 0</Message>
        </String>
        <String role='Method usage' value='not detected'>
            <Message>Method usage not detected</Message>
        </String>
        <SourceLine endBytecode='3' classname='securitytest.command.IdentityFunctionCommandInjection' sourcepath='securitytest/command/IdentityFunctionCommandInjection.kt' sourcefile='IdentityFunctionCommandInjection.kt' startBytecode='3'>
            <Message>In IdentityFunctionCommandInjection.kt</Message>
        </SourceLine>

    </BugInstance>

    <BugInstance instanceOccurrenceNum='0' instanceHash='73c44d67d4de72c6ce3c42907374575' cweid='78' rank='12' abbrev='SECCI' category='SECURITY' priority='2' type='COMMAND_INJECTION' instanceOccurrenceMax='0'><ShortMessage>Potential Command Injection</ShortMessage><LongMessage>This usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection</LongMessage><Class classname='securitytest.command.IdentityFunctionCommandInjection' primary='true'><SourceLine classname='securitytest.command.IdentityFunctionCommandInjection' start='20' end='170' sourcepath='securitytest/command/IdentityFunctionCommandInjection.kt' sourcefile='IdentityFunctionCommandInjection.kt'><Message>At IdentityFunctionCommandInjection.kt:[lines 20-170]</Message></SourceLine><Message>In class securitytest.command.IdentityFunctionCommandInjection</Message></Class><Method isStatic='false' classname='securitytest.command.IdentityFunctionCommandInjection' signature='(Ljava/lang/String;)V' name='tained input executed after always false not filter' primary='true'><SourceLine endBytecode='336' classname='securitytest.command.IdentityFunctionCommandInjection' start='29' end='32' sourcepath='securitytest/command/IdentityFunctionCommandInjection.kt' sourcefile='IdentityFunctionCommandInjection.kt' startBytecode='0'></SourceLine><Message>In method securitytest.command.IdentityFunctionCommandInjection.tained input executed after always false not filter(String)</Message></Method><SourceLine endBytecode='108' classname='securitytest.command.IdentityFunctionCommandInjection' start='31' end='31' sourcepath='securitytest/command/IdentityFunctionCommandInjection.kt' sourcefile='IdentityFunctionCommandInjection.kt' startBytecode='108' primary='true'><Message>At IdentityFunctionCommandInjection.kt:[line 31]</Message></SourceLine><String role='Sink method' value='java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;'><Message>Sink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;</Message></String><String role='Sink parameter' value='0'><Message>Sink parameter 0</Message></String><String role='Unknown source' value='java/lang/CharSequence.charAt(I)C'><Message>Unknown source java/lang/CharSequence.charAt(I)C</Message></String><String role='Unknown source' value='java/lang/Appendable.append(C)Ljava/lang/Appendable;'><Message>Unknown source java/lang/Appendable.append(C)Ljava/lang/Appendable;</Message></String><SourceLine endBytecode='77' classname='securitytest.command.IdentityFunctionCommandInjection' start='29' end='29' sourcepath='securitytest/command/IdentityFunctionCommandInjection.kt' sourcefile='IdentityFunctionCommandInjection.kt' startBytecode='77'><Message>At IdentityFunctionCommandInjection.kt:[line 29]</Message></SourceLine><SourceLine endBytecode='94' classname='securitytest.command.IdentityFunctionCommandInjection' start='105' end='105' sourcepath='securitytest/command/IdentityFunctionCommandInjection.kt' sourcefile='IdentityFunctionCommandInjection.kt' startBytecode='94'><Message>At IdentityFunctionCommandInjection.kt:[line 105]</Message></SourceLine>
    </BugInstance>
    <BugInstance instanceOccurrenceNum='0' instanceHash='ebe0444374f538c873bf0c8866d0cf70' cweid='78' rank='12' abbrev='SECCI' category='SECURITY' priority='2' type='COMMAND_INJECTION' instanceOccurrenceMax='0'><ShortMessage>Potential Command Injection</ShortMessage><LongMessage>This usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection</LongMessage><Class classname='securitytest.command.IdentityFunctionCommandInjection' primary='true'><SourceLine classname='securitytest.command.IdentityFunctionCommandInjection' start='20' end='170' sourcepath='securitytest/command/IdentityFunctionCommandInjection.kt' sourcefile='IdentityFunctionCommandInjection.kt'><Message>At IdentityFunctionCommandInjection.kt:[lines 20-170]</Message></SourceLine><Message>In class securitytest.command.IdentityFunctionCommandInjection</Message></Class><Method isStatic='false' classname='securitytest.command.IdentityFunctionCommandInjection' signature='(Ljava/lang/String;)V' name='tained input executed after always true filter' primary='true'><SourceLine endBytecode='356' classname='securitytest.command.IdentityFunctionCommandInjection' start='23' end='26' sourcepath='securitytest/command/IdentityFunctionCommandInjection.kt' sourcefile='IdentityFunctionCommandInjection.kt' startBytecode='0'></SourceLine><Message>In method securitytest.command.IdentityFunctionCommandInjection.tained input executed after always true filter(String)</Message></Method><SourceLine endBytecode='108' classname='securitytest.command.IdentityFunctionCommandInjection' start='25' end='25' sourcepath='securitytest/command/IdentityFunctionCommandInjection.kt' sourcefile='IdentityFunctionCommandInjection.kt' startBytecode='108' primary='true'><Message>At IdentityFunctionCommandInjection.kt:[line 25]</Message></SourceLine><String role='Sink method' value='java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;'><Message>Sink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;</Message></String><String role='Sink parameter' value='0'><Message>Sink parameter 0</Message></String><String role='Unknown source' value='java/lang/CharSequence.charAt(I)C'><Message>Unknown source java/lang/CharSequence.charAt(I)C</Message></String><String role='Unknown source' value='java/lang/Appendable.append(C)Ljava/lang/Appendable;'><Message>Unknown source java/lang/Appendable.append(C)Ljava/lang/Appendable;</Message></String><SourceLine endBytecode='77' classname='securitytest.command.IdentityFunctionCommandInjection' start='23' end='23' sourcepath='securitytest/command/IdentityFunctionCommandInjection.kt' sourcefile='IdentityFunctionCommandInjection.kt' startBytecode='77'><Message>At IdentityFunctionCommandInjection.kt:[line 23]</Message></SourceLine><SourceLine endBytecode='94' classname='securitytest.command.IdentityFunctionCommandInjection' start='99' end='99' sourcepath='securitytest/command/IdentityFunctionCommandInjection.kt' sourcefile='IdentityFunctionCommandInjection.kt' startBytecode='94'><Message>At IdentityFunctionCommandInjection.kt:[line 99]</Message></SourceLine>
    </BugInstance>
    <BugInstance instanceOccurrenceNum='0' instanceHash='34bdb31b6a9ad24e9791f7e10adc9957' cweid='78' rank='12' abbrev='SECCI' category='SECURITY' priority='2' type='COMMAND_INJECTION' instanceOccurrenceMax='0'><ShortMessage>Potential Command Injection</ShortMessage><LongMessage>This usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection</LongMessage><Class classname='securitytest.command.IdentityFunctionCommandInjection' primary='true'><SourceLine classname='securitytest.command.IdentityFunctionCommandInjection' start='20' end='170' sourcepath='securitytest/command/IdentityFunctionCommandInjection.kt' sourcefile='IdentityFunctionCommandInjection.kt'><Message>At IdentityFunctionCommandInjection.kt:[lines 20-170]</Message></SourceLine><Message>In class securitytest.command.IdentityFunctionCommandInjection</Message></Class><Method isStatic='false' classname='securitytest.command.IdentityFunctionCommandInjection' signature='(Ljava/lang/String;)V' name='tained input executed after drop last while always false' primary='true'><SourceLine endBytecode='289' classname='securitytest.command.IdentityFunctionCommandInjection' start='57' end='60' sourcepath='securitytest/command/IdentityFunctionCommandInjection.kt' sourcefile='IdentityFunctionCommandInjection.kt' startBytecode='0'></SourceLine><Message>In method securitytest.command.IdentityFunctionCommandInjection.tained input executed after drop last while always false(String)</Message></Method><SourceLine endBytecode='89' classname='securitytest.command.IdentityFunctionCommandInjection' start='59' end='59' sourcepath='securitytest/command/IdentityFunctionCommandInjection.kt' sourcefile='IdentityFunctionCommandInjection.kt' startBytecode='89' primary='true'><Message>At IdentityFunctionCommandInjection.kt:[line 59]</Message></SourceLine><String role='Sink method' value='java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;'><Message>Sink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;</Message></String><String role='Sink parameter' value='0'><Message>Sink parameter 0</Message></String><String role='Unknown source' value='securitytest/command/IdentityFunctionCommandInjection.tained input executed after drop last while always false(Ljava/lang/String;)V parameter 0'><Message>Unknown source securitytest/command/IdentityFunctionCommandInjection.tained input executed after drop last while always false(Ljava/lang/String;)V parameter 0</Message></String><String role='Method usage' value='not detected'><Message>Method usage not detected</Message></String><SourceLine endBytecode='3' classname='securitytest.command.IdentityFunctionCommandInjection' sourcepath='securitytest/command/IdentityFunctionCommandInjection.kt' sourcefile='IdentityFunctionCommandInjection.kt' startBytecode='3'><Message>In IdentityFunctionCommandInjection.kt</Message></SourceLine><SourceLine endBytecode='15' classname='securitytest.command.IdentityFunctionCommandInjection' start='121' end='121' sourcepath='securitytest/command/IdentityFunctionCommandInjection.kt' sourcefile='IdentityFunctionCommandInjection.kt' startBytecode='15'><Message>At IdentityFunctionCommandInjection.kt:[line 121]</Message></SourceLine><SourceLine endBytecode='64' classname='securitytest.command.IdentityFunctionCommandInjection' start='123' end='123' sourcepath='securitytest/command/IdentityFunctionCommandInjection.kt' sourcefile='IdentityFunctionCommandInjection.kt' startBytecode='64'><Message>At IdentityFunctionCommandInjection.kt:[line 123]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='aa1deaffbc6d21be12be778ba44005d5' cweid='78' rank='12' abbrev='SECCI' category='SECURITY' priority='2' type='COMMAND_INJECTION' instanceOccurrenceMax='0'><ShortMessage>Potential Command Injection</ShortMessage><LongMessage>This usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection</LongMessage><Class classname='securitytest.command.IdentityFunctionCommandInjection' primary='true'><SourceLine classname='securitytest.command.IdentityFunctionCommandInjection' start='20' end='170' sourcepath='securitytest/command/IdentityFunctionCommandInjection.kt' sourcefile='IdentityFunctionCommandInjection.kt'><Message>At IdentityFunctionCommandInjection.kt:[lines 20-170]</Message></SourceLine><Message>In class securitytest.command.IdentityFunctionCommandInjection</Message></Class><Method isStatic='false' classname='securitytest.command.IdentityFunctionCommandInjection' signature='(Ljava/lang/String;)V' name='tained input executed after drop while always false' primary='true'><SourceLine endBytecode='282' classname='securitytest.command.IdentityFunctionCommandInjection' start='51' end='54' sourcepath='securitytest/command/IdentityFunctionCommandInjection.kt' sourcefile='IdentityFunctionCommandInjection.kt' startBytecode='0'></SourceLine><Message>In method securitytest.command.IdentityFunctionCommandInjection.tained input executed after drop while always false(String)</Message></Method><SourceLine endBytecode='82' classname='securitytest.command.IdentityFunctionCommandInjection' start='53' end='53' sourcepath='securitytest/command/IdentityFunctionCommandInjection.kt' sourcefile='IdentityFunctionCommandInjection.kt' startBytecode='82' primary='true'><Message>At IdentityFunctionCommandInjection.kt:[line 53]</Message></SourceLine><String role='Sink method' value='java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;'><Message>Sink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;</Message></String><String role='Sink parameter' value='0'><Message>Sink parameter 0</Message></String><String role='Unknown source' value='securitytest/command/IdentityFunctionCommandInjection.tained input executed after drop while always false(Ljava/lang/String;)V parameter 0'><Message>Unknown source securitytest/command/IdentityFunctionCommandInjection.tained input executed after drop while always false(Ljava/lang/String;)V parameter 0</Message></String><String role='Method usage' value='not detected'><Message>Method usage not detected</Message></String><SourceLine endBytecode='3' classname='securitytest.command.IdentityFunctionCommandInjection' sourcepath='securitytest/command/IdentityFunctionCommandInjection.kt' sourcefile='IdentityFunctionCommandInjection.kt' startBytecode='3'><Message>In IdentityFunctionCommandInjection.kt</Message></SourceLine><SourceLine endBytecode='57' classname='securitytest.command.IdentityFunctionCommandInjection' start='119' end='119' sourcepath='securitytest/command/IdentityFunctionCommandInjection.kt' sourcefile='IdentityFunctionCommandInjection.kt' startBytecode='57'><Message>At IdentityFunctionCommandInjection.kt:[line 119]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='80ae49198b285636679101344e7597f3' cweid='78' rank='12' abbrev='SECCI' category='SECURITY' priority='2' type='COMMAND_INJECTION' instanceOccurrenceMax='0'><ShortMessage>Potential Command Injection</ShortMessage><LongMessage>This usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection</LongMessage><Class classname='securitytest.command.IdentityFunctionCommandInjection' primary='true'><SourceLine classname='securitytest.command.IdentityFunctionCommandInjection' start='20' end='170' sourcepath='securitytest/command/IdentityFunctionCommandInjection.kt' sourcefile='IdentityFunctionCommandInjection.kt'><Message>At IdentityFunctionCommandInjection.kt:[lines 20-170]</Message></SourceLine><Message>In class securitytest.command.IdentityFunctionCommandInjection</Message></Class><Method isStatic='false' classname='securitytest.command.IdentityFunctionCommandInjection' signature='(Ljava/lang/String;)V' name='tained input executed after identity function with apply' primary='true'><SourceLine endBytecode='133' classname='securitytest.command.IdentityFunctionCommandInjection' start='47' end='48' sourcepath='securitytest/command/IdentityFunctionCommandInjection.kt' sourcefile='IdentityFunctionCommandInjection.kt' startBytecode='0'></SourceLine><Message>In method securitytest.command.IdentityFunctionCommandInjection.tained input executed after identity function with apply(String)</Message></Method><SourceLine endBytecode='25' classname='securitytest.command.IdentityFunctionCommandInjection' start='47' end='47' sourcepath='securitytest/command/IdentityFunctionCommandInjection.kt' sourcefile='IdentityFunctionCommandInjection.kt' startBytecode='25' primary='true'><Message>At IdentityFunctionCommandInjection.kt:[line 47]</Message></SourceLine><String role='Sink method' value='java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;'><Message>Sink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;</Message></String><String role='Sink parameter' value='0'><Message>Sink parameter 0</Message></String><String role='Unknown source' value='securitytest/command/IdentityFunctionCommandInjection.tained input executed after identity function with apply(Ljava/lang/String;)V parameter 0'><Message>Unknown source securitytest/command/IdentityFunctionCommandInjection.tained input executed after identity function with apply(Ljava/lang/String;)V parameter 0</Message></String><String role='Method usage' value='not detected'><Message>Method usage not detected</Message></String><SourceLine endBytecode='3' classname='securitytest.command.IdentityFunctionCommandInjection' sourcepath='securitytest/command/IdentityFunctionCommandInjection.kt' sourcefile='IdentityFunctionCommandInjection.kt' startBytecode='3'><Message>In IdentityFunctionCommandInjection.kt</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='6984fe35b617f07a589770b0571296d1' cweid='78' rank='12' abbrev='SECCI' category='SECURITY' priority='2' type='COMMAND_INJECTION' instanceOccurrenceMax='0'><ShortMessage>Potential Command Injection</ShortMessage><LongMessage>This usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection</LongMessage><Class classname='securitytest.command.IdentityFunctionCommandInjection' primary='true'><SourceLine classname='securitytest.command.IdentityFunctionCommandInjection' start='20' end='170' sourcepath='securitytest/command/IdentityFunctionCommandInjection.kt' sourcefile='IdentityFunctionCommandInjection.kt'><Message>At IdentityFunctionCommandInjection.kt:[lines 20-170]</Message></SourceLine><Message>In class securitytest.command.IdentityFunctionCommandInjection</Message></Class><Method isStatic='false' classname='securitytest.command.IdentityFunctionCommandInjection' signature='(Ljava/lang/String;)V' name='tained input executed after identity function with let' primary='true'><SourceLine endBytecode='137' classname='securitytest.command.IdentityFunctionCommandInjection' start='41' end='44' sourcepath='securitytest/command/IdentityFunctionCommandInjection.kt' sourcefile='IdentityFunctionCommandInjection.kt' startBytecode='0'></SourceLine><Message>In method securitytest.command.IdentityFunctionCommandInjection.tained input executed after identity function with let(String)</Message></Method><SourceLine endBytecode='27' classname='securitytest.command.IdentityFunctionCommandInjection' start='43' end='43' sourcepath='securitytest/command/IdentityFunctionCommandInjection.kt' sourcefile='IdentityFunctionCommandInjection.kt' startBytecode='27' primary='true'><Message>At IdentityFunctionCommandInjection.kt:[line 43]</Message></SourceLine><String role='Sink method' value='java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;'><Message>Sink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;</Message></String><String role='Sink parameter' value='0'><Message>Sink parameter 0</Message></String><String role='Unknown source' value='securitytest/command/IdentityFunctionCommandInjection.tained input executed after identity function with let(Ljava/lang/String;)V parameter 0'><Message>Unknown source securitytest/command/IdentityFunctionCommandInjection.tained input executed after identity function with let(Ljava/lang/String;)V parameter 0</Message></String><String role='Method usage' value='not detected'><Message>Method usage not detected</Message></String><SourceLine endBytecode='3' classname='securitytest.command.IdentityFunctionCommandInjection' sourcepath='securitytest/command/IdentityFunctionCommandInjection.kt' sourcefile='IdentityFunctionCommandInjection.kt' startBytecode='3'><Message>In IdentityFunctionCommandInjection.kt</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='2bc4f67f0323edbf2ac6981698d90b14' cweid='78' rank='12' abbrev='SECCI' category='SECURITY' priority='2' type='COMMAND_INJECTION' instanceOccurrenceMax='0'><ShortMessage>Potential Command Injection</ShortMessage><LongMessage>This usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection</LongMessage><Class classname='securitytest.command.IdentityFunctionCommandInjection' primary='true'><SourceLine classname='securitytest.command.IdentityFunctionCommandInjection' start='20' end='170' sourcepath='securitytest/command/IdentityFunctionCommandInjection.kt' sourcefile='IdentityFunctionCommandInjection.kt'><Message>At IdentityFunctionCommandInjection.kt:[lines 20-170]</Message></SourceLine><Message>In class securitytest.command.IdentityFunctionCommandInjection</Message></Class><Method isStatic='false' classname='securitytest.command.IdentityFunctionCommandInjection' signature='(Ljava/lang/String;)V' name='tained input executed after identity function with run' primary='true'><SourceLine endBytecode='137' classname='securitytest.command.IdentityFunctionCommandInjection' start='35' end='38' sourcepath='securitytest/command/IdentityFunctionCommandInjection.kt' sourcefile='IdentityFunctionCommandInjection.kt' startBytecode='0'></SourceLine><Message>In method securitytest.command.IdentityFunctionCommandInjection.tained input executed after identity function with run(String)</Message></Method><SourceLine endBytecode='27' classname='securitytest.command.IdentityFunctionCommandInjection' start='37' end='37' sourcepath='securitytest/command/IdentityFunctionCommandInjection.kt' sourcefile='IdentityFunctionCommandInjection.kt' startBytecode='27' primary='true'><Message>At IdentityFunctionCommandInjection.kt:[line 37]</Message></SourceLine><String role='Sink method' value='java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;'><Message>Sink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;</Message></String><String role='Sink parameter' value='0'><Message>Sink parameter 0</Message></String><String role='Unknown source' value='securitytest/command/IdentityFunctionCommandInjection.tained input executed after identity function with run(Ljava/lang/String;)V parameter 0'><Message>Unknown source securitytest/command/IdentityFunctionCommandInjection.tained input executed after identity function with run(Ljava/lang/String;)V parameter 0</Message></String><String role='Method usage' value='not detected'><Message>Method usage not detected</Message></String><SourceLine endBytecode='3' classname='securitytest.command.IdentityFunctionCommandInjection' sourcepath='securitytest/command/IdentityFunctionCommandInjection.kt' sourcefile='IdentityFunctionCommandInjection.kt' startBytecode='3'><Message>In IdentityFunctionCommandInjection.kt</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='ac1ce7e717b9ceb069639a9b6eb89393' cweid='78' rank='12' abbrev='SECCI' category='SECURITY' priority='2' type='COMMAND_INJECTION' instanceOccurrenceMax='0'><ShortMessage>Potential Command Injection</ShortMessage><LongMessage>This usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection</LongMessage><Class classname='securitytest.command.IdentityFunctionCommandInjection' primary='true'><SourceLine classname='securitytest.command.IdentityFunctionCommandInjection' start='20' end='170' sourcepath='securitytest/command/IdentityFunctionCommandInjection.kt' sourcefile='IdentityFunctionCommandInjection.kt'><Message>At IdentityFunctionCommandInjection.kt:[lines 20-170]</Message></SourceLine><Message>In class securitytest.command.IdentityFunctionCommandInjection</Message></Class><Method isStatic='false' classname='securitytest.command.IdentityFunctionCommandInjection' signature='(Ljava/lang/String;)V' name='tained input executed after take last while always true then reversed' primary='true'><SourceLine endBytecode='319' classname='securitytest.command.IdentityFunctionCommandInjection' start='69' end='72' sourcepath='securitytest/command/IdentityFunctionCommandInjection.kt' sourcefile='IdentityFunctionCommandInjection.kt' startBytecode='0'></SourceLine><Message>In method securitytest.command.IdentityFunctionCommandInjection.tained input executed after take last while always true then reversed(String)</Message></Method><SourceLine endBytecode='111' classname='securitytest.command.IdentityFunctionCommandInjection' start='71' end='71' sourcepath='securitytest/command/IdentityFunctionCommandInjection.kt' sourcefile='IdentityFunctionCommandInjection.kt' startBytecode='111' primary='true'><Message>At IdentityFunctionCommandInjection.kt:[line 71]</Message></SourceLine><String role='Sink method' value='java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;'><Message>Sink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;</Message></String><String role='Sink parameter' value='0'><Message>Sink parameter 0</Message></String><String role='Unknown source' value='java/lang/Object.toString()Ljava/lang/String;'><Message>Unknown source java/lang/Object.toString()Ljava/lang/String;</Message></String><SourceLine endBytecode='103' classname='securitytest.command.IdentityFunctionCommandInjection' start='69' end='69' sourcepath='securitytest/command/IdentityFunctionCommandInjection.kt' sourcefile='IdentityFunctionCommandInjection.kt' startBytecode='103'><Message>At IdentityFunctionCommandInjection.kt:[line 69]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='d236fbca7507b52cbc425002614ee669' cweid='78' rank='12' abbrev='SECCI' category='SECURITY' priority='2' type='COMMAND_INJECTION' instanceOccurrenceMax='0'><ShortMessage>Potential Command Injection</ShortMessage><LongMessage>This usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection</LongMessage><Class classname='securitytest.command.IdentityFunctionCommandInjection' primary='true'><SourceLine classname='securitytest.command.IdentityFunctionCommandInjection' start='20' end='170' sourcepath='securitytest/command/IdentityFunctionCommandInjection.kt' sourcefile='IdentityFunctionCommandInjection.kt'><Message>At IdentityFunctionCommandInjection.kt:[lines 20-170]</Message></SourceLine><Message>In class securitytest.command.IdentityFunctionCommandInjection</Message></Class><Method isStatic='false' classname='securitytest.command.IdentityFunctionCommandInjection' signature='(Ljava/lang/String;)V' name='tained input executed after take while always true' primary='true'><SourceLine endBytecode='281' classname='securitytest.command.IdentityFunctionCommandInjection' start='63' end='66' sourcepath='securitytest/command/IdentityFunctionCommandInjection.kt' sourcefile='IdentityFunctionCommandInjection.kt' startBytecode='0'></SourceLine><Message>In method securitytest.command.IdentityFunctionCommandInjection.tained input executed after take while always true(String)</Message></Method><SourceLine endBytecode='81' classname='securitytest.command.IdentityFunctionCommandInjection' start='65' end='65' sourcepath='securitytest/command/IdentityFunctionCommandInjection.kt' sourcefile='IdentityFunctionCommandInjection.kt' startBytecode='81' primary='true'><Message>At IdentityFunctionCommandInjection.kt:[line 65]</Message></SourceLine><String role='Sink method' value='java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;'><Message>Sink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;</Message></String><String role='Sink parameter' value='0'><Message>Sink parameter 0</Message></String><String role='Unknown source' value='securitytest/command/IdentityFunctionCommandInjection.tained input executed after take while always true(Ljava/lang/String;)V parameter 0'><Message>Unknown source securitytest/command/IdentityFunctionCommandInjection.tained input executed after take while always true(Ljava/lang/String;)V parameter 0</Message></String><String role='Method usage' value='not detected'><Message>Method usage not detected</Message></String><SourceLine endBytecode='3' classname='securitytest.command.IdentityFunctionCommandInjection' sourcepath='securitytest/command/IdentityFunctionCommandInjection.kt' sourcefile='IdentityFunctionCommandInjection.kt' startBytecode='3'><Message>In IdentityFunctionCommandInjection.kt</Message></SourceLine><SourceLine endBytecode='57' classname='securitytest.command.IdentityFunctionCommandInjection' start='127' end='127' sourcepath='securitytest/command/IdentityFunctionCommandInjection.kt' sourcefile='IdentityFunctionCommandInjection.kt' startBytecode='57'><Message>At IdentityFunctionCommandInjection.kt:[line 127]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='af371ec15f46ceda91834317ecbe32bf' cweid='78' rank='12' abbrev='SECCI' category='SECURITY' priority='2' type='COMMAND_INJECTION' instanceOccurrenceMax='0'><ShortMessage>Potential Command Injection</ShortMessage><LongMessage>This usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection</LongMessage><Class classname='securitytest.command.IdentityFunctionCommandInjection' primary='true'><SourceLine classname='securitytest.command.IdentityFunctionCommandInjection' start='20' end='170' sourcepath='securitytest/command/IdentityFunctionCommandInjection.kt' sourcefile='IdentityFunctionCommandInjection.kt'><Message>At IdentityFunctionCommandInjection.kt:[lines 20-170]</Message></SourceLine><Message>In class securitytest.command.IdentityFunctionCommandInjection</Message></Class><Method isStatic='false' classname='securitytest.command.IdentityFunctionCommandInjection' signature='(Ljava/lang/String;)V' name='tained input executed after trim always false' primary='true'><SourceLine endBytecode='450' classname='securitytest.command.IdentityFunctionCommandInjection' start='75' end='78' sourcepath='securitytest/command/IdentityFunctionCommandInjection.kt' sourcefile='IdentityFunctionCommandInjection.kt' startBytecode='0'></SourceLine><Message>In method securitytest.command.IdentityFunctionCommandInjection.tained input executed after trim always false(String)</Message></Method><SourceLine endBytecode='138' classname='securitytest.command.IdentityFunctionCommandInjection' start='77' end='77' sourcepath='securitytest/command/IdentityFunctionCommandInjection.kt' sourcefile='IdentityFunctionCommandInjection.kt' startBytecode='138' primary='true'><Message>At IdentityFunctionCommandInjection.kt:[line 77]</Message></SourceLine><String role='Sink method' value='java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;'><Message>Sink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;</Message></String><String role='Sink parameter' value='0'><Message>Sink parameter 0</Message></String><String role='Unknown source' value='java/lang/Object.toString()Ljava/lang/String;'><Message>Unknown source java/lang/Object.toString()Ljava/lang/String;</Message></String><String role='Unknown source' value='java/lang/CharSequence.subSequence(II)Ljava/lang/CharSequence;'><Message>Unknown source java/lang/CharSequence.subSequence(II)Ljava/lang/CharSequence;</Message></String><String role='Unknown source' value='securitytest/command/IdentityFunctionCommandInjection.tained input executed after trim always false(Ljava/lang/String;)V parameter 0'><Message>Unknown source securitytest/command/IdentityFunctionCommandInjection.tained input executed after trim always false(Ljava/lang/String;)V parameter 0</Message></String><String role='Method usage' value='not detected'><Message>Method usage not detected</Message></String><SourceLine endBytecode='3' classname='securitytest.command.IdentityFunctionCommandInjection' sourcepath='securitytest/command/IdentityFunctionCommandInjection.kt' sourcefile='IdentityFunctionCommandInjection.kt' startBytecode='3'><Message>In IdentityFunctionCommandInjection.kt</Message></SourceLine><SourceLine endBytecode='130' classname='securitytest.command.IdentityFunctionCommandInjection' start='136' end='136' sourcepath='securitytest/command/IdentityFunctionCommandInjection.kt' sourcefile='IdentityFunctionCommandInjection.kt' startBytecode='130'><Message>At IdentityFunctionCommandInjection.kt:[line 136]</Message></SourceLine><SourceLine endBytecode='125' classname='securitytest.command.IdentityFunctionCommandInjection' start='158' end='158' sourcepath='securitytest/command/IdentityFunctionCommandInjection.kt' sourcefile='IdentityFunctionCommandInjection.kt' startBytecode='125'><Message>At IdentityFunctionCommandInjection.kt:[line 158]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='4e739f7d33f731ed6ca45c1cdb893262' cweid='78' rank='12' abbrev='SECCI' category='SECURITY' priority='2' type='COMMAND_INJECTION' instanceOccurrenceMax='0'><ShortMessage>Potential Command Injection</ShortMessage><LongMessage>This usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection</LongMessage><Class classname='securitytest.command.IdentityFunctionCommandInjection' primary='true'><SourceLine classname='securitytest.command.IdentityFunctionCommandInjection' start='20' end='170' sourcepath='securitytest/command/IdentityFunctionCommandInjection.kt' sourcefile='IdentityFunctionCommandInjection.kt'><Message>At IdentityFunctionCommandInjection.kt:[lines 20-170]</Message></SourceLine><Message>In class securitytest.command.IdentityFunctionCommandInjection</Message></Class><Method isStatic='false' classname='securitytest.command.IdentityFunctionCommandInjection' signature='(Ljava/lang/String;)V' name='tained input executed after trim end always false' primary='true'><SourceLine endBytecode='320' classname='securitytest.command.IdentityFunctionCommandInjection' start='81' end='84' sourcepath='securitytest/command/IdentityFunctionCommandInjection.kt' sourcefile='IdentityFunctionCommandInjection.kt' startBytecode='0'></SourceLine><Message>In method securitytest.command.IdentityFunctionCommandInjection.tained input executed after trim end always false(String)</Message></Method><SourceLine endBytecode='92' classname='securitytest.command.IdentityFunctionCommandInjection' start='83' end='83' sourcepath='securitytest/command/IdentityFunctionCommandInjection.kt' sourcefile='IdentityFunctionCommandInjection.kt' startBytecode='92' primary='true'><Message>At IdentityFunctionCommandInjection.kt:[line 83]</Message></SourceLine><String role='Sink method' value='java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;'><Message>Sink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;</Message></String><String role='Sink parameter' value='0'><Message>Sink parameter 0</Message></String><String role='Unknown source' value='java/lang/Object.toString()Ljava/lang/String;'><Message>Unknown source java/lang/Object.toString()Ljava/lang/String;</Message></String><String role='Unknown source' value='java/lang/CharSequence.subSequence(II)Ljava/lang/CharSequence;'><Message>Unknown source java/lang/CharSequence.subSequence(II)Ljava/lang/CharSequence;</Message></String><String role='Unknown source' value='securitytest/command/IdentityFunctionCommandInjection.tained input executed after trim end always false(Ljava/lang/String;)V parameter 0'><Message>Unknown source securitytest/command/IdentityFunctionCommandInjection.tained input executed after trim end always false(Ljava/lang/String;)V parameter 0</Message></String><String role='Method usage' value='not detected'><Message>Method usage not detected</Message></String><SourceLine endBytecode='3' classname='securitytest.command.IdentityFunctionCommandInjection' sourcepath='securitytest/command/IdentityFunctionCommandInjection.kt' sourcefile='IdentityFunctionCommandInjection.kt' startBytecode='3'><Message>In IdentityFunctionCommandInjection.kt</Message></SourceLine><SourceLine endBytecode='84' classname='securitytest.command.IdentityFunctionCommandInjection' start='159' end='159' sourcepath='securitytest/command/IdentityFunctionCommandInjection.kt' sourcefile='IdentityFunctionCommandInjection.kt' startBytecode='84'><Message>At IdentityFunctionCommandInjection.kt:[line 159]</Message></SourceLine><SourceLine endBytecode='65' classname='securitytest.command.IdentityFunctionCommandInjection' start='162' end='162' sourcepath='securitytest/command/IdentityFunctionCommandInjection.kt' sourcefile='IdentityFunctionCommandInjection.kt' startBytecode='65'><Message>At IdentityFunctionCommandInjection.kt:[line 162]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='c5b8aab9aaf6e619c1864c6a2d678bac' cweid='78' rank='12' abbrev='SECCI' category='SECURITY' priority='2' type='COMMAND_INJECTION' instanceOccurrenceMax='0'><ShortMessage>Potential Command Injection</ShortMessage><LongMessage>This usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection</LongMessage><Class classname='securitytest.command.IdentityFunctionCommandInjection' primary='true'><SourceLine classname='securitytest.command.IdentityFunctionCommandInjection' start='20' end='170' sourcepath='securitytest/command/IdentityFunctionCommandInjection.kt' sourcefile='IdentityFunctionCommandInjection.kt'><Message>At IdentityFunctionCommandInjection.kt:[lines 20-170]</Message></SourceLine><Message>In class securitytest.command.IdentityFunctionCommandInjection</Message></Class><Method isStatic='false' classname='securitytest.command.IdentityFunctionCommandInjection' signature='(Ljava/lang/String;)V' name='tained input executed after trim start always false' primary='true'><SourceLine endBytecode='323' classname='securitytest.command.IdentityFunctionCommandInjection' start='87' end='90' sourcepath='securitytest/command/IdentityFunctionCommandInjection.kt' sourcefile='IdentityFunctionCommandInjection.kt' startBytecode='0'></SourceLine><Message>In method securitytest.command.IdentityFunctionCommandInjection.tained input executed after trim start always false(String)</Message></Method><SourceLine endBytecode='95' classname='securitytest.command.IdentityFunctionCommandInjection' start='89' end='89' sourcepath='securitytest/command/IdentityFunctionCommandInjection.kt' sourcefile='IdentityFunctionCommandInjection.kt' startBytecode='95' primary='true'><Message>At IdentityFunctionCommandInjection.kt:[line 89]</Message></SourceLine><String role='Sink method' value='java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;'><Message>Sink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;</Message></String><String role='Sink parameter' value='0'><Message>Sink parameter 0</Message></String><String role='Unknown source' value='java/lang/Object.toString()Ljava/lang/String;'><Message>Unknown source java/lang/Object.toString()Ljava/lang/String;</Message></String><String role='Unknown source' value='java/lang/CharSequence.subSequence(II)Ljava/lang/CharSequence;'><Message>Unknown source java/lang/CharSequence.subSequence(II)Ljava/lang/CharSequence;</Message></String><String role='Unknown source' value='securitytest/command/IdentityFunctionCommandInjection.tained input executed after trim start always false(Ljava/lang/String;)V parameter 0'><Message>Unknown source securitytest/command/IdentityFunctionCommandInjection.tained input executed after trim start always false(Ljava/lang/String;)V parameter 0</Message></String><String role='Method usage' value='not detected'><Message>Method usage not detected</Message></String><SourceLine endBytecode='3' classname='securitytest.command.IdentityFunctionCommandInjection' sourcepath='securitytest/command/IdentityFunctionCommandInjection.kt' sourcefile='IdentityFunctionCommandInjection.kt' startBytecode='3'><Message>In IdentityFunctionCommandInjection.kt</Message></SourceLine><SourceLine endBytecode='87' classname='securitytest.command.IdentityFunctionCommandInjection' start='165' end='165' sourcepath='securitytest/command/IdentityFunctionCommandInjection.kt' sourcefile='IdentityFunctionCommandInjection.kt' startBytecode='87'><Message>At IdentityFunctionCommandInjection.kt:[line 165]</Message></SourceLine><SourceLine endBytecode='68' classname='securitytest.command.IdentityFunctionCommandInjection' start='168' end='168' sourcepath='securitytest/command/IdentityFunctionCommandInjection.kt' sourcefile='IdentityFunctionCommandInjection.kt' startBytecode='68'><Message>At IdentityFunctionCommandInjection.kt:[line 168]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='f92f29eb78baf1eb1ecc7a9fafc28b6e' cweid='78' rank='12' abbrev='SECCI' category='SECURITY' priority='2' type='COMMAND_INJECTION' instanceOccurrenceMax='0'><ShortMessage>Potential Command Injection</ShortMessage><LongMessage>This usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection</LongMessage><Class classname='securitytest.command.StringManipulationCommandInjection' primary='true'><SourceLine classname='securitytest.command.StringManipulationCommandInjection' start='20' end='164' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt'><Message>At StringManipulationCommandInjection.kt:[lines 20-164]</Message></SourceLine><Message>In class securitytest.command.StringManipulationCommandInjection</Message></Class><Method isStatic='false' classname='securitytest.command.StringManipulationCommandInjection' signature='(Ljava/lang/String;)V' name='tained input executed after (de)capitalisation' primary='true'><SourceLine endBytecode='92' classname='securitytest.command.StringManipulationCommandInjection' start='29' end='32' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt' startBytecode='0'></SourceLine><Message>In method securitytest.command.StringManipulationCommandInjection.tained input executed after (de)capitalisation(String)</Message></Method><SourceLine endBytecode='18' classname='securitytest.command.StringManipulationCommandInjection' start='31' end='31' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt' startBytecode='18' primary='true'><Message>At StringManipulationCommandInjection.kt:[line 31]</Message></SourceLine><String role='Sink method' value='java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;'><Message>Sink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;</Message></String><String role='Sink parameter' value='0'><Message>Sink parameter 0</Message></String></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='f0f663b24d24e81ab76ee06c372936ea' cweid='78' rank='12' abbrev='SECCI' category='SECURITY' priority='2' type='COMMAND_INJECTION' instanceOccurrenceMax='0'><ShortMessage>Potential Command Injection</ShortMessage><LongMessage>This usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection</LongMessage><Class classname='securitytest.command.StringManipulationCommandInjection' primary='true'><SourceLine classname='securitytest.command.StringManipulationCommandInjection' start='20' end='164' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt'><Message>At StringManipulationCommandInjection.kt:[lines 20-164]</Message></SourceLine><Message>In class securitytest.command.StringManipulationCommandInjection</Message></Class><Method isStatic='false' classname='securitytest.command.StringManipulationCommandInjection' signature='(Ljava/lang/String;)V' name='tained input executed after applying suffix with plus' primary='true'><SourceLine endBytecode='105' classname='securitytest.command.StringManipulationCommandInjection' start='23' end='26' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt' startBytecode='0'></SourceLine><Message>In method securitytest.command.StringManipulationCommandInjection.tained input executed after applying suffix with plus(String)</Message></Method><SourceLine endBytecode='31' classname='securitytest.command.StringManipulationCommandInjection' start='25' end='25' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt' startBytecode='31' primary='true'><Message>At StringManipulationCommandInjection.kt:[line 25]</Message></SourceLine><String role='Sink method' value='java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;'><Message>Sink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;</Message></String><String role='Sink parameter' value='0'><Message>Sink parameter 0</Message></String><String role='Unknown source' value='securitytest/command/StringManipulationCommandInjection.tained input executed after applying suffix with plus(Ljava/lang/String;)V parameter 0'><Message>Unknown source securitytest/command/StringManipulationCommandInjection.tained input executed after applying suffix with plus(Ljava/lang/String;)V parameter 0</Message></String><String role='Method usage' value='not detected'><Message>Method usage not detected</Message></String><SourceLine endBytecode='3' classname='securitytest.command.StringManipulationCommandInjection' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt' startBytecode='3'><Message>In StringManipulationCommandInjection.kt</Message></SourceLine><SourceLine endBytecode='15' classname='securitytest.command.StringManipulationCommandInjection' start='23' end='23' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt' startBytecode='15'><Message>At StringManipulationCommandInjection.kt:[line 23]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='d8d607793f18042ff08beee809f4d75a' cweid='78' rank='12' abbrev='SECCI' category='SECURITY' priority='2' type='COMMAND_INJECTION' instanceOccurrenceMax='0'><ShortMessage>Potential Command Injection</ShortMessage><LongMessage>This usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection</LongMessage><Class classname='securitytest.command.StringManipulationCommandInjection' primary='true'><SourceLine classname='securitytest.command.StringManipulationCommandInjection' start='20' end='164' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt'><Message>At StringManipulationCommandInjection.kt:[lines 20-164]</Message></SourceLine><Message>In class securitytest.command.StringManipulationCommandInjection</Message></Class><Method isStatic='false' classname='securitytest.command.StringManipulationCommandInjection' signature='(Ljava/lang/String;)V' name='tained input executed after end padding' primary='true'><SourceLine endBytecode='93' classname='securitytest.command.StringManipulationCommandInjection' start='53' end='56' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt' startBytecode='0'></SourceLine><Message>In method securitytest.command.StringManipulationCommandInjection.tained input executed after end padding(String)</Message></Method><SourceLine endBytecode='19' classname='securitytest.command.StringManipulationCommandInjection' start='55' end='55' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt' startBytecode='19' primary='true'><Message>At StringManipulationCommandInjection.kt:[line 55]</Message></SourceLine><String role='Sink method' value='java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;'><Message>Sink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;</Message></String><String role='Sink parameter' value='0'><Message>Sink parameter 0</Message></String></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='fb44569af38665b2bd232be59c9bc5fa' cweid='78' rank='12' abbrev='SECCI' category='SECURITY' priority='2' type='COMMAND_INJECTION' instanceOccurrenceMax='0'><ShortMessage>Potential Command Injection</ShortMessage><LongMessage>This usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection</LongMessage><Class classname='securitytest.command.StringManipulationCommandInjection' primary='true'><SourceLine classname='securitytest.command.StringManipulationCommandInjection' start='20' end='164' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt'><Message>At StringManipulationCommandInjection.kt:[lines 20-164]</Message></SourceLine><Message>In class securitytest.command.StringManipulationCommandInjection</Message></Class><Method isStatic='false' classname='securitytest.command.StringManipulationCommandInjection' signature='(Ljava/lang/String;)V' name='tained input executed after end truncation' primary='true'><SourceLine endBytecode='91' classname='securitytest.command.StringManipulationCommandInjection' start='161' end='164' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt' startBytecode='0'></SourceLine><Message>In method securitytest.command.StringManipulationCommandInjection.tained input executed after end truncation(String)</Message></Method><SourceLine endBytecode='17' classname='securitytest.command.StringManipulationCommandInjection' start='163' end='163' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt' startBytecode='17' primary='true'><Message>At StringManipulationCommandInjection.kt:[line 163]</Message></SourceLine><String role='Sink method' value='java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;'><Message>Sink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;</Message></String><String role='Sink parameter' value='0'><Message>Sink parameter 0</Message></String></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='1a5087b52b6f5984eff0992c5f8e4518' cweid='78' rank='12' abbrev='SECCI' category='SECURITY' priority='2' type='COMMAND_INJECTION' instanceOccurrenceMax='0'><ShortMessage>Potential Command Injection</ShortMessage><LongMessage>This usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection</LongMessage><Class classname='securitytest.command.StringManipulationCommandInjection' primary='true'><SourceLine classname='securitytest.command.StringManipulationCommandInjection' start='20' end='164' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt'><Message>At StringManipulationCommandInjection.kt:[lines 20-164]</Message></SourceLine><Message>In class securitytest.command.StringManipulationCommandInjection</Message></Class><Method isStatic='false' classname='securitytest.command.StringManipulationCommandInjection' signature='(Ljava/lang/String;)V' name='tained input executed after first characters removed' primary='true'><SourceLine endBytecode='90' classname='securitytest.command.StringManipulationCommandInjection' start='35' end='38' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt' startBytecode='0'></SourceLine><Message>In method securitytest.command.StringManipulationCommandInjection.tained input executed after first characters removed(String)</Message></Method><SourceLine endBytecode='16' classname='securitytest.command.StringManipulationCommandInjection' start='37' end='37' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt' startBytecode='16' primary='true'><Message>At StringManipulationCommandInjection.kt:[line 37]</Message></SourceLine><String role='Sink method' value='java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;'><Message>Sink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;</Message></String><String role='Sink parameter' value='0'><Message>Sink parameter 0</Message></String></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='6c3b4d8eceb065f7c74a59389631b2c5' cweid='78' rank='12' abbrev='SECCI' category='SECURITY' priority='2' type='COMMAND_INJECTION' instanceOccurrenceMax='0'><ShortMessage>Potential Command Injection</ShortMessage><LongMessage>This usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection</LongMessage><Class classname='securitytest.command.StringManipulationCommandInjection' primary='true'><SourceLine classname='securitytest.command.StringManipulationCommandInjection' start='20' end='164' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt'><Message>At StringManipulationCommandInjection.kt:[lines 20-164]</Message></SourceLine><Message>In class securitytest.command.StringManipulationCommandInjection</Message></Class><Method isStatic='false' classname='securitytest.command.StringManipulationCommandInjection' signature='(Ljava/lang/String;)V' name='tained input executed after front padding' primary='true'><SourceLine endBytecode='93' classname='securitytest.command.StringManipulationCommandInjection' start='47' end='50' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt' startBytecode='0'></SourceLine><Message>In method securitytest.command.StringManipulationCommandInjection.tained input executed after front padding(String)</Message></Method><SourceLine endBytecode='19' classname='securitytest.command.StringManipulationCommandInjection' start='49' end='49' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt' startBytecode='19' primary='true'><Message>At StringManipulationCommandInjection.kt:[line 49]</Message></SourceLine><String role='Sink method' value='java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;'><Message>Sink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;</Message></String><String role='Sink parameter' value='0'><Message>Sink parameter 0</Message></String></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='f4b44757c61bf9efce34d2b58f958a50' cweid='78' rank='12' abbrev='SECCI' category='SECURITY' priority='2' type='COMMAND_INJECTION' instanceOccurrenceMax='0'><ShortMessage>Potential Command Injection</ShortMessage><LongMessage>This usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection</LongMessage><Class classname='securitytest.command.StringManipulationCommandInjection' primary='true'><SourceLine classname='securitytest.command.StringManipulationCommandInjection' start='20' end='164' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt'><Message>At StringManipulationCommandInjection.kt:[lines 20-164]</Message></SourceLine><Message>In class securitytest.command.StringManipulationCommandInjection</Message></Class><Method isStatic='false' classname='securitytest.command.StringManipulationCommandInjection' signature='(Ljava/lang/String;)V' name='tained input executed after front truncation' primary='true'><SourceLine endBytecode='91' classname='securitytest.command.StringManipulationCommandInjection' start='155' end='158' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt' startBytecode='0'></SourceLine><Message>In method securitytest.command.StringManipulationCommandInjection.tained input executed after front truncation(String)</Message></Method><SourceLine endBytecode='17' classname='securitytest.command.StringManipulationCommandInjection' start='157' end='157' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt' startBytecode='17' primary='true'><Message>At StringManipulationCommandInjection.kt:[line 157]</Message></SourceLine><String role='Sink method' value='java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;'><Message>Sink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;</Message></String><String role='Sink parameter' value='0'><Message>Sink parameter 0</Message></String></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='80674dae125a4d19160ecde8c62ae3f8' cweid='78' rank='12' abbrev='SECCI' category='SECURITY' priority='2' type='COMMAND_INJECTION' instanceOccurrenceMax='0'><ShortMessage>Potential Command Injection</ShortMessage><LongMessage>This usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection</LongMessage><Class classname='securitytest.command.StringManipulationCommandInjection' primary='true'><SourceLine classname='securitytest.command.StringManipulationCommandInjection' start='20' end='164' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt'><Message>At StringManipulationCommandInjection.kt:[lines 20-164]</Message></SourceLine><Message>In class securitytest.command.StringManipulationCommandInjection</Message></Class><Method isStatic='false' classname='securitytest.command.StringManipulationCommandInjection' signature='(Ljava/lang/String;)V' name='tained input executed after indentation' primary='true'><SourceLine endBytecode='91' classname='securitytest.command.StringManipulationCommandInjection' start='59' end='62' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt' startBytecode='0'></SourceLine><Message>In method securitytest.command.StringManipulationCommandInjection.tained input executed after indentation(String)</Message></Method><SourceLine endBytecode='17' classname='securitytest.command.StringManipulationCommandInjection' start='61' end='61' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt' startBytecode='17' primary='true'><Message>At StringManipulationCommandInjection.kt:[line 61]</Message></SourceLine><String role='Sink method' value='java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;'><Message>Sink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;</Message></String><String role='Sink parameter' value='0'><Message>Sink parameter 0</Message></String></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='d87ac1a22c702e9cc150332f989cd632' cweid='78' rank='12' abbrev='SECCI' category='SECURITY' priority='2' type='COMMAND_INJECTION' instanceOccurrenceMax='0'><ShortMessage>Potential Command Injection</ShortMessage><LongMessage>This usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection</LongMessage><Class classname='securitytest.command.StringManipulationCommandInjection' primary='true'><SourceLine classname='securitytest.command.StringManipulationCommandInjection' start='20' end='164' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt'><Message>At StringManipulationCommandInjection.kt:[lines 20-164]</Message></SourceLine><Message>In class securitytest.command.StringManipulationCommandInjection</Message></Class><Method isStatic='false' classname='securitytest.command.StringManipulationCommandInjection' signature='(Ljava/lang/String;)V' name='tained input executed after last characters removed' primary='true'><SourceLine endBytecode='90' classname='securitytest.command.StringManipulationCommandInjection' start='41' end='44' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt' startBytecode='0'></SourceLine><Message>In method securitytest.command.StringManipulationCommandInjection.tained input executed after last characters removed(String)</Message></Method><SourceLine endBytecode='16' classname='securitytest.command.StringManipulationCommandInjection' start='43' end='43' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt' startBytecode='16' primary='true'><Message>At StringManipulationCommandInjection.kt:[line 43]</Message></SourceLine><String role='Sink method' value='java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;'><Message>Sink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;</Message></String><String role='Sink parameter' value='0'><Message>Sink parameter 0</Message></String></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='1c4ebcdd2628bbd92cc989774bd3bda7' cweid='78' rank='12' abbrev='SECCI' category='SECURITY' priority='2' type='COMMAND_INJECTION' instanceOccurrenceMax='0'><ShortMessage>Potential Command Injection</ShortMessage><LongMessage>This usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection</LongMessage><Class classname='securitytest.command.StringManipulationCommandInjection' primary='true'><SourceLine classname='securitytest.command.StringManipulationCommandInjection' start='20' end='164' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt'><Message>At StringManipulationCommandInjection.kt:[lines 20-164]</Message></SourceLine><Message>In class securitytest.command.StringManipulationCommandInjection</Message></Class><Method isStatic='false' classname='securitytest.command.StringManipulationCommandInjection' signature='(Ljava/lang/String;)V' name='tained input executed after remove prefix' primary='true'><SourceLine endBytecode='94' classname='securitytest.command.StringManipulationCommandInjection' start='65' end='68' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt' startBytecode='0'></SourceLine><Message>In method securitytest.command.StringManipulationCommandInjection.tained input executed after remove prefix(String)</Message></Method><SourceLine endBytecode='20' classname='securitytest.command.StringManipulationCommandInjection' start='67' end='67' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt' startBytecode='20' primary='true'><Message>At StringManipulationCommandInjection.kt:[line 67]</Message></SourceLine><String role='Sink method' value='java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;'><Message>Sink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;</Message></String><String role='Sink parameter' value='0'><Message>Sink parameter 0</Message></String></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='c25f27d569830f565bfb753115f3f785' cweid='78' rank='12' abbrev='SECCI' category='SECURITY' priority='2' type='COMMAND_INJECTION' instanceOccurrenceMax='0'><ShortMessage>Potential Command Injection</ShortMessage><LongMessage>This usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection</LongMessage><Class classname='securitytest.command.StringManipulationCommandInjection' primary='true'><SourceLine classname='securitytest.command.StringManipulationCommandInjection' start='20' end='164' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt'><Message>At StringManipulationCommandInjection.kt:[lines 20-164]</Message></SourceLine><Message>In class securitytest.command.StringManipulationCommandInjection</Message></Class><Method isStatic='false' classname='securitytest.command.StringManipulationCommandInjection' signature='(Ljava/lang/String;)V' name='tained input executed after remove range' primary='true'><SourceLine endBytecode='114' classname='securitytest.command.StringManipulationCommandInjection' start='71' end='74' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt' startBytecode='0'></SourceLine><Message>In method securitytest.command.StringManipulationCommandInjection.tained input executed after remove range(String)</Message></Method><SourceLine endBytecode='36' classname='securitytest.command.StringManipulationCommandInjection' start='73' end='73' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt' startBytecode='36' primary='true'><Message>At StringManipulationCommandInjection.kt:[line 73]</Message></SourceLine><String role='Sink method' value='java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;'><Message>Sink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;</Message></String><String role='Sink parameter' value='0'><Message>Sink parameter 0</Message></String><String role='Unknown source' value='java/lang/Object.toString()Ljava/lang/String;'><Message>Unknown source java/lang/Object.toString()Ljava/lang/String;</Message></String><SourceLine endBytecode='28' classname='securitytest.command.StringManipulationCommandInjection' start='71' end='71' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt' startBytecode='28'><Message>At StringManipulationCommandInjection.kt:[line 71]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='3510a78c6cb994d79bba3fdb31c95e44' cweid='78' rank='12' abbrev='SECCI' category='SECURITY' priority='2' type='COMMAND_INJECTION' instanceOccurrenceMax='0'><ShortMessage>Potential Command Injection</ShortMessage><LongMessage>This usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection</LongMessage><Class classname='securitytest.command.StringManipulationCommandInjection' primary='true'><SourceLine classname='securitytest.command.StringManipulationCommandInjection' start='20' end='164' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt'><Message>At StringManipulationCommandInjection.kt:[lines 20-164]</Message></SourceLine><Message>In class securitytest.command.StringManipulationCommandInjection</Message></Class><Method isStatic='false' classname='securitytest.command.StringManipulationCommandInjection' signature='(Ljava/lang/String;)V' name='tained input executed after remove suffix' primary='true'><SourceLine endBytecode='94' classname='securitytest.command.StringManipulationCommandInjection' start='77' end='80' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt' startBytecode='0'></SourceLine><Message>In method securitytest.command.StringManipulationCommandInjection.tained input executed after remove suffix(String)</Message></Method><SourceLine endBytecode='20' classname='securitytest.command.StringManipulationCommandInjection' start='79' end='79' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt' startBytecode='20' primary='true'><Message>At StringManipulationCommandInjection.kt:[line 79]</Message></SourceLine><String role='Sink method' value='java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;'><Message>Sink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;</Message></String><String role='Sink parameter' value='0'><Message>Sink parameter 0</Message></String></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='93da05d7a7e906df6fe96f66c5da4db9' cweid='78' rank='12' abbrev='SECCI' category='SECURITY' priority='2' type='COMMAND_INJECTION' instanceOccurrenceMax='0'><ShortMessage>Potential Command Injection</ShortMessage><LongMessage>This usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection</LongMessage><Class classname='securitytest.command.StringManipulationCommandInjection' primary='true'><SourceLine classname='securitytest.command.StringManipulationCommandInjection' start='20' end='164' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt'><Message>At StringManipulationCommandInjection.kt:[lines 20-164]</Message></SourceLine><Message>In class securitytest.command.StringManipulationCommandInjection</Message></Class><Method isStatic='false' classname='securitytest.command.StringManipulationCommandInjection' signature='(Ljava/lang/String;)V' name='tained input executed after remove surrounding' primary='true'><SourceLine endBytecode='99' classname='securitytest.command.StringManipulationCommandInjection' start='83' end='86' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt' startBytecode='0'></SourceLine><Message>In method securitytest.command.StringManipulationCommandInjection.tained input executed after remove surrounding(String)</Message></Method><SourceLine endBytecode='25' classname='securitytest.command.StringManipulationCommandInjection' start='85' end='85' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt' startBytecode='25' primary='true'><Message>At StringManipulationCommandInjection.kt:[line 85]</Message></SourceLine><String role='Sink method' value='java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;'><Message>Sink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;</Message></String><String role='Sink parameter' value='0'><Message>Sink parameter 0</Message></String></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='91f0d0e76c6c801dcb67daefcb7facde' cweid='78' rank='12' abbrev='SECCI' category='SECURITY' priority='2' type='COMMAND_INJECTION' instanceOccurrenceMax='0'><ShortMessage>Potential Command Injection</ShortMessage><LongMessage>This usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection</LongMessage><Class classname='securitytest.command.StringManipulationCommandInjection' primary='true'><SourceLine classname='securitytest.command.StringManipulationCommandInjection' start='20' end='164' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt'><Message>At StringManipulationCommandInjection.kt:[lines 20-164]</Message></SourceLine><Message>In class securitytest.command.StringManipulationCommandInjection</Message></Class><Method isStatic='false' classname='securitytest.command.StringManipulationCommandInjection' signature='(Ljava/lang/String;)V' name='tained input executed after replace after' primary='true'><SourceLine endBytecode='95' classname='securitytest.command.StringManipulationCommandInjection' start='101' end='104' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt' startBytecode='0'></SourceLine><Message>In method securitytest.command.StringManipulationCommandInjection.tained input executed after replace after(String)</Message></Method><SourceLine endBytecode='21' classname='securitytest.command.StringManipulationCommandInjection' start='103' end='103' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt' startBytecode='21' primary='true'><Message>At StringManipulationCommandInjection.kt:[line 103]</Message></SourceLine><String role='Sink method' value='java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;'><Message>Sink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;</Message></String><String role='Sink parameter' value='0'><Message>Sink parameter 0</Message></String></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='ecf3519bcdd36bb1bc488549c7bfb0d1' cweid='78' rank='12' abbrev='SECCI' category='SECURITY' priority='2' type='COMMAND_INJECTION' instanceOccurrenceMax='0'><ShortMessage>Potential Command Injection</ShortMessage><LongMessage>This usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection</LongMessage><Class classname='securitytest.command.StringManipulationCommandInjection' primary='true'><SourceLine classname='securitytest.command.StringManipulationCommandInjection' start='20' end='164' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt'><Message>At StringManipulationCommandInjection.kt:[lines 20-164]</Message></SourceLine><Message>In class securitytest.command.StringManipulationCommandInjection</Message></Class><Method isStatic='false' classname='securitytest.command.StringManipulationCommandInjection' signature='(Ljava/lang/String;)V' name='tained input executed after replace after last' primary='true'><SourceLine endBytecode='95' classname='securitytest.command.StringManipulationCommandInjection' start='107' end='110' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt' startBytecode='0'></SourceLine><Message>In method securitytest.command.StringManipulationCommandInjection.tained input executed after replace after last(String)</Message></Method><SourceLine endBytecode='21' classname='securitytest.command.StringManipulationCommandInjection' start='109' end='109' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt' startBytecode='21' primary='true'><Message>At StringManipulationCommandInjection.kt:[line 109]</Message></SourceLine><String role='Sink method' value='java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;'><Message>Sink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;</Message></String><String role='Sink parameter' value='0'><Message>Sink parameter 0</Message></String></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='31c4941db74e3754711bf4a1f5ae5adb' cweid='78' rank='12' abbrev='SECCI' category='SECURITY' priority='2' type='COMMAND_INJECTION' instanceOccurrenceMax='0'><ShortMessage>Potential Command Injection</ShortMessage><LongMessage>This usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection</LongMessage><Class classname='securitytest.command.StringManipulationCommandInjection' primary='true'><SourceLine classname='securitytest.command.StringManipulationCommandInjection' start='20' end='164' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt'><Message>At StringManipulationCommandInjection.kt:[lines 20-164]</Message></SourceLine><Message>In class securitytest.command.StringManipulationCommandInjection</Message></Class><Method isStatic='false' classname='securitytest.command.StringManipulationCommandInjection' signature='(Ljava/lang/String;)V' name='tained input executed after replace before' primary='true'><SourceLine endBytecode='95' classname='securitytest.command.StringManipulationCommandInjection' start='113' end='116' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt' startBytecode='0'></SourceLine><Message>In method securitytest.command.StringManipulationCommandInjection.tained input executed after replace before(String)</Message></Method><SourceLine endBytecode='21' classname='securitytest.command.StringManipulationCommandInjection' start='115' end='115' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt' startBytecode='21' primary='true'><Message>At StringManipulationCommandInjection.kt:[line 115]</Message></SourceLine><String role='Sink method' value='java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;'><Message>Sink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;</Message></String><String role='Sink parameter' value='0'><Message>Sink parameter 0</Message></String></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='6546a44e4242b9454413f78a857781a8' cweid='78' rank='12' abbrev='SECCI' category='SECURITY' priority='2' type='COMMAND_INJECTION' instanceOccurrenceMax='0'><ShortMessage>Potential Command Injection</ShortMessage><LongMessage>This usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection</LongMessage><Class classname='securitytest.command.StringManipulationCommandInjection' primary='true'><SourceLine classname='securitytest.command.StringManipulationCommandInjection' start='20' end='164' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt'><Message>At StringManipulationCommandInjection.kt:[lines 20-164]</Message></SourceLine><Message>In class securitytest.command.StringManipulationCommandInjection</Message></Class><Method isStatic='false' classname='securitytest.command.StringManipulationCommandInjection' signature='(Ljava/lang/String;)V' name='tained input executed after replace before last' primary='true'><SourceLine endBytecode='95' classname='securitytest.command.StringManipulationCommandInjection' start='119' end='122' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt' startBytecode='0'></SourceLine><Message>In method securitytest.command.StringManipulationCommandInjection.tained input executed after replace before last(String)</Message></Method><SourceLine endBytecode='21' classname='securitytest.command.StringManipulationCommandInjection' start='121' end='121' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt' startBytecode='21' primary='true'><Message>At StringManipulationCommandInjection.kt:[line 121]</Message></SourceLine><String role='Sink method' value='java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;'><Message>Sink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;</Message></String><String role='Sink parameter' value='0'><Message>Sink parameter 0</Message></String></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='806c005a036bdb68929766747f804fe7' cweid='78' rank='12' abbrev='SECCI' category='SECURITY' priority='2' type='COMMAND_INJECTION' instanceOccurrenceMax='0'><ShortMessage>Potential Command Injection</ShortMessage><LongMessage>This usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection</LongMessage><Class classname='securitytest.command.StringManipulationCommandInjection' primary='true'><SourceLine classname='securitytest.command.StringManipulationCommandInjection' start='20' end='164' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt'><Message>At StringManipulationCommandInjection.kt:[lines 20-164]</Message></SourceLine><Message>In class securitytest.command.StringManipulationCommandInjection</Message></Class><Method isStatic='false' classname='securitytest.command.StringManipulationCommandInjection' signature='(Ljava/lang/String;)V' name='tained input executed after replace first' primary='true'><SourceLine endBytecode='96' classname='securitytest.command.StringManipulationCommandInjection' start='95' end='98' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt' startBytecode='0'></SourceLine><Message>In method securitytest.command.StringManipulationCommandInjection.tained input executed after replace first(String)</Message></Method><SourceLine endBytecode='22' classname='securitytest.command.StringManipulationCommandInjection' start='97' end='97' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt' startBytecode='22' primary='true'><Message>At StringManipulationCommandInjection.kt:[line 97]</Message></SourceLine><String role='Sink method' value='java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;'><Message>Sink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;</Message></String><String role='Sink parameter' value='0'><Message>Sink parameter 0</Message></String></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='d7f2f3e48a6f8d83ddefa6567bfcdc3e' cweid='78' rank='12' abbrev='SECCI' category='SECURITY' priority='2' type='COMMAND_INJECTION' instanceOccurrenceMax='0'><ShortMessage>Potential Command Injection</ShortMessage><LongMessage>This usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection</LongMessage><Class classname='securitytest.command.StringManipulationCommandInjection' primary='true'><SourceLine classname='securitytest.command.StringManipulationCommandInjection' start='20' end='164' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt'><Message>At StringManipulationCommandInjection.kt:[lines 20-164]</Message></SourceLine><Message>In class securitytest.command.StringManipulationCommandInjection</Message></Class><Method isStatic='false' classname='securitytest.command.StringManipulationCommandInjection' signature='(Ljava/lang/String;)V' name='tained input executed after replacement' primary='true'><SourceLine endBytecode='96' classname='securitytest.command.StringManipulationCommandInjection' start='89' end='92' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt' startBytecode='0'></SourceLine><Message>In method securitytest.command.StringManipulationCommandInjection.tained input executed after replacement(String)</Message></Method><SourceLine endBytecode='22' classname='securitytest.command.StringManipulationCommandInjection' start='91' end='91' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt' startBytecode='22' primary='true'><Message>At StringManipulationCommandInjection.kt:[line 91]</Message></SourceLine><String role='Sink method' value='java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;'><Message>Sink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;</Message></String><String role='Sink parameter' value='0'><Message>Sink parameter 0</Message></String><String role='Unknown source' value='securitytest/command/StringManipulationCommandInjection.tained input executed after replacement(Ljava/lang/String;)V parameter 0'><Message>Unknown source securitytest/command/StringManipulationCommandInjection.tained input executed after replacement(Ljava/lang/String;)V parameter 0</Message></String><String role='Method usage' value='not detected'><Message>Method usage not detected</Message></String><SourceLine endBytecode='3' classname='securitytest.command.StringManipulationCommandInjection' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt' startBytecode='3'><Message>In StringManipulationCommandInjection.kt</Message></SourceLine><SourceLine endBytecode='14' classname='securitytest.command.StringManipulationCommandInjection' start='89' end='89' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt' startBytecode='14'><Message>At StringManipulationCommandInjection.kt:[line 89]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='7cb4ac7f65b6dc2fd184ef724dde2506' cweid='78' rank='12' abbrev='SECCI' category='SECURITY' priority='2' type='COMMAND_INJECTION' instanceOccurrenceMax='0'><ShortMessage>Potential Command Injection</ShortMessage><LongMessage>This usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection</LongMessage><Class classname='securitytest.command.StringManipulationCommandInjection' primary='true'><SourceLine classname='securitytest.command.StringManipulationCommandInjection' start='20' end='164' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt'><Message>At StringManipulationCommandInjection.kt:[lines 20-164]</Message></SourceLine><Message>In class securitytest.command.StringManipulationCommandInjection</Message></Class><Method isStatic='false' classname='securitytest.command.StringManipulationCommandInjection' signature='(Ljava/lang/String;)V' name='tained input executed after reversal' primary='true'><SourceLine endBytecode='104' classname='securitytest.command.StringManipulationCommandInjection' start='125' end='128' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt' startBytecode='0'></SourceLine><Message>In method securitytest.command.StringManipulationCommandInjection.tained input executed after reversal(String)</Message></Method><SourceLine endBytecode='26' classname='securitytest.command.StringManipulationCommandInjection' start='127' end='127' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt' startBytecode='26' primary='true'><Message>At StringManipulationCommandInjection.kt:[line 127]</Message></SourceLine><String role='Sink method' value='java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;'><Message>Sink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;</Message></String><String role='Sink parameter' value='0'><Message>Sink parameter 0</Message></String><String role='Unknown source' value='java/lang/Object.toString()Ljava/lang/String;'><Message>Unknown source java/lang/Object.toString()Ljava/lang/String;</Message></String><SourceLine endBytecode='18' classname='securitytest.command.StringManipulationCommandInjection' start='125' end='125' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt' startBytecode='18'><Message>At StringManipulationCommandInjection.kt:[line 125]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='c75a6a6b594e85aedc3b45ecc5bb3b25' cweid='78' rank='12' abbrev='SECCI' category='SECURITY' priority='2' type='COMMAND_INJECTION' instanceOccurrenceMax='0'><ShortMessage>Potential Command Injection</ShortMessage><LongMessage>This usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection</LongMessage><Class classname='securitytest.command.StringManipulationCommandInjection' primary='true'><SourceLine classname='securitytest.command.StringManipulationCommandInjection' start='20' end='164' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt'><Message>At StringManipulationCommandInjection.kt:[lines 20-164]</Message></SourceLine><Message>In class securitytest.command.StringManipulationCommandInjection</Message></Class><Method isStatic='false' classname='securitytest.command.StringManipulationCommandInjection' signature='(Ljava/lang/String;)V' name='tained input executed after trimming' primary='true'><SourceLine endBytecode='104' classname='securitytest.command.StringManipulationCommandInjection' start='131' end='134' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt' startBytecode='0'></SourceLine><Message>In method securitytest.command.StringManipulationCommandInjection.tained input executed after trimming(String)</Message></Method><SourceLine endBytecode='26' classname='securitytest.command.StringManipulationCommandInjection' start='133' end='133' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt' startBytecode='26' primary='true'><Message>At StringManipulationCommandInjection.kt:[line 133]</Message></SourceLine><String role='Sink method' value='java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;'><Message>Sink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;</Message></String><String role='Sink parameter' value='0'><Message>Sink parameter 0</Message></String><String role='Unknown source' value='java/lang/Object.toString()Ljava/lang/String;'><Message>Unknown source java/lang/Object.toString()Ljava/lang/String;</Message></String><SourceLine endBytecode='18' classname='securitytest.command.StringManipulationCommandInjection' start='131' end='131' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt' startBytecode='18'><Message>At StringManipulationCommandInjection.kt:[line 131]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='be2084c451bd00bcac1b10a3b3932dd7' cweid='78' rank='12' abbrev='SECCI' category='SECURITY' priority='2' type='COMMAND_INJECTION' instanceOccurrenceMax='0'><ShortMessage>Potential Command Injection</ShortMessage><LongMessage>This usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection</LongMessage><Class classname='securitytest.command.StringManipulationCommandInjection' primary='true'><SourceLine classname='securitytest.command.StringManipulationCommandInjection' start='20' end='164' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt'><Message>At StringManipulationCommandInjection.kt:[lines 20-164]</Message></SourceLine><Message>In class securitytest.command.StringManipulationCommandInjection</Message></Class><Method isStatic='false' classname='securitytest.command.StringManipulationCommandInjection' signature='(Ljava/lang/String;)V' name='tained input executed after trimming end' primary='true'><SourceLine endBytecode='104' classname='securitytest.command.StringManipulationCommandInjection' start='149' end='152' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt' startBytecode='0'></SourceLine><Message>In method securitytest.command.StringManipulationCommandInjection.tained input executed after trimming end(String)</Message></Method><SourceLine endBytecode='26' classname='securitytest.command.StringManipulationCommandInjection' start='151' end='151' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt' startBytecode='26' primary='true'><Message>At StringManipulationCommandInjection.kt:[line 151]</Message></SourceLine><String role='Sink method' value='java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;'><Message>Sink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;</Message></String><String role='Sink parameter' value='0'><Message>Sink parameter 0</Message></String><String role='Unknown source' value='java/lang/Object.toString()Ljava/lang/String;'><Message>Unknown source java/lang/Object.toString()Ljava/lang/String;</Message></String><SourceLine endBytecode='18' classname='securitytest.command.StringManipulationCommandInjection' start='149' end='149' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt' startBytecode='18'><Message>At StringManipulationCommandInjection.kt:[line 149]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='9ce4887a5b565d8a54cbe3514a750f13' cweid='78' rank='12' abbrev='SECCI' category='SECURITY' priority='2' type='COMMAND_INJECTION' instanceOccurrenceMax='0'><ShortMessage>Potential Command Injection</ShortMessage><LongMessage>This usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection</LongMessage><Class classname='securitytest.command.StringManipulationCommandInjection' primary='true'><SourceLine classname='securitytest.command.StringManipulationCommandInjection' start='20' end='164' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt'><Message>At StringManipulationCommandInjection.kt:[lines 20-164]</Message></SourceLine><Message>In class securitytest.command.StringManipulationCommandInjection</Message></Class><Method isStatic='false' classname='securitytest.command.StringManipulationCommandInjection' signature='(Ljava/lang/String;)V' name='tained input executed after trimming indent' primary='true'><SourceLine endBytecode='89' classname='securitytest.command.StringManipulationCommandInjection' start='137' end='140' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt' startBytecode='0'></SourceLine><Message>In method securitytest.command.StringManipulationCommandInjection.tained input executed after trimming indent(String)</Message></Method><SourceLine endBytecode='15' classname='securitytest.command.StringManipulationCommandInjection' start='139' end='139' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt' startBytecode='15' primary='true'><Message>At StringManipulationCommandInjection.kt:[line 139]</Message></SourceLine><String role='Sink method' value='java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;'><Message>Sink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;</Message></String><String role='Sink parameter' value='0'><Message>Sink parameter 0</Message></String></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='d92aa96482400d265abaf29836fbf8cf' cweid='78' rank='12' abbrev='SECCI' category='SECURITY' priority='2' type='COMMAND_INJECTION' instanceOccurrenceMax='0'><ShortMessage>Potential Command Injection</ShortMessage><LongMessage>This usage of java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection</LongMessage><Class classname='securitytest.command.StringManipulationCommandInjection' primary='true'><SourceLine classname='securitytest.command.StringManipulationCommandInjection' start='20' end='164' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt'><Message>At StringManipulationCommandInjection.kt:[lines 20-164]</Message></SourceLine><Message>In class securitytest.command.StringManipulationCommandInjection</Message></Class><Method isStatic='false' classname='securitytest.command.StringManipulationCommandInjection' signature='(Ljava/lang/String;)V' name='tained input executed after trimming start' primary='true'><SourceLine endBytecode='104' classname='securitytest.command.StringManipulationCommandInjection' start='143' end='146' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt' startBytecode='0'></SourceLine><Message>In method securitytest.command.StringManipulationCommandInjection.tained input executed after trimming start(String)</Message></Method><SourceLine endBytecode='26' classname='securitytest.command.StringManipulationCommandInjection' start='145' end='145' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt' startBytecode='26' primary='true'><Message>At StringManipulationCommandInjection.kt:[line 145]</Message></SourceLine><String role='Sink method' value='java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;'><Message>Sink method java/lang/Runtime.exec(Ljava/lang/String;)Ljava/lang/Process;</Message></String><String role='Sink parameter' value='0'><Message>Sink parameter 0</Message></String><String role='Unknown source' value='java/lang/Object.toString()Ljava/lang/String;'><Message>Unknown source java/lang/Object.toString()Ljava/lang/String;</Message></String><SourceLine endBytecode='18' classname='securitytest.command.StringManipulationCommandInjection' start='143' end='143' sourcepath='securitytest/command/StringManipulationCommandInjection.kt' sourcefile='StringManipulationCommandInjection.kt' startBytecode='18'><Message>At StringManipulationCommandInjection.kt:[line 143]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='957bfccd5db2bfb429b296ae647df01e' cweid='117' rank='12' abbrev='SECCRLFLOG' category='SECURITY' priority='2' type='CRLF_INJECTION_LOGS' instanceOccurrenceMax='0'><ShortMessage>Potential CRLF Injection for logs</ShortMessage><LongMessage>This use of java/util/logging/Logger.config(Ljava/lang/String;)V might be used to include CRLF characters into log messages</LongMessage><Class classname='securitytest.injection.KotlinLogging' primary='true'><SourceLine classname='securitytest.injection.KotlinLogging' start='8' end='90' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt'><Message>At KotlinLogging.kt:[lines 8-90]</Message></SourceLine><Message>In class securitytest.injection.KotlinLogging</Message></Class><Method isStatic='false' classname='securitytest.injection.KotlinLogging' signature='()V' name='javaUtilLogging' primary='true'><SourceLine endBytecode='1683' classname='securitytest.injection.KotlinLogging' start='12' end='61' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='0'></SourceLine><Message>In method securitytest.injection.KotlinLogging.javaUtilLogging()</Message></Method><SourceLine endBytecode='68' classname='securitytest.injection.KotlinLogging' start='20' end='20' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='68' primary='true'><Message>At KotlinLogging.kt:[line 20]</Message></SourceLine><String role='Sink method' value='java/util/logging/Logger.config(Ljava/lang/String;)V'><Message>Sink method java/util/logging/Logger.config(Ljava/lang/String;)V</Message></String><String role='Sink parameter' value='0'><Message>Sink parameter 0</Message></String><String role='Tainted source' value='javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;'><Message>Tainted source javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;</Message></String><SourceLine endBytecode='9' classname='securitytest.injection.KotlinLogging' start='12' end='12' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='9'><Message>At KotlinLogging.kt:[line 12]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='742ea50aad655363d3d2a81fc741b955' cweid='117' rank='12' abbrev='SECCRLFLOG' category='SECURITY' priority='2' type='CRLF_INJECTION_LOGS' instanceOccurrenceMax='0'><ShortMessage>Potential CRLF Injection for logs</ShortMessage><LongMessage>This use of java/util/logging/Logger.entering(Ljava/lang/String;Ljava/lang/String;)V might be used to include CRLF characters into log messages</LongMessage><Class classname='securitytest.injection.KotlinLogging' primary='true'><SourceLine classname='securitytest.injection.KotlinLogging' start='8' end='90' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt'><Message>At KotlinLogging.kt:[lines 8-90]</Message></SourceLine><Message>In class securitytest.injection.KotlinLogging</Message></Class><Method isStatic='false' classname='securitytest.injection.KotlinLogging' signature='()V' name='javaUtilLogging' primary='true'><SourceLine endBytecode='1683' classname='securitytest.injection.KotlinLogging' start='12' end='61' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='0'></SourceLine><Message>In method securitytest.injection.KotlinLogging.javaUtilLogging()</Message></Method><SourceLine endBytecode='74' classname='securitytest.injection.KotlinLogging' start='21' end='21' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='74' primary='true'><Message>At KotlinLogging.kt:[line 21]</Message></SourceLine><String role='Sink method' value='java/util/logging/Logger.entering(Ljava/lang/String;Ljava/lang/String;)V'><Message>Sink method java/util/logging/Logger.entering(Ljava/lang/String;Ljava/lang/String;)V</Message></String><String role='Sink parameter' value='1'><Message>Sink parameter 1</Message></String><String role='Tainted source' value='javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;'><Message>Tainted source javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;</Message></String><SourceLine endBytecode='9' classname='securitytest.injection.KotlinLogging' start='12' end='12' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='9'><Message>At KotlinLogging.kt:[line 12]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='276241e41576169f6169216532bf80f6' cweid='117' rank='12' abbrev='SECCRLFLOG' category='SECURITY' priority='2' type='CRLF_INJECTION_LOGS' instanceOccurrenceMax='0'><ShortMessage>Potential CRLF Injection for logs</ShortMessage><LongMessage>This use of java/util/logging/Logger.entering(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V might be used to include CRLF characters into log messages</LongMessage><Class classname='securitytest.injection.KotlinLogging' primary='true'><SourceLine classname='securitytest.injection.KotlinLogging' start='8' end='90' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt'><Message>At KotlinLogging.kt:[lines 8-90]</Message></SourceLine><Message>In class securitytest.injection.KotlinLogging</Message></Class><Method isStatic='false' classname='securitytest.injection.KotlinLogging' signature='()V' name='javaUtilLogging' primary='true'><SourceLine endBytecode='1683' classname='securitytest.injection.KotlinLogging' start='12' end='61' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='0'></SourceLine><Message>In method securitytest.injection.KotlinLogging.javaUtilLogging()</Message></Method><SourceLine endBytecode='82' classname='securitytest.injection.KotlinLogging' start='22' end='22' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='82' primary='true'><Message>At KotlinLogging.kt:[line 22]</Message></SourceLine><String role='Sink method' value='java/util/logging/Logger.entering(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V'><Message>Sink method java/util/logging/Logger.entering(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V</Message></String><String role='Sink parameter' value='0'><Message>Sink parameter 0</Message></String><String role='Tainted source' value='javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;'><Message>Tainted source javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;</Message></String><SourceLine endBytecode='9' classname='securitytest.injection.KotlinLogging' start='12' end='12' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='9'><Message>At KotlinLogging.kt:[line 12]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='41ddfcc94cbba19811ed57b18ccf1a7d' cweid='117' rank='12' abbrev='SECCRLFLOG' category='SECURITY' priority='2' type='CRLF_INJECTION_LOGS' instanceOccurrenceMax='0'><ShortMessage>Potential CRLF Injection for logs</ShortMessage><LongMessage>This use of java/util/logging/Logger.entering(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)V might be used to include CRLF characters into log messages</LongMessage><Class classname='securitytest.injection.KotlinLogging' primary='true'><SourceLine classname='securitytest.injection.KotlinLogging' start='8' end='90' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt'><Message>At KotlinLogging.kt:[lines 8-90]</Message></SourceLine><Message>In class securitytest.injection.KotlinLogging</Message></Class><Method isStatic='false' classname='securitytest.injection.KotlinLogging' signature='()V' name='javaUtilLogging' primary='true'><SourceLine endBytecode='1683' classname='securitytest.injection.KotlinLogging' start='12' end='61' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='0'></SourceLine><Message>In method securitytest.injection.KotlinLogging.javaUtilLogging()</Message></Method><SourceLine endBytecode='97' classname='securitytest.injection.KotlinLogging' start='23' end='23' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='97' primary='true'><Message>At KotlinLogging.kt:[line 23]</Message></SourceLine><String role='Sink method' value='java/util/logging/Logger.entering(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)V'><Message>Sink method java/util/logging/Logger.entering(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)V</Message></String><String role='Sink parameter' value='0'><Message>Sink parameter 0</Message></String><String role='Tainted source' value='javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;'><Message>Tainted source javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;</Message></String><SourceLine endBytecode='9' classname='securitytest.injection.KotlinLogging' start='12' end='12' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='9'><Message>At KotlinLogging.kt:[line 12]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='940c7ea51ac312d780fda4d6a45f6653' cweid='117' rank='12' abbrev='SECCRLFLOG' category='SECURITY' priority='2' type='CRLF_INJECTION_LOGS' instanceOccurrenceMax='0'><ShortMessage>Potential CRLF Injection for logs</ShortMessage><LongMessage>This use of java/util/logging/Logger.exiting(Ljava/lang/String;Ljava/lang/String;)V might be used to include CRLF characters into log messages</LongMessage><Class classname='securitytest.injection.KotlinLogging' primary='true'><SourceLine classname='securitytest.injection.KotlinLogging' start='8' end='90' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt'><Message>At KotlinLogging.kt:[lines 8-90]</Message></SourceLine><Message>In class securitytest.injection.KotlinLogging</Message></Class><Method isStatic='false' classname='securitytest.injection.KotlinLogging' signature='()V' name='javaUtilLogging' primary='true'><SourceLine endBytecode='1683' classname='securitytest.injection.KotlinLogging' start='12' end='61' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='0'></SourceLine><Message>In method securitytest.injection.KotlinLogging.javaUtilLogging()</Message></Method><SourceLine endBytecode='103' classname='securitytest.injection.KotlinLogging' start='24' end='24' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='103' primary='true'><Message>At KotlinLogging.kt:[line 24]</Message></SourceLine><String role='Sink method' value='java/util/logging/Logger.exiting(Ljava/lang/String;Ljava/lang/String;)V'><Message>Sink method java/util/logging/Logger.exiting(Ljava/lang/String;Ljava/lang/String;)V</Message></String><String role='Sink parameter' value='0'><Message>Sink parameter 0</Message></String><String role='Tainted source' value='javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;'><Message>Tainted source javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;</Message></String><SourceLine endBytecode='9' classname='securitytest.injection.KotlinLogging' start='12' end='12' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='9'><Message>At KotlinLogging.kt:[line 12]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='7885f99bcf8ad37e48c9c00ba62f8d83' cweid='117' rank='12' abbrev='SECCRLFLOG' category='SECURITY' priority='2' type='CRLF_INJECTION_LOGS' instanceOccurrenceMax='0'><ShortMessage>Potential CRLF Injection for logs</ShortMessage><LongMessage>This use of java/util/logging/Logger.exiting(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V might be used to include CRLF characters into log messages</LongMessage><Class classname='securitytest.injection.KotlinLogging' primary='true'><SourceLine classname='securitytest.injection.KotlinLogging' start='8' end='90' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt'><Message>At KotlinLogging.kt:[lines 8-90]</Message></SourceLine><Message>In class securitytest.injection.KotlinLogging</Message></Class><Method isStatic='false' classname='securitytest.injection.KotlinLogging' signature='()V' name='javaUtilLogging' primary='true'><SourceLine endBytecode='1683' classname='securitytest.injection.KotlinLogging' start='12' end='61' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='0'></SourceLine><Message>In method securitytest.injection.KotlinLogging.javaUtilLogging()</Message></Method><SourceLine endBytecode='111' classname='securitytest.injection.KotlinLogging' start='25' end='25' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='111' primary='true'><Message>At KotlinLogging.kt:[line 25]</Message></SourceLine><String role='Sink method' value='java/util/logging/Logger.exiting(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V'><Message>Sink method java/util/logging/Logger.exiting(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V</Message></String><String role='Sink parameter' value='0'><Message>Sink parameter 0</Message></String><String role='Tainted source' value='javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;'><Message>Tainted source javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;</Message></String><SourceLine endBytecode='9' classname='securitytest.injection.KotlinLogging' start='12' end='12' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='9'><Message>At KotlinLogging.kt:[line 12]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='e80b2936d5071751c5c5ef173706bb48' cweid='117' rank='12' abbrev='SECCRLFLOG' category='SECURITY' priority='2' type='CRLF_INJECTION_LOGS' instanceOccurrenceMax='0'><ShortMessage>Potential CRLF Injection for logs</ShortMessage><LongMessage>This use of java/util/logging/Logger.fine(Ljava/lang/String;)V might be used to include CRLF characters into log messages</LongMessage><Class classname='securitytest.injection.KotlinLogging' primary='true'><SourceLine classname='securitytest.injection.KotlinLogging' start='8' end='90' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt'><Message>At KotlinLogging.kt:[lines 8-90]</Message></SourceLine><Message>In class securitytest.injection.KotlinLogging</Message></Class><Method isStatic='false' classname='securitytest.injection.KotlinLogging' signature='()V' name='javaUtilLogging' primary='true'><SourceLine endBytecode='1683' classname='securitytest.injection.KotlinLogging' start='12' end='61' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='0'></SourceLine><Message>In method securitytest.injection.KotlinLogging.javaUtilLogging()</Message></Method><SourceLine endBytecode='116' classname='securitytest.injection.KotlinLogging' start='26' end='26' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='116' primary='true'><Message>At KotlinLogging.kt:[line 26]</Message></SourceLine><String role='Sink method' value='java/util/logging/Logger.fine(Ljava/lang/String;)V'><Message>Sink method java/util/logging/Logger.fine(Ljava/lang/String;)V</Message></String><String role='Sink parameter' value='0'><Message>Sink parameter 0</Message></String><String role='Tainted source' value='javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;'><Message>Tainted source javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;</Message></String><SourceLine endBytecode='9' classname='securitytest.injection.KotlinLogging' start='12' end='12' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='9'><Message>At KotlinLogging.kt:[line 12]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='542f35661236465bb13b5a31f5f2383b' cweid='117' rank='12' abbrev='SECCRLFLOG' category='SECURITY' priority='2' type='CRLF_INJECTION_LOGS' instanceOccurrenceMax='0'><ShortMessage>Potential CRLF Injection for logs</ShortMessage><LongMessage>This use of java/util/logging/Logger.finer(Ljava/lang/String;)V might be used to include CRLF characters into log messages</LongMessage><Class classname='securitytest.injection.KotlinLogging' primary='true'><SourceLine classname='securitytest.injection.KotlinLogging' start='8' end='90' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt'><Message>At KotlinLogging.kt:[lines 8-90]</Message></SourceLine><Message>In class securitytest.injection.KotlinLogging</Message></Class><Method isStatic='false' classname='securitytest.injection.KotlinLogging' signature='()V' name='javaUtilLogging' primary='true'><SourceLine endBytecode='1683' classname='securitytest.injection.KotlinLogging' start='12' end='61' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='0'></SourceLine><Message>In method securitytest.injection.KotlinLogging.javaUtilLogging()</Message></Method><SourceLine endBytecode='277' classname='securitytest.injection.KotlinLogging' start='27' end='27' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='277' primary='true'><Message>At KotlinLogging.kt:[line 27]</Message></SourceLine><String role='Sink method' value='java/util/logging/Logger.finer(Ljava/lang/String;)V'><Message>Sink method java/util/logging/Logger.finer(Ljava/lang/String;)V</Message></String><String role='Sink parameter' value='0'><Message>Sink parameter 0</Message></String><String role='Tainted source' value='java/lang/Object.toString()Ljava/lang/String;'><Message>Tainted source java/lang/Object.toString()Ljava/lang/String;</Message></String><String role='Tainted source' value='java/lang/CharSequence.subSequence(II)Ljava/lang/CharSequence;'><Message>Tainted source java/lang/CharSequence.subSequence(II)Ljava/lang/CharSequence;</Message></String><String role='Tainted source' value='javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;'><Message>Tainted source javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;</Message></String><SourceLine endBytecode='9' classname='securitytest.injection.KotlinLogging' start='12' end='12' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='9'><Message>At KotlinLogging.kt:[line 12]</Message></SourceLine><SourceLine endBytecode='268' classname='securitytest.injection.KotlinLogging' start='68' end='68' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='268'><Message>At KotlinLogging.kt:[line 68]</Message></SourceLine><SourceLine endBytecode='263' classname='securitytest.injection.KotlinLogging' start='90' end='90' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='263'><Message>At KotlinLogging.kt:[line 90]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='cff9e8d583078c58633c8db98882bbcf' cweid='117' rank='12' abbrev='SECCRLFLOG' category='SECURITY' priority='2' type='CRLF_INJECTION_LOGS' instanceOccurrenceMax='0'><ShortMessage>Potential CRLF Injection for logs</ShortMessage><LongMessage>This use of java/util/logging/Logger.finest(Ljava/lang/String;)V might be used to include CRLF characters into log messages</LongMessage><Class classname='securitytest.injection.KotlinLogging' primary='true'><SourceLine classname='securitytest.injection.KotlinLogging' start='8' end='90' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt'><Message>At KotlinLogging.kt:[lines 8-90]</Message></SourceLine><Message>In class securitytest.injection.KotlinLogging</Message></Class><Method isStatic='false' classname='securitytest.injection.KotlinLogging' signature='()V' name='javaUtilLogging' primary='true'><SourceLine endBytecode='1683' classname='securitytest.injection.KotlinLogging' start='12' end='61' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='0'></SourceLine><Message>In method securitytest.injection.KotlinLogging.javaUtilLogging()</Message></Method><SourceLine endBytecode='282' classname='securitytest.injection.KotlinLogging' start='28' end='28' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='282' primary='true'><Message>At KotlinLogging.kt:[line 28]</Message></SourceLine><String role='Sink method' value='java/util/logging/Logger.finest(Ljava/lang/String;)V'><Message>Sink method java/util/logging/Logger.finest(Ljava/lang/String;)V</Message></String><String role='Sink parameter' value='0'><Message>Sink parameter 0</Message></String><String role='Tainted source' value='javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;'><Message>Tainted source javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;</Message></String><SourceLine endBytecode='9' classname='securitytest.injection.KotlinLogging' start='12' end='12' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='9'><Message>At KotlinLogging.kt:[line 12]</Message></SourceLine><SourceLine endBytecode='124' classname='securitytest.injection.KotlinLogging' start='27' end='27' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='124'><Message>At KotlinLogging.kt:[line 27]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='95434ae558297aa16e5597bd53caae64' cweid='117' rank='12' abbrev='SECCRLFLOG' category='SECURITY' priority='2' type='CRLF_INJECTION_LOGS' instanceOccurrenceMax='0'><ShortMessage>Potential CRLF Injection for logs</ShortMessage><LongMessage>This use of java/util/logging/Logger.info(Ljava/lang/String;)V might be used to include CRLF characters into log messages</LongMessage><Class classname='securitytest.injection.KotlinLogging' primary='true'><SourceLine classname='securitytest.injection.KotlinLogging' start='8' end='90' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt'><Message>At KotlinLogging.kt:[lines 8-90]</Message></SourceLine><Message>In class securitytest.injection.KotlinLogging</Message></Class><Method isStatic='false' classname='securitytest.injection.KotlinLogging' signature='()V' name='javaUtilLogging' primary='true'><SourceLine endBytecode='1683' classname='securitytest.injection.KotlinLogging' start='12' end='61' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='0'></SourceLine><Message>In method securitytest.injection.KotlinLogging.javaUtilLogging()</Message></Method><SourceLine endBytecode='287' classname='securitytest.injection.KotlinLogging' start='29' end='29' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='287' primary='true'><Message>At KotlinLogging.kt:[line 29]</Message></SourceLine><String role='Sink method' value='java/util/logging/Logger.info(Ljava/lang/String;)V'><Message>Sink method java/util/logging/Logger.info(Ljava/lang/String;)V</Message></String><String role='Sink parameter' value='0'><Message>Sink parameter 0</Message></String><String role='Tainted source' value='javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;'><Message>Tainted source javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;</Message></String><SourceLine endBytecode='9' classname='securitytest.injection.KotlinLogging' start='12' end='12' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='9'><Message>At KotlinLogging.kt:[line 12]</Message></SourceLine><SourceLine endBytecode='124' classname='securitytest.injection.KotlinLogging' start='27' end='27' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='124'><Message>At KotlinLogging.kt:[line 27]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='e5a3ffd57d809d345baafc7d3186caad' cweid='117' rank='12' abbrev='SECCRLFLOG' category='SECURITY' priority='2' type='CRLF_INJECTION_LOGS' instanceOccurrenceMax='0'><ShortMessage>Potential CRLF Injection for logs</ShortMessage><LongMessage>This use of java/util/logging/Logger.log(Ljava/util/logging/Level;Ljava/lang/String;)V might be used to include CRLF characters into log messages</LongMessage><Class classname='securitytest.injection.KotlinLogging' primary='true'><SourceLine classname='securitytest.injection.KotlinLogging' start='8' end='90' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt'><Message>At KotlinLogging.kt:[lines 8-90]</Message></SourceLine><Message>In class securitytest.injection.KotlinLogging</Message></Class><Method isStatic='false' classname='securitytest.injection.KotlinLogging' signature='()V' name='javaUtilLogging' primary='true'><SourceLine endBytecode='1683' classname='securitytest.injection.KotlinLogging' start='12' end='61' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='0'></SourceLine><Message>In method securitytest.injection.KotlinLogging.javaUtilLogging()</Message></Method><SourceLine endBytecode='295' classname='securitytest.injection.KotlinLogging' start='30' end='30' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='295' primary='true'><Message>At KotlinLogging.kt:[line 30]</Message></SourceLine><String role='Sink method' value='java/util/logging/Logger.log(Ljava/util/logging/Level;Ljava/lang/String;)V'><Message>Sink method java/util/logging/Logger.log(Ljava/util/logging/Level;Ljava/lang/String;)V</Message></String><String role='Sink parameter' value='0'><Message>Sink parameter 0</Message></String><String role='Tainted source' value='javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;'><Message>Tainted source javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;</Message></String><SourceLine endBytecode='9' classname='securitytest.injection.KotlinLogging' start='12' end='12' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='9'><Message>At KotlinLogging.kt:[line 12]</Message></SourceLine><SourceLine endBytecode='124' classname='securitytest.injection.KotlinLogging' start='27' end='27' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='124'><Message>At KotlinLogging.kt:[line 27]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='4a2a9745a9cfc0b4619c12da64e26078' cweid='117' rank='12' abbrev='SECCRLFLOG' category='SECURITY' priority='2' type='CRLF_INJECTION_LOGS' instanceOccurrenceMax='0'><ShortMessage>Potential CRLF Injection for logs</ShortMessage><LongMessage>This use of java/util/logging/Logger.log(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/Object;)V might be used to include CRLF characters into log messages</LongMessage><Class classname='securitytest.injection.KotlinLogging' primary='true'><SourceLine classname='securitytest.injection.KotlinLogging' start='8' end='90' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt'><Message>At KotlinLogging.kt:[lines 8-90]</Message></SourceLine><Message>In class securitytest.injection.KotlinLogging</Message></Class><Method isStatic='false' classname='securitytest.injection.KotlinLogging' signature='()V' name='javaUtilLogging' primary='true'><SourceLine endBytecode='1683' classname='securitytest.injection.KotlinLogging' start='12' end='61' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='0'></SourceLine><Message>In method securitytest.injection.KotlinLogging.javaUtilLogging()</Message></Method><SourceLine endBytecode='304' classname='securitytest.injection.KotlinLogging' start='31' end='31' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='304' primary='true'><Message>At KotlinLogging.kt:[line 31]</Message></SourceLine><String role='Sink method' value='java/util/logging/Logger.log(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/Object;)V'><Message>Sink method java/util/logging/Logger.log(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/Object;)V</Message></String><String role='Sink parameter' value='1'><Message>Sink parameter 1</Message></String><String role='Tainted source' value='javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;'><Message>Tainted source javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;</Message></String><SourceLine endBytecode='9' classname='securitytest.injection.KotlinLogging' start='12' end='12' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='9'><Message>At KotlinLogging.kt:[line 12]</Message></SourceLine><SourceLine endBytecode='124' classname='securitytest.injection.KotlinLogging' start='27' end='27' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='124'><Message>At KotlinLogging.kt:[line 27]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='fba0e847153c9ca88093661bac08075f' cweid='117' rank='12' abbrev='SECCRLFLOG' category='SECURITY' priority='2' type='CRLF_INJECTION_LOGS' instanceOccurrenceMax='0'><ShortMessage>Potential CRLF Injection for logs</ShortMessage><LongMessage>This use of java/util/logging/Logger.log(Ljava/util/logging/Level;Ljava/lang/String;[Ljava/lang/Object;)V might be used to include CRLF characters into log messages</LongMessage><Class classname='securitytest.injection.KotlinLogging' primary='true'><SourceLine classname='securitytest.injection.KotlinLogging' start='8' end='90' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt'><Message>At KotlinLogging.kt:[lines 8-90]</Message></SourceLine><Message>In class securitytest.injection.KotlinLogging</Message></Class><Method isStatic='false' classname='securitytest.injection.KotlinLogging' signature='()V' name='javaUtilLogging' primary='true'><SourceLine endBytecode='1683' classname='securitytest.injection.KotlinLogging' start='12' end='61' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='0'></SourceLine><Message>In method securitytest.injection.KotlinLogging.javaUtilLogging()</Message></Method><SourceLine endBytecode='321' classname='securitytest.injection.KotlinLogging' start='32' end='32' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='321' primary='true'><Message>At KotlinLogging.kt:[line 32]</Message></SourceLine><String role='Sink method' value='java/util/logging/Logger.log(Ljava/util/logging/Level;Ljava/lang/String;[Ljava/lang/Object;)V'><Message>Sink method java/util/logging/Logger.log(Ljava/util/logging/Level;Ljava/lang/String;[Ljava/lang/Object;)V</Message></String><String role='Sink parameter' value='0'><Message>Sink parameter 0</Message></String><String role='Tainted source' value='javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;'><Message>Tainted source javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;</Message></String><SourceLine endBytecode='9' classname='securitytest.injection.KotlinLogging' start='12' end='12' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='9'><Message>At KotlinLogging.kt:[line 12]</Message></SourceLine><SourceLine endBytecode='124' classname='securitytest.injection.KotlinLogging' start='27' end='27' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='124'><Message>At KotlinLogging.kt:[line 27]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='567919fc2168a1914949b9bc63eb3cfb' cweid='117' rank='12' abbrev='SECCRLFLOG' category='SECURITY' priority='2' type='CRLF_INJECTION_LOGS' instanceOccurrenceMax='0'><ShortMessage>Potential CRLF Injection for logs</ShortMessage><LongMessage>This use of java/util/logging/Logger.log(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/Throwable;)V might be used to include CRLF characters into log messages</LongMessage><Class classname='securitytest.injection.KotlinLogging' primary='true'><SourceLine classname='securitytest.injection.KotlinLogging' start='8' end='90' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt'><Message>At KotlinLogging.kt:[lines 8-90]</Message></SourceLine><Message>In class securitytest.injection.KotlinLogging</Message></Class><Method isStatic='false' classname='securitytest.injection.KotlinLogging' signature='()V' name='javaUtilLogging' primary='true'><SourceLine endBytecode='1683' classname='securitytest.injection.KotlinLogging' start='12' end='61' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='0'></SourceLine><Message>In method securitytest.injection.KotlinLogging.javaUtilLogging()</Message></Method><SourceLine endBytecode='339' classname='securitytest.injection.KotlinLogging' start='33' end='33' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='339' primary='true'><Message>At KotlinLogging.kt:[line 33]</Message></SourceLine><String role='Sink method' value='java/util/logging/Logger.log(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/Throwable;)V'><Message>Sink method java/util/logging/Logger.log(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/Throwable;)V</Message></String><String role='Sink parameter' value='1'><Message>Sink parameter 1</Message></String><String role='Tainted source' value='javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;'><Message>Tainted source javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;</Message></String><SourceLine endBytecode='9' classname='securitytest.injection.KotlinLogging' start='12' end='12' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='9'><Message>At KotlinLogging.kt:[line 12]</Message></SourceLine><SourceLine endBytecode='124' classname='securitytest.injection.KotlinLogging' start='27' end='27' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='124'><Message>At KotlinLogging.kt:[line 27]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='cf79ec3d54736f5f3710a4e2c13f2ee9' cweid='117' rank='12' abbrev='SECCRLFLOG' category='SECURITY' priority='2' type='CRLF_INJECTION_LOGS' instanceOccurrenceMax='0'><ShortMessage>Potential CRLF Injection for logs</ShortMessage><LongMessage>This use of java/util/logging/Logger.logp(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V might be used to include CRLF characters into log messages</LongMessage><Class classname='securitytest.injection.KotlinLogging' primary='true'><SourceLine classname='securitytest.injection.KotlinLogging' start='8' end='90' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt'><Message>At KotlinLogging.kt:[lines 8-90]</Message></SourceLine><Message>In class securitytest.injection.KotlinLogging</Message></Class><Method isStatic='false' classname='securitytest.injection.KotlinLogging' signature='()V' name='javaUtilLogging' primary='true'><SourceLine endBytecode='1683' classname='securitytest.injection.KotlinLogging' start='12' end='61' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='0'></SourceLine><Message>In method securitytest.injection.KotlinLogging.javaUtilLogging()</Message></Method><SourceLine endBytecode='350' classname='securitytest.injection.KotlinLogging' start='34' end='34' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='350' primary='true'><Message>At KotlinLogging.kt:[line 34]</Message></SourceLine><String role='Sink method' value='java/util/logging/Logger.logp(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V'><Message>Sink method java/util/logging/Logger.logp(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V</Message></String><String role='Sink parameter' value='2'><Message>Sink parameter 2</Message></String><String role='Tainted source' value='javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;'><Message>Tainted source javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;</Message></String><SourceLine endBytecode='9' classname='securitytest.injection.KotlinLogging' start='12' end='12' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='9'><Message>At KotlinLogging.kt:[line 12]</Message></SourceLine><SourceLine endBytecode='124' classname='securitytest.injection.KotlinLogging' start='27' end='27' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='124'><Message>At KotlinLogging.kt:[line 27]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='96f46e1fe2c9564585e3fcbec90c5cb1' cweid='117' rank='12' abbrev='SECCRLFLOG' category='SECURITY' priority='2' type='CRLF_INJECTION_LOGS' instanceOccurrenceMax='0'><ShortMessage>Potential CRLF Injection for logs</ShortMessage><LongMessage>This use of java/util/logging/Logger.logp(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V might be used to include CRLF characters into log messages</LongMessage><Class classname='securitytest.injection.KotlinLogging' primary='true'><SourceLine classname='securitytest.injection.KotlinLogging' start='8' end='90' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt'><Message>At KotlinLogging.kt:[lines 8-90]</Message></SourceLine><Message>In class securitytest.injection.KotlinLogging</Message></Class><Method isStatic='false' classname='securitytest.injection.KotlinLogging' signature='()V' name='javaUtilLogging' primary='true'><SourceLine endBytecode='1683' classname='securitytest.injection.KotlinLogging' start='12' end='61' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='0'></SourceLine><Message>In method securitytest.injection.KotlinLogging.javaUtilLogging()</Message></Method><SourceLine endBytecode='362' classname='securitytest.injection.KotlinLogging' start='35' end='35' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='362' primary='true'><Message>At KotlinLogging.kt:[line 35]</Message></SourceLine><String role='Sink method' value='java/util/logging/Logger.logp(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V'><Message>Sink method java/util/logging/Logger.logp(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V</Message></String><String role='Sink parameter' value='1'><Message>Sink parameter 1</Message></String><String role='Tainted source' value='javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;'><Message>Tainted source javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;</Message></String><SourceLine endBytecode='9' classname='securitytest.injection.KotlinLogging' start='12' end='12' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='9'><Message>At KotlinLogging.kt:[line 12]</Message></SourceLine><SourceLine endBytecode='124' classname='securitytest.injection.KotlinLogging' start='27' end='27' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='124'><Message>At KotlinLogging.kt:[line 27]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='84027c3a28e4bfbbf67ff14bbee8f544' cweid='117' rank='12' abbrev='SECCRLFLOG' category='SECURITY' priority='2' type='CRLF_INJECTION_LOGS' instanceOccurrenceMax='0'><ShortMessage>Potential CRLF Injection for logs</ShortMessage><LongMessage>This use of java/util/logging/Logger.logp(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)V might be used to include CRLF characters into log messages</LongMessage><Class classname='securitytest.injection.KotlinLogging' primary='true'><SourceLine classname='securitytest.injection.KotlinLogging' start='8' end='90' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt'><Message>At KotlinLogging.kt:[lines 8-90]</Message></SourceLine><Message>In class securitytest.injection.KotlinLogging</Message></Class><Method isStatic='false' classname='securitytest.injection.KotlinLogging' signature='()V' name='javaUtilLogging' primary='true'><SourceLine endBytecode='1683' classname='securitytest.injection.KotlinLogging' start='12' end='61' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='0'></SourceLine><Message>In method securitytest.injection.KotlinLogging.javaUtilLogging()</Message></Method><SourceLine endBytecode='397' classname='securitytest.injection.KotlinLogging' start='36' end='36' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='397' primary='true'><Message>At KotlinLogging.kt:[line 36]</Message></SourceLine><String role='Sink method' value='java/util/logging/Logger.logp(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)V'><Message>Sink method java/util/logging/Logger.logp(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)V</Message></String><String role='Sink parameter' value='0'><Message>Sink parameter 0</Message></String><String role='Tainted source' value='javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;'><Message>Tainted source javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;</Message></String><SourceLine endBytecode='9' classname='securitytest.injection.KotlinLogging' start='12' end='12' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='9'><Message>At KotlinLogging.kt:[line 12]</Message></SourceLine><SourceLine endBytecode='124' classname='securitytest.injection.KotlinLogging' start='27' end='27' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='124'><Message>At KotlinLogging.kt:[line 27]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='2f593b8a4c5639aad8f3aae7ea14c6c8' cweid='117' rank='12' abbrev='SECCRLFLOG' category='SECURITY' priority='2' type='CRLF_INJECTION_LOGS' instanceOccurrenceMax='0'><ShortMessage>Potential CRLF Injection for logs</ShortMessage><LongMessage>This use of java/util/logging/Logger.logp(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V might be used to include CRLF characters into log messages</LongMessage><Class classname='securitytest.injection.KotlinLogging' primary='true'><SourceLine classname='securitytest.injection.KotlinLogging' start='8' end='90' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt'><Message>At KotlinLogging.kt:[lines 8-90]</Message></SourceLine><Message>In class securitytest.injection.KotlinLogging</Message></Class><Method isStatic='false' classname='securitytest.injection.KotlinLogging' signature='()V' name='javaUtilLogging' primary='true'><SourceLine endBytecode='1683' classname='securitytest.injection.KotlinLogging' start='12' end='61' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='0'></SourceLine><Message>In method securitytest.injection.KotlinLogging.javaUtilLogging()</Message></Method><SourceLine endBytecode='417' classname='securitytest.injection.KotlinLogging' start='37' end='37' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='417' primary='true'><Message>At KotlinLogging.kt:[line 37]</Message></SourceLine><String role='Sink method' value='java/util/logging/Logger.logp(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V'><Message>Sink method java/util/logging/Logger.logp(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V</Message></String><String role='Sink parameter' value='3'><Message>Sink parameter 3</Message></String><String role='Tainted source' value='javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;'><Message>Tainted source javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;</Message></String><SourceLine endBytecode='9' classname='securitytest.injection.KotlinLogging' start='12' end='12' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='9'><Message>At KotlinLogging.kt:[line 12]</Message></SourceLine><SourceLine endBytecode='124' classname='securitytest.injection.KotlinLogging' start='27' end='27' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='124'><Message>At KotlinLogging.kt:[line 27]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='816ce69e24ebe9e649a4b334e8da464' cweid='117' rank='12' abbrev='SECCRLFLOG' category='SECURITY' priority='2' type='CRLF_INJECTION_LOGS' instanceOccurrenceMax='0'><ShortMessage>Potential CRLF Injection for logs</ShortMessage><LongMessage>This use of java/util/logging/Logger.logp(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/util/function/Supplier;)V might be used to include CRLF characters into log messages</LongMessage><Class classname='securitytest.injection.KotlinLogging' primary='true'><SourceLine classname='securitytest.injection.KotlinLogging' start='8' end='90' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt'><Message>At KotlinLogging.kt:[lines 8-90]</Message></SourceLine><Message>In class securitytest.injection.KotlinLogging</Message></Class><Method isStatic='false' classname='securitytest.injection.KotlinLogging' signature='()V' name='javaUtilLogging' primary='true'><SourceLine endBytecode='1683' classname='securitytest.injection.KotlinLogging' start='12' end='61' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='0'></SourceLine><Message>In method securitytest.injection.KotlinLogging.javaUtilLogging()</Message></Method><SourceLine endBytecode='431' classname='securitytest.injection.KotlinLogging' start='38' end='38' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='431' primary='true'><Message>At KotlinLogging.kt:[line 38]</Message></SourceLine><String role='Sink method' value='java/util/logging/Logger.logp(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/util/function/Supplier;)V'><Message>Sink method java/util/logging/Logger.logp(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/util/function/Supplier;)V</Message></String><String role='Sink parameter' value='2'><Message>Sink parameter 2</Message></String><String role='Tainted source' value='javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;'><Message>Tainted source javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;</Message></String><SourceLine endBytecode='9' classname='securitytest.injection.KotlinLogging' start='12' end='12' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='9'><Message>At KotlinLogging.kt:[line 12]</Message></SourceLine><SourceLine endBytecode='124' classname='securitytest.injection.KotlinLogging' start='27' end='27' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='124'><Message>At KotlinLogging.kt:[line 27]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='e6b64e28605caabe438704b343a9291' cweid='117' rank='12' abbrev='SECCRLFLOG' category='SECURITY' priority='2' type='CRLF_INJECTION_LOGS' instanceOccurrenceMax='0'><ShortMessage>Potential CRLF Injection for logs</ShortMessage><LongMessage>This use of java/util/logging/Logger.logp(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;Ljava/util/function/Supplier;)V might be used to include CRLF characters into log messages</LongMessage><Class classname='securitytest.injection.KotlinLogging' primary='true'><SourceLine classname='securitytest.injection.KotlinLogging' start='8' end='90' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt'><Message>At KotlinLogging.kt:[lines 8-90]</Message></SourceLine><Message>In class securitytest.injection.KotlinLogging</Message></Class><Method isStatic='false' classname='securitytest.injection.KotlinLogging' signature='()V' name='javaUtilLogging' primary='true'><SourceLine endBytecode='1683' classname='securitytest.injection.KotlinLogging' start='12' end='61' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='0'></SourceLine><Message>In method securitytest.injection.KotlinLogging.javaUtilLogging()</Message></Method><SourceLine endBytecode='455' classname='securitytest.injection.KotlinLogging' start='39' end='39' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='455' primary='true'><Message>At KotlinLogging.kt:[line 39]</Message></SourceLine><String role='Sink method' value='java/util/logging/Logger.logp(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;Ljava/util/function/Supplier;)V'><Message>Sink method java/util/logging/Logger.logp(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;Ljava/util/function/Supplier;)V</Message></String><String role='Sink parameter' value='2'><Message>Sink parameter 2</Message></String><String role='Tainted source' value='javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;'><Message>Tainted source javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;</Message></String><SourceLine endBytecode='9' classname='securitytest.injection.KotlinLogging' start='12' end='12' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='9'><Message>At KotlinLogging.kt:[line 12]</Message></SourceLine><SourceLine endBytecode='124' classname='securitytest.injection.KotlinLogging' start='27' end='27' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='124'><Message>At KotlinLogging.kt:[line 27]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='60040db977ab875e7e7c27753898166f' cweid='117' rank='12' abbrev='SECCRLFLOG' category='SECURITY' priority='2' type='CRLF_INJECTION_LOGS' instanceOccurrenceMax='0'><ShortMessage>Potential CRLF Injection for logs</ShortMessage><LongMessage>This use of java/util/logging/Logger.logrb(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/util/ResourceBundle;Ljava/lang/String;[Ljava/lang/Object;)V might be used to include CRLF characters into log messages</LongMessage><Class classname='securitytest.injection.KotlinLogging' primary='true'><SourceLine classname='securitytest.injection.KotlinLogging' start='8' end='90' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt'><Message>At KotlinLogging.kt:[lines 8-90]</Message></SourceLine><Message>In class securitytest.injection.KotlinLogging</Message></Class><Method isStatic='false' classname='securitytest.injection.KotlinLogging' signature='()V' name='javaUtilLogging' primary='true'><SourceLine endBytecode='1683' classname='securitytest.injection.KotlinLogging' start='12' end='61' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='0'></SourceLine><Message>In method securitytest.injection.KotlinLogging.javaUtilLogging()</Message></Method><SourceLine endBytecode='478' classname='securitytest.injection.KotlinLogging' start='40' end='40' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='478' primary='true'><Message>At KotlinLogging.kt:[line 40]</Message></SourceLine><String role='Sink method' value='java/util/logging/Logger.logrb(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/util/ResourceBundle;Ljava/lang/String;[Ljava/lang/Object;)V'><Message>Sink method java/util/logging/Logger.logrb(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/util/ResourceBundle;Ljava/lang/String;[Ljava/lang/Object;)V</Message></String><String role='Sink parameter' value='0'><Message>Sink parameter 0</Message></String><String role='Tainted source' value='javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;'><Message>Tainted source javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;</Message></String><SourceLine endBytecode='9' classname='securitytest.injection.KotlinLogging' start='12' end='12' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='9'><Message>At KotlinLogging.kt:[line 12]</Message></SourceLine><SourceLine endBytecode='124' classname='securitytest.injection.KotlinLogging' start='27' end='27' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='124'><Message>At KotlinLogging.kt:[line 27]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='450881b72d1ef46770bd09efdbec511f' cweid='117' rank='12' abbrev='SECCRLFLOG' category='SECURITY' priority='2' type='CRLF_INJECTION_LOGS' instanceOccurrenceMax='0'><ShortMessage>Potential CRLF Injection for logs</ShortMessage><LongMessage>This use of java/util/logging/Logger.logrb(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/util/ResourceBundle;Ljava/lang/String;Ljava/lang/Throwable;)V might be used to include CRLF characters into log messages</LongMessage><Class classname='securitytest.injection.KotlinLogging' primary='true'><SourceLine classname='securitytest.injection.KotlinLogging' start='8' end='90' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt'><Message>At KotlinLogging.kt:[lines 8-90]</Message></SourceLine><Message>In class securitytest.injection.KotlinLogging</Message></Class><Method isStatic='false' classname='securitytest.injection.KotlinLogging' signature='()V' name='javaUtilLogging' primary='true'><SourceLine endBytecode='1683' classname='securitytest.injection.KotlinLogging' start='12' end='61' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='0'></SourceLine><Message>In method securitytest.injection.KotlinLogging.javaUtilLogging()</Message></Method><SourceLine endBytecode='502' classname='securitytest.injection.KotlinLogging' start='41' end='41' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='502' primary='true'><Message>At KotlinLogging.kt:[line 41]</Message></SourceLine><String role='Sink method' value='java/util/logging/Logger.logrb(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/util/ResourceBundle;Ljava/lang/String;Ljava/lang/Throwable;)V'><Message>Sink method java/util/logging/Logger.logrb(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/util/ResourceBundle;Ljava/lang/String;Ljava/lang/Throwable;)V</Message></String><String role='Sink parameter' value='4'><Message>Sink parameter 4</Message></String><String role='Tainted source' value='javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;'><Message>Tainted source javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;</Message></String><SourceLine endBytecode='9' classname='securitytest.injection.KotlinLogging' start='12' end='12' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='9'><Message>At KotlinLogging.kt:[line 12]</Message></SourceLine><SourceLine endBytecode='124' classname='securitytest.injection.KotlinLogging' start='27' end='27' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='124'><Message>At KotlinLogging.kt:[line 27]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='8ad9f232467f35dea8f365d7fbd9bc0' cweid='117' rank='12' abbrev='SECCRLFLOG' category='SECURITY' priority='2' type='CRLF_INJECTION_LOGS' instanceOccurrenceMax='0'><ShortMessage>Potential CRLF Injection for logs</ShortMessage><LongMessage>This use of java/util/logging/Logger.logrb(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V might be used to include CRLF characters into log messages</LongMessage><Class classname='securitytest.injection.KotlinLogging' primary='true'><SourceLine classname='securitytest.injection.KotlinLogging' start='8' end='90' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt'><Message>At KotlinLogging.kt:[lines 8-90]</Message></SourceLine><Message>In class securitytest.injection.KotlinLogging</Message></Class><Method isStatic='false' classname='securitytest.injection.KotlinLogging' signature='()V' name='javaUtilLogging' primary='true'><SourceLine endBytecode='1683' classname='securitytest.injection.KotlinLogging' start='12' end='61' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='0'></SourceLine><Message>In method securitytest.injection.KotlinLogging.javaUtilLogging()</Message></Method><SourceLine endBytecode='514' classname='securitytest.injection.KotlinLogging' start='42' end='42' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='514' primary='true'><Message>At KotlinLogging.kt:[line 42]</Message></SourceLine><String role='Sink method' value='java/util/logging/Logger.logrb(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V'><Message>Sink method java/util/logging/Logger.logrb(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V</Message></String><String role='Sink parameter' value='3'><Message>Sink parameter 3</Message></String><String role='Tainted source' value='javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;'><Message>Tainted source javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;</Message></String><SourceLine endBytecode='9' classname='securitytest.injection.KotlinLogging' start='12' end='12' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='9'><Message>At KotlinLogging.kt:[line 12]</Message></SourceLine><SourceLine endBytecode='124' classname='securitytest.injection.KotlinLogging' start='27' end='27' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='124'><Message>At KotlinLogging.kt:[line 27]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='505f5c00ae628045cdaa083e5b2488c' cweid='117' rank='12' abbrev='SECCRLFLOG' category='SECURITY' priority='2' type='CRLF_INJECTION_LOGS' instanceOccurrenceMax='0'><ShortMessage>Potential CRLF Injection for logs</ShortMessage><LongMessage>This use of java/util/logging/Logger.logrb(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V might be used to include CRLF characters into log messages</LongMessage><Class classname='securitytest.injection.KotlinLogging' primary='true'><SourceLine classname='securitytest.injection.KotlinLogging' start='8' end='90' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt'><Message>At KotlinLogging.kt:[lines 8-90]</Message></SourceLine><Message>In class securitytest.injection.KotlinLogging</Message></Class><Method isStatic='false' classname='securitytest.injection.KotlinLogging' signature='()V' name='javaUtilLogging' primary='true'><SourceLine endBytecode='1683' classname='securitytest.injection.KotlinLogging' start='12' end='61' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='0'></SourceLine><Message>In method securitytest.injection.KotlinLogging.javaUtilLogging()</Message></Method><SourceLine endBytecode='527' classname='securitytest.injection.KotlinLogging' start='43' end='43' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='527' primary='true'><Message>At KotlinLogging.kt:[line 43]</Message></SourceLine><String role='Sink method' value='java/util/logging/Logger.logrb(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V'><Message>Sink method java/util/logging/Logger.logrb(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V</Message></String><String role='Sink parameter' value='3'><Message>Sink parameter 3</Message></String><String role='Tainted source' value='javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;'><Message>Tainted source javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;</Message></String><SourceLine endBytecode='9' classname='securitytest.injection.KotlinLogging' start='12' end='12' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='9'><Message>At KotlinLogging.kt:[line 12]</Message></SourceLine><SourceLine endBytecode='124' classname='securitytest.injection.KotlinLogging' start='27' end='27' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='124'><Message>At KotlinLogging.kt:[line 27]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='6a730b6743a15eb75dcfe52a6e7c81ac' cweid='117' rank='12' abbrev='SECCRLFLOG' category='SECURITY' priority='2' type='CRLF_INJECTION_LOGS' instanceOccurrenceMax='0'><ShortMessage>Potential CRLF Injection for logs</ShortMessage><LongMessage>This use of java/util/logging/Logger.logrb(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)V might be used to include CRLF characters into log messages</LongMessage><Class classname='securitytest.injection.KotlinLogging' primary='true'><SourceLine classname='securitytest.injection.KotlinLogging' start='8' end='90' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt'><Message>At KotlinLogging.kt:[lines 8-90]</Message></SourceLine><Message>In class securitytest.injection.KotlinLogging</Message></Class><Method isStatic='false' classname='securitytest.injection.KotlinLogging' signature='()V' name='javaUtilLogging' primary='true'><SourceLine endBytecode='1683' classname='securitytest.injection.KotlinLogging' start='12' end='61' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='0'></SourceLine><Message>In method securitytest.injection.KotlinLogging.javaUtilLogging()</Message></Method><SourceLine endBytecode='548' classname='securitytest.injection.KotlinLogging' start='44' end='44' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='548' primary='true'><Message>At KotlinLogging.kt:[line 44]</Message></SourceLine><String role='Sink method' value='java/util/logging/Logger.logrb(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)V'><Message>Sink method java/util/logging/Logger.logrb(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)V</Message></String><String role='Sink parameter' value='4'><Message>Sink parameter 4</Message></String><String role='Tainted source' value='javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;'><Message>Tainted source javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;</Message></String><SourceLine endBytecode='9' classname='securitytest.injection.KotlinLogging' start='12' end='12' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='9'><Message>At KotlinLogging.kt:[line 12]</Message></SourceLine><SourceLine endBytecode='124' classname='securitytest.injection.KotlinLogging' start='27' end='27' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='124'><Message>At KotlinLogging.kt:[line 27]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='59aecb9b2c8567499903368d9f6ca072' cweid='117' rank='12' abbrev='SECCRLFLOG' category='SECURITY' priority='2' type='CRLF_INJECTION_LOGS' instanceOccurrenceMax='0'><ShortMessage>Potential CRLF Injection for logs</ShortMessage><LongMessage>This use of java/util/logging/Logger.logrb(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V might be used to include CRLF characters into log messages</LongMessage><Class classname='securitytest.injection.KotlinLogging' primary='true'><SourceLine classname='securitytest.injection.KotlinLogging' start='8' end='90' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt'><Message>At KotlinLogging.kt:[lines 8-90]</Message></SourceLine><Message>In class securitytest.injection.KotlinLogging</Message></Class><Method isStatic='false' classname='securitytest.injection.KotlinLogging' signature='()V' name='javaUtilLogging' primary='true'><SourceLine endBytecode='1683' classname='securitytest.injection.KotlinLogging' start='12' end='61' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='0'></SourceLine><Message>In method securitytest.injection.KotlinLogging.javaUtilLogging()</Message></Method><SourceLine endBytecode='570' classname='securitytest.injection.KotlinLogging' start='45' end='45' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='570' primary='true'><Message>At KotlinLogging.kt:[line 45]</Message></SourceLine><String role='Sink method' value='java/util/logging/Logger.logrb(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V'><Message>Sink method java/util/logging/Logger.logrb(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V</Message></String><String role='Sink parameter' value='1'><Message>Sink parameter 1</Message></String><String role='Tainted source' value='javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;'><Message>Tainted source javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;</Message></String><SourceLine endBytecode='9' classname='securitytest.injection.KotlinLogging' start='12' end='12' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='9'><Message>At KotlinLogging.kt:[line 12]</Message></SourceLine><SourceLine endBytecode='124' classname='securitytest.injection.KotlinLogging' start='27' end='27' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='124'><Message>At KotlinLogging.kt:[line 27]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='19df971bd2753393635d887300c2cdfc' cweid='117' rank='12' abbrev='SECCRLFLOG' category='SECURITY' priority='2' type='CRLF_INJECTION_LOGS' instanceOccurrenceMax='0'><ShortMessage>Potential CRLF Injection for logs</ShortMessage><LongMessage>This use of java/util/logging/Logger.severe(Ljava/lang/String;)V might be used to include CRLF characters into log messages</LongMessage><Class classname='securitytest.injection.KotlinLogging' primary='true'><SourceLine classname='securitytest.injection.KotlinLogging' start='8' end='90' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt'><Message>At KotlinLogging.kt:[lines 8-90]</Message></SourceLine><Message>In class securitytest.injection.KotlinLogging</Message></Class><Method isStatic='false' classname='securitytest.injection.KotlinLogging' signature='()V' name='javaUtilLogging' primary='true'><SourceLine endBytecode='1683' classname='securitytest.injection.KotlinLogging' start='12' end='61' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='0'></SourceLine><Message>In method securitytest.injection.KotlinLogging.javaUtilLogging()</Message></Method><SourceLine endBytecode='597' classname='securitytest.injection.KotlinLogging' start='46' end='46' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='597' primary='true'><Message>At KotlinLogging.kt:[line 46]</Message></SourceLine><String role='Sink method' value='java/util/logging/Logger.severe(Ljava/lang/String;)V'><Message>Sink method java/util/logging/Logger.severe(Ljava/lang/String;)V</Message></String><String role='Sink parameter' value='0'><Message>Sink parameter 0</Message></String><String role='Tainted source' value='javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;'><Message>Tainted source javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;</Message></String><SourceLine endBytecode='9' classname='securitytest.injection.KotlinLogging' start='12' end='12' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='9'><Message>At KotlinLogging.kt:[line 12]</Message></SourceLine><SourceLine endBytecode='124' classname='securitytest.injection.KotlinLogging' start='27' end='27' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='124'><Message>At KotlinLogging.kt:[line 27]</Message></SourceLine><SourceLine endBytecode='582' classname='securitytest.injection.KotlinLogging' start='46' end='46' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='582'><Message>At KotlinLogging.kt:[line 46]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='2996b156be720734546b347498048a39' cweid='117' rank='12' abbrev='SECCRLFLOG' category='SECURITY' priority='2' type='CRLF_INJECTION_LOGS' instanceOccurrenceMax='0'><ShortMessage>Potential CRLF Injection for logs</ShortMessage><LongMessage>This use of java/util/logging/Logger.throwing(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V might be used to include CRLF characters into log messages</LongMessage><Class classname='securitytest.injection.KotlinLogging' primary='true'><SourceLine classname='securitytest.injection.KotlinLogging' start='8' end='90' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt'><Message>At KotlinLogging.kt:[lines 8-90]</Message></SourceLine><Message>In class securitytest.injection.KotlinLogging</Message></Class><Method isStatic='false' classname='securitytest.injection.KotlinLogging' signature='()V' name='javaUtilLogging' primary='true'><SourceLine endBytecode='1683' classname='securitytest.injection.KotlinLogging' start='12' end='61' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='0'></SourceLine><Message>In method securitytest.injection.KotlinLogging.javaUtilLogging()</Message></Method><SourceLine endBytecode='624' classname='securitytest.injection.KotlinLogging' start='47' end='47' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='624' primary='true'><Message>At KotlinLogging.kt:[line 47]</Message></SourceLine><String role='Sink method' value='java/util/logging/Logger.throwing(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V'><Message>Sink method java/util/logging/Logger.throwing(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V</Message></String><String role='Sink parameter' value='1'><Message>Sink parameter 1</Message></String><String role='Tainted source' value='javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;'><Message>Tainted source javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;</Message></String><SourceLine endBytecode='9' classname='securitytest.injection.KotlinLogging' start='12' end='12' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='9'><Message>At KotlinLogging.kt:[line 12]</Message></SourceLine><SourceLine endBytecode='124' classname='securitytest.injection.KotlinLogging' start='27' end='27' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='124'><Message>At KotlinLogging.kt:[line 27]</Message></SourceLine><SourceLine endBytecode='582' classname='securitytest.injection.KotlinLogging' start='46' end='46' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='582'><Message>At KotlinLogging.kt:[line 46]</Message></SourceLine><SourceLine endBytecode='611' classname='securitytest.injection.KotlinLogging' start='47' end='47' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='611'><Message>At KotlinLogging.kt:[line 47]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='96c1b9061108998577c14b741caf36d4' cweid='117' rank='12' abbrev='SECCRLFLOG' category='SECURITY' priority='2' type='CRLF_INJECTION_LOGS' instanceOccurrenceMax='0'><ShortMessage>Potential CRLF Injection for logs</ShortMessage><LongMessage>This use of java/util/logging/Logger.warning(Ljava/lang/String;)V might be used to include CRLF characters into log messages</LongMessage><Class classname='securitytest.injection.KotlinLogging' primary='true'><SourceLine classname='securitytest.injection.KotlinLogging' start='8' end='90' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt'><Message>At KotlinLogging.kt:[lines 8-90]</Message></SourceLine><Message>In class securitytest.injection.KotlinLogging</Message></Class><Method isStatic='false' classname='securitytest.injection.KotlinLogging' signature='()V' name='javaUtilLogging' primary='true'><SourceLine endBytecode='1683' classname='securitytest.injection.KotlinLogging' start='12' end='61' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='0'></SourceLine><Message>In method securitytest.injection.KotlinLogging.javaUtilLogging()</Message></Method><SourceLine endBytecode='668' classname='securitytest.injection.KotlinLogging' start='48' end='48' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='668' primary='true'><Message>At KotlinLogging.kt:[line 48]</Message></SourceLine><String role='Sink method' value='java/util/logging/Logger.warning(Ljava/lang/String;)V'><Message>Sink method java/util/logging/Logger.warning(Ljava/lang/String;)V</Message></String><String role='Sink parameter' value='0'><Message>Sink parameter 0</Message></String><String role='Tainted source' value='javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;'><Message>Tainted source javax/servlet/http/HttpServletRequest.getParameter(Ljava/lang/String;)Ljava/lang/String;</Message></String><SourceLine endBytecode='9' classname='securitytest.injection.KotlinLogging' start='12' end='12' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='9'><Message>At KotlinLogging.kt:[line 12]</Message></SourceLine><SourceLine endBytecode='124' classname='securitytest.injection.KotlinLogging' start='27' end='27' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='124'><Message>At KotlinLogging.kt:[line 27]</Message></SourceLine><SourceLine endBytecode='582' classname='securitytest.injection.KotlinLogging' start='46' end='46' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='582'><Message>At KotlinLogging.kt:[line 46]</Message></SourceLine><SourceLine endBytecode='665' classname='securitytest.injection.KotlinLogging' start='48' end='48' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='665'><Message>At KotlinLogging.kt:[line 48]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='a5fc09fa15bc1a251f2a9ebe3c0d62ea' rank='15' abbrev='SECSP' category='SECURITY' priority='3' type='SERVLET_PARAMETER' instanceOccurrenceMax='0'><ShortMessage>Untrusted servlet parameter</ShortMessage><LongMessage>The method getParameter returns a String value that is controlled by the client</LongMessage><Class classname='securitytest.injection.KotlinLogging' primary='true'><SourceLine classname='securitytest.injection.KotlinLogging' start='8' end='90' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt'><Message>At KotlinLogging.kt:[lines 8-90]</Message></SourceLine><Message>In class securitytest.injection.KotlinLogging</Message></Class><Method isStatic='false' classname='securitytest.injection.KotlinLogging' signature='()V' name='javaUtilLogging' primary='true'><SourceLine endBytecode='1683' classname='securitytest.injection.KotlinLogging' start='12' end='61' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='0'></SourceLine><Message>In method securitytest.injection.KotlinLogging.javaUtilLogging()</Message></Method><SourceLine endBytecode='9' classname='securitytest.injection.KotlinLogging' start='12' end='12' sourcepath='securitytest/injection/KotlinLogging.kt' sourcefile='KotlinLogging.kt' startBytecode='9' primary='true'><Message>At KotlinLogging.kt:[line 12]</Message></SourceLine><String value='getParameter'><Message>Value getParameter</Message></String></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='289ea24344b3d5184f02d89e4ffb272d' rank='15' abbrev='SECSC' category='SECURITY' priority='3' type='SPRING_ENDPOINT' instanceOccurrenceMax='0'><ShortMessage>Found Spring endpoint</ShortMessage><LongMessage>securitytest.injection.KotlinSSRFController is a Spring endpoint (Controller)</LongMessage><Class classname='securitytest.injection.KotlinSSRFController' primary='true'><SourceLine classname='securitytest.injection.KotlinSSRFController' start='11' end='33' sourcepath='securitytest/injection/KotlinSSRFController.kt' sourcefile='KotlinSSRFController.kt'><Message>At KotlinSSRFController.kt:[lines 11-33]</Message></SourceLine><Message>In class securitytest.injection.KotlinSSRFController</Message></Class><Method isStatic='false' classname='securitytest.injection.KotlinSSRFController' signature='(Ljava/lang/String;)Ljava/lang/String;' name='kotlinssrf' primary='true'><SourceLine endBytecode='397' classname='securitytest.injection.KotlinSSRFController' start='15' end='33' sourcepath='securitytest/injection/KotlinSSRFController.kt' sourcefile='KotlinSSRFController.kt' startBytecode='0'></SourceLine><Message>In method securitytest.injection.KotlinSSRFController.kotlinssrf(String)</Message></Method><SourceLine synthetic='true' endBytecode='397' classname='securitytest.injection.KotlinSSRFController' start='15' end='33' sourcepath='securitytest/injection/KotlinSSRFController.kt' sourcefile='KotlinSSRFController.kt' startBytecode='0'><Message>At KotlinSSRFController.kt:[lines 15-33]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='79068bc1eb3c0d37f14e4c4c97e671d8' cweid='117' rank='15' abbrev='SECCRLFLOG' category='SECURITY' priority='3' type='CRLF_INJECTION_LOGS' instanceOccurrenceMax='0'><ShortMessage>Potential CRLF Injection for logs</ShortMessage><LongMessage>This use of org/slf4j/Logger.info(Ljava/lang/String;)V might be used to include CRLF characters into log messages</LongMessage><Class classname='securitytest.injection.KotlinSlf4jSample' primary='true'><SourceLine classname='securitytest.injection.KotlinSlf4jSample' start='5' end='24' sourcepath='securitytest/injection/KotlinSlf4jSample.kt' sourcefile='KotlinSlf4jSample.kt'><Message>At KotlinSlf4jSample.kt:[lines 5-24]</Message></SourceLine><Message>In class securitytest.injection.KotlinSlf4jSample</Message></Class><Method isStatic='false' classname='securitytest.injection.KotlinSlf4jSample' signature='(Lorg/slf4j/Logger;Lsecuritytest/injection/KotlinSlf4jSample$DataClass;Ljava/lang/String;)V' name='slf4j' primary='true'><SourceLine endBytecode='292' classname='securitytest.injection.KotlinSlf4jSample' start='8' end='24' sourcepath='securitytest/injection/KotlinSlf4jSample.kt' sourcefile='KotlinSlf4jSample.kt' startBytecode='0'></SourceLine><Message>In method securitytest.injection.KotlinSlf4jSample.slf4j(Logger, KotlinSlf4jSample$DataClass, String)</Message></Method><SourceLine endBytecode='27' classname='securitytest.injection.KotlinSlf4jSample' start='10' end='10' sourcepath='securitytest/injection/KotlinSlf4jSample.kt' sourcefile='KotlinSlf4jSample.kt' startBytecode='27' primary='true'><Message>At KotlinSlf4jSample.kt:[line 10]</Message></SourceLine><String role='Sink method' value='org/slf4j/Logger.info(Ljava/lang/String;)V'><Message>Sink method org/slf4j/Logger.info(Ljava/lang/String;)V</Message></String><String role='Sink parameter' value='0'><Message>Sink parameter 0</Message></String><String role='Unknown source' value='securitytest/injection/KotlinSlf4jSample$DataClass.input'><Message>Unknown source securitytest/injection/KotlinSlf4jSample$DataClass.input</Message></String><String role='Unknown source' value='securitytest/injection/KotlinSlf4jSample$DataClass.getInput()Ljava/lang/String;'><Message>Unknown source securitytest/injection/KotlinSlf4jSample$DataClass.getInput()Ljava/lang/String;</Message></String><SourceLine endBytecode='24' classname='securitytest.injection.KotlinSlf4jSample' start='10' end='10' sourcepath='securitytest/injection/KotlinSlf4jSample.kt' sourcefile='KotlinSlf4jSample.kt' startBytecode='24'><Message>At KotlinSlf4jSample.kt:[line 10]</Message></SourceLine><SourceLine endBytecode='1' classname='securitytest.injection.KotlinSlf4jSample$DataClass' start='27' end='27' sourcepath='securitytest/injection/KotlinSlf4jSample.kt' sourcefile='KotlinSlf4jSample.kt' startBytecode='1'><Message>At KotlinSlf4jSample.kt:[line 27]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='e00c9624bcad6c2708a6cb44cf7d33ce' cweid='117' rank='15' abbrev='SECCRLFLOG' category='SECURITY' priority='3' type='CRLF_INJECTION_LOGS' instanceOccurrenceMax='0'><ShortMessage>Potential CRLF Injection for logs</ShortMessage><LongMessage>This use of org/slf4j/Logger.info(Ljava/lang/String;Ljava/lang/Object;)V might be used to include CRLF characters into log messages</LongMessage><Class classname='securitytest.injection.KotlinSlf4jSample' primary='true'><SourceLine classname='securitytest.injection.KotlinSlf4jSample' start='5' end='24' sourcepath='securitytest/injection/KotlinSlf4jSample.kt' sourcefile='KotlinSlf4jSample.kt'><Message>At KotlinSlf4jSample.kt:[lines 5-24]</Message></SourceLine><Message>In class securitytest.injection.KotlinSlf4jSample</Message></Class><Method isStatic='false' classname='securitytest.injection.KotlinSlf4jSample' signature='(Lorg/slf4j/Logger;Lsecuritytest/injection/KotlinSlf4jSample$DataClass;Ljava/lang/String;)V' name='slf4j' primary='true'><SourceLine endBytecode='292' classname='securitytest.injection.KotlinSlf4jSample' start='8' end='24' sourcepath='securitytest/injection/KotlinSlf4jSample.kt' sourcefile='KotlinSlf4jSample.kt' startBytecode='0'></SourceLine><Message>In method securitytest.injection.KotlinSlf4jSample.slf4j(Logger, KotlinSlf4jSample$DataClass, String)</Message></Method><SourceLine endBytecode='39' classname='securitytest.injection.KotlinSlf4jSample' start='11' end='11' sourcepath='securitytest/injection/KotlinSlf4jSample.kt' sourcefile='KotlinSlf4jSample.kt' startBytecode='39' primary='true'><Message>At KotlinSlf4jSample.kt:[line 11]</Message></SourceLine><String role='Sink method' value='org/slf4j/Logger.info(Ljava/lang/String;Ljava/lang/Object;)V'><Message>Sink method org/slf4j/Logger.info(Ljava/lang/String;Ljava/lang/Object;)V</Message></String><String role='Sink parameter' value='1'><Message>Sink parameter 1</Message></String><String role='Unknown source' value='securitytest/injection/KotlinSlf4jSample$DataClass.input'><Message>Unknown source securitytest/injection/KotlinSlf4jSample$DataClass.input</Message></String><String role='Unknown source' value='securitytest/injection/KotlinSlf4jSample$DataClass.getInput()Ljava/lang/String;'><Message>Unknown source securitytest/injection/KotlinSlf4jSample$DataClass.getInput()Ljava/lang/String;</Message></String><SourceLine endBytecode='34' classname='securitytest.injection.KotlinSlf4jSample' start='11' end='11' sourcepath='securitytest/injection/KotlinSlf4jSample.kt' sourcefile='KotlinSlf4jSample.kt' startBytecode='34'><Message>At KotlinSlf4jSample.kt:[line 11]</Message></SourceLine><SourceLine endBytecode='1' classname='securitytest.injection.KotlinSlf4jSample$DataClass' start='27' end='27' sourcepath='securitytest/injection/KotlinSlf4jSample.kt' sourcefile='KotlinSlf4jSample.kt' startBytecode='1'><Message>At KotlinSlf4jSample.kt:[line 27]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='2c4e6a61af26848a29e9d823e53c756f' cweid='117' rank='15' abbrev='SECCRLFLOG' category='SECURITY' priority='3' type='CRLF_INJECTION_LOGS' instanceOccurrenceMax='1'><ShortMessage>Potential CRLF Injection for logs</ShortMessage><LongMessage>This use of org/slf4j/Logger.info(Ljava/lang/String;Ljava/lang/Object;)V might be used to include CRLF characters into log messages</LongMessage><Class classname='securitytest.injection.KotlinSlf4jSample' primary='true'><SourceLine classname='securitytest.injection.KotlinSlf4jSample' start='5' end='24' sourcepath='securitytest/injection/KotlinSlf4jSample.kt' sourcefile='KotlinSlf4jSample.kt'><Message>At KotlinSlf4jSample.kt:[lines 5-24]</Message></SourceLine><Message>In class securitytest.injection.KotlinSlf4jSample</Message></Class><Method isStatic='false' classname='securitytest.injection.KotlinSlf4jSample' signature='(Lorg/slf4j/Logger;Lsecuritytest/injection/KotlinSlf4jSample$DataClass;Ljava/lang/String;)V' name='slf4j' primary='true'><SourceLine endBytecode='292' classname='securitytest.injection.KotlinSlf4jSample' start='8' end='24' sourcepath='securitytest/injection/KotlinSlf4jSample.kt' sourcefile='KotlinSlf4jSample.kt' startBytecode='0'></SourceLine><Message>In method securitytest.injection.KotlinSlf4jSample.slf4j(Logger, KotlinSlf4jSample$DataClass, String)</Message></Method><SourceLine endBytecode='51' classname='securitytest.injection.KotlinSlf4jSample' start='12' end='12' sourcepath='securitytest/injection/KotlinSlf4jSample.kt' sourcefile='KotlinSlf4jSample.kt' startBytecode='51' primary='true'><Message>At KotlinSlf4jSample.kt:[line 12]</Message></SourceLine><String role='Sink method' value='org/slf4j/Logger.info(Ljava/lang/String;Ljava/lang/Object;)V'><Message>Sink method org/slf4j/Logger.info(Ljava/lang/String;Ljava/lang/Object;)V</Message></String><String role='Sink parameter' value='0'><Message>Sink parameter 0</Message></String><String role='Unknown source' value='securitytest/injection/KotlinSlf4jSample$DataClass.input'><Message>Unknown source securitytest/injection/KotlinSlf4jSample$DataClass.input</Message></String><String role='Unknown source' value='securitytest/injection/KotlinSlf4jSample$DataClass.getInput()Ljava/lang/String;'><Message>Unknown source securitytest/injection/KotlinSlf4jSample$DataClass.getInput()Ljava/lang/String;</Message></String><SourceLine endBytecode='48' classname='securitytest.injection.KotlinSlf4jSample' start='12' end='12' sourcepath='securitytest/injection/KotlinSlf4jSample.kt' sourcefile='KotlinSlf4jSample.kt' startBytecode='48'><Message>At KotlinSlf4jSample.kt:[line 12]</Message></SourceLine><SourceLine endBytecode='1' classname='securitytest.injection.KotlinSlf4jSample$DataClass' start='27' end='27' sourcepath='securitytest/injection/KotlinSlf4jSample.kt' sourcefile='KotlinSlf4jSample.kt' startBytecode='1'><Message>At KotlinSlf4jSample.kt:[line 27]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='1' instanceHash='2c4e6a61af26848a29e9d823e53c756f' cweid='117' rank='15' abbrev='SECCRLFLOG' category='SECURITY' priority='3' type='CRLF_INJECTION_LOGS' instanceOccurrenceMax='1'><ShortMessage>Potential CRLF Injection for logs</ShortMessage><LongMessage>This use of org/slf4j/Logger.info(Ljava/lang/String;Ljava/lang/Object;)V might be used to include CRLF characters into log messages</LongMessage><Class classname='securitytest.injection.KotlinSlf4jSample' primary='true'><SourceLine classname='securitytest.injection.KotlinSlf4jSample' start='5' end='24' sourcepath='securitytest/injection/KotlinSlf4jSample.kt' sourcefile='KotlinSlf4jSample.kt'><Message>At KotlinSlf4jSample.kt:[lines 5-24]</Message></SourceLine><Message>In class securitytest.injection.KotlinSlf4jSample</Message></Class><Method isStatic='false' classname='securitytest.injection.KotlinSlf4jSample' signature='(Lorg/slf4j/Logger;Lsecuritytest/injection/KotlinSlf4jSample$DataClass;Ljava/lang/String;)V' name='slf4j' primary='true'><SourceLine endBytecode='292' classname='securitytest.injection.KotlinSlf4jSample' start='8' end='24' sourcepath='securitytest/injection/KotlinSlf4jSample.kt' sourcefile='KotlinSlf4jSample.kt' startBytecode='0'></SourceLine><Message>In method securitytest.injection.KotlinSlf4jSample.slf4j(Logger, KotlinSlf4jSample$DataClass, String)</Message></Method><SourceLine endBytecode='74' classname='securitytest.injection.KotlinSlf4jSample' start='13' end='13' sourcepath='securitytest/injection/KotlinSlf4jSample.kt' sourcefile='KotlinSlf4jSample.kt' startBytecode='74' primary='true'><Message>At KotlinSlf4jSample.kt:[line 13]</Message></SourceLine><String role='Sink method' value='org/slf4j/Logger.info(Ljava/lang/String;Ljava/lang/Object;)V'><Message>Sink method org/slf4j/Logger.info(Ljava/lang/String;Ljava/lang/Object;)V</Message></String><String role='Sink parameter' value='0'><Message>Sink parameter 0</Message></String><String role='Unknown source' value='securitytest/injection/KotlinSlf4jSample$DataClass.input'><Message>Unknown source securitytest/injection/KotlinSlf4jSample$DataClass.input</Message></String><String role='Unknown source' value='securitytest/injection/KotlinSlf4jSample$DataClass.getInput()Ljava/lang/String;'><Message>Unknown source securitytest/injection/KotlinSlf4jSample$DataClass.getInput()Ljava/lang/String;</Message></String><SourceLine endBytecode='66' classname='securitytest.injection.KotlinSlf4jSample' start='13' end='13' sourcepath='securitytest/injection/KotlinSlf4jSample.kt' sourcefile='KotlinSlf4jSample.kt' startBytecode='66'><Message>At KotlinSlf4jSample.kt:[line 13]</Message></SourceLine><SourceLine endBytecode='1' classname='securitytest.injection.KotlinSlf4jSample$DataClass' start='27' end='27' sourcepath='securitytest/injection/KotlinSlf4jSample.kt' sourcefile='KotlinSlf4jSample.kt' startBytecode='1'><Message>At KotlinSlf4jSample.kt:[line 27]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='dc9e9a2dbcf2beacfc317f339300bc5f' cweid='117' rank='15' abbrev='SECCRLFLOG' category='SECURITY' priority='3' type='CRLF_INJECTION_LOGS' instanceOccurrenceMax='0'><ShortMessage>Potential CRLF Injection for logs</ShortMessage><LongMessage>This use of org/slf4j/Logger.info(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V might be used to include CRLF characters into log messages</LongMessage><Class classname='securitytest.injection.KotlinSlf4jSample' primary='true'><SourceLine classname='securitytest.injection.KotlinSlf4jSample' start='5' end='24' sourcepath='securitytest/injection/KotlinSlf4jSample.kt' sourcefile='KotlinSlf4jSample.kt'><Message>At KotlinSlf4jSample.kt:[lines 5-24]</Message></SourceLine><Message>In class securitytest.injection.KotlinSlf4jSample</Message></Class><Method isStatic='false' classname='securitytest.injection.KotlinSlf4jSample' signature='(Lorg/slf4j/Logger;Lsecuritytest/injection/KotlinSlf4jSample$DataClass;Ljava/lang/String;)V' name='slf4j' primary='true'><SourceLine endBytecode='292' classname='securitytest.injection.KotlinSlf4jSample' start='8' end='24' sourcepath='securitytest/injection/KotlinSlf4jSample.kt' sourcefile='KotlinSlf4jSample.kt' startBytecode='0'></SourceLine><Message>In method securitytest.injection.KotlinSlf4jSample.slf4j(Logger, KotlinSlf4jSample$DataClass, String)</Message></Method><SourceLine endBytecode='88' classname='securitytest.injection.KotlinSlf4jSample' start='14' end='14' sourcepath='securitytest/injection/KotlinSlf4jSample.kt' sourcefile='KotlinSlf4jSample.kt' startBytecode='88' primary='true'><Message>At KotlinSlf4jSample.kt:[line 14]</Message></SourceLine><String role='Sink method' value='org/slf4j/Logger.info(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V'><Message>Sink method org/slf4j/Logger.info(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V</Message></String><String role='Sink parameter' value='0'><Message>Sink parameter 0</Message></String><String role='Unknown source' value='securitytest/injection/KotlinSlf4jSample$DataClass.input'><Message>Unknown source securitytest/injection/KotlinSlf4jSample$DataClass.input</Message></String><String role='Unknown source' value='securitytest/injection/KotlinSlf4jSample$DataClass.getInput()Ljava/lang/String;'><Message>Unknown source securitytest/injection/KotlinSlf4jSample$DataClass.getInput()Ljava/lang/String;</Message></String><SourceLine endBytecode='85' classname='securitytest.injection.KotlinSlf4jSample' start='14' end='14' sourcepath='securitytest/injection/KotlinSlf4jSample.kt' sourcefile='KotlinSlf4jSample.kt' startBytecode='85'><Message>At KotlinSlf4jSample.kt:[line 14]</Message></SourceLine><SourceLine endBytecode='1' classname='securitytest.injection.KotlinSlf4jSample$DataClass' start='27' end='27' sourcepath='securitytest/injection/KotlinSlf4jSample.kt' sourcefile='KotlinSlf4jSample.kt' startBytecode='1'><Message>At KotlinSlf4jSample.kt:[line 27]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='20c1986ea2819e4b514115717e584dac' cweid='117' rank='15' abbrev='SECCRLFLOG' category='SECURITY' priority='3' type='CRLF_INJECTION_LOGS' instanceOccurrenceMax='0'><ShortMessage>Potential CRLF Injection for logs</ShortMessage><LongMessage>This use of org/slf4j/Logger.info(Ljava/lang/String;)V might be used to include CRLF characters into log messages</LongMessage><Class classname='securitytest.injection.KotlinSlf4jSample' primary='true'><SourceLine classname='securitytest.injection.KotlinSlf4jSample' start='5' end='24' sourcepath='securitytest/injection/KotlinSlf4jSample.kt' sourcefile='KotlinSlf4jSample.kt'><Message>At KotlinSlf4jSample.kt:[lines 5-24]</Message></SourceLine><Message>In class securitytest.injection.KotlinSlf4jSample</Message></Class><Method isStatic='false' classname='securitytest.injection.KotlinSlf4jSample' signature='(Lorg/slf4j/Logger;Lsecuritytest/injection/KotlinSlf4jSample$DataClass;Ljava/lang/String;)V' name='slf4j' primary='true'><SourceLine endBytecode='292' classname='securitytest.injection.KotlinSlf4jSample' start='8' end='24' sourcepath='securitytest/injection/KotlinSlf4jSample.kt' sourcefile='KotlinSlf4jSample.kt' startBytecode='0'></SourceLine><Message>In method securitytest.injection.KotlinSlf4jSample.slf4j(Logger, KotlinSlf4jSample$DataClass, String)</Message></Method><SourceLine endBytecode='95' classname='securitytest.injection.KotlinSlf4jSample' start='15' end='15' sourcepath='securitytest/injection/KotlinSlf4jSample.kt' sourcefile='KotlinSlf4jSample.kt' startBytecode='95' primary='true'><Message>At KotlinSlf4jSample.kt:[line 15]</Message></SourceLine><String role='Sink method' value='org/slf4j/Logger.info(Ljava/lang/String;)V'><Message>Sink method org/slf4j/Logger.info(Ljava/lang/String;)V</Message></String><String role='Sink parameter' value='0'><Message>Sink parameter 0</Message></String><String role='Unknown source' value='securitytest/injection/KotlinSlf4jSample.slf4j(Lorg/slf4j/Logger;Lsecuritytest/injection/KotlinSlf4jSample$DataClass;Ljava/lang/String;)V parameter 0'><Message>Unknown source securitytest/injection/KotlinSlf4jSample.slf4j(Lorg/slf4j/Logger;Lsecuritytest/injection/KotlinSlf4jSample$DataClass;Ljava/lang/String;)V parameter 0</Message></String><String role='Method usage' value='not detected'><Message>Method usage not detected</Message></String><SourceLine endBytecode='15' classname='securitytest.injection.KotlinSlf4jSample' sourcepath='securitytest/injection/KotlinSlf4jSample.kt' sourcefile='KotlinSlf4jSample.kt' startBytecode='15'><Message>In KotlinSlf4jSample.kt</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='f657f86fd9ebf7b5a7296622071f2b6a' cweid='117' rank='15' abbrev='SECCRLFLOG' category='SECURITY' priority='3' type='CRLF_INJECTION_LOGS' instanceOccurrenceMax='0'><ShortMessage>Potential CRLF Injection for logs</ShortMessage><LongMessage>This use of org/slf4j/Logger.info(Ljava/lang/String;Ljava/lang/Object;)V might be used to include CRLF characters into log messages</LongMessage><Class classname='securitytest.injection.KotlinSlf4jSample' primary='true'><SourceLine classname='securitytest.injection.KotlinSlf4jSample' start='5' end='24' sourcepath='securitytest/injection/KotlinSlf4jSample.kt' sourcefile='KotlinSlf4jSample.kt'><Message>At KotlinSlf4jSample.kt:[lines 5-24]</Message></SourceLine><Message>In class securitytest.injection.KotlinSlf4jSample</Message></Class><Method isStatic='false' classname='securitytest.injection.KotlinSlf4jSample' signature='(Lorg/slf4j/Logger;Lsecuritytest/injection/KotlinSlf4jSample$DataClass;Ljava/lang/String;)V' name='slf4j' primary='true'><SourceLine endBytecode='292' classname='securitytest.injection.KotlinSlf4jSample' start='8' end='24' sourcepath='securitytest/injection/KotlinSlf4jSample.kt' sourcefile='KotlinSlf4jSample.kt' startBytecode='0'></SourceLine><Message>In method securitytest.injection.KotlinSlf4jSample.slf4j(Logger, KotlinSlf4jSample$DataClass, String)</Message></Method><SourceLine endBytecode='104' classname='securitytest.injection.KotlinSlf4jSample' start='16' end='16' sourcepath='securitytest/injection/KotlinSlf4jSample.kt' sourcefile='KotlinSlf4jSample.kt' startBytecode='104' primary='true'><Message>At KotlinSlf4jSample.kt:[line 16]</Message></SourceLine><String role='Sink method' value='org/slf4j/Logger.info(Ljava/lang/String;Ljava/lang/Object;)V'><Message>Sink method org/slf4j/Logger.info(Ljava/lang/String;Ljava/lang/Object;)V</Message></String><String role='Sink parameter' value='1'><Message>Sink parameter 1</Message></String><String role='Unknown source' value='securitytest/injection/KotlinSlf4jSample.slf4j(Lorg/slf4j/Logger;Lsecuritytest/injection/KotlinSlf4jSample$DataClass;Ljava/lang/String;)V parameter 0'><Message>Unknown source securitytest/injection/KotlinSlf4jSample.slf4j(Lorg/slf4j/Logger;Lsecuritytest/injection/KotlinSlf4jSample$DataClass;Ljava/lang/String;)V parameter 0</Message></String><String role='Method usage' value='not detected'><Message>Method usage not detected</Message></String><SourceLine endBytecode='15' classname='securitytest.injection.KotlinSlf4jSample' sourcepath='securitytest/injection/KotlinSlf4jSample.kt' sourcefile='KotlinSlf4jSample.kt' startBytecode='15'><Message>In KotlinSlf4jSample.kt</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='7a00a8ab107eb8fe5e62929a161ee404' cweid='117' rank='15' abbrev='SECCRLFLOG' category='SECURITY' priority='3' type='CRLF_INJECTION_LOGS' instanceOccurrenceMax='1'><ShortMessage>Potential CRLF Injection for logs</ShortMessage><LongMessage>This use of org/slf4j/Logger.info(Ljava/lang/String;Ljava/lang/Object;)V might be used to include CRLF characters into log messages</LongMessage><Class classname='securitytest.injection.KotlinSlf4jSample' primary='true'><SourceLine classname='securitytest.injection.KotlinSlf4jSample' start='5' end='24' sourcepath='securitytest/injection/KotlinSlf4jSample.kt' sourcefile='KotlinSlf4jSample.kt'><Message>At KotlinSlf4jSample.kt:[lines 5-24]</Message></SourceLine><Message>In class securitytest.injection.KotlinSlf4jSample</Message></Class><Method isStatic='false' classname='securitytest.injection.KotlinSlf4jSample' signature='(Lorg/slf4j/Logger;Lsecuritytest/injection/KotlinSlf4jSample$DataClass;Ljava/lang/String;)V' name='slf4j' primary='true'><SourceLine endBytecode='292' classname='securitytest.injection.KotlinSlf4jSample' start='8' end='24' sourcepath='securitytest/injection/KotlinSlf4jSample.kt' sourcefile='KotlinSlf4jSample.kt' startBytecode='0'></SourceLine><Message>In method securitytest.injection.KotlinSlf4jSample.slf4j(Logger, KotlinSlf4jSample$DataClass, String)</Message></Method><SourceLine endBytecode='113' classname='securitytest.injection.KotlinSlf4jSample' start='17' end='17' sourcepath='securitytest/injection/KotlinSlf4jSample.kt' sourcefile='KotlinSlf4jSample.kt' startBytecode='113' primary='true'><Message>At KotlinSlf4jSample.kt:[line 17]</Message></SourceLine><String role='Sink method' value='org/slf4j/Logger.info(Ljava/lang/String;Ljava/lang/Object;)V'><Message>Sink method org/slf4j/Logger.info(Ljava/lang/String;Ljava/lang/Object;)V</Message></String><String role='Sink parameter' value='0'><Message>Sink parameter 0</Message></String><String role='Unknown source' value='securitytest/injection/KotlinSlf4jSample.slf4j(Lorg/slf4j/Logger;Lsecuritytest/injection/KotlinSlf4jSample$DataClass;Ljava/lang/String;)V parameter 0'><Message>Unknown source securitytest/injection/KotlinSlf4jSample.slf4j(Lorg/slf4j/Logger;Lsecuritytest/injection/KotlinSlf4jSample$DataClass;Ljava/lang/String;)V parameter 0</Message></String><String role='Method usage' value='not detected'><Message>Method usage not detected</Message></String><SourceLine endBytecode='15' classname='securitytest.injection.KotlinSlf4jSample' sourcepath='securitytest/injection/KotlinSlf4jSample.kt' sourcefile='KotlinSlf4jSample.kt' startBytecode='15'><Message>In KotlinSlf4jSample.kt</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='1' instanceHash='7a00a8ab107eb8fe5e62929a161ee404' cweid='117' rank='15' abbrev='SECCRLFLOG' category='SECURITY' priority='3' type='CRLF_INJECTION_LOGS' instanceOccurrenceMax='1'><ShortMessage>Potential CRLF Injection for logs</ShortMessage><LongMessage>This use of org/slf4j/Logger.info(Ljava/lang/String;Ljava/lang/Object;)V might be used to include CRLF characters into log messages</LongMessage><Class classname='securitytest.injection.KotlinSlf4jSample' primary='true'><SourceLine classname='securitytest.injection.KotlinSlf4jSample' start='5' end='24' sourcepath='securitytest/injection/KotlinSlf4jSample.kt' sourcefile='KotlinSlf4jSample.kt'><Message>At KotlinSlf4jSample.kt:[lines 5-24]</Message></SourceLine><Message>In class securitytest.injection.KotlinSlf4jSample</Message></Class><Method isStatic='false' classname='securitytest.injection.KotlinSlf4jSample' signature='(Lorg/slf4j/Logger;Lsecuritytest/injection/KotlinSlf4jSample$DataClass;Ljava/lang/String;)V' name='slf4j' primary='true'><SourceLine endBytecode='292' classname='securitytest.injection.KotlinSlf4jSample' start='8' end='24' sourcepath='securitytest/injection/KotlinSlf4jSample.kt' sourcefile='KotlinSlf4jSample.kt' startBytecode='0'></SourceLine><Message>In method securitytest.injection.KotlinSlf4jSample.slf4j(Logger, KotlinSlf4jSample$DataClass, String)</Message></Method><SourceLine endBytecode='129' classname='securitytest.injection.KotlinSlf4jSample' start='18' end='18' sourcepath='securitytest/injection/KotlinSlf4jSample.kt' sourcefile='KotlinSlf4jSample.kt' startBytecode='129' primary='true'><Message>At KotlinSlf4jSample.kt:[line 18]</Message></SourceLine><String role='Sink method' value='org/slf4j/Logger.info(Ljava/lang/String;Ljava/lang/Object;)V'><Message>Sink method org/slf4j/Logger.info(Ljava/lang/String;Ljava/lang/Object;)V</Message></String><String role='Sink parameter' value='0'><Message>Sink parameter 0</Message></String><String role='Unknown source' value='securitytest/injection/KotlinSlf4jSample.slf4j(Lorg/slf4j/Logger;Lsecuritytest/injection/KotlinSlf4jSample$DataClass;Ljava/lang/String;)V parameter 0'><Message>Unknown source securitytest/injection/KotlinSlf4jSample.slf4j(Lorg/slf4j/Logger;Lsecuritytest/injection/KotlinSlf4jSample$DataClass;Ljava/lang/String;)V parameter 0</Message></String><String role='Method usage' value='not detected'><Message>Method usage not detected</Message></String><SourceLine endBytecode='15' classname='securitytest.injection.KotlinSlf4jSample' sourcepath='securitytest/injection/KotlinSlf4jSample.kt' sourcefile='KotlinSlf4jSample.kt' startBytecode='15'><Message>In KotlinSlf4jSample.kt</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='9505b029764ed94a3c695eace07a0079' cweid='117' rank='15' abbrev='SECCRLFLOG' category='SECURITY' priority='3' type='CRLF_INJECTION_LOGS' instanceOccurrenceMax='0'><ShortMessage>Potential CRLF Injection for logs</ShortMessage><LongMessage>This use of org/slf4j/Logger.info(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V might be used to include CRLF characters into log messages</LongMessage><Class classname='securitytest.injection.KotlinSlf4jSample' primary='true'><SourceLine classname='securitytest.injection.KotlinSlf4jSample' start='5' end='24' sourcepath='securitytest/injection/KotlinSlf4jSample.kt' sourcefile='KotlinSlf4jSample.kt'><Message>At KotlinSlf4jSample.kt:[lines 5-24]</Message></SourceLine><Message>In class securitytest.injection.KotlinSlf4jSample</Message></Class><Method isStatic='false' classname='securitytest.injection.KotlinSlf4jSample' signature='(Lorg/slf4j/Logger;Lsecuritytest/injection/KotlinSlf4jSample$DataClass;Ljava/lang/String;)V' name='slf4j' primary='true'><SourceLine endBytecode='292' classname='securitytest.injection.KotlinSlf4jSample' start='8' end='24' sourcepath='securitytest/injection/KotlinSlf4jSample.kt' sourcefile='KotlinSlf4jSample.kt' startBytecode='0'></SourceLine><Message>In method securitytest.injection.KotlinSlf4jSample.slf4j(Logger, KotlinSlf4jSample$DataClass, String)</Message></Method><SourceLine endBytecode='140' classname='securitytest.injection.KotlinSlf4jSample' start='19' end='19' sourcepath='securitytest/injection/KotlinSlf4jSample.kt' sourcefile='KotlinSlf4jSample.kt' startBytecode='140' primary='true'><Message>At KotlinSlf4jSample.kt:[line 19]</Message></SourceLine><String role='Sink method' value='org/slf4j/Logger.info(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V'><Message>Sink method org/slf4j/Logger.info(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V</Message></String><String role='Sink parameter' value='0'><Message>Sink parameter 0</Message></String><String role='Unknown source' value='securitytest/injection/KotlinSlf4jSample.slf4j(Lorg/slf4j/Logger;Lsecuritytest/injection/KotlinSlf4jSample$DataClass;Ljava/lang/String;)V parameter 0'><Message>Unknown source securitytest/injection/KotlinSlf4jSample.slf4j(Lorg/slf4j/Logger;Lsecuritytest/injection/KotlinSlf4jSample$DataClass;Ljava/lang/String;)V parameter 0</Message></String><String role='Method usage' value='not detected'><Message>Method usage not detected</Message></String><SourceLine endBytecode='15' classname='securitytest.injection.KotlinSlf4jSample' sourcepath='securitytest/injection/KotlinSlf4jSample.kt' sourcefile='KotlinSlf4jSample.kt' startBytecode='15'><Message>In KotlinSlf4jSample.kt</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='b87826663c0a04a4a68b7f9a827ee6d2' cweid='259' rank='12' abbrev='SECHCP' category='SECURITY' priority='2' type='HARD_CODE_PASSWORD' instanceOccurrenceMax='0'><ShortMessage>Hard coded password</ShortMessage><LongMessage>Hard coded password found</LongMessage><Class classname='securitytest.password.HardCode2' primary='true'><SourceLine classname='securitytest.password.HardCode2' start='11' end='54' sourcepath='securitytest/password/HardCode2.kt' sourcefile='HardCode2.kt'><Message>At HardCode2.kt:[lines 11-54]</Message></SourceLine><Message>In class securitytest.password.HardCode2</Message></Class><Method isStatic='false' classname='securitytest.password.HardCode2' signature='(Ljava/lang/String;)Ljava/lang/String;' name='kotlinssrf' primary='true'><SourceLine endBytecode='590' classname='securitytest.password.HardCode2' start='15' end='54' sourcepath='securitytest/password/HardCode2.kt' sourcefile='HardCode2.kt' startBytecode='0'></SourceLine><Message>In method securitytest.password.HardCode2.kotlinssrf(String)</Message></Method><SourceLine endBytecode='124' classname='securitytest.password.HardCode2' start='35' end='35' sourcepath='securitytest/password/HardCode2.kt' sourcefile='HardCode2.kt' startBytecode='124' primary='true'><Message>At HardCode2.kt:[line 35]</Message></SourceLine><String role='Sink method' value='kotlin/jvm/internal/Intrinsics.areEqual(Ljava/lang/Object;Ljava/lang/Object;)Z'><Message>Sink method kotlin/jvm/internal/Intrinsics.areEqual(Ljava/lang/Object;Ljava/lang/Object;)Z</Message></String><String role='Sink parameter' value='0'><Message>Sink parameter 0</Message></String></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='96be0ee35066a70deb25a1ab34e1954b' cweid='22' rank='12' abbrev='SECPTI' category='SECURITY' priority='2' type='PATH_TRAVERSAL_IN' instanceOccurrenceMax='0'><ShortMessage>Potential Path Traversal (file read)</ShortMessage><LongMessage>This API (kotlin/io/FilesKt.createTempDir$default(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;ILjava/lang/Object;)Ljava/io/File;) reads a file whose location might be specified by user input</LongMessage><Class classname='securitytest.pathtraversal.PathTraversalKotlin' primary='true'><SourceLine classname='securitytest.pathtraversal.PathTraversalKotlin' start='25' end='43' sourcepath='securitytest/pathtraversal/PathTraversalKotlin.kt' sourcefile='PathTraversalKotlin.kt'><Message>At PathTraversalKotlin.kt:[lines 25-43]</Message></SourceLine><Message>In class securitytest.pathtraversal.PathTraversalKotlin</Message></Class><Method isStatic='false' classname='securitytest.pathtraversal.PathTraversalKotlin' signature='([Ljava/lang/String;)V' name='main' primary='true'><SourceLine endBytecode='198' classname='securitytest.pathtraversal.PathTraversalKotlin' start='29' end='43' sourcepath='securitytest/pathtraversal/PathTraversalKotlin.kt' sourcefile='PathTraversalKotlin.kt' startBytecode='0'></SourceLine><Message>In method securitytest.pathtraversal.PathTraversalKotlin.main(String[])</Message></Method><SourceLine endBytecode='15' classname='securitytest.pathtraversal.PathTraversalKotlin' start='32' end='32' sourcepath='securitytest/pathtraversal/PathTraversalKotlin.kt' sourcefile='PathTraversalKotlin.kt' startBytecode='15' primary='true'><Message>At PathTraversalKotlin.kt:[line 32]</Message></SourceLine><String role='Sink method' value='kotlin/io/FilesKt.createTempDir$default(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;ILjava/lang/Object;)Ljava/io/File;'><Message>Sink method kotlin/io/FilesKt.createTempDir$default(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;ILjava/lang/Object;)Ljava/io/File;</Message></String><String role='Sink parameter' value='3'><Message>Sink parameter 3</Message></String><String role='Unknown source' value='securitytest/pathtraversal/PathTraversalKotlin.main([Ljava/lang/String;)V parameter 0'><Message>Unknown source securitytest/pathtraversal/PathTraversalKotlin.main([Ljava/lang/String;)V parameter 0</Message></String><String role='Method usage' value='not detected'><Message>Method usage not detected</Message></String><SourceLine endBytecode='3' classname='securitytest.pathtraversal.PathTraversalKotlin' sourcepath='securitytest/pathtraversal/PathTraversalKotlin.kt' sourcefile='PathTraversalKotlin.kt' startBytecode='3'><Message>In PathTraversalKotlin.kt</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='152c402b5132999eceb5a367dfc69ff9' cweid='22' rank='12' abbrev='SECPTI' category='SECURITY' priority='2' type='PATH_TRAVERSAL_IN' instanceOccurrenceMax='0'><ShortMessage>Potential Path Traversal (file read)</ShortMessage><LongMessage>This API (kotlin/io/FilesKt.createTempDir(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;)Ljava/io/File;) reads a file whose location might be specified by user input</LongMessage><Class classname='securitytest.pathtraversal.PathTraversalKotlin' primary='true'><SourceLine classname='securitytest.pathtraversal.PathTraversalKotlin' start='25' end='43' sourcepath='securitytest/pathtraversal/PathTraversalKotlin.kt' sourcefile='PathTraversalKotlin.kt'><Message>At PathTraversalKotlin.kt:[lines 25-43]</Message></SourceLine><Message>In class securitytest.pathtraversal.PathTraversalKotlin</Message></Class><Method isStatic='false' classname='securitytest.pathtraversal.PathTraversalKotlin' signature='([Ljava/lang/String;)V' name='main' primary='true'><SourceLine endBytecode='198' classname='securitytest.pathtraversal.PathTraversalKotlin' start='29' end='43' sourcepath='securitytest/pathtraversal/PathTraversalKotlin.kt' sourcefile='PathTraversalKotlin.kt' startBytecode='0'></SourceLine><Message>In method securitytest.pathtraversal.PathTraversalKotlin.main(String[])</Message></Method><SourceLine endBytecode='30' classname='securitytest.pathtraversal.PathTraversalKotlin' start='33' end='33' sourcepath='securitytest/pathtraversal/PathTraversalKotlin.kt' sourcefile='PathTraversalKotlin.kt' startBytecode='30' primary='true'><Message>At PathTraversalKotlin.kt:[line 33]</Message></SourceLine><String role='Sink method' value='kotlin/io/FilesKt.createTempDir(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;)Ljava/io/File;'><Message>Sink method kotlin/io/FilesKt.createTempDir(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;)Ljava/io/File;</Message></String><String role='Sink parameter' value='0'><Message>Sink parameter 0</Message></String><String role='Unknown source' value='java/io/File.&lt;init&gt;(Ljava/lang/String;)V'><Message>Unknown source java/io/File.&lt;init&gt;(Ljava/lang/String;)V</Message></String><SourceLine endBytecode='27' classname='securitytest.pathtraversal.PathTraversalKotlin' start='33' end='33' sourcepath='securitytest/pathtraversal/PathTraversalKotlin.kt' sourcefile='PathTraversalKotlin.kt' startBytecode='27'><Message>At PathTraversalKotlin.kt:[line 33]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='8dcdcc7aaf4e33b057dcbe99bb5f52be' cweid='22' rank='12' abbrev='SECPTI' category='SECURITY' priority='2' type='PATH_TRAVERSAL_IN' instanceOccurrenceMax='0'><ShortMessage>Potential Path Traversal (file read)</ShortMessage><LongMessage>This API (kotlin/io/FilesKt.createTempFile$default(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;ILjava/lang/Object;)Ljava/io/File;) reads a file whose location might be specified by user input</LongMessage><Class classname='securitytest.pathtraversal.PathTraversalKotlin' primary='true'><SourceLine classname='securitytest.pathtraversal.PathTraversalKotlin' start='25' end='43' sourcepath='securitytest/pathtraversal/PathTraversalKotlin.kt' sourcefile='PathTraversalKotlin.kt'><Message>At PathTraversalKotlin.kt:[lines 25-43]</Message></SourceLine><Message>In class securitytest.pathtraversal.PathTraversalKotlin</Message></Class><Method isStatic='false' classname='securitytest.pathtraversal.PathTraversalKotlin' signature='([Ljava/lang/String;)V' name='main' primary='true'><SourceLine endBytecode='198' classname='securitytest.pathtraversal.PathTraversalKotlin' start='29' end='43' sourcepath='securitytest/pathtraversal/PathTraversalKotlin.kt' sourcefile='PathTraversalKotlin.kt' startBytecode='0'></SourceLine><Message>In method securitytest.pathtraversal.PathTraversalKotlin.main(String[])</Message></Method><SourceLine endBytecode='39' classname='securitytest.pathtraversal.PathTraversalKotlin' start='35' end='35' sourcepath='securitytest/pathtraversal/PathTraversalKotlin.kt' sourcefile='PathTraversalKotlin.kt' startBytecode='39' primary='true'><Message>At PathTraversalKotlin.kt:[line 35]</Message></SourceLine><String role='Sink method' value='kotlin/io/FilesKt.createTempFile$default(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;ILjava/lang/Object;)Ljava/io/File;'><Message>Sink method kotlin/io/FilesKt.createTempFile$default(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;ILjava/lang/Object;)Ljava/io/File;</Message></String><String role='Sink parameter' value='3'><Message>Sink parameter 3</Message></String><String role='Unknown source' value='securitytest/pathtraversal/PathTraversalKotlin.main([Ljava/lang/String;)V parameter 0'><Message>Unknown source securitytest/pathtraversal/PathTraversalKotlin.main([Ljava/lang/String;)V parameter 0</Message></String><String role='Method usage' value='not detected'><Message>Method usage not detected</Message></String><SourceLine endBytecode='3' classname='securitytest.pathtraversal.PathTraversalKotlin' sourcepath='securitytest/pathtraversal/PathTraversalKotlin.kt' sourcefile='PathTraversalKotlin.kt' startBytecode='3'><Message>In PathTraversalKotlin.kt</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='c66e921101686fb8b4a2308226f70cc' cweid='22' rank='12' abbrev='SECPTI' category='SECURITY' priority='2' type='PATH_TRAVERSAL_IN' instanceOccurrenceMax='0'><ShortMessage>Potential Path Traversal (file read)</ShortMessage><LongMessage>This API (kotlin/io/FilesKt.createTempFile(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;)Ljava/io/File;) reads a file whose location might be specified by user input</LongMessage><Class classname='securitytest.pathtraversal.PathTraversalKotlin' primary='true'><SourceLine classname='securitytest.pathtraversal.PathTraversalKotlin' start='25' end='43' sourcepath='securitytest/pathtraversal/PathTraversalKotlin.kt' sourcefile='PathTraversalKotlin.kt'><Message>At PathTraversalKotlin.kt:[lines 25-43]</Message></SourceLine><Message>In class securitytest.pathtraversal.PathTraversalKotlin</Message></Class><Method isStatic='false' classname='securitytest.pathtraversal.PathTraversalKotlin' signature='([Ljava/lang/String;)V' name='main' primary='true'><SourceLine endBytecode='198' classname='securitytest.pathtraversal.PathTraversalKotlin' start='29' end='43' sourcepath='securitytest/pathtraversal/PathTraversalKotlin.kt' sourcefile='PathTraversalKotlin.kt' startBytecode='0'></SourceLine><Message>In method securitytest.pathtraversal.PathTraversalKotlin.main(String[])</Message></Method><SourceLine endBytecode='54' classname='securitytest.pathtraversal.PathTraversalKotlin' start='36' end='36' sourcepath='securitytest/pathtraversal/PathTraversalKotlin.kt' sourcefile='PathTraversalKotlin.kt' startBytecode='54' primary='true'><Message>At PathTraversalKotlin.kt:[line 36]</Message></SourceLine><String role='Sink method' value='kotlin/io/FilesKt.createTempFile(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;)Ljava/io/File;'><Message>Sink method kotlin/io/FilesKt.createTempFile(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;)Ljava/io/File;</Message></String><String role='Sink parameter' value='0'><Message>Sink parameter 0</Message></String><String role='Unknown source' value='java/io/File.&lt;init&gt;(Ljava/lang/String;)V'><Message>Unknown source java/io/File.&lt;init&gt;(Ljava/lang/String;)V</Message></String><SourceLine endBytecode='51' classname='securitytest.pathtraversal.PathTraversalKotlin' start='36' end='36' sourcepath='securitytest/pathtraversal/PathTraversalKotlin.kt' sourcefile='PathTraversalKotlin.kt' startBytecode='51'><Message>At PathTraversalKotlin.kt:[line 36]</Message></SourceLine></BugInstance><BugCategory category='SECURITY'><Description>Security</Description></BugCategory><BugPattern cweid='117' abbrev='SECCRLFLOG' category='SECURITY' type='CRLF_INJECTION_LOGS'><ShortDescription>Potential CRLF Injection for logs</ShortDescription><Details>

    &lt;p&gt;
    When data from an untrusted source is put into a logger and not neutralized correctly,
    an attacker could forge log entries or include malicious content.
    Inserted false entries could be used to skew statistics, distract the administrator
    or even to implicate another party in the commission of a malicious act.
    If the log file is processed automatically, the attacker can render the file unusable
    by corrupting the format of the file or injecting unexpected characters.
    An attacker may also inject code or other commands into the log file and take advantage
    of a vulnerability in the log processing utility (e.g. command injection or XSS).
    &lt;/p&gt;
    &lt;br/&gt;
    &lt;p&gt;
    &lt;b&gt;Code at risk:&lt;/b&gt;&lt;br/&gt;
    &lt;pre&gt;String val = request.getParameter("user");
    String metadata = request.getParameter("metadata");
    [...]
    if(authenticated) {
    log.info("User " + val + " (" + metadata + ") was authenticated successfully");
    }
    else {
    log.info("User " + val + " (" + metadata + ") was not authenticated");
    }
    &lt;/pre&gt;

    A malicious user could send the metadata parameter with the value: &lt;code&gt;"Firefox) was authenticated successfully\r\n[INFO] User bbb (Internet Explorer"&lt;/code&gt;.
    &lt;/p&gt;

    &lt;b&gt;Solution:&lt;/b&gt;&lt;br/&gt;
    &lt;p&gt;
    You can manually sanitize each parameter.
    &lt;pre&gt;
    log.info("User " + val.replaceAll("[\r\n]","") + " (" + userAgent.replaceAll("[\r\n]","") + ") was not authenticated");
    &lt;/pre&gt;
    &lt;/p&gt;

    &lt;p&gt;
    You can also configure your logger service to replace new line for all message events. Here is sample configuration for LogBack &lt;a href="https://logback.qos.ch/manual/layouts.html#replace"&gt;using the &lt;code&gt;replace&lt;/code&gt; function&lt;/a&gt;.
    &lt;pre&gt;
    &amp;lt;pattern&amp;gt;%-5level - %replace(%msg){'[\r\n]', ''}%n&amp;lt;/pattern&amp;gt;
    &lt;/pre&gt;
    &lt;/p&gt;

    &lt;p&gt;
    Finally, you can use a logger implementation that replace new line by spaces.
    The project &lt;a href="https://github.com/javabeanz/owasp-security-logging"&gt;OWASP Security Logging&lt;/a&gt; has an implementation for Logback and Log4j.
    &lt;/p&gt;

    &lt;br/&gt;
    &lt;p&gt;
    &lt;b&gt;References&lt;/b&gt;&lt;br/&gt;
    &lt;a href="https://cwe.mitre.org/data/definitions/117.html"&gt;CWE-117: Improper Output Neutralization for Logs&lt;/a&gt;&lt;br/&gt;
    &lt;a href="https://cwe.mitre.org/data/definitions/93.html"&gt;CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')&lt;/a&gt;&lt;br/&gt;
    &lt;a href="https://logback.qos.ch/manual/layouts.html#replace"&gt;CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')&lt;/a&gt;&lt;br/&gt;
    &lt;a href="https://github.com/javabeanz/owasp-security-logging"&gt;OWASP Security Logging&lt;/a&gt;&lt;br/&gt;
    &lt;/p&gt;


</Details></BugPattern><BugPattern abbrev='SECSC' category='SECURITY' type='SPRING_ENDPOINT'><ShortDescription>Found Spring endpoint</ShortDescription><Details>

    &lt;p&gt;This class is a Spring Controller. All methods annotated with &lt;code&gt;RequestMapping&lt;/code&gt; (as well as its shortcut annotations &lt;code&gt;GetMapping&lt;/code&gt;, &lt;code&gt;PostMapping&lt;/code&gt;, &lt;code&gt;PutMapping&lt;/code&gt;, &lt;code&gt;DeleteMapping&lt;/code&gt;, and &lt;code&gt;PatchMapping&lt;/code&gt;) are reachable remotely.
    This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.&lt;/p&gt;

</Details></BugPattern><BugPattern cweid='22' abbrev='SECPTI' category='SECURITY' type='PATH_TRAVERSAL_IN'><ShortDescription>Potential Path Traversal (file read)</ShortDescription><Details>

    &lt;p&gt;A file is opened to read its content. The filename comes from an &lt;b&gt;input&lt;/b&gt; parameter.
    If an unfiltered parameter is passed to this file API, files from an arbitrary filesystem location could be read.&lt;/p&gt;
    &lt;p&gt;This rule identifies &lt;b&gt;potential&lt;/b&gt; path traversal vulnerabilities. In many cases, the constructed file path cannot be controlled
    by the user. If that is the case, the reported instance is a false positive.&lt;/p&gt;
    &lt;br/&gt;

    &lt;p&gt;
    &lt;b&gt;Vulnerable Code:&lt;/b&gt;&lt;br/&gt;
    &lt;pre&gt;@GET
    @Path("/images/{image}")
    @Produces("images/*")
    public Response getImage(@javax.ws.rs.PathParam("image") String image) {
    File file = new File("resources/images/", image); //Weak point

    if (!file.exists()) {
    return Response.status(Status.NOT_FOUND).build();
    }

    return Response.ok().entity(new FileInputStream(file)).build();
    }&lt;/pre&gt;
    &lt;/p&gt;
    &lt;br/&gt;

    &lt;p&gt;
    &lt;b&gt;Solution:&lt;/b&gt;&lt;br/&gt;
    &lt;pre&gt;import org.apache.commons.io.FilenameUtils;

    @GET
    @Path("/images/{image}")
    @Produces("images/*")
    public Response getImage(@javax.ws.rs.PathParam("image") String image) {
    File file = new File("resources/images/", FilenameUtils.getName(image)); //Fix

    if (!file.exists()) {
    return Response.status(Status.NOT_FOUND).build();
    }

    return Response.ok().entity(new FileInputStream(file)).build();
    }&lt;/pre&gt;
    &lt;/p&gt;
    &lt;br/&gt;
    &lt;p&gt;
    &lt;b&gt;References&lt;/b&gt;&lt;br/&gt;
    &lt;a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal"&gt;WASC: Path Traversal&lt;/a&gt;&lt;br/&gt;
    &lt;a href="https://www.owasp.org/index.php/Path_Traversal"&gt;OWASP: Path Traversal&lt;/a&gt;&lt;br/&gt;
    &lt;a href="https://capec.mitre.org/data/definitions/126.html"&gt;CAPEC-126: Path Traversal&lt;/a&gt;&lt;br/&gt;
    &lt;a href="https://cwe.mitre.org/data/definitions/22.html"&gt;CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')&lt;/a&gt;
    &lt;/p&gt;

</Details></BugPattern><BugPattern cweid='78' abbrev='SECCI' category='SECURITY' type='COMMAND_INJECTION'><ShortDescription>Potential Command Injection</ShortDescription><Details>

    &lt;p&gt;The highlighted API is used to execute a system command. If unfiltered input is passed to this API, it can lead to arbitrary command execution.&lt;/p&gt;
    &lt;br/&gt;
    &lt;p&gt;
    &lt;b&gt;Vulnerable Code:&lt;/b&gt;&lt;br/&gt;
    &lt;pre&gt;import java.lang.Runtime;

    Runtime r = Runtime.getRuntime();
    r.exec("/bin/sh -c some_tool" + input);&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
    &lt;b&gt;References&lt;/b&gt;&lt;br/&gt;
    &lt;a href="https://www.owasp.org/index.php/Command_Injection"&gt;OWASP: Command Injection&lt;/a&gt;&lt;br/&gt;
    &lt;a href="https://www.owasp.org/index.php/Top_10_2013-A1-Injection"&gt;OWASP: Top 10 2013-A1-Injection&lt;/a&gt;&lt;br/&gt;
    &lt;a href="https://cwe.mitre.org/data/definitions/78.html"&gt;CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')&lt;/a&gt;
    &lt;/p&gt;

</Details></BugPattern><BugPattern abbrev='SECSP' category='SECURITY' type='SERVLET_PARAMETER'><ShortDescription>Untrusted servlet parameter</ShortDescription><Details>

    &lt;p&gt;The Servlet can read GET and POST parameters from various methods. The value obtained should be considered unsafe.
    You may need to validate or sanitize those values before passing them to sensitive APIs such as:&lt;/p&gt;
    &lt;ul&gt;
    &lt;li&gt;SQL query (May leads to SQL injection)&lt;/li&gt;
    &lt;li&gt;File opening (May leads to path traversal)&lt;/li&gt;
    &lt;li&gt;Command execution (Potential Command injection)&lt;/li&gt;
    &lt;li&gt;HTML construction (Potential XSS)&lt;/li&gt;
    &lt;li&gt;etc...&lt;/li&gt;
    &lt;/ul&gt;

    &lt;br/&gt;
    &lt;p&gt;
    &lt;b&gt;Reference&lt;/b&gt;&lt;br/&gt;
    &lt;a href="https://cwe.mitre.org/data/definitions/20.html"&gt;CWE-20: Improper Input Validation&lt;/a&gt;
    &lt;/p&gt;

</Details></BugPattern><BugPattern cweid='259' abbrev='SECHCP' category='SECURITY' type='HARD_CODE_PASSWORD'><ShortDescription>Hard coded password</ShortDescription><Details>

    &lt;p&gt;
    Passwords should not be kept in the source code. The source code can be widely shared in an enterprise environment, and is
    certainly shared in open source. To be managed safely, passwords and secret keys should be stored in separate configuration files or keystores.
    (Hard coded keys are reported separately by &lt;i&gt;Hard Coded Key&lt;/i&gt; pattern)
    &lt;/p&gt;
    &lt;p&gt;
    &lt;p&gt;&lt;b&gt;Vulnerable Code:&lt;/b&gt;&lt;br/&gt;

    &lt;pre&gt;private String SECRET_PASSWORD = "letMeIn!";

    Properties props = new Properties();
    props.put(Context.SECURITY_CREDENTIALS, "p@ssw0rd");&lt;/pre&gt;
    &lt;/p&gt;
    &lt;br/&gt;
    &lt;p&gt;
    &lt;b&gt;References&lt;/b&gt;&lt;br/&gt;
    &lt;a href="https://cwe.mitre.org/data/definitions/259.html"&gt;CWE-259: Use of Hard-coded Password&lt;/a&gt;
    &lt;/p&gt;

</Details></BugPattern><BugCode abbrev='SECSC'><Description>Spring Endpoint</Description></BugCode><BugCode abbrev='SECCI'><Description>Command Injection</Description></BugCode><BugCode abbrev='SECCRLFLOG'><Description>CRLF Injection for logs</Description></BugCode><BugCode abbrev='SECHCP'><Description>Hard coded password</Description></BugCode><BugCode abbrev='SECPTI'><Description>Potential Path Traversal (file read)</Description></BugCode><BugCode abbrev='SECSP'><Description>Servlet Parameter</Description></BugCode><Errors missingClasses='0' errors='0'></Errors><FindBugsSummary num_packages='4' total_classes='9' priority_2='71' priority_3='12' total_size='372' clock_seconds='6.09' referenced_classes='57' vm_version='15.0.1+9-18' total_bugs='83' java_version='15.0.1' gc_seconds='0.04' alloc_mbytes='512.00' cpu_seconds='25.64' peak_mbytes='378.12' timestamp='Wed, 20 Jan 2021 14:04:43 +0100'><FileStats path='securitytest/command/IdentityFunctionCommandInjection.kt' size='105' bugHash='b5acaa7025b75326c15938ed12130a28' bugCount='13'></FileStats><FileStats path='securitytest/command/StringManipulationCommandInjection.kt' size='99' bugHash='7ac03eb9628aeeadd1048e48f92444e5' bugCount='24'></FileStats><FileStats path='securitytest/injection/KotlinLogging.kt' size='79' bugHash='62875e77de3e8a9743e71d73eaf7f50c' bugCount='30'></FileStats><FileStats path='securitytest/injection/KotlinSSRFController.kt' size='20' bugHash='f2e373802291ae4e545e1a3635b26f05' bugCount='1'></FileStats><FileStats path='securitytest/injection/KotlinSlf4jSample.kt' size='25' bugHash='2b2d84f2afaa8c8be5db6a86b805aed8' bugCount='10'></FileStats><FileStats path='securitytest/password/HardCode2.kt' size='30' bugHash='161b4cf4023e0b6147a4e6a7bd520a25' bugCount='1'></FileStats><FileStats path='securitytest/pathtraversal/PathTraversalKotlin.kt' size='14' bugHash='0748e1fda7bd94040c79bf88cd756bd1' bugCount='4'></FileStats><PackageStats package='securitytest.command' total_bugs='37' priority_2='37' total_size='204' total_types='2'><ClassStats bugs='13' size='105' priority_2='13' interface='false' sourceFile='IdentityFunctionCommandInjection.kt' class='securitytest.command.IdentityFunctionCommandInjection'></ClassStats><ClassStats bugs='24' size='99' priority_2='24' interface='false' sourceFile='StringManipulationCommandInjection.kt' class='securitytest.command.StringManipulationCommandInjection'></ClassStats></PackageStats><PackageStats package='securitytest.injection' total_bugs='41' priority_2='29' priority_3='12' total_size='124' total_types='5'><ClassStats bugs='30' size='72' priority_2='29' priority_3='1' interface='false' sourceFile='KotlinLogging.kt' class='securitytest.injection.KotlinLogging'></ClassStats><ClassStats bugs='0' size='7' interface='false' sourceFile='KotlinLogging.kt' class='securitytest.injection.KotlinLogging$Companion'></ClassStats><ClassStats bugs='1' size='20' priority_3='1' interface='false' sourceFile='KotlinSSRFController.kt' class='securitytest.injection.KotlinSSRFController'></ClassStats><ClassStats bugs='10' size='17' priority_3='10' interface='false' sourceFile='KotlinSlf4jSample.kt' class='securitytest.injection.KotlinSlf4jSample'></ClassStats><ClassStats bugs='0' size='8' interface='false' sourceFile='KotlinSlf4jSample.kt' class='securitytest.injection.KotlinSlf4jSample$DataClass'></ClassStats></PackageStats><PackageStats package='securitytest.password' total_bugs='1' priority_2='1' total_size='30' total_types='1'><ClassStats bugs='1' size='30' priority_2='1' interface='false' sourceFile='HardCode2.kt' class='securitytest.password.HardCode2'></ClassStats></PackageStats><PackageStats package='securitytest.pathtraversal' total_bugs='4' priority_2='4' total_size='14' total_types='1'><ClassStats bugs='4' size='14' priority_2='4' interface='false' sourceFile='PathTraversalKotlin.kt' class='securitytest.pathtraversal.PathTraversalKotlin'></ClassStats></PackageStats><FindBugsProfile><ClassProfile avgMicrosecondsPerInvocation='1466' totalMilliseconds='934' name='edu.umd.cs.findbugs.classfile.engine.ClassInfoAnalysisEngine' maxMicrosecondsPerInvocation='33422' standardDeviationMicrosecondsPerInvocation='3136' invocations='637'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='430' totalMilliseconds='276' name='edu.umd.cs.findbugs.classfile.engine.ClassDataAnalysisEngine' maxMicrosecondsPerInvocation='8926' standardDeviationMicrosecondsPerInvocation='436' invocations='643'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='3160' totalMilliseconds='189' name='edu.umd.cs.findbugs.classfile.engine.bcel.ValueNumberDataflowFactory' maxMicrosecondsPerInvocation='97080' standardDeviationMicrosecondsPerInvocation='13217' invocations='60'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='3062' totalMilliseconds='174' name='edu.umd.cs.findbugs.detect.FieldItemSummary' maxMicrosecondsPerInvocation='33245' standardDeviationMicrosecondsPerInvocation='5576' invocations='57'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='2679' totalMilliseconds='158' name='com.h3xstream.findsecbugs.taintanalysis.TaintDataflowEngine' maxMicrosecondsPerInvocation='69300' standardDeviationMicrosecondsPerInvocation='9162' invocations='59'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='2214' totalMilliseconds='126' name='edu.umd.cs.findbugs.detect.FindNoSideEffectMethods' maxMicrosecondsPerInvocation='14095' standardDeviationMicrosecondsPerInvocation='3350' invocations='57'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='2090' totalMilliseconds='123' name='edu.umd.cs.findbugs.ba.npe.NullDerefAndRedundantComparisonFinder' maxMicrosecondsPerInvocation='48341' standardDeviationMicrosecondsPerInvocation='6151' invocations='59'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='1857' totalMilliseconds='109' name='edu.umd.cs.findbugs.classfile.engine.bcel.IsNullValueDataflowFactory' maxMicrosecondsPerInvocation='34292' standardDeviationMicrosecondsPerInvocation='4634' invocations='59'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='639' totalMilliseconds='100' name='edu.umd.cs.findbugs.OpcodeStack$JumpInfoFactory' maxMicrosecondsPerInvocation='6685' standardDeviationMicrosecondsPerInvocation='940' invocations='157'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='1668' totalMilliseconds='98' name='edu.umd.cs.findbugs.classfile.engine.bcel.UnconditionalValueDerefDataflowFactory' maxMicrosecondsPerInvocation='37555' standardDeviationMicrosecondsPerInvocation='4831' invocations='59'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='681' totalMilliseconds='94' name='edu.umd.cs.findbugs.classfile.engine.bcel.JavaClassAnalysisEngine' maxMicrosecondsPerInvocation='29347' standardDeviationMicrosecondsPerInvocation='2643' invocations='138'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='1458' totalMilliseconds='86' name='edu.umd.cs.findbugs.classfile.engine.bcel.MethodGenFactory' maxMicrosecondsPerInvocation='67094' standardDeviationMicrosecondsPerInvocation='8639' invocations='59'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='142' totalMilliseconds='85' name='edu.umd.cs.findbugs.util.TopologicalSort' maxMicrosecondsPerInvocation='2770' standardDeviationMicrosecondsPerInvocation='280' invocations='603'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='1289' totalMilliseconds='85' name='edu.umd.cs.findbugs.classfile.impl.ZipCodeBaseFactory' maxMicrosecondsPerInvocation='2598' standardDeviationMicrosecondsPerInvocation='330' invocations='66'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='1440' totalMilliseconds='85' name='edu.umd.cs.findbugs.classfile.engine.bcel.TypeDataflowFactory' maxMicrosecondsPerInvocation='18954' standardDeviationMicrosecondsPerInvocation='3241' invocations='59'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='1110' totalMilliseconds='65' name='edu.umd.cs.findbugs.classfile.engine.bcel.CFGFactory' maxMicrosecondsPerInvocation='19044' standardDeviationMicrosecondsPerInvocation='2585' invocations='59'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='1137' totalMilliseconds='64' name='edu.umd.cs.findbugs.detect.NoteDirectlyRelevantTypeQualifiers' maxMicrosecondsPerInvocation='17183' standardDeviationMicrosecondsPerInvocation='2541' invocations='57'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='993' totalMilliseconds='54' name='edu.umd.cs.findbugs.detect.FindRefComparison$SpecialTypeAnalysis' maxMicrosecondsPerInvocation='15952' standardDeviationMicrosecondsPerInvocation='2204' invocations='55'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='900' totalMilliseconds='51' name='edu.umd.cs.findbugs.detect.FunctionsThatMightBeMistakenForProcedures' maxMicrosecondsPerInvocation='10640' standardDeviationMicrosecondsPerInvocation='1849' invocations='57'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='838' totalMilliseconds='47' name='edu.umd.cs.findbugs.detect.BuildStringPassthruGraph' maxMicrosecondsPerInvocation='10811' standardDeviationMicrosecondsPerInvocation='1635' invocations='57'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='713' totalMilliseconds='40' name='edu.umd.cs.findbugs.detect.OverridingEqualsNotSymmetrical' maxMicrosecondsPerInvocation='15769' standardDeviationMicrosecondsPerInvocation='2129' invocations='57'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='662' totalMilliseconds='39' name='edu.umd.cs.findbugs.classfile.engine.bcel.ConstantDataflowFactory' maxMicrosecondsPerInvocation='16478' standardDeviationMicrosecondsPerInvocation='2213' invocations='59'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='4133' totalMilliseconds='37' name='edu.umd.cs.findbugs.detect.CheckRelaxingNullnessAnnotation' maxMicrosecondsPerInvocation='25325' standardDeviationMicrosecondsPerInvocation='7628' invocations='9'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='584' totalMilliseconds='33' name='edu.umd.cs.findbugs.detect.BuildObligationPolicyDatabase' maxMicrosecondsPerInvocation='4219' standardDeviationMicrosecondsPerInvocation='857' invocations='57'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='541' totalMilliseconds='30' name='edu.umd.cs.findbugs.detect.CalledMethods' maxMicrosecondsPerInvocation='4290' standardDeviationMicrosecondsPerInvocation='896' invocations='57'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='3211' totalMilliseconds='28' name='edu.umd.cs.findbugs.detect.FindBadCast2' maxMicrosecondsPerInvocation='12213' standardDeviationMicrosecondsPerInvocation='4557' invocations='9'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='3166' totalMilliseconds='28' name='com.h3xstream.findsecbugs.injection.command.CommandInjectionDetector' maxMicrosecondsPerInvocation='23835' standardDeviationMicrosecondsPerInvocation='7366' invocations='9'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='2743' totalMilliseconds='24' name='edu.umd.cs.findbugs.detect.FindDeadLocalStores' maxMicrosecondsPerInvocation='12533' standardDeviationMicrosecondsPerInvocation='3961' invocations='9'></ClassProfile></FindBugsProfile></FindBugsSummary><ClassFeatures></ClassFeatures><History></History>
</BugCollection>
