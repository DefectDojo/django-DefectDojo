---
# Requires Ansible 2.2.x installed on admin computer
- hosts: all
  become: yes
  gather_facts: false
  vars_files:
  - deploy-vars.yml

# Notes:
# * Defect Dojo defaults and changable configurations are all in deploy-vars.yml
# Future enhancements
# * Create custom mange.py commands to handle checking for super user and other install/upgrade tasks

# Get around Ubuntu 16.04's lack of Python 2.7
  pre_tasks:
    - raw: sudo apt-get -y install python-simplejson
    - action: setup

  tasks:
  - name: Set hostname
    hostname:
      name: "{{ hostname }}"
    ignore_errors: yes

  - name: Set IP and hostname in /etc/hosts
    lineinfile:
      dest: /etc/hosts
      state: present
      insertafter: '^127'
      line: "{{ ip }} {{hostname}}"
    ignore_errors: yes

  - name: Get latest pages aka "apt-get update"
    apt:
      update_cache: yes
      cache_valid_time: 6000

  - name: Install Dojo Prerequisites
    apt:
     name: "{{item}}"
     state: installed
     update_cache: no
    with_items:
         - python-simplejson
         - git
         - mysql-server
         - nodejs
         - npm
         - python-pip
         - libjpeg-dev
         - libxrender1
         - libfontconfig1
         - python-mysqldb
         - libmysqlclient-dev
         - expect

  - name: Check for existing wkhtmltox install
    stat:
      path: /usr/bin/wkhtmltopdf
    register: wkhtml

  - name: Install wkhtmltox for report generation
    file:
      path: /tmp/wkhtml
      state: directory
      mode: 0755
    when: not wkhtml.stat.exists

  - name: Download and extract wkhtmltox tarball
    unarchive:
      src: https://github.com/wkhtmltopdf/wkhtmltopdf/releases/download/0.12.4/wkhtmltox-0.12.4_linux-generic-amd64.tar.xz
      dest: /tmp/wkhtml
      remote_src: True
    register: downloadwkhtml
    when: not wkhtml.stat.exists
    # need to add architechture conditional for x386
    # depends on: zlib, fontconfig, freetype, X11 libs (libX11, libXext, libXrender)
    # http://wkhtmltopdf.org/downloads.html

  - name: Move wkhtmltopdf into /usr/bin
    copy:
      src: /tmp/wkhtml/wkhtmltox/bin/wkhtmltopdf
      remote_src: True
      dest: /usr/bin/
      owner: root
      group: root
      mode: 0755
    when: not wkhtml.stat.exists

  - name: Check for existing Defect Dojo install
    stat:
      path: "{{ install_path }}/README.md"
    register: dojopresent
    ignore_errors: yes

  - name: Ensure mysql is running and starts on boot
    service:
      name: mysql
      state: started
      enabled: true

  - name: Create database for new Defect Dojo install
    mysql_db:
      name: '{{ dbname }}'
      state: present
      encoding: utf8mb4
      collation: utf8mb4_unicode_ci

  - name: Set DB user and password for Defect Dojo
    mysql_user:
      name: '{{ dbuser }}'
      password: '{{ dbpass }}'
      priv: "{{ dbname }}.*:ALL"
      state: present

  - name: Adjust adduser.conf to allow for periods in usernames
    lineinfile:
      dest: /etc/adduser.conf
      state: present
      insertafter: EOF
      line: 'NAME_REGEX="^[a-z][-a-z0-9_\.]*\$?$"'

  - name: Add the dojo group
    group:
      name: '{{ dojo_group }}'
      state: present

  - name: Add the dojo user
    user:
      name: "{{ dojo_user }}"
      comment: "Defect Dojo"
      password: "{{ cryptpass }}"
      state: present
      groups: '{{ dojo_group }}'

  - name: Create Defect Dojo base directory
    file:
      path: '{{ item }}'
      state: directory
    with_items:
         - '{{ base_dir }}'
         - '{{ install_path }}'

  - name: Install a very basic requirements.txt
    copy:
      src: ./templates/requirements.txt
      dest: '{{ base_dir }}/requirements.txt'
      owner: "{{ dojo_user }}"
      group: "{{ dojo_group }}"
      mode: "u=rw,g=r,o=r"

  - name: Install virtualenv
    pip:
      name: virtualenv

  - name: Setup Virtual Environment
    pip:
      requirements: '{{ base_dir }}/requirements.txt' # Why doesn't Defect Dojo have this?
      virtualenv: '{{ install_path }}'

  - name: Checkout latest Defect Dojo source from GitHub
    git:
      repo: https://github.com/OWASP/django-DefectDojo.git
      dest: '{{ dojo_src }}'
    register: firstclone
    when: dojopresent.stat is defined and not dojopresent.stat.exists

  - name: Update Defect Dojo to latest source from GitHub
    git:
      repo: https://github.com/OWASP/django-DefectDojo.git
      dest: '{{ dojo_src }}'
      update: yes
    when: not firstclone

  - name: Install yarn
    command: 'npm install -g yarn'
    args:
      creates: /usr/local/bin/yarn

  - name: Make sure node is in the path
    file:
      path: /usr/bin/node
      src: /usr/bin/nodejs
      state: link

  - name: Create a settings.py for Defect Dojo
    template:
      src: ./templates/settings.py.j2
      dest: '{{ dojo_root }}/settings.py'
      owner: "{{ dojo_user }}"
      group: "{{ dojo_group }}"

  - name: Generate a secret key for Defect Dojo
    shell: 'cat /dev/urandom | LC_CTYPE=C tr -dc "a-zA-Z0-9" | head -c 128'
    register: secret_key

  - name: Add new secret key into settings.py
    replace:
      dest: '{{ dojo_src }}/dojo/settings.py'
      regexp: 'DOJOSECRET'
      replace: '{{ secret_key.stdout }}'

  - name: Pip install the required modules in the Defect Dojo virtual env
    command: '{{ install_path}}/bin/pip install .'
    args:
      chdir: '{{ dojo_src}}'

  - name: Django makemigrations dojo
    django_manage:
      command: makemigrations dojo
      app_path: '{{ dojo_src }}'
      virtualenv: '{{ install_path }}'

  - name: Django makemigrations
    django_manage:
      command: makemigrations
      app_path: '{{ dojo_src }}'
      virtualenv: '{{ install_path }}'

  - name: Django migrate
    django_manage:
      command: migrate
      app_path: '{{ dojo_src }}'
      virtualenv: '{{ install_path }}'

  - name: Django syncdb
    django_manage:
      command: makemigrations dojo
      app_path: '{{ dojo_src }}'
      virtualenv: '{{ install_path }}'

  - name: Django loaddata product_type
    django_manage:
      command: loaddata product_type
      app_path: '{{ dojo_src }}'
      virtualenv: '{{ install_path }}'

  - name: Django loaddata test_type
    django_manage:
      command: loaddata test_type
      app_path: '{{ dojo_src }}'
      virtualenv: '{{ install_path }}'

  - name: Django loaddata development_environment
    django_manage:
      command: loaddata development_environment
      app_path: '{{ dojo_src }}'
      virtualenv: '{{ install_path }}'

  - name: Django installwatson
    django_manage:
      command: installwatson
      app_path: '{{ dojo_src }}'
      virtualenv: '{{ install_path }}'

  - name: Django buildwatson
    django_manage:
      command: buildwatson
      app_path: '{{ dojo_src }}'
      virtualenv: '{{ install_path }}'

  - name: Change ownership of Defect Dojo to dojo user
    file:
      dest: '{{ base_dir }}'
      owner: '{{ dojo_user }}'
      group: '{{ dojo_group }}'
      recurse: yes

  - name: Install yarn components
    command: 'yarn install'
    args:
      chdir: '{{ dojo_yarn}}'
    become: yes
    become_user: "{{ dojo_user }}"

  - name: Django collectstatic
    django_manage:
      command: collectstatic --noinput
      app_path: '{{ dojo_src }}'
      virtualenv: '{{ install_path }}'

  - name: Create a script to check for Django admin user
    template:
      src: ./templates/super_user_exists.py.j2
      dest: '{{ dojo_src }}/super_user_exists.py'
      owner: "{{ dojo_user }}"
      group: "{{ dojo_group }}"

  - name: Run script to check for Django admin
    shell: "{{install_path}}/bin/python super_user_exists.py"
    args:
      chdir: "{{dojo_src}}"
    register: superuser_exists

  - name: Create Django super user
    django_manage:
      command: "createsuperuser --noinput --username={{dojo_admin}} --email={{admin_email}}"
      app_path: "{{dojo_src}}"
      virtualenv: '{{ install_path }}'
    when: superuser_exists.stdout.find('exists') == -1

  - name: Add script to change Django super user password
    template:
      src: ./templates/change_dojo_password.sh.j2
      dest: "{{dojo_src}}/change_dojo_password.sh"
      mode: 0755

  - name: Change password
    command: "{{dojo_src}}/change_dojo_password.sh"
    args:
      chdir: "{{dojo_src}}"

  - name: Clean-up password change script
    file:
      path: "{{dojo_src}}/change_dojo_password.sh"
      state: absent

  - name: Setup logging directory
    file:
      path: "{{ base_dir }}/logs"
      state: directory

  - name: Add Defect Dojo startup script
    template:
      src: ./templates/startup-dojo.sh.j2
      dest: "{{ base_dir }}/startup-dojo.sh"
      mode: 0755

  - name: Startup Defect Dojo
    shell: "sleep 2 && {{base_dir}}/startup-dojo.sh"
    args:
      chdir: "{{ base_dir }}"
    async: 1
    poll: 0
    ignore_errors: true
    register: started

  - name: Defect Dojo install completed
    debug:
      msg: 'Defect Dojo is listening on port 8000 - http://{{ip}}:8000 or http://{{hostname}}:8000 if DNS is setup'
