---
- name: Create DefectDojo directory
  file: path={{ dd_install_dir }} state=directory owner={{ dd_user }} group=www-data

- name: Download DefectDojo
  git: repo={{ dd_git_repo }} dest={{ dd_install_dir }} accept_hostkey=yes version={{ dd_git_branch }} force=yes recursive=no key_file=/home/{{ dd_user }}/.ssh/id_rsa

- name: Give ownership to dd_user
  file: path={{ dd_install_dir }} recurse=yes owner={{ dd_user }} group=www-data state=directory

- name: Check if gunicorn log file exists
  stat: path={{ gunicorn_log_file }}
  register: glf

- name: Create gunicorn log file
  file: path={{ gunicorn_log_file }} state=touch owner={{ dd_user }} group=www-data
  when: glf.stat.exists == False

- name: Generate Django secret
  shell: 'cat /dev/urandom | tr -dc "a-zA-Z0-9" | head -c 128'
  args:
    creates: '{{ dd_install_dir }}/dojo/settings.py'
  register: django_secret

- name: Populate DefectDojo settings file
  template: src=settings.j2 dest={{ dd_install_dir }}/dojo/settings.py owner={{ dd_user }} group=www-data

- name: Install virtualenv
  pip: name=virtualenv

- name: Setup virtualenv
  shell: virtualenv {{ venv_dir }} creates={{ venv_dir }}/bin/activate
  sudo: yes
  sudo_user: '{{ dd_user }}'

- name: Install Django
  pip: name=Django version=1.8.4 virtualenv={{ venv_dir }}
  sudo: yes
  sudo_user: '{{ dd_user }}'

- name: Install MySQL-Python
  pip: name=MySQL-python virtualenv={{ venv_dir }}
  sudo: yes
  sudo_user: '{{ dd_user }}'

- name: Install Pillow
  pip: name=Pillow version=2.3.0 virtualenv={{ venv_dir }}
  sudo: yes
  sudo_user: '{{ dd_user }}'

- name: Install django-secure
  pip: name=django-secure virtualenv={{ venv_dir }}
  sudo: yes
  sudo_user: '{{ dd_user }}'

- name: Install django-tastypie
  pip: name=django-tastypie virtualenv={{ venv_dir }}
  sudo: yes
  sudo_user: '{{ dd_user }}'

- name: Install gunicorn
  pip: name=gunicorn virtualenv={{ venv_dir }}
  sudo: yes
  sudo_user: '{{ dd_user }}'

- name: Install Python-nmap
  pip: name=python-nmap virtualenv={{ venv_dir }}
  sudo: yes
  sudo_user: '{{ dd_user }}'

- name: Install pytz
  pip: name=pytz virtualenv={{ venv_dir }}
  sudo: yes
  sudo_user: '{{ dd_user }}'

- name: Install requests
  pip: name=requests virtualenv={{ venv_dir }}
  sudo: yes
  sudo_user: '{{ dd_user }}'

- name: Install django-polymorphic
  pip: name=django-polymorphic virtualenv={{ venv_dir }}
  sudo: yes
  sudo_user: '{{ dd_user }}'

- name: Install wsgiref
  pip: name=wsgiref version=0.1.2 virtualenv={{ venv_dir }}
  sudo: yes
  sudo_user: '{{ dd_user }}'

- name: Install django-tastypie-swagger
  pip: name=django-tastypie-swagger virtualenv={{ venv_dir }}
  sudo: yes
  sudo_user: '{{ dd_user }}'

- name: Install django-filter
  pip: name=django-filter virtualenv={{ venv_dir }}
  sudo: yes
  sudo_user: '{{ dd_user }}'

- name: Install supervisor
  pip: name=supervisor state=present virtualenv={{ venv_dir }}
  sudo: yes
  sudo_user: '{{ dd_user }}'

- name: Install humanize
  pip: name=humanize state=present virtualenv={{ venv_dir }}
  sudo: yes
  sudo_user: '{{ dd_user }}'

- name: Install django-bower
  pip: name=django-bower state=present virtualenv={{ venv_dir }}
  sudo: yes
  sudo_user: '{{ dd_user }}'

- name: Install django-auditlog
  pip: name=django-auditlog version=0.3.1 virtualenv={{ venv_dir }}
  sudo: yes
  sudo_user: '{{ dd_user }}'

- name: Install vobject
  pip: name=vobject virtualenv={{ venv_dir }}
  sudo: yes
  sudo_user: '{{ dd_user }}'

- name: Install html2text
  pip: name=html2text virtualenv={{ venv_dir }}
  sudo: yes
  sudo_user: '{{ dd_user }}'

- name: Install django-watson
  pip: name=django-watson version=1.1.9 virtualenv={{ venv_dir }}
  sudo: yes
  sudo_user: '{{ dd_user }}'

- name: Install celery
  pip: name=celery virtualenv={{ venv_dir }}
  sudo: yes
  sudo_user: '{{ dd_user }}'

- name: Install sqlalchemy
  pip: name=sqlalchemy virtualenv={{ venv_dir }}
  sudo: yes
  sudo_user: '{{ dd_user }}'

- name: install pdfkit
  pip: name=pdfkit virtualenv={{ venv_dir }}
  sudo: yes
  sudo_user: '{{ dd_user }}'

- name: install django-overextends
  pip: name=django-overextends virtualenv={{ venv_dir }}
  sudo: yes
  sudo_user: '{{ dd_user }}'

- name: Run Django 'makemigrations dojo' command
  django_manage: command='makemigrations dojo' app_path={{ dd_install_dir }} virtualenv={{ venv_dir }}
  sudo: yes
  sudo_user: '{{ dd_user }}'

- name: Run Django 'makemigrations' command
  django_manage: command='makemigrations' app_path={{ dd_install_dir }} virtualenv={{ venv_dir }}
  sudo: yes
  sudo_user: '{{ dd_user }}'

- name: Run Django 'migrate' command
  django_manage: command=migrate app_path={{ dd_install_dir }} virtualenv={{ venv_dir }}
  sudo: yes
  sudo_user: '{{ dd_user }}'

- name: Run Django 'syncdb' command
  django_manage: command=syncdb app_path={{ dd_install_dir }} virtualenv={{ venv_dir }}
  sudo: yes
  sudo_user: '{{ dd_user }}'

- name: Run Django 'loaddata' command for product_type
  django_manage: command='loaddata product_type' app_path={{ dd_install_dir }} virtualenv={{ venv_dir }}
  sudo: yes
  sudo_user: '{{ dd_user }}'

- name: Run Django 'loaddata' command for test_type
  django_manage: command='loaddata test_type' app_path={{ dd_install_dir }} virtualenv={{ venv_dir }}
  sudo: yes
  sudo_user: '{{ dd_user }}'

- name: Run Django 'loaddata' command for development_environment
  django_manage: command='loaddata development_environment' app_path={{ dd_install_dir }} virtualenv={{ venv_dir }}
  sudo: yes
  sudo_user: '{{ dd_user }}'

- name: Run Django 'installwatson' command
  django_manage: command='installwatson' app_path={{ dd_install_dir }} virtualenv={{ venv_dir }}
  sudo: yes
  sudo_user: '{{ dd_user }}'

- name: Run Django 'buildwatson' command
  django_manage: command='buildwatson' app_path={{ dd_install_dir }} virtualenv={{ venv_dir }}
  sudo: yes
  sudo_user: '{{ dd_user }}'

- name: Create Django superuser
  shell: echo "from django.contrib.auth.models import User; User.objects.create_superuser('{{ dd_super_user }}', '{{ dd_super_user_email }}', '{{ dd_super_user_pass }}')" | {{ venv_dir }}/bin/python {{ dd_install_dir }}/manage.py shell && touch /home/{{ dd_user }}/.supercreated
  args:
    creates: /home/{{ dd_user }}/.supercreated
  sudo: yes
  sudo_user: '{{ dd_user }}'

- name: Run 'bower install' command
  command: bower install 
  sudo: yes
  sudo_user: '{{ dd_user }}'
  register: bower_install
  ignore_errors: True
  args: 
    chdir: '{{ dd_install_dir }}/components/'

- name: Git HTTPS Preference
  command: "git config --global url.'https://'.insteadOf 'git://'"
  sudo: yes
  sudo_user: '{{ dd_user }}'
  when: "bower_install.changed and bower_install.stderr and 'unable to connect to github.com' in bower_install.stderr"

- name: Try installing Bower again, forcing latest versions to try to get compatability..
  command: bower install --force-latest
  sudo: yes
  sudo_user: '{{ dd_user }}'
  register: bower_install2
  ignore_errors: True
  args: 
    chdir: '{{ dd_install_dir }}/components/'
  when: "bower_install.changed and bower_install.stderr"

# - name: Bower Failure
#   fail: msg="It looks like the 'bower install' command has failed. Usually executing `git config --global url.'https://'.insteadOf 'git://'` fixes this issue, but it appears that has not fixed it in this case. Please ensure that you have network connectivity while running the provisioning process."
#   # when: "bower_install2.changed and bower_install2.stderr and 'unable to connect to github.com' in bower_install2.stderr"
#   when: "bower_install2.changed and bower_install2.stderr"

- name: Run Django 'collectstatic' command
  django_manage: command='collectstatic --noinput' app_path={{ dd_install_dir }} virtualenv={{ venv_dir }}
  sudo: yes
  sudo_user: '{{ dd_user }}'

- name: Find any running DD instances on our gunicorn port
  shell: "ps aux | grep '[r]unserver' | grep '{{ gunicorn_port }}' | awk '{print $2}'"
  register: instances
  ignore_errors: True

- name: Kill zombie DD instances
  shell: "kill {{ instances.stdout }}"
  when: instances.stdout
  ignore_errors: True

- name: Start DD
  shell: '. {{ venv_dir }}/bin/activate && nohup {{ venv_dir }}/bin/python {{ dd_install_dir }}/manage.py runserver 0.0.0.0:{{ gunicorn_port }} >>{{ gunicorn_log_file }} 2>&1 &'
  sudo: yes
  sudo_user: '{{ dd_user }}'

- name: Port check
  wait_for: port={{ gunicorn_port }} delay=10 timeout=20
  ignore_errors: True

- name: Instance Availability Check
  get_url: url='http://localhost:{{ gunicorn_port}}/' dest=/tmp/url_check force=True
  register: availability
  ignore_errors: True

- name: Instance Failure Check
  fail: msg="Instance failed to start. Fix any errors that have been reported during the provisioning process, and try running 'vagrant provision' again. Also ensure that you're not using an old VirtualBox instance by checking the output of 'virtualbox list vms'."
  when: "availability.changed and 'OK' not in availability.msg"

- name: Post-Install Message
  debug: msg='DefectDojo is now running on 192.168.13.37:{{ gunicorn_port }}!'
  when: "'OK' in availability.msg"
