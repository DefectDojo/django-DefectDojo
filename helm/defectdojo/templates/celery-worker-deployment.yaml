{{- $fullName := include "defectdojo.fullname" . -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $fullName }}-celery-worker
  labels:
    defectdojo.org/component: celery
    app.kubernetes.io/name: {{ include "defectdojo.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    helm.sh/chart: {{ include "defectdojo.chart" . }}
spec:
  replicas: {{ .Values.celery.worker.replicas }}
  selector:
    matchLabels:
      defectdojo.org/component: celery
      app.kubernetes.io/name: {{ include "defectdojo.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        defectdojo.org/component: celery
        app.kubernetes.io/name: {{ include "defectdojo.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
      annotations:
      {{- with .Values.celery.worker.annotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if eq (.Values.trackConfig | default "disabled") "enabled" }}
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        checksum/secret: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
        checksum/esecret: {{ include (print $.Template.BasePath "/extra-secret.yaml") . | sha256sum }}
      {{- end }}
    spec:
      serviceAccountName: {{ $fullName }}
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
      - name: {{ .Values.imagePullSecrets }}
      {{- end }}
      volumes:
      {{- range .Values.celery.extraVolumes }}
      - name: userconfig-{{ .name }}
        {{ .type }}:
          {{- if (eq .type "configMap") }}
          name: {{ .name }}
          {{- else if (eq .type "secret") }}
          secretName: {{ .name }}
          {{- else if (eq .type "hostPath") }}
          type: {{ .pathType | default "Directory" }}
          path: {{ .hostPath }}
          {{- end }}
      {{- end }}
      containers:
      {{- if .Values.cloudsql.enabled  }}
      - name: cloudsql-proxy
        image: {{ .Values.cloudsql.image.repository }}:{{ .Values.cloudsql.image.tag }}
        imagePullPolicy: {{ .Values.cloudsql.image.pullPolicy }}
        securityContext:
          runAsNonRoot: true
        command: ["/cloud_sql_proxy"]
        args:
        - "-verbose={{ .Values.cloudsql.verbose }}"
        {{- if eq .Values.database "postgresql" }}
        - "-instances={{ .Values.cloudsql.instance }}=tcp:{{ .Values.postgresql.service.port }}"
        {{- else if eq .Values.database "mysql" }}
        - "-instances={{ .Values.cloudsql.instance }}=tcp:{{ .Values.mysql.master.service.port }}"
        {{- end }}
        {{- if .Values.cloudsql.enable_iam_login }}
        - "-enable_iam_login"
        {{- end }}
        {{- if .Values.cloudsql.use_private_ip }}
        - "-ip_address_types=PRIVATE"
        {{- end }}
      {{- end }}
      - name: celery
        image: "{{ template "celery.repository" . }}:{{ .Values.tag }}"
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        {{- if .Values.securityContext.enabled }}
        securityContext:
          {{- toYaml .Values.securityContext.djangoSecurityContext | nindent 10 }}
        {{- end }}
        command: ['/entrypoint-celery-worker.sh']
        volumeMounts:
        {{- range .Values.celery.extraVolumes }}
        - name: userconfig-{{ .name }}
          readOnly: true
          mountPath: {{ .path }}
          subPath: {{ .subPath }}
        {{- end }}
        envFrom:
        - configMapRef:
            name: {{ $fullName }}
        - secretRef:
            name: {{ $fullName }}-extrasecrets
            optional: true
        env:
        - name: DD_CELERY_BROKER_PASSWORD
          valueFrom:
            secretKeyRef:
            {{- if eq .Values.celery.broker "rabbitmq" }}
            {{- if .Values.rabbitmq.enabled}}
              name: defectdojo-{{ .Values.celery.broker }}-specific
              key: {{ .Values.celery.broker }}-password
            {{- else }}
              name: {{ .Values.rabbitmq.existingPasswordSecret }}
              key: {{ .Values.rabbitmq.secretPasswordKey }}  
            {{- end }}            
            {{- else if eq .Values.celery.broker "redis" }}
            {{- if .Values.redis.enabled }}
              name: defectdojo-{{ .Values.celery.broker }}-specific
              key: {{ .Values.celery.broker }}-password
            {{- else }}
              name: {{ .Values.redis.existingSecret }}
              key: {{ .Values.redis.secretKey }}
            {{- end }}  
            {{- end }}
        - name: DD_DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              {{- if eq .Values.database "postgresql" }}
              name: {{ .Values.postgresql.existingSecret }}
              key: {{ .Values.postgresql.secretKey }}
              {{- else if eq .Values.database "mysql" }}
              name: {{ .Values.mysql.auth.existingSecret }}
              key: {{ .Values.mysql.auth.secretKey }}
              {{- end }}
        - name: DD_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: {{ $fullName }}
              key: DD_SECRET_KEY
        resources:
          {{- toYaml .Values.celery.worker.resources | nindent 10 }}
      {{- with .Values.celery.worker.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.celery.worker.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.celery.worker.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
