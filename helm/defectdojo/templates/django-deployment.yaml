{{- $fullName := include "defectdojo.fullname" . -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  {{- with mergeOverwrite dict .Values.extraAnnotations .Values.django.annotations }}
  annotations:
    {{- range $key, $value := . }}
    {{ $key }}: {{ quote $value }}
    {{- end }}
  {{- end }}
  labels:
    defectdojo.org/component: django
    app.kubernetes.io/name: {{ include "defectdojo.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    helm.sh/chart: {{ include "defectdojo.chart" . }}
    {{- range $key, $value := .Values.extraLabels }}
    {{ $key }}: {{ quote $value }}
    {{- end }}
  name: {{ $fullName }}-django
  namespace: {{ .Release.Namespace }}
spec:
  replicas: {{ .Values.django.replicas }}
  {{- with .Values.django.strategy }}
  strategy:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- with .Values.revisionHistoryLimit }}
  revisionHistoryLimit: {{ . }}
  {{- end }}
  selector:
    matchLabels:
      defectdojo.org/component: django
      app.kubernetes.io/name: {{ include "defectdojo.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        defectdojo.org/component: django
        app.kubernetes.io/name: {{ include "defectdojo.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
      {{- range $key, $value := mergeOverwrite dict .Values.extraLabels .Values.podLabels }}
        {{ $key }}: {{ quote $value }}
      {{- end }}
      annotations:
      {{- range $key, $value := mergeOverwrite dict .Values.extraAnnotations .Values.django.annotations }}
        {{ $key }}: {{ quote $value }}
      {{- end }}
      {{- if and .Values.monitoring.enabled .Values.monitoring.prometheus.enabled }}
        prometheus.io/path: /metrics
        prometheus.io/port: "9113"
        prometheus.io/scheme: http
        prometheus.io/scrape: "true"
      {{- end }}
      {{- if eq (.Values.trackConfig | default "disabled") "enabled" }}
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        checksum/secret: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
        checksum/esecret: {{ include (print $.Template.BasePath "/extra-secret.yaml") . | sha256sum }}
      {{- end }}
    spec:
      serviceAccountName: {{ include "defectdojo.serviceAccountName" . }}
      automountServiceAccountToken: {{ .Values.django.automountServiceAccountToken }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
      - name: {{ quote . }}
      {{- end }}
      {{- if .Values.django.mediaPersistentVolume.enabled }}
      {{- if .Values.securityContext.enabled }}
      securityContext:
        {{- include "helpers.securityContext" (list
          .Values
          "securityContext.podSecurityContext"
          "django.podSecurityContext"
        ) | nindent 8 }}
      {{- end }}
      {{- end }}
      volumes:
      - name: run
        emptyDir: {}
      {{- if .Values.localsettingspy }}
      - name: localsettingspy
        configMap:
          name: {{ $fullName }}-localsettingspy
      {{- end }}
      {{- if .Values.django.uwsgi.certificates.enabled }}
      - name: cert-mount
        configMap:
          name: {{ .Values.django.uwsgi.certificates.configName }}
      {{- end }}
      {{- with .Values.django.extraVolumes }}
        {{- . | toYaml | nindent 6 }}
      {{- end }}
      {{- if .Values.django.mediaPersistentVolume.enabled }}
      - name: {{ .Values.django.mediaPersistentVolume.name }}
        {{- if eq .Values.django.mediaPersistentVolume.type "pvc" }}
        persistentVolumeClaim:
          claimName: {{ include "django.pvc_name" $ }}
        {{ else }}
        emptyDir: {}
        {{- end }}
      {{- end }}
      {{- if coalesce .Values.dbMigrationChecker.enabled .Values.cloudsql.enabled .Values.django.extraInitContainers }}
      initContainers:
      {{- range .Values.django.extraInitContainers }}
      - {{- . | toYaml | nindent 8 }}
      {{- end }}
      {{- if .Values.cloudsql.enabled }}
      {{- include "cloudsqlProxy" . | nindent 6 }}
      {{- end }}
      {{- if .Values.dbMigrationChecker.enabled }}
      {{- $data := dict "fullName" $fullName }}
      {{- $newContext := merge . (dict "fullName" $fullName) }}
      {{- include "dbMigrationChecker" $newContext | nindent 6 }}
      {{- end }}
      {{- end }}
      containers:
      {{- if and .Values.monitoring.enabled .Values.monitoring.prometheus.enabled }}
      - name: metrics
        image: '{{ template "monitoring.prometheus.image" . }}'
        imagePullPolicy: {{ .Values.monitoring.prometheus.imagePullPolicy }}
        command:
        - /usr/bin/nginx-prometheus-exporter
        - --nginx.scrape-uri
        - http://127.0.0.1:8080/nginx_status
        {{- with .Values.monitoring.prometheus.extraEnv }}
        env: {{- . | toYaml | nindent 8 }}
        {{- end }}
        ports:
        - name: http-metrics
          protocol: TCP
          containerPort: 9113
        livenessProbe:
          httpGet:
            path: /metrics
            port: http-metrics
          periodSeconds: 20
          initialDelaySeconds: 15
          timeoutSeconds: 5
        {{- with .Values.monitoring.prometheus.resources }}
        resources: {{- . | toYaml | nindent 10 }}
        {{- end }}
        {{- if .Values.securityContext.enabled }}
        securityContext:
          {{- include "helpers.securityContext" (list
            .Values
            "securityContext.containerSecurityContext"
            "monitoring.prometheus.containerSecurityContext"
          ) | nindent 10 }}
        {{- end }}
        {{- with .Values.monitoring.prometheus.extraVolumeMounts }}
        volumeMounts: {{ . | toYaml | nindent 10 }}
        {{- end }}
      {{- end }}
      - name: uwsgi
        image: '{{ template "django.uwsgi.image" . }}'
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        {{- if .Values.securityContext.enabled }}
        securityContext:
          {{- include "helpers.securityContext" (list
            .Values
            "securityContext.containerSecurityContext"
            "django.uwsgi.containerSecurityContext"
          ) | nindent 10 }}
        {{- end }}
        volumeMounts:
        - name: run
          mountPath: /run/defectdojo
        {{- if .Values.localsettingspy }}
        - name: localsettingspy
          readOnly: true
          mountPath: /app/dojo/settings/local_settings.py
          subPath: file
        {{- end }}
        {{- if .Values.django.uwsgi.certificates.enabled }}
        - name: cert-mount
          mountPath: {{ .Values.django.uwsgi.certificates.certMountPath }}
        {{- end }}
        {{- with .Values.django.extraVolumeMounts }}
          {{- . | toYaml | nindent 8 }}
        {{- end }}
        {{- with .Values.django.uwsgi.extraVolumeMounts }}
          {{- . | toYaml | nindent 8 }}
        {{- end }}
        {{- if .Values.django.mediaPersistentVolume.enabled }}
        - name: {{ .Values.django.mediaPersistentVolume.name }}
          mountPath: {{.Values.extraConfigs.DD_MEDIA_ROOT | default "/app/media" | quote }}
        {{- end }}
        ports:
        - name: http-uwsgi
          protocol: TCP
          containerPort: 8081
        envFrom:
        - configMapRef:
            name: {{ $fullName }}
        - secretRef:
            name: {{ $fullName }}-extrasecrets
            optional: true
        env:
        - name: DD_CELERY_BROKER_PASSWORD
          valueFrom:
            secretKeyRef:
            {{- if eq .Values.celery.broker "redis" }}
              name: {{ .Values.redis.auth.existingSecret | default "defectdojo-redis-specific" }}
              key: {{ .Values.redis.auth.existingSecretPasswordKey | default "redis-password" }}
            {{- end }}
        {{- if .Values.django.uwsgi.enableDebug }}
        - name: DD_DEBUG
          value: 'True'
        {{- end }}
        - name: DD_DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.postgresql.auth.existingSecret | default "defectdojo-postgresql-specific" }}
              key: {{ .Values.postgresql.auth.secretKeys.userPasswordKey | default "postgresql-password" }}
        - name: DD_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: {{ $fullName }}
              key: DD_SECRET_KEY
              optional: true
        - name: DD_CREDENTIAL_AES_256_KEY
          valueFrom:
            secretKeyRef:
              name: {{ $fullName }}
              key: DD_CREDENTIAL_AES_256_KEY
              optional: true
        - name: DD_SESSION_COOKIE_SECURE
          value: {{- if or .Values.django.ingress.activateTLS .Values.django.nginx.tls.enabled }} "True" {{- else }} "False" {{- end }}
        - name: DD_CSRF_COOKIE_SECURE
          value: {{- if or .Values.django.ingress.activateTLS .Values.django.nginx.tls.enabled }} "True" {{- else }} "False" {{- end }}
        {{- with .Values.extraEnv }}
          {{- . | toYaml | nindent 8 }}
        {{- end }}
        {{- with .Values.django.extraEnv }}
          {{- . | toYaml | nindent 8 }}
        {{- end }}
        {{- with .Values.django.uwsgi.extraEnv }}
          {{- . | toYaml | nindent 8 }}
        {{- end }}
        {{- if .Values.django.uwsgi.livenessProbe.enabled }}
        livenessProbe:
          httpGet:
            path: /login?force_login_form&next=/
            port: http-uwsgi
            httpHeaders:
            - name: Host
              value: {{ .Values.host }}
          failureThreshold: {{ .Values.django.uwsgi.livenessProbe.failureThreshold }}
          {{- if .Values.django.uwsgi.livenessProbe.initialDelaySeconds }}
          initialDelaySeconds: {{ .Values.django.uwsgi.livenessProbe.initialDelaySeconds }}
          {{- end }}
          periodSeconds: {{ .Values.django.uwsgi.livenessProbe.periodSeconds }}
          successThreshold: {{ .Values.django.uwsgi.livenessProbe.successThreshold }}
          timeoutSeconds: {{ .Values.django.uwsgi.livenessProbe.timeoutSeconds }}
        {{- end }}
        resources:
          {{- toYaml .Values.django.uwsgi.resources | nindent 10 }}
      - name: nginx
        image: '{{ template "django.nginx.image" . }}'
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        {{- if .Values.securityContext.enabled }}
        securityContext:
          {{- include "helpers.securityContext" (list
            .Values
            "securityContext.containerSecurityContext"
            "django.nginx.containerSecurityContext"
          ) | nindent 10 }}
        {{- end }}
        volumeMounts:
        - name: run
          mountPath: /run/defectdojo
        {{- with .Values.django.extraVolumeMounts }}
          {{- . | toYaml | nindent 8 }}
        {{- end }}
        {{- with .Values.django.nginx.extraVolumeMounts }}
          {{- . | toYaml | nindent 8 }}
        {{- end }}
        {{- if .Values.django.mediaPersistentVolume.enabled }}
        - name: {{ .Values.django.mediaPersistentVolume.name }}
          mountPath: /usr/share/nginx/html/media
        {{- end }}
        ports:
        - name: http
          protocol: TCP
          containerPort: {{- if .Values.django.nginx.tls.enabled }} 8443 {{- else }} 8080 {{- end }}
        envFrom:
        - configMapRef:
            name: {{ $fullName }}
        env:
        - name: METRICS_HTTP_AUTH_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ $fullName }}
              key: METRICS_HTTP_AUTH_PASSWORD
        - name: USE_TLS
          value: '{{ .Values.django.nginx.tls.enabled }}'
        - name: GENERATE_TLS_CERTIFICATE
          value: '{{ .Values.django.nginx.tls.generateCertificate }}'
        {{- with .Values.extraEnv }}
          {{- . | toYaml | nindent 8 }}
        {{- end }}
        {{- with .Values.django.extraEnv }}
          {{- . | toYaml | nindent 8 }}
        {{- end }}
        {{- with .Values.django.nginx.extraEnv }}
          {{- . | toYaml | nindent 8 }}
        {{- end }}
        {{- if .Values.django.uwsgi.livenessProbe.enabled }}
        livenessProbe:
          httpGet:
            path: /nginx_health
            port: http
            {{- if .Values.django.nginx.tls.enabled }}
            scheme: HTTPS
            {{- end }}
            httpHeaders:
            - name: Host
              value: {{ .Values.host }}
          failureThreshold: {{ .Values.django.uwsgi.livenessProbe.failureThreshold }}
          {{- if .Values.django.uwsgi.livenessProbe.initialDelaySeconds }}
          initialDelaySeconds: {{ .Values.django.uwsgi.livenessProbe.initialDelaySeconds }}
          {{- end }}
          periodSeconds: {{ .Values.django.uwsgi.livenessProbe.periodSeconds }}
          successThreshold: {{ .Values.django.uwsgi.livenessProbe.successThreshold }}
          timeoutSeconds: {{ .Values.django.uwsgi.livenessProbe.timeoutSeconds }}
        {{- end }}
        {{- if .Values.django.uwsgi.readinessProbe.enabled }}
        readinessProbe:
          httpGet:
            path: /uwsgi_health
            port: http
            {{- if .Values.django.nginx.tls.enabled }}
            scheme: HTTPS
            {{- end }}
            httpHeaders:
            - name: Host
              value: {{ .Values.host }}
          failureThreshold: {{ .Values.django.uwsgi.readinessProbe.failureThreshold }}
          {{- if .Values.django.uwsgi.readinessProbe.initialDelaySeconds }}
          initialDelaySeconds: {{ .Values.django.uwsgi.readinessProbe.initialDelaySeconds }}
          {{- end }}
          periodSeconds: {{ .Values.django.uwsgi.readinessProbe.periodSeconds }}
          successThreshold: {{ .Values.django.uwsgi.readinessProbe.successThreshold }}
          timeoutSeconds: {{ .Values.django.uwsgi.readinessProbe.timeoutSeconds }}
        {{- end }}
        {{- if .Values.django.uwsgi.startupProbe.enabled }}
        startupProbe:
          httpGet:
            path: /uwsgi_health
            port: http
            {{- if .Values.django.nginx.tls.enabled }}
            scheme: HTTPS
            {{- end }}
            httpHeaders:
            - name: Host
              value: {{ .Values.host }}
          failureThreshold: {{ .Values.django.uwsgi.startupProbe.failureThreshold }}
          {{- if .Values.django.uwsgi.startupProbe.initialDelaySeconds }}
          initialDelaySeconds: {{ .Values.django.uwsgi.startupProbe.initialDelaySeconds }}
          {{- end }}
          periodSeconds: {{ .Values.django.uwsgi.startupProbe.periodSeconds }}
          successThreshold: {{ .Values.django.uwsgi.startupProbe.successThreshold }}
          timeoutSeconds: {{ .Values.django.uwsgi.startupProbe.timeoutSeconds }}
        {{- end }}
        resources:
          {{- toYaml .Values.django.nginx.resources | nindent 10 }}
      {{- with .Values.django.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.django.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.django.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
