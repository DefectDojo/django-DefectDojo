{{- $fullName := include "defectdojo.fullname" . -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $fullName }}-django
  labels:
    defectdojo.org/component: django
    app.kubernetes.io/name: {{ include "defectdojo.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    helm.sh/chart: {{ include "defectdojo.chart" . }}
spec:
  replicas: {{ .Values.django.replicas }}
  selector:
    matchLabels:
      defectdojo.org/component: django
      app.kubernetes.io/name: {{ include "defectdojo.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        defectdojo.org/component: django
        app.kubernetes.io/name: {{ include "defectdojo.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
      annotations:
      {{- with .Values.django.annotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if and .Values.monitoring.enabled .Values.monitoring.prometheus.enabled }}
        prometheus.io/path: /metrics
        prometheus.io/port: "9113"
        prometheus.io/scheme: http
        prometheus.io/scrape: "true"
      {{- end }}
    spec:
      serviceAccountName: {{ $fullName }}
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
      - name: {{ .Values.imagePullSecrets }}
      {{- end }}
      volumes:
      - name: run
        emptyDir: {}
      containers:
      {{- if .Values.cloudsql.enabled  }}
      - name: cloudsql-proxy
        image: {{ .Values.cloudsql.image.repository }}:{{ .Values.cloudsql.image.tag }}
        imagePullPolicy: {{ .Values.cloudsql.image.pullPolicy }}
        securityContext:
          runAsNonRoot: true
        command: ["/cloud_sql_proxy"]
        args:
        {{- if eq .Values.database "postgresql" }}
        - "-instances={{ .Values.cloudsql.instance }}=tcp:{{ .Values.postgresql.service.port }}"
        {{- else if eq .Values.database "mysql" }}
        - "-instances={{ .Values.cloudsql.instance }}=tcp:{{ .Values.mysql.service.port }}"
        {{- end }}
      {{- end }}
      {{- if and .Values.monitoring.enabled .Values.monitoring.prometheus.enabled }}
      - name: metrics
        image: {{ .Values.monitoring.prometheus.image }}
        imagePullPolicy: {{ .Values.monitoring.prometheus.imagePullPolicy }}
        command: [ '/usr/bin/exporter', '-nginx.scrape-uri', 'http://127.0.0.1:8080/nginx_status']
        livenessProbe:
          httpGet:
            path: /metrics
            port: 9113
          periodSeconds: 20
          initialDelaySeconds: 15
          timeoutSeconds: 5
      {{- end }}
      - name: uwsgi
        image: '{{ template "django.uwsgi.repository" . }}:{{ .Values.tag }}'
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        securityContext:
          {{- toYaml .Values.securityContext.djangoSecurityContext | nindent 10 }}
        volumeMounts:
        - name: run
          mountPath: /run/defectdojo
        ports:
        - name: http
          protocol: TCP
          containerPort: 8081
        {{- if .Values.django.uwsgi.enable_ptvsd }}
        - name: ptvsd
          protocol: TCP
          containerPort: 3000
        {{- end }}
        envFrom:
        - configMapRef:
            name: {{ $fullName }}
        - secretRef:
            name: {{ $fullName }}-extrasecrets
            optional: true
        env:
        - name: DD_CELERY_BROKER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: defectdojo-{{ .Values.celery.broker }}-specific
              key: {{ .Values.celery.broker }}-password
        - name: DD_DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              {{- if eq .Values.database "postgresql" }}
              name: {{ .Values.postgresql.existingSecret }}
              key: {{ .Values.postgresql.secretKey }}
              {{- else if eq .Values.database "mysql" }}
              name: {{ .Values.mysql.existingSecret }}
              key: {{ .Values.mysql.secretKey }}
              {{- end }}
        - name: DD_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: {{ $fullName }}
              key: DD_SECRET_KEY
        - name: DD_CREDENTIAL_AES_256_KEY
          valueFrom:
            secretKeyRef:
              name: {{ $fullName }}
              key: DD_CREDENTIAL_AES_256_KEY
        - name: DD_SESSION_COOKIE_SECURE
          value: {{- if or .Values.django.ingress.activateTLS .Values.django.nginx.tls.enabled }} "True" {{- else }} "False" {{- end }}
        - name: DD_CSRF_COOKIE_SECURE
          value: {{- if or .Values.django.ingress.activateTLS .Values.django.nginx.tls.enabled }} "True" {{- else }} "False" {{- end }}
        {{- if .Values.django.uwsgi.livenessProbe.enabled }}
        livenessProbe:
          httpGet:
            path: /login?next=/
            port: http
            httpHeaders:
            - name: Host
              value: {{ .Values.host }}
          failureThreshold: {{ .Values.django.uwsgi.livenessProbe.failureThreshold }}
          initialDelaySeconds: {{ .Values.django.uwsgi.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.django.uwsgi.livenessProbe.periodSeconds }}
          successThreshold: {{ .Values.django.uwsgi.livenessProbe.successThreshold }}
          timeoutSeconds: {{ .Values.django.uwsgi.livenessProbe.timeoutSeconds }}
        {{- end }}
        resources:
          {{- toYaml .Values.django.uwsgi.resources | nindent 10 }}
      - name: nginx
        image: '{{ template "django.nginx.repository" . }}:{{ .Values.tag }}'
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        securityContext:
          {{- toYaml .Values.securityContext.nginxSecurityContext | nindent 10 }}
        volumeMounts:
        - name: run
          mountPath: /run/defectdojo
        ports:
        - name: http
          protocol: TCP
          containerPort: {{- if .Values.django.nginx.tls.enabled }} 8443 {{- else }} 8080 {{- end }}
        envFrom:
        - configMapRef:
            name: {{ $fullName }}
        env:
        - name: METRICS_HTTP_AUTH_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ $fullName }}
              key: METRICS_HTTP_AUTH_PASSWORD
        - name: USE_TLS
          value: '{{ .Values.django.nginx.tls.enabled }}'
        - name: GENERATE_TLS_CERTIFICATE
          value: '{{ .Values.django.nginx.tls.generateCertificate }}'
        livenessProbe:
          httpGet:
            path: /nginx_health
            port: http
            {{- if .Values.django.nginx.tls.enabled }}
            scheme: HTTPS
            {{- end }}
            httpHeaders:
            - name: Host
              value: {{ .Values.host }}
          initialDelaySeconds: 10
          periodSeconds: 10
          failureThreshold: 6
        {{- if .Values.django.uwsgi.livenessProbe.enabled }}
        readinessProbe:
          httpGet:
            path: /uwsgi_health
            port: http
            {{- if .Values.django.nginx.tls.enabled }}
            scheme: HTTPS
            {{- end }}
            httpHeaders:
            - name: Host
              value: {{ .Values.host }}
          failureThreshold: {{ .Values.django.uwsgi.livenessProbe.failureThreshold }}
          initialDelaySeconds: {{ .Values.django.uwsgi.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.django.uwsgi.livenessProbe.periodSeconds }}
          successThreshold: {{ .Values.django.uwsgi.livenessProbe.successThreshold }}
          timeoutSeconds: {{ .Values.django.uwsgi.livenessProbe.timeoutSeconds }}
        {{- end }}
        resources:
          {{- toYaml .Values.django.nginx.resources | nindent 10 }}
      {{- with .Values.django.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.django.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.django.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
