{{- if .Values.initializer.run  }}
{{- $fullName := include "defectdojo.fullname" . -}}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ template "initializer.jobname" . }}
  labels:
    defectdojo.org/component: initializer
    app.kubernetes.io/name: {{ include "defectdojo.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    helm.sh/chart: {{ include "defectdojo.chart" . }}
spec:
  ttlSecondsAfterFinished: {{ .Values.initializerKeepSeconds }}
  template:
    metadata:
      labels:
        defectdojo.org/component: initializer
        app.kubernetes.io/name: {{ include "defectdojo.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
      annotations:
      {{- with .Values.initializer.annotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      serviceAccountName: {{ $fullName }}
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
      - name: {{ .Values.imagePullSecrets }}
      {{- end }}
      containers:
      {{- if .Values.cloudsql.enabled  }}
      - name: cloudsql-proxy
        image: {{ .Values.cloudsql.image.repository }}:{{ .Values.cloudsql.image.tag }}
        imagePullPolicy: {{ .Values.cloudsql.image.pullPolicy }}
        securityContext:
          runAsNonRoot: true
        command: ["/cloud_sql_proxy"]
        args:
        - "-verbose={{ .Values.cloudsql.verbose }}"
        {{- if eq .Values.database "postgresql" }}
        - "-instances={{ .Values.cloudsql.instance }}=tcp:{{ .Values.postgresql.service.port }}"
        {{- else if eq .Values.database "mysql" }}
        - "-instances={{ .Values.cloudsql.instance }}=tcp:{{ .Values.mysql.master.service.port }}"
        {{- end }}
        {{- if .Values.cloudsql.enable_iam_login }}
        - "-enable_iam_login"
        {{- end }}
        {{- if .Values.cloudsql.use_private_ip }}
        - "-ip_address_types=PRIVATE"
        {{- end }}
      {{- end }}
      - name: initializer
        image: "{{ template "initializer.repository" . }}:{{ .Values.tag }}"
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        {{- if .Values.securityContext.enabled }}
        securityContext:
          {{- toYaml .Values.securityContext.djangoSecurityContext | nindent 10 }}
        {{- end }}          
        command:
          - /entrypoint-initializer.sh
        envFrom:
        - configMapRef:
            name: {{ $fullName }}
        - secretRef:
            name: {{ $fullName }}
        env:
        - name: DD_DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              {{- if eq .Values.database "postgresql" }}
              name: {{ .Values.postgresql.existingSecret }}
              key: {{ .Values.postgresql.secretKey }}
              {{- else if eq .Values.database "mysql" }}
              name: {{ .Values.mysql.auth.existingSecret }}
              key: {{ .Values.mysql.auth.secretKey }}
              {{- end }}
        resources:
          {{- toYaml .Values.initializer.resources | nindent 10 }}
      restartPolicy: Never
      {{- with .Values.initializer.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.initializer.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.initializer.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  backoffLimit: 1
{{- end }}
