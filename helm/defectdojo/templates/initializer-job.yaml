{{- if .Values.initializer.run }}
{{- $fullName := include "defectdojo.fullname" . -}}
apiVersion: batch/v1
kind: Job
metadata:
  {{- with mergeOverwrite dict .Values.extraAnnotations .Values.initializer.jobAnnotations }}
  annotations:
    {{- range $key, $value := . }}
    {{ $key }}: {{ quote $value }}
    {{- end }}
  {{- end }}
  labels:
    defectdojo.org/component: initializer
    app.kubernetes.io/name: {{ include "defectdojo.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    helm.sh/chart: {{ include "defectdojo.chart" . }}
    {{- range $key, $value := .Values.extraLabels }}
    {{ $key }}: {{ quote $value }}
    {{- end }}
  name: {{ template "initializer.jobname" . }}
  namespace: {{ .Release.Namespace }}
spec:
  {{- if and (int .Values.initializer.keepSeconds) (gt (int .Values.initializer.keepSeconds) 0) }}
  ttlSecondsAfterFinished: {{ .Values.initializer.keepSeconds }}
  {{- end }}
  template:
    metadata:
      labels:
        defectdojo.org/component: initializer
        app.kubernetes.io/name: {{ include "defectdojo.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        {{- with .Values.extraLabels }}
          {{- toYaml . | nindent 8 }}
        {{- end -}}
        {{- with .Values.initializer.labels }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
      annotations:
      {{- with .Values.initializer.annotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      {{- if .Values.securityContext.enabled }}
      securityContext:
        {{- include "helpers.securityContext" (list
          .Values
          "securityContext.podSecurityContext"
          "initializer.podSecurityContext"
        ) | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "defectdojo.serviceAccountName" . }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
      - name: {{ . }}
      {{- end }}
      volumes:
      {{- if .Values.localsettingspy }}
      - name: localsettingspy
        configMap:
          name: {{ $fullName }}-localsettingspy
      {{- end }}
      {{- range .Values.initializer.extraVolumes }}
      - name: userconfig-{{ .name }}
        {{ .type }}:
          {{- if (eq .type "configMap") }}
          name: {{ .name }}
          {{- else if (eq .type "secret") }}
          secretName: {{ .name }}
          {{- else if (eq .type "hostPath") }}
          type: {{ .pathType | default "Directory" }}
          path: {{ .hostPath }}
          {{- end }}
      {{- end }}
      initContainers:
      {{- if .Values.cloudsql.enabled }}
      - name: cloudsql-proxy
        image: {{ .Values.cloudsql.image.repository }}:{{ .Values.cloudsql.image.tag }}
        imagePullPolicy: {{ .Values.cloudsql.image.pullPolicy }}
        {{- with .Values.cloudsql.resources }}
        resources: {{- . | toYaml | nindent 10 }}
        {{- end }}
        restartPolicy: Always
        {{- if .Values.securityContext.enabled }}
        securityContext:
          {{- include "helpers.securityContext" (list
            .Values
            "securityContext.containerSecurityContext"
            "cloudsql.containerSecurityContext"
          ) | nindent 10 }}
        {{- end }}
        command: ["/cloud_sql_proxy"]
        args:
        - "-verbose={{ .Values.cloudsql.verbose }}"
        - "-instances={{ .Values.cloudsql.instance }}=tcp:{{ .Values.postgresql.primary.service.ports.postgresql }}"
        {{- if .Values.cloudsql.enable_iam_login }}
        - "-enable_iam_login"
        {{- end }}
        {{- if .Values.cloudsql.use_private_ip }}
        - "-ip_address_types=PRIVATE"
        {{- end }}
        volumeMounts:
        {{- range .Values.initializer.extraVolumes }}
        - name: userconfig-{{ .name }}
          readOnly: true
          mountPath: {{ .path }}
          subPath: {{ .subPath }}
        {{- end }}
      {{- end }}
      - name: wait-for-db
        command:
        - '/bin/bash'
        - '-c'
        - '/wait-for-it.sh ${DD_DATABASE_HOST:-postgres}:${DD_DATABASE_PORT:-5432} -t 300 -s -- /bin/echo Database is up'
        image: '{{ template "django.uwsgi.repository" . }}:{{ .Values.tag }}'
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        {{- if .Values.securityContext.enabled }}
        securityContext:
          {{- include "helpers.securityContext" (list
            .Values
            "securityContext.containerSecurityContext"
            "django.uwsgi.containerSecurityContext"
          ) | nindent 10 }}
        {{- end }}
        envFrom:
        - configMapRef:
            name: {{ $fullName }}
        - secretRef:
            name: {{ $fullName }}-extrasecrets
            optional: true
        env:
        {{- with .Values.initializer.extraEnv }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        resources:
          {{- toYaml .Values.initializer.resources | nindent 10 }}
        volumeMounts:
        {{- range .Values.initializer.extraVolumes }}
        - name: userconfig-{{ .name }}
          readOnly: true
          mountPath: {{ .path }}
          subPath: {{ .subPath }}
        {{- end }}
      containers:
      - name: initializer
        image: "{{ template "initializer.repository" . }}:{{ .Values.tag }}"
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        {{- if .Values.securityContext.enabled }}
        securityContext:
          {{- include "helpers.securityContext" (list
            .Values
            "securityContext.containerSecurityContext"
            "initializer.containerSecurityContext"
          ) | nindent 10 }}
        {{- end }}
        volumeMounts:
        {{- if .Values.localsettingspy }}
        - name: localsettingspy
          readOnly: true
          mountPath: /app/dojo/settings/local_settings.py
          subPath: file
        {{- end }}
        {{- range .Values.initializer.extraVolumes }}
        - name: userconfig-{{ .name }}
          readOnly: true
          mountPath: {{ .path }}
          subPath: {{ .subPath }}
        {{- end }}
        command:
          - /entrypoint-initializer.sh
        envFrom:
        - configMapRef:
            name: {{ $fullName }}
        - secretRef:
            name: {{ $fullName }}
            optional: true
        - secretRef:
            name: {{ $fullName }}-extrasecrets
            optional: true
        env:
        - name: DD_DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.postgresql.auth.existingSecret }}
              key: {{ .Values.postgresql.auth.secretKeys.userPasswordKey }}
        {{- with .Values.initializer.extraEnv }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        resources:
          {{- toYaml .Values.initializer.resources | nindent 10 }}
      restartPolicy: Never
      {{- with .Values.initializer.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.initializer.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.initializer.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  backoffLimit: 1
{{- end }}
