---
# Global settings
# create defectdojo specific secret
createSecret: false
# create rabbitmq secret in defectdojo chart, outside of rabbitmq chart
createRabbitMqSecret: false
# create redis secret in defectdojo chart, outside of redis chart
createRedisSecret: false
# create mysql secret in defectdojo chart, outside of mysql chart
createMysqlSecret: false
# create postgresql secret in defectdojo chart, outside of postgresql chart
createPostgresqlSecret: false
## Configuration value to select database type
## Option to use "postgresql" or "mysql" database type, by default "mysql" is chosen
## Set the "enable" field to true of the database type you select (if you want to use internal database) and false of the one you don't select
database: postgresql
host: defectdojo.default.minikube.local
imagePullPolicy: Always
# Where to pull the defectDojo images from. Defaults to "defectdojo/*" repositories on hub.docker.com
repositoryPrefix: defectdojo
# When using a private registry, name of the secret that holds the registry secret (eg deploy token from gitlab-ci project)
# imagePullSecrets: defectdojoregistrykey
tag: latest

admin:
  user: admin
  password:
  firstName: Administrator
  lastName: User
  mail: admin@defectdojo.local
  secretKey:
  credentialAes256Key:
  metricsHttpAuthPassword:

monitoring:
  enabled: false

annotations: {}

# Components
celery:
  broker: rabbitmq
  logLevel: DEBUG
  beat:
    annotations: {}
    affinity: {}
    nodeSelector: {}
    replicas: 1
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 2000m
        memory: 256Mi
    tolerations: []
  worker:
    annotations: {}
    affinity: {}
    logLevel: DEBUG
    nodeSelector: {}
    replicas: 1
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 2000m
        memory: 256Mi
    tolerations: []
    app_settings:
      pool_type: solo
      # Performance improved celery worker config when needing to deal with a lot of findings (e.g deduplication ops)
      # Comment out the "solo" line, and uncomment the following lines.
      # pool_type: prefork
      # autoscale_min: 2
      # autoscale_max: 8
      # concurrency: 8
      # prefetch_multiplier: 128

django:
  annotations: {}
  affinity: {}
  ingress:
    enabled: true
    activateTLS: true
    secretName: defectdojo-tls
    annotations:
      # Restricts the type of ingress controller that can interact with our chart (nginx, traefik, ...)
      #kubernetes.io/ingress.class: nginx
      # Depending on the size and complexity of your scans, you might want to increase the default ingress timeouts if you see repeated 504 Gateway Timeouts
      #nginx.ingress.kubernetes.io/proxy-read-timeout: "1800"
      #nginx.ingress.kubernetes.io/proxy-send-timeout: "1800"
  nginx:
    tls:
      enabled: false
      generateCertificate: false
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 2000m
        memory: 256Mi
  nodeSelector: {}
  replicas: 1
  tolerations: []
  uwsgi:
    livenessProbe:
      # Enable liveness checks on uwsgi container. Those values are use on nginx readiness checks as well.
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 120
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 2000m
        memory: 512Mi
    app_settings:
      processes: 2
      threads: 2

initializer:
  run: true
  keepSeconds: 60
  affinity: {}
  nodeSelector: {}
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 2000m
      memory: 256Mi

mysql:
  enabled: false
  mysqlUser: defectdojo
  mysqlPassword: ""
  mysqlRootPassword: ""
  existingSecret: defectdojo-mysql-specific
  secretKey: mysql-password
  mysqlDatabase: defectdojo
  service:
  # To use an external mySQL instance, set enabled to false and uncomment
  # the line below:
  mysqlServer: "127.0.0.1"


postgresql:
  enabled: true
  postgresqlUsername: defectdojo
  postgresqlPassword: ""
  postgresqlDatabase: defectdojo
  existingSecret: defectdojo-postgresql-specific
  secretKey: postgresql-password
  persistence:
    enabled: true
  replication:
    enabled: false
  service:
  # To use an external PostgreSQL instance, set enabled to false and uncomment
  # the line below:
  postgresServer: "127.0.0.1"
  master:
    affinity: {}
    nodeSelector: {}
  slave:
    affinity: {}
    nodeSelector: {}

# Google CloudSQL support in GKE via gce-proxy
cloudsql:
  # To use CloudSQL in GKE set 'enable: true'
  enabled: false
  image:
    # set repo and image tag of gce-proxy
    repository: gcr.io/cloudsql-docker/gce-proxy
    tag: 1.17
    pullPolicy: IfNotPresent
  # set CloudSQL instance: 'project:zone:instancname'
  instance: ""

rabbitmq:
  enabled: true
  replicas: 1
  rabbitmq:
    password: ""
    erlangCookie: ""
    existingPasswordSecret: defectdojo-rabbitmq-specific
    existingErlangSecret: defectdojo-rabbitmq-specific
    affinity: {}
    nodeSelector: {}

redis:
  enabled: false
  existingSecret: defectdojo-redis-specific
  secretKey: redis-password
  password: ""
  cluster:
    slaveCount: 1
  # To use an external Redis instance, set enabled to false and uncomment
  # the line below:
  # redisServer: myrediscluster

# To add extra variables not predefined by helm config it is possible to define in extraConfigs block, e.g. below:
# NOTE  Do not store any kind of sensitive information inside of it
# extraConfigs:
#  DD_SOCIAL_AUTH_AUTH0_OAUTH2_ENABLED: 'true'
#  DD_SOCIAL_AUTH_AUTH0_KEY: 'dev'
#  DD_SOCIAL_AUTH_AUTH0_DOMAIN: 'xxxxx'

# Extra secrets can be created inside of extraSecrets block:
# NOTE  This is just an exmaple, do not store sensitive data in plain text form, better inject it during the deployment/upgrade by --set extraSecrets.secret=someSecret
# extraSecrets:
#  DD_SOCIAL_AUTH_AUTH0_SECRET: 'xxx'
