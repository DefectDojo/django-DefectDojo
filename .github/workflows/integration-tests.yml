name: Integration tests
# run on pull_request_target instead of just pull_request as we need write access to update the status check
on: [push, pull_request]
jobs:
  integration_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: fkirc/skip-duplicate-actions@master
        with:
          github_token: ${{ github.token }}

      - name: Set integration-test mode
        run: docker/setEnv.sh integration_tests
      
      # Pull the latest image to build, and avoid caching pull-only images.
      # (docker pull is faster than caching in most cases.)
      # - run: docker-compose pull mysql nginx rabbitmq
      # In this step, this action saves a list of existing images,
      # the cache is created without them in the post run.
      # It also restores the cache if it exists.
      # - uses: satackey/action-docker-layer-caching@master
        # Ignore the failure of a step and avoid terminating the job.
        # continue-on-error: true

      - name: Build for unittests
        run: docker-compose build uwsgi unittests mysql initializer

      # phased startup so we can use the exit code from integrationtest container
      - name: Initialize
        run: docker-compose up -d mysql # initializer

      # - name: Initialize Logs
      #   run: docker-compose logs -f initializer

      - name: Unit tests
        run: docker-compose up --exit-code-from unittests unittests

      - name: Build the rest
        if: success()
        run: docker-compose build

      - name: Start Dojo
        # implicity starts uwsgi and rabbitmq
        if: success()
        run: docker-compose up -d nginx celerybeat celeryworker

      - name: Integration tests
        if: success()
        run: docker-compose up --exit-code-from integrationtest integrationtest

      - name: Logs
        if: failure()
        run: docker-compose logs --tail="2500" uwsgi

      - name: Shutdown
        if: always()
        run: docker-compose down
