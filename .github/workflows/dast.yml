name: DAST Analysis

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  dast:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Запуск вашего приложения (если необходимо)
      - name: Start application
        run: |
          # Здесь запустите ваше приложение локально
          # Например, для Flask-приложения:
          nohup python app.py > app.log 2>&1 &
          echo "Waiting for the application to start..."
          sleep 20  # Даем приложению время на запуск

      # Проверка доступности целевого URL
      - name: Check if target URL is reachable
        run: |
          if ! curl -s --head --fail ${{ secrets.DAST_TARGET_URL }} > /dev/null; then
            echo "Target URL is not reachable!"
            exit 1
          fi

      # Запуск OWASP ZAP
      - name: Run OWASP ZAP
        uses: zaproxy/action-full-scan@v0.8.0
        with:
          target: ${{ secrets.DAST_TARGET_URL }}  # URL вашего приложения
          spider: true  # Включить паучий поиск
          active-scan: true  # Включить активное сканирование
          generate-html-report: true  # Генерировать HTML-отчет
          exit-code: 0  # Не завершать пайплайн с ошибкой, даже если найдены уязвимости

      # Сохранение отчетов как артефактов
      - name: Upload DAST report
        uses: actions/upload-artifact@v4
        with:
          name: dast-report
          path: ./zap/wrk/report.html  # Путь к сгенерированному отчету

      # Опционально: Отправка результатов в систему управления уязвимостями
      - name: Send results to vulnerability management system
        run: |
          if [ -f "./zap/wrk/report.json" ]; then
            curl -X POST -H "Content-Type: application/json" \
              -d @./zap/wrk/report.json \
              ${{ secrets.VULN_MANAGEMENT_API }}
          else
            echo "DAST report not found!"
          fi
        if: always()  # Выполнить этот шаг всегда, независимо от успеха предыдущих шагов
