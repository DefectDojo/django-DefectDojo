name: Security and Unit Tests for Django

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: read  # Чтение содержимого репозитория
  packages: read  # Чтение пакетов (если используется Docker)
  security-events: write  # Запись результатов безопасности
  checks: write  # Необходимо для отправки результатов тестов в GitHub Checks

jobs:
  security-and-tests:
    runs-on: ubuntu-latest

    services:
      postgres:  # Настройка PostgreSQL для тестов
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f "requirements.txt" ]; then
            echo "Installing dependencies from requirements.txt..."
            pip install -r requirements.txt || { echo "Dependency installation failed!"; exit 1; }
          else
            echo "requirements.txt not found! Skipping dependency installation."
            exit 1
          fi

      - name: Configure Django settings for testing
        run: |
          echo "Configuring Django settings for testing..."
          # Создаем файл .env, если он не существует
          if [ ! -f ".env" ]; then
            echo "Creating .env file for testing..."
            cat <<EOF > .env
DEBUG=True
SECRET_KEY=your_secret_key_for_testing
DATABASE_URL=postgres://postgres:postgres@localhost:5432/testdb
EOF
          fi
          # Импортируем переменные окружения из .env
          export $(grep -v '^#' .env | xargs)

      - name: Run database migrations
        run: |
          if command -v python manage.py &>/dev/null; then
            echo "Running database migrations..."
            python manage.py migrate --noinput
          else
            echo "manage.py not found. Skipping migrations."
          fi

      - name: Collect static files (if needed)
        run: |
          if command -v python manage.py &>/dev/null; then
            echo "Collecting static files..."
            python manage.py collectstatic --noinput --clear
          else
            echo "manage.py not found. Skipping static collection."
          fi

      - name: Run unit tests
        run: |
          pytest --junitxml=test-results.xml || { 
            echo "Tests failed! Creating empty test-results.xml...";
            touch test-results.xml;  # Создаем пустой файл, если тесты не прошли
          }
        id: run-tests

      - name: Check test results
        if: steps.run-tests.outcome == 'failure'
        run: |
          echo "Tests failed! Review the logs for details."
          exit 1  # Останавливаем пайплайн, если тесты не прошли

      - name: Install TruffleHog for secret scanning
        run: |
          pip install trufflehog
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt || { echo "Dependency installation failed!"; exit 1; }
          fi

      - name: Scan repository for secrets with TruffleHog
        id: secret-scan
        run: |
          trufflehog git --entropy=False $GITHUB_WORKSPACE || true
          if [[ $(cat trufflehog-report.json 2>/dev/null) ]]; then
            echo "Secrets found in the repository!"
            cat trufflehog-report.json
            exit 1  # Останавливаем пайплайн, если найдены секреты
          else
            echo "No secrets found in the repository."
          fi

      - name: Scan configuration files with Checkov
        id: checkov-scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .  # Сканируем весь проект
          skip_checks: ""  # Не пропускаем никакие проверки
          quiet: false  # Выводим подробные результаты

      - name: Check Checkov results and stop pipeline if issues found
        if: steps.checkov-scan.outcome == 'failure'
        run: |
          echo "Configuration issues found by Checkov!"
          exit 1  # Останавливаем пайплайн, если найдены проблемы

      - name: Install Trivy for image scanning
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
          trivy --version

      - name: Scan Docker image with Trivy
        id: trivy-scan
        run: |
          if docker images defectdojo:$GITHUB_SHA --format '{{.Repository}}:{{.Tag}}' | grep -q 'defectdojo'; then
            echo "Scanning Docker image with Trivy..."
            trivy image --exit-code 0 --severity HIGH,CRITICAL defectdojo:$GITHUB_SHA || true
            if [[ $(cat trivy-report.json 2>/dev/null) ]]; then
              echo "Vulnerabilities found in the Docker image!"
              cat trivy-report.json
              exit 1  # Останавливаем пайплайн, если найдены уязвимости
            else
              echo "No vulnerabilities found in the Docker image."
            fi
          else
            echo "Docker image not found. Skipping Trivy scan."
          fi

      - name: Upload test and security reports as artifacts
        if: always()  # Выполняется всегда, даже при ошибках
        uses: actions/upload-artifact@v4
        with:
          name: test-and-security-reports
          path: |
            test-results.xml
            trufflehog-report.json
            checkov_report.json
            trivy-report.json
