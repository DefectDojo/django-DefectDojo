name: Secure CI/CD Pipeline


on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]

env:
  SERVER_IP: 5.129.250.92
  DEPLOY_USER: root
  DOCKER_REGISTRY: ghcr.io
  DOCKER_IMAGE_NAME: ${{ github.repository }}

jobs:
  sast:
    name: SAST Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety semgrep
          
      - name: Run Bandit (Python SAST)
        run: |
          bandit -r . -f json -o bandit-results.json || true
          
      - name: Run Semgrep
        run: |
          semgrep --config=auto --json -o semgrep-results.json . || true
          
      - name: Run Safety Check
        run: |
          safety check --json -o safety-results.json || true
          
      - name: Upload SAST results
        uses: actions/upload-artifact@v4
        with:
          name: sast-results
          path: |
            bandit-results.json
            semgrep-results.json
            safety-results.json
  
  build:
    name: Build Application
    needs: sast
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker
        run: |
          docker --version
          docker info
      
      - name: Login to GitHub Container Registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.DOCKER_REGISTRY }} -u ${{ github.actor }} --password-stdin
      
      - name: Create minimal Docker application
        run: |
          echo "FROM python:3.10-slim" > Dockerfile
          echo "WORKDIR /app" >> Dockerfile
          echo "RUN apt-get update && apt-get install -y gcc libpq-dev && rm -rf /var/lib/apt/lists/*" >> Dockerfile
          echo "COPY requirements.txt ./" >> Dockerfile
          echo "RUN pip install --no-cache-dir -r requirements.txt" >> Dockerfile
          echo "COPY . ." >> Dockerfile
          echo "EXPOSE 8000" >> Dockerfile
          echo 'CMD ["python", "-m", "http.server", "8000"]' >> Dockerfile
          
          if [ ! -f "requirements.txt" ]; then
            echo "Django>=4.0" > requirements.txt
            echo "gunicorn>=20.0" >> requirements.txt
          fi
      - name: Build and push custom image
        run: |
          docker build -t ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:latest .
          docker tag ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:latest ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
        
          docker push ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:latest
          docker push ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
        
          echo "✓ Image successfully built and pushed to GHCR"
      
      - name: Verify image
        run: |
          docker pull ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:latest
          echo "✓ Image verification successful"
