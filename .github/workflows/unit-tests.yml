name: Unit tests for Django

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: read  # Только чтение содержимого репозитория
  checks: write  # Необходимо для отправки результатов тестов в GitHub Checks

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:  # Настройка PostgreSQL для тестов
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'  # Используем Python 3.10, так как он совместим с Django 4.2.4

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f "requirements.txt" ]; then
            echo "Installing dependencies from requirements.txt..."
            pip install -r requirements.txt || { echo "Dependency installation failed!"; exit 1; }
          else
            echo "requirements.txt not found! Skipping dependency installation."
            exit 1
          fi

      - name: Configure Django settings for testing
        run: |
          echo "Configuring Django settings for testing..."
          cp .env.example .env  # Создаем файл окружения (если используется django-environ)
          sed -i 's/DATABASE_URL=.*$/DATABASE_URL=postgres:\/\/postgres:postgres@localhost:5432\/testdb/' .env
          export $(grep -v '^#' .env | xargs)  # Импортируем переменные окружения

      - name: Run database migrations
        run: |
          if command -v python manage.py &>/dev/null; then
            echo "Running database migrations..."
            python manage.py migrate --noinput
          else
            echo "manage.py not found. Skipping migrations."
          fi

      - name: Collect static files (if needed)
        run: |
          if command -v python manage.py &>/dev/null; then
            echo "Collecting static files..."
            python manage.py collectstatic --noinput
          else
            echo "manage.py not found. Skipping static collection."
          fi

      - name: Run unit tests
        run: |
          pytest --junitxml=test-results.xml || { 
            echo "Tests failed! Creating empty test-results.xml...";
            touch test-results.xml;  # Создаем пустой файл, если тесты не прошли
          }
        id: run-tests

      - name: Check test results
        if: steps.run-tests.outcome == 'failure'
        run: |
          echo "Tests failed! Review the logs for details."
          exit 1  # Завершить пайплайн с ошибкой, если тесты не прошли

      - name: Upload test results
        if: always()  # Выполнить этот шаг всегда, независимо от успеха предыдущих шагов
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results.xml
