DefectDojo Features
===================

Below are the main sections within DefectDojo.  Each is designed to allow for ease of use and simple organization of
Products and their Tests. The :doc:`models` page will help you understand the terminology we use below, so we recommend
taking a look at that first.

Products
--------

The following attributes describe a Product:

Name
    A short name for the product, used for easy identification.  This field can hold up to 300 characters.

Description
    Used to fully describe the product.  This field can hold up to 2000 characters.

Product Manager
    Provides the ability to store who manages the product lifecycle.  Useful for contacting team members.  This field
    can hold up to 200 characters.

Technical Contact
    Provides the ability to store who should be contacted in case of technical questions and/or difficulties.models.
    This field can hold up to 200 characters.

Manager
    Provides the ability to store who manages the technical resources for the product. This field can hold up to 200
    characters.

Date Created
    Stores when the Product was fist added to DefectDojo.

Product Type
    Used to group products together.

Authorized Users
    List of users who are allowed to view and interact with the product.

Products are listed on the ``/product`` page and can be filtered by their attributes as well as sorted by their name and
product type.

.. image:: /_static/product_3.png
    :alt: Product Listing Page

Visual representation of a product:

.. image:: /_static/product_1.png
    :alt: View Product Page

Product with metrics drop down displayed:

.. image:: /_static/product_2.png
    :alt: View Product Page With Metrics Displayed

Engagements
-----------

The following attributes describe an Engagement:

Name
    Helps distinguish one Engagement from another on the same product. This field can hold up to 300 characters.

Target Start Date
    The projected start date for this engagement.

Target End Date
    The projected end date for this engagment.

Lead
    The DefectDojo user who is considered the lead for this group of tests.

Product
    The Product being tested as part of this group of tests.

Active
    Denotes if the Engagement is currently active or not.

Test Strategy
    The URL of the testing strategy defined for this Engagement.

Threat Model
    The document generated by a threat modeling session discussing the risks associated with this product at this
    moment in time.

Status
    Describes the current state of the Engagement.  Values include In Progress, On Hold and Completed.

Engagements are listed in the ``/engagement`` page and can be filtered by their attributes as well as sorted by the
product or product type.

.. image:: /_static/eng_2.png
    :alt: Engagement Listing Page

Visual representation of an engagement:

.. image:: /_static/eng_1.png
    :alt: View Engagement Page

Endpoints
---------

.. |FQDN| replace:: Fully Qualified Domain Name

Endpoints represent testable systems defined by IP address or |FQDN|.

The following attributes describe an Endpoint:

Protocol
    The communication protocol such as 'http', 'https', 'ftp', etc.

Host
    The host name or IP address, you can also include the port number. For example '127.0.0.1', '127.0.0.1:8080',
    'localhost', 'yourdomain.com'.

Path
    The location of the resource, it should start with a '/'. For example "/endpoint/420/edit"

Query
    The query string, the question mark should be omitted. "For example 'group=4&team=8'

Fragment
    The fragment identifier which follows the hash mark. The hash mark should be omitted. For example 'section-13',
    'paragraph-2'.

Product
    The Product that this endpoint should be associated with.

Endpoints are listed in the ``/engagement`` page and can be filtered by their attributes as well as sorted by the
product or host.

.. image:: /_static/end_1.png
    :alt: Endpoint Listing Page

Visual representation of an endpoint:

.. image:: /_static/end_2.png
    :alt: View Endpoint Page

Visual representation of an endpoint with metrics displayed:

.. image:: /_static/end_3.png
    :alt: View Endpoint Page with metrics


Findings
--------

Findings represent a flaw within the product being tested.  The following attributes help define a Finding:

Title
    A short description of the flaw (Up to 100 characters)

Description
    Longer more descriptive information about the flaw.

Date
    The date the flaw was discovered.

CWE
    The CWE nubmer associated with this flaw.

Severity
    The severity level of this flaw (Critical, High, Medium, Low, Informational)

Numerical Severity
    The numerical representation of the severity (S0, S1, S2, S3, S4)

Mitigation
    Text describing how to best fix the flaw.

Impact
    Text describing the impact this flaw has on systems, products, enterprise, etc.

Endpoints
    The hosts within the product that are susceptible to this flaw.

References
    The external documentation available for this flaw.

Test
    The test that is associated with this flaw.  The flaw belong to the test.

Is Template
    Denotes of this finding is a template and can be reused.

Active
    Denotes if this flaw is active or not.

Verified
    Denotes if this flaw has been manually verified by tester.

False Positive
    Denotes if this flaw has been deemed a false positive by the tester.

Duplicate
    Denotes if this flaw is a duplicate of other flaws reported.

Out Of Scope
    Denotes if this flaw falls outside the scope of the test and/or engagement.

Mitigated
    Denotes if this flaw has been fixed, by storing the date it was fixed.

Mitigated By
    Documents who has deemed this flaw as fixed.

Reporter
    Documents who reported the flaw.

Last Reviewed
    Provides the date the flaw was last "touched" by a tester.

Last Reviewed By
    Provides the person who last reviewed the flaw.

Notes
    Stores information pertinent to the flaw or the mitigation.

Findings are listed on the ``/finding/open``, ``/finding/closed``, and ``/finding/accepted`` pages. They can be filtered
by their attributes as well as sorted by their Name, Date, Reviewed Date, Severity and Product.

.. image:: /_static/find_1.png
    :alt: Finding Listing Page

|

.. image:: /_static/find_2.png
    :alt: Finding Listing Page

|

.. image:: /_static/find_3.png
    :alt: Finding Listing Page

|

Visual representation of a Finding:

.. image:: /_static/find_4.png
    :alt: Finding View

Metrics
-------

DefectDojo provides a number of metrics visualization in order to help with reporting, awareness and to be able to
quickly communicate a products/product type's security stance.

The following metric views are provided:

Product Type Metrics
    This view provides graphs displaying Open Bug Count by Month, Accepted Bug Count by Month, Open Bug Count by Week,
    Accepted Bug Count by Week as well as tabular data on Top 10 Products by bug severity, Detail Breakdown of all
    reported findings, Opened Findings, Accepted Findings, Closed Findings, Trending Open Bug Count, Trending Accepted
    Bug Count, and Age of Issues.

    .. image:: /_static/met_1.png
        :alt: Product Type Metrics

Product Type Counts
    This view provides tabular data of Total Current Security Bug Count, Total Security Bugs Opened In Period, Total
    Security Bugs Closed In Period, Trending Total Bug Count By Month, Top 10 By Bug Severity, and Open Findings.  This
    view works great for communication with stakeholders as it is a snapshot in time of the product.

    .. image:: /_static/met_2.png
        :alt: Product Type Counts

Simple Metrics
    Provides tabular data for all Product Types.  The data displayed in this view is the total number of S0, S1, S2, S3,
    S4, Opened This Month, and Closed This Month.

    .. image:: /_static/met_3.png
        :alt: Simple Metrics

Engineer Metrics
    Provides graphs displaying information about an testers activity.

    .. image:: /_static/met_4.png
        :alt: Simple Metrics

Metrics Dashboard
    Provides a full screen, auto scroll view with many metrics in graph format.  This view is great for large displays
    or "Dashboards."

    .. image:: /_static/met_5.png
        :alt: Metrics Dashboard

Users
-----

DefectDojo users inherit from `django.contrib.auth.models.User`_.

.. _django.contrib.auth.models.User: https://docs.djangoproject.com/en/1.8/topics/auth/default/#user-objects

A username, first name, last name, and email address can be associated with each.  Additionally the following
describe the type of use they are:

Active
    Designates whether this user should be treated as active. Unselect this instead of deleting accounts.

Staff status
    Designates whether the user can log into this site.

Superuser status
    Designates that this user has all permissions without explicitly assigning them.

Calendar
--------

The calendar view provides a look at all the engagements occurring during the month displayed.  Each entry is a direct
link to the Engagement view page.

Imports
-------

DefectDojo has the ability to import reports from other security tools.  Currently importers exist for:

1. Burp XML
2. Nessus (CSV, XML)
3. Nexpose XML 2.0
4. ZAP XML
5. Veracode Detailed XML Report
6. Checkmarx Detailed XML Report
7. AppSpider Vulnerabilities Summary XML Report (VulnerabilitiesSummary.xml)


The importers analyze each report and create new Findings for each item reported.  DefectDojo collapses duplicate
Findings by capturing the individual hosts vulnerable.

.. image:: /_static/imp_1.png
    :alt: Import Form

Additionally, DefectDojo allows for re-imports of previously uploaded reports.  DefectDojo will attempt to capture the
deltas between the original and new import and automatically add or mitigate findings as appropriate.

.. image:: /_static/imp_2.png
    :alt: Re-Import Form

Port Scans
----------

DefectDojo has the ability to run a port scan using nmap.  Scan can be configured for TCP or UDP ports as well as for
a Weekly, Monthly or Quarterly frequency.

.. image:: /_static/scan_1.png
    :alt: Port Scan Form

In order for the scans to kick off the `dojo.management.commands.run_scan.py` must run.  It is easy to set up a cron
job in order to kick these off at the appropriate frequency.  Below is an example cron entry: ::

    0 0 * * 0 /root/.virtualenvs/dojo/bin/python /root/defect-dojo/manage.py run_scan Weekly
    0 0 1 * * /root/.virtualenvs/dojo/bin/python /root/defect-dojo/manage.py run_scan Monthly
    0 0 1 3,6,9,12 * /root/.virtualenvs/dojo/bin/python /root/defect-dojo/manage.py run_scan Quarterly

.. image:: /_static/scan_2.png
    :alt: Port Scan Form

The scan process will emal the configured recipients with the results.

These scans call also be kicked off on demand by selecting the Launch Scan Now option in the view scan screen.

.. image:: /_static/scan_3.png
    :alt: Port Scan Form

Reports
-------

.. image:: /_static/report_1.png
    :alt: Report Listing

DefectDojo's reports can be generated in AsciiDoc and PDF.  AsciiDoc is recommended for reports with a large number of
findings.

The PDF report is generated using `wkhtmltopdf`_ via `Celery`_ and sane defaults are included in the `settings.py` file.
This allows report generation to be asynchronous and improves the user experience.

If you are updating from an older version of DefectDojo, you will need to install `wkhtmltopdf` on your own.  Please
follow the directions for your specific OS in the `wkhtmltopdf documentation`_.

Some operating systems are capable of installing `wkhtmltopdf` from their package managers:

.. Note::
    Report email notifications are commented out by default.  In order to enable them please uncomment the
    `email_requester(report, uri, error=None)` function and its references in the `tasks.py` file in the main `dojo`
    directory.

Mac: ::

    brew install Caskroom/cask/wkhtmltopdf

Debian/Ubuntu: ::

    sudo apt-get install wkhtmltopdf

Fedora/Centos: ::

    sudo yum install wkhtmltopdf

.. Warning::
    Version in debian/ubuntu repos have reduced functionality (because it compiled without the wkhtmltopdf QT
    patches), such as adding outlines, headers, footers, TOC etc. To use this options you should install static binary
    from `wkhtmltopdf`_ site or you can use this :download:`script <../reports.sh>`.

Additionally, DefectDojo takes advantage of `python-PDFKit`_ to interact with the `wkhtmltopdf` commandline interface.
It is easily installed by running: ::

    pip install pdfkit

It will also be necessary to add the path of `wkhtmltopdf` to your `settings.py` file.  By default the following entry
ships with DefectDojp: ::

    WKHTMLTOPDF_PATH = '/usr/local/bin/wkhtmltopdf'

However you make have to update that entry to suite your installation.

Celery is included with DefectDojo and needs to be kicked off in order for reports to generate/work.
In development you can run the celery process like: ::

    celery -A dojo worker -l info --concurrency 3

In production it is recommended that the celery process be daemonized.  Supervisor is also included with
DefectDojo and can be set up by following the `Celery documentation`_.  A sample `celeryd.conf` `can be found at`_.

.. _can be found at: https://github.com/celery/celery/blob/3.1/extra/supervisord/celeryd.conf

Celery beat should also be running, this will allow for celery to clean up after itself and keep your task database from
getting too large.  In development you can run the process like: ::

    celery beat -A dojo -l info

In production it is recommended that the celery beat process also be daemonized. A sample `celerybeatd.conf`
`can be found here`_.

.. _can be found here: https://github.com/celery/celery/blob/3.1/extra/supervisord/celerybeat.conf

If you are upgrading from an older version of DefectDojo, you will have to install Celery on your own.  To do this you
you can run: ::

    pip install celery

You will also need to install `sqlalchemy`: ::

    pip install sqlalchemy

If you are using virtual environments make sure your environment is activated.  You can also follow the `installation
instructions`_ from the Celery documentation.

.. _wkhtmltopdf: http://wkhtmltopdf.org/
.. _wkhtmltopdf documentation: https://github.com/pdfkit/pdfkit/wiki/Installing-WKHTMLTOPDF
.. _python-PDFKit: https://github.com/JazzCore/python-pdfkit
.. _Celery: http://docs.celeryproject.org/en/latest/index.html
.. _Celery documentation: http://docs.celeryproject.org/en/latest/tutorials/daemonizing.html
.. _installation instructions: http://docs.celeryproject.org/en/latest/getting-started/introduction.html#installation

Reports can be generated for:

1.  Groups of Products
2.  Individual Products
3.  Endpoints
4.  Product Types
5.  Custom Reports

.. image:: /_static/report_2.png
    :alt: Report Generation

Filtering is available on all Report Generation views to aid in focusing the report for the appropriate need.

Custom reports allow you to select specific components to be added to the report.  These include:

1.  Cover Page
2.  Table of Contents
3.  WYSIWYG Content
4.  Findings List
5.  Endpoint List
6.  Page Breaks

The custom report workflow takes advantage of the same asynchronous process described above.
