
# code: language=Dockerfile

# The code for the build image should be identical with the code in
# Dockerfile.django-debian to use the caching mechanism of Docker.

# Ref: https://devguide.python.org/#branchstatus
FROM python:3.11.11-slim-bookworm@sha256:42420f737ba91d509fc60d5ed65ed0492678a90c561e1fa08786ae8ba8b52eda AS base
FROM base AS build
WORKDIR /app
RUN \
  apt-get -y update && \
  apt-get -y install --no-install-recommends \
    gcc \
    build-essential \
    dnsutils \
    libpq-dev \
    postgresql-client \
    xmlsec1 \
    git \
    uuid-runtime \
    # libcurl4-openssl-dev is required for installing pycurl python package
    libcurl4-openssl-dev \
    && \
  apt-get clean && \
  rm -rf /var/lib/apt/lists && \
  true
COPY requirements.txt ./
# CPUCOUNT=1 is needed, otherwise the wheel for uwsgi won't always be build succesfully
# https://github.com/unbit/uwsgi/issues/1318#issuecomment-542238096
RUN CPUCOUNT=1 pip3 wheel --wheel-dir=/tmp/wheels -r ./requirements.txt


FROM build AS collectstatic

ENV \
  # This will point yarn to whatever version of node you decide to use
  # due to the use of nodejs instead of node name in some distros
  node="nodejs"
RUN \
    apt-get -y update && \
    apt-get -y install --no-install-recommends apt-transport-https ca-certificates curl wget gnupg && \
    curl -fsSL https://deb.nodesource.com/gpgkey/nodesource.gpg.key -o /usr/share/keyrings/nodesource.gpg && \
    echo 'deb [signed-by=/usr/share/keyrings/nodesource.gpg] https://deb.nodesource.com/node_20.x bookworm main' > /etc/apt/sources.list.d/nodesource.list && \
    echo 'deb-src [signed-by=/usr/share/keyrings/nodesource.gpg] https://deb.nodesource.com/node_20.x bookworm main' >> /etc/apt/sources.list.d/nodesource.list && \
    curl -fsSL https://dl.yarnpkg.com/debian/pubkey.gpg -o /usr/share/keyrings/yarn.gpg && \
    echo 'deb [signed-by=/usr/share/keyrings/yarn.gpg] https://dl.yarnpkg.com/debian/ stable main' > /etc/apt/sources.list.d/yarn.list && \
    apt-get update -y && \
    wget https://github.com/yarnpkg/yarn/releases/download/v1.22.10/yarn_1.22.10_all.deb && \
    dpkg -i yarn_1.22.10_all.deb && \
    echo "$(yarn --version)" && \
    apt-get -y install --no-install-recommends nodejs && \
    echo "$(node --version)" && \
    apt-get clean && \
    rm yarn_1.22.10_all.deb && \
    rm -rf /var/lib/apt/lists && \
    true

RUN pip3 install \
	--no-cache-dir \
	--no-index \
  --find-links=/tmp/wheels \
	-r ./requirements.txt

COPY components/ ./components/
RUN \
  cd components && \
  yarn

COPY manage.py ./
COPY dojo/ ./dojo/

RUN env DD_SECRET_KEY='.' python3 manage.py collectstatic --noinput && true

FROM nginx:1.28.0-alpine3.21@sha256:8f2bcf97c473dfe311e79a510ee540ee02e28ce1e6a64e1ef89bfad32574ef10
ARG uid=1001
ARG appuser=defectdojo
COPY --from=collectstatic /app/static/ /usr/share/nginx/html/static/
RUN rm -R /usr/share/nginx/html/static/startbootstrap-sb-admin-2/bower_components/datatables && rm -R /usr/share/nginx/html/static/startbootstrap-sb-admin-2/bower_components/mocha && rm -R /usr/share/nginx/html/static/startbootstrap-sb-admin-2/bower_components/jquery && rm -R /usr/share/nginx/html/static/startbootstrap-sb-admin-2/bower_components/bootstrap && rm -R /usr/share/nginx/html/static/startbootstrap-sb-admin-2/bower_components/morrisjs
COPY wsgi_params nginx/nginx.conf nginx/nginx_TLS.conf /etc/nginx/
COPY docker/entrypoint-nginx.sh /
RUN \
  apk add --no-cache openssl && \
  chmod -R g=u /var/cache/nginx && \
  mkdir /var/run/defectdojo && \
  chmod -R g=u /var/run/defectdojo && \
  mkdir -p /etc/nginx/ssl && \
  chmod -R g=u /etc/nginx && \
  true
ENV \
  DD_UWSGI_PASS="uwsgi_server" \
  DD_UWSGI_HOST="uwsgi" \
  DD_UWSGI_PORT="3031" \
  GENERATE_TLS_CERTIFICATE="true" \
  USE_TLS="true" \
  NGINX_METRICS_ENABLED="false" \
  METRICS_HTTP_AUTH_USER="" \
  METRICS_HTTP_AUTH_PASSWORD=""
USER ${uid}

ENTRYPOINT ["/entrypoint-nginx.sh"]
