@startuml
!pragma teoz true

== Initial release ==
participant "Dev branch" as devbranch order 10 #LightBlue
participant "Release branch" as rlsbranch order 20 #YellowGreen
participant "Master branch" as master order 30 #99FF99
participant "Maintainance branch" as maintainbranch order 40 #YellowGreen
participant "Hotfix branch" as hotbranch order 40 #DarkSalmon

{startrc} devbranch -> rlsbranch ++ #YellowGreen: Create branch "release/1.0.0"


note left of devbranch
  Evolutions
end note


note right of rlsbranch
  Bug fixes
end note

rlsbranch --> devbranch: Contributors merge bug fixes using a separate PR



rlsbranch -> master: Merge
note right of master
    Official release
    - Tag "1.0.0"
    - Push "1.0.0" to DockerHub
end note

== Release maintainance ==
master -> maintainbranch ++ #YellowGreen: Create branch "release/1.0.x"

note right of maintainbranch
  Bug fixes
end note

maintainbranch --> devbranch: Contributors merge bug fixes using a separate PR


maintainbranch -> master: Merge
note right of master
    Official release
    - Tag "1.0.1"
    - Push "1.0.1" to DockerHub
end note

maintainbranch --> devbranch: Contributors merge bug fixes using a separate PR

maintainbranch -> master: Merge
note right of master
    Official release
    - Tag "1.0.2"
    - Push "1.0.2" to DockerHub
end note

== Hotfix ==

master -> hotbranch ++ #DarkSalmon: Create short-lived fix branch "hotfix/1.0.3"
note left
If in need of an urgent fix 
and PR have already been merged to release/1.0.x
since 1.0.2 release
end note

note right of hotbranch
    Severe bug
    to be corrected
end note

hotbranch -> maintainbranch: Merge
hotbranch -> devbranch --: Merge (Optional)
hotbranch -> master --: Merge
note right of master
    Official release
    - Tag "1.0.3"
    - Push "1.0.3" to DockerHub
end note

== Next release ==
{endrc} devbranch -> rlsbranch: Create branch\n "release/1.1.0"
note left of devbranch
  Or release/2.0.0 in case of
  major breaking change
end note


... ...
{startrc} <-> {endrc}: \n4-8 weeks


@enduml