
# code: language=Dockerfile

# The code for the build image should be idendical with the code in
# Dockerfile.nginx to use the caching mechanism of Docker.

# Ref: https://devguide.python.org/#branchstatus
FROM python:3.6.12-slim-buster@sha256:e5259113df5a7c4dae16ad37c2ca53b1cf722e051cfd5f624e7b76aa72389e0c as build
WORKDIR /app
RUN \
  apt-get -y update && \
  apt-get -y install \
    build-essential \
    dnsutils \
    default-mysql-client \
    libmariadb-dev-compat \
    postgresql-client \
    xmlsec1 \
    git \
    uuid-runtime \
    && \
  apt-get clean && \
  rm -rf /var/lib/apt/lists && \
  true
COPY requirements.txt ./
RUN pip3 wheel --wheel-dir=/tmp/wheels -r ./requirements.txt

FROM python:3.6.12-slim-buster@sha256:e5259113df5a7c4dae16ad37c2ca53b1cf722e051cfd5f624e7b76aa72389e0c
WORKDIR /app
ARG uid=1001
ARG appuser=defectdojo
ENV appuser ${appuser}
RUN \
  apt-get -y update && \
  # ugly fix to install postgresql-client without errors
  mkdir -p /usr/share/man/man1 /usr/share/man/man7 && \
  apt-get -y install --no-install-recommends \
    # libopenjp2-7 libjpeg62 libtiff5 are required by the pillow package
    libopenjp2-7 \
    libjpeg62 \
    libtiff5 \
    dnsutils \
    default-mysql-client \
    libmariadb3 \
    xmlsec1 \
    git \
    uuid-runtime \    
    # only required for the dbshell (used by the initializer job)
    postgresql-client \
    curl \
    && \
  apt-get clean && \
  rm -rf /var/lib/apt/lists && \
  true
RUN pip3 install --no-cache-dir --upgrade pip
COPY --from=build /tmp/wheels /tmp/wheels
COPY requirements.txt ./
RUN pip3 install \
	--no-cache-dir \
	--no-index \
  --find-links=/tmp/wheels \
  -r ./requirements.txt
COPY \
  docker/entrypoint-celery-beat.sh \
  docker/entrypoint-celery-worker.sh \
  docker/entrypoint-initializer.sh \
  docker/entrypoint-uwsgi.sh \
  docker/entrypoint-uwsgi-dev.sh \
  docker/entrypoint-uwsgi-ptvsd.sh \
  docker/entrypoint-unit-tests.sh \
  docker/entrypoint-unit-tests-devDocker.sh \
  docker/wait-for-it.sh \
  docker/certs/* \
  /
COPY wsgi.py manage.py tests/unit-tests.sh ./
COPY dojo/ ./dojo/

# Add extra fixtures to docker image which are loaded by the initializer
COPY docker/extra_fixtures/* /app/dojo/fixtures/

COPY tests/ ./tests/
RUN \
  # Remove placeholder copied from docker/certs
  rm -f /readme.txt && \ 
  # Remove placeholder copied from docker/extra_fixtures
  rm -f dojo/fixtures/readme.txt && \
  mkdir -p dojo/migrations && \
  chmod g=u dojo/migrations && \
  true
# Fallback for safety parser, if installation does't allow internet connectivity
RUN curl -sS -o dojo/tools/safety/insecure_full.json https://raw.githubusercontent.com/pyupio/safety-db/master/data/insecure_full.json
USER root
RUN \
    adduser --system --no-create-home --disabled-password --gecos '' \
        --uid ${uid} ${appuser} && \
    chown -R ${appuser} /app && \
    chmod 0700 /app && \
    chmod 0750 -R /app/* && \
    mkdir /var/run/${appuser} && \
    chown ${appuser} /var/run/${appuser}
USER ${appuser}
ENV \
  DD_ADMIN_USER=admin \
  DD_ADMIN_MAIL=admin@defectdojo.local \
  DD_ADMIN_PASSWORD='' \
  DD_ADMIN_FIRST_NAME=Administrator \
  DD_ADMIN_LAST_NAME=User \
  DD_ALLOWED_HOSTS="*" \
  DD_CELERY_BEAT_SCHEDULE_FILENAME="/run/celery-beat-schedule" \
  DD_CELERY_BROKER_SCHEME="amqp" \
  DD_CELERY_BROKER_USER="defectdojo" \
  DD_CELERY_BROKER_PASSWORD="defectdojo" \
  DD_CELERY_BROKER_HOST="rabbitmq" \
  DD_CELERY_BROKER_PORT="5672" \
  DD_CELERY_BROKER_PATH="//" \
  DD_CELERY_LOG_LEVEL="INFO" \
  DD_CELERY_WORKER_POOL_TYPE="solo" \
  # Enable prefork and options below to ramp-up celeryworker performance. Presets should work fine for a machine with 8GB of RAM, while still leaving room.
  # See https://docs.celeryproject.org/en/stable/userguide/workers.html#id12 for more details
  # DD_CELERY_WORKER_POOL_TYPE="prefork" \
  # DD_CELERY_WORKER_AUTOSCALE_MIN="2" \
  # DD_CELERY_WORKER_AUTOSCALE_MAX="8" \
  # DD_CELERY_WORKER_CONCURRENCY="8" \
  # DD_CELERY_WORKER_PREFETCH_MULTIPLIER="128" \
  DD_DATABASE_ENGINE="django.db.backends.mysql" \
  DD_DATABASE_HOST="mysql" \
  DD_DATABASE_NAME="defectdojo" \
  DD_DATABASE_PASSWORD="defectdojo" \
  DD_DATABASE_PORT="3306" \
  DD_DATABASE_USER="defectdojo" \
  DD_INITIALIZE=true \
  DD_UWSGI_MODE="socket" \
  DD_UWSGI_ENDPOINT="0.0.0.0:3031" \
  DD_UWSGI_NUM_OF_PROCESSES="2" \
  DD_UWSGI_NUM_OF_THREADS="2" \
  DD_DJANGO_ADMIN_ENABLED="True" \
  DD_TRACK_MIGRATIONS="True" \
  DD_DJANGO_METRICS_ENABLED="False"
ENTRYPOINT ["/entrypoint-uwsgi.sh"]
